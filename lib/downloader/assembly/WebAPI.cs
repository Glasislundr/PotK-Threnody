// Decompiled with JetBrains decompiler
// Type: WebAPI
// Assembly: Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 84692B6C-DF14-44E0-9A18-AFF35C631E79
// Assembly location: B:\workspace\PotK Unit Database\Assembly Decompile\Assembly-CSharp.dll

using Earth;
using GameCore;
using Gsc.Auth;
using MasterDataTable;
using MiniJSON;
using SM;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using UnityEngine;

#nullable disable
public static class WebAPI
{
  private static readonly string errorUnknown = "原因不明のエラー";
  private static readonly Dictionary<string, string> commonErrorDict = new Dictionary<string, string>()
  {
    {
      "VLD000",
      "意図しないパラメータがある"
    },
    {
      "VLD011",
      "secret_key が存在しない "
    },
    {
      "VLD012",
      "secret_key が文字列に変換できない"
    },
    {
      "VLD013",
      "secret_key が空文字列"
    },
    {
      "VLD014",
      "secret_key が 65 文字以上"
    },
    {
      "VLD031",
      "device_id が存在しない"
    },
    {
      "VLD032",
      "device_id が文字列に変換できない"
    },
    {
      "VLD033",
      "device_id が空文字列 "
    },
    {
      "VLD034",
      "device_id が 35 文字以下"
    },
    {
      "VLD035",
      "device_id が 37 文字以上"
    }
  };
  private static readonly Dictionary<string, string> passcodeErrorDict = WebAPI.commonErrorDict;
  private static readonly Dictionary<string, string> migrateErrorDict = ((IEnumerable<Dictionary<string, string>>) new Dictionary<string, string>[2]
  {
    WebAPI.commonErrorDict,
    new Dictionary<string, string>()
    {
      {
        "Locked PASSCODE",
        "入力誤り回数が三回を超えている"
      },
      {
        "Missing PASSCODE",
        "パスコードが誤っている"
      },
      {
        "Missing DEVICE_ID",
        "移行元と移行先が同一端末"
      }
    }
  }).SelectMany<Dictionary<string, string>, KeyValuePair<string, string>>((Func<Dictionary<string, string>, IEnumerable<KeyValuePair<string, string>>>) (x => (IEnumerable<KeyValuePair<string, string>>) x)).ToDictionary<KeyValuePair<string, string>, string, string>((Func<KeyValuePair<string, string>, string>) (x => x.Key), (Func<KeyValuePair<string, string>, string>) (x => x.Value));
  private static Dictionary<string, DateTime> latestResponsedAt = new Dictionary<string, DateTime>();
  public static Action<WebAPI.Response.UserError> DefaultUserErrorCallback = new Action<WebAPI.Response.UserError>(WebAPI.defaultUserErrorCallback);

  public static void AuthRegisterEmailAddressAndPassword(
    string id,
    string password,
    Action successCallback,
    Action<RegisterEmailAddressAndPasswordResult> failCallback)
  {
    Session.DefaultSession.RegisterEmailAddressAndPassword(id, password, true, (Action<RegisterEmailAddressAndPasswordResult>) (ret =>
    {
      if (ret.ResultCode == RegisterEmailAddressAndPasswordResultCode.Success)
        successCallback();
      else
        failCallback(ret);
    }));
  }

  public static void AuthAddDevice(
    string id,
    string password,
    Action successCallback,
    Action<AddDeviceWithEmailAddressAndPasswordResult> failCallback)
  {
    Session.DefaultSession.AddDeviceWithEmailAddressAndPassword(id, password, (Action<AddDeviceWithEmailAddressAndPasswordResult>) (ret =>
    {
      if (ret.ResultCode == AddDeviceWithEmailAddressAndPasswordResultCode.Success)
        successCallback();
      else
        failCallback(ret);
    }));
  }

  public static void AuthFgGIDMigrate(
    string email,
    string passcode,
    Action successCallback,
    Action<string, int> failCallback)
  {
    WebAPI.AuthFgGIDMigrate(email, passcode, successCallback, (Func<string, int, IEnumerator>) ((message, seconds) =>
    {
      failCallback(message, seconds);
      return new object[0].GetEnumerator();
    }));
  }

  public static void AuthFgGIDMigrate(
    string email,
    string passcode,
    Action successCallback,
    Func<string, int, IEnumerator> failCallback)
  {
    WebQueue.EnqueueAuthFgGIDMigrate(email, passcode, successCallback, (Func<WebError, IEnumerator>) (error =>
    {
      if (error.Status >= 400 && error.Status <= 499)
      {
        jsonValueObject2 = error.Response.getJsonValueObject("error_message") as string;
        int? nullable = new int?();
        if (jsonValueObject2 == null)
        {
          if (error.Response.getJsonValueObject("code") is string jsonValueObject2)
            nullable = error.Response.getJsonIntOrNull("time_remaining");
        }
        else
          nullable = error.Response.getJsonIntOrNull("expires_in");
        if (!string.IsNullOrEmpty(jsonValueObject2))
          return failCallback(jsonValueObject2, nullable ?? 0);
      }
      return failCallback("unknown", 0);
    }));
  }

  public static void AuthFgGIDAddDevice(
    string email,
    string passcode,
    Action successCallback,
    Action<string, int> failCallback)
  {
    WebAPI.AuthFgGIDMigrate(email, passcode, successCallback, (Func<string, int, IEnumerator>) ((message, seconds) =>
    {
      failCallback(message, seconds);
      return new object[0].GetEnumerator();
    }));
  }

  public static void AuthFgGIDAddDevice(
    string email,
    string passcode,
    Action successCallback,
    Func<string, int, IEnumerator> failCallback)
  {
    WebQueue.EnqueueAuthFgGIDAddDevice(email, passcode, successCallback, (Func<WebError, IEnumerator>) (error =>
    {
      if (error.Status >= 400 && error.Status <= 499)
      {
        jsonValueObject2 = error.Response.getJsonValueObject("error_message") as string;
        int? nullable = new int?();
        if (jsonValueObject2 == null)
        {
          if (error.Response.getJsonValueObject("code") is string jsonValueObject2)
            nullable = error.Response.getJsonIntOrNull("time_remaining");
        }
        else
          nullable = error.Response.getJsonIntOrNull("expires_in");
        if (!string.IsNullOrEmpty(jsonValueObject2))
          return failCallback(jsonValueObject2, nullable ?? 0);
      }
      return failCallback("unknown", 0);
    }));
  }

  public static IEnumerator RpcReviewEnvConnect(Action<bool[]> rpcCallback)
  {
    IEnumerator e = WebAPI.SendRpcReviewEnvConnect(rpcCallback);
    while (e.MoveNext())
      yield return e.Current;
    e = (IEnumerator) null;
  }

  private static IEnumerator SendRpcReviewEnvConnect(Action<bool[]> rpcCallback)
  {
    string str = "https://punk.gu3.jp/rpc/review/env_connect";
    if (string.IsNullOrEmpty(str))
    {
      rpcCallback(new bool[2]);
    }
    else
    {
      Dictionary<string, string> dictionary1 = new Dictionary<string, string>();
      dictionary1["application_version"] = Revision.ApplicationVersion;
      dictionary1["platform"] = "windows";
      Dictionary<string, string> dictionary2 = new Dictionary<string, string>();
      dictionary2.Add("Content-Type", "application/json; charset=UTF-8");
      byte[] bytes = Encoding.UTF8.GetBytes(Json.Serialize((object) dictionary1));
      WWW www = new WWW(str, bytes, dictionary2);
      yield return (object) www;
      bool[] flagArray = new bool[2];
      if (string.IsNullOrEmpty(www.error))
      {
        if (Json.Deserialize(www.text) is Dictionary<string, object> dictionary3 && dictionary3.ContainsKey("app_connect"))
          flagArray[0] = (bool) dictionary3["app_connect"];
        if (dictionary3 != null && dictionary3.ContainsKey("dlc_connect"))
          flagArray[1] = (bool) dictionary3["dlc_connect"];
      }
      rpcCallback(flagArray);
    }
  }

  public static void RpcSubmitEnv(Action<bool> successCallback, Func<IEnumerator> failCallback)
  {
    WebQueue.EnqueueRpcSubmitEnv(successCallback, (Func<WebError, IEnumerator>) (error =>
    {
      if (error.HasResponse())
      {
        if (error.IsClientError())
        {
          error.Request.RestRetryCount = 0;
          return failCallback();
        }
      }
      else if (Persist.auth.Exists)
        return new object[0].GetEnumerator();
      return WebQueue.FailCallback(error);
    }));
  }

  public static void AuthDeviceInfo(Action authCallback)
  {
    WebAPI.AuthDeviceInfo(authCallback, (Func<IEnumerator>) (() =>
    {
      authCallback();
      return new object[0].GetEnumerator();
    }));
  }

  public static void AuthDeviceInfo(Action successCallback, Func<IEnumerator> failCallback)
  {
    WebQueue.EnqueueAuthDeviceInfo(successCallback, (Func<WebError, IEnumerator>) (error =>
    {
      if (error.HasResponse())
      {
        if (error.IsClientError())
        {
          error.Request.RestRetryCount = 0;
          return failCallback();
        }
      }
      else if (Persist.auth.Exists)
        return new object[0].GetEnumerator();
      return WebQueue.FailCallback(error);
    }));
  }

  private static string secondsToTime(int n)
  {
    if (n < 60)
      return n.ToString() + "秒";
    if (n < 3600)
      return (n / 60).ToString() + "分";
    return n < 86400 ? (n / 60 / 60).ToString() + "時" : (n / 60 / 60 / 24).ToString() + "日";
  }

  public static Future<WebAPI.Response.BattleContinueCount> SilentBattleContinueCount(
    int continue_count,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.BattleContinueCount>((Func<Promise<WebAPI.Response.BattleContinueCount>, IEnumerator>) (promise => WebAPI.LoadSilentBattleContinueCount(promise, continue_count, userErrorCallback)));
  }

  private static IEnumerator LoadSilentBattleContinueCount(
    Promise<WebAPI.Response.BattleContinueCount> promise,
    int continue_count,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalSilentBattleContinueCount(continue_count, (Action<WebAPI.Response.BattleContinueCount>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalSilentBattleContinueCount(
    int continue_count,
    Action<WebAPI.Response.BattleContinueCount> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.SilentPost("/battle/continue_count", new Dictionary<string, object>()
    {
      [nameof (continue_count)] = (object) continue_count
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.BattleContinueCount) null);
      }
      else
        callback(new WebAPI.Response.BattleContinueCount(json.Json));
    }));
  }

  public static Future<BattleEnd> BattleFinish(
    WebAPI.Request.BattleFinish request,
    BE be,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    if (request.quest_type == CommonQuestType.Story)
    {
      Future<WebAPI.Response.BattleStoryFinish> storyFinish = WebAPI.BattleStoryFinish(request.battle_turn, request.battle_uuid, request.continue_count, request.drop_entity_ids.ToArray(), request.duels_critical_count.ToArray(), request.duels_damage.ToArray(), request.duels_hit_damage.ToArray(), request.duels_max_damage.ToArray(), request.enemies.Select<WebAPI.Request.BattleFinish.EnemyResult, int>((Func<WebAPI.Request.BattleFinish.EnemyResult, int>) (x => x.dead_count)).ToArray<int>(), request.enemies.Select<WebAPI.Request.BattleFinish.EnemyResult, int>((Func<WebAPI.Request.BattleFinish.EnemyResult, int>) (x => x.enemy_id)).ToArray<int>(), request.enemies.Select<WebAPI.Request.BattleFinish.EnemyResult, int>((Func<WebAPI.Request.BattleFinish.EnemyResult, int>) (x => x.kill_count)).ToArray<int>(), request.enemies.Select<WebAPI.Request.BattleFinish.EnemyResult, int>((Func<WebAPI.Request.BattleFinish.EnemyResult, int>) (x => x.level_difference)).ToArray<int>(), request.enemies.Select<WebAPI.Request.BattleFinish.EnemyResult, int>((Func<WebAPI.Request.BattleFinish.EnemyResult, int>) (x => x.overkill_damage)).ToArray<int>(), request.gears.Select<WebAPI.Request.BattleFinish.GearResult, int>((Func<WebAPI.Request.BattleFinish.GearResult, int>) (x => x.damage_count)).ToArray<int>(), request.gears.Select<WebAPI.Request.BattleFinish.GearResult, int>((Func<WebAPI.Request.BattleFinish.GearResult, int>) (x => x.kill_count)).ToArray<int>(), request.gears.Select<WebAPI.Request.BattleFinish.GearResult, int>((Func<WebAPI.Request.BattleFinish.GearResult, int>) (x => x.player_gear_id)).ToArray<int>(), request.intimates.Select<WebAPI.Request.BattleFinish.IntimateResult, int>((Func<WebAPI.Request.BattleFinish.IntimateResult, int>) (x => x.target_character_id)).ToArray<int>(), request.intimates.Select<WebAPI.Request.BattleFinish.IntimateResult, int>((Func<WebAPI.Request.BattleFinish.IntimateResult, int>) (x => x.exp)).ToArray<int>(), request.intimates.Select<WebAPI.Request.BattleFinish.IntimateResult, int>((Func<WebAPI.Request.BattleFinish.IntimateResult, int>) (x => x.character_id)).ToArray<int>(), request.is_game_over, request.panel_entity_ids.ToArray(), request.supplies.Select<WebAPI.Request.BattleFinish.SupplyResult, int>((Func<WebAPI.Request.BattleFinish.SupplyResult, int>) (x => x.supply_id)).ToArray<int>(), request.supplies.Select<WebAPI.Request.BattleFinish.SupplyResult, int>((Func<WebAPI.Request.BattleFinish.SupplyResult, int>) (x => x.use_quantity)).ToArray<int>(), request.units.Select<WebAPI.Request.BattleFinish.UnitResult, int>((Func<WebAPI.Request.BattleFinish.UnitResult, int>) (x => x.guest)).ToArray<int>(), request.units.Select<WebAPI.Request.BattleFinish.UnitResult, int>((Func<WebAPI.Request.BattleFinish.UnitResult, int>) (x => x.player_unit_id)).ToArray<int>(), request.units.Select<WebAPI.Request.BattleFinish.UnitResult, int>((Func<WebAPI.Request.BattleFinish.UnitResult, int>) (x => x.received_damage)).ToArray<int>(), request.units.Select<WebAPI.Request.BattleFinish.UnitResult, int>((Func<WebAPI.Request.BattleFinish.UnitResult, int>) (x => x.remaining_hp)).ToArray<int>(), request.units.Select<WebAPI.Request.BattleFinish.UnitResult, int>((Func<WebAPI.Request.BattleFinish.UnitResult, int>) (x => x.rental)).ToArray<int>(), request.units.Select<WebAPI.Request.BattleFinish.UnitResult, int>((Func<WebAPI.Request.BattleFinish.UnitResult, int>) (x => x.total_damage)).ToArray<int>(), request.units.Select<WebAPI.Request.BattleFinish.UnitResult, int>((Func<WebAPI.Request.BattleFinish.UnitResult, int>) (x => x.total_damage_count)).ToArray<int>(), request.units.Select<WebAPI.Request.BattleFinish.UnitResult, int>((Func<WebAPI.Request.BattleFinish.UnitResult, int>) (x => x.total_kill_count)).ToArray<int>(), request.week_element_attack_count, request.week_kind_attack_count, request.win ? 1 : 0, userErrorCallback);
      return storyFinish.Then<BattleEnd>((Func<WebAPI.Response.BattleStoryFinish, BattleEnd>) (f =>
      {
        Singleton<NGGameDataManager>.GetInstance().unReadTalkMessage = storyFinish.Result.unread_talk_messages;
        return f.battle_finish;
      }));
    }
    if (request.quest_type == CommonQuestType.Extra)
    {
      Future<WebAPI.Response.BattleExtraFinish> extraFinish = WebAPI.BattleExtraFinish(request.battle_turn, request.battle_uuid, request.continue_count, request.drop_entity_ids.ToArray(), request.duels_critical_count.ToArray(), request.duels_damage.ToArray(), request.duels_hit_damage.ToArray(), request.duels_max_damage.ToArray(), request.enemies.Select<WebAPI.Request.BattleFinish.EnemyResult, int>((Func<WebAPI.Request.BattleFinish.EnemyResult, int>) (x => x.dead_count)).ToArray<int>(), request.enemies.Select<WebAPI.Request.BattleFinish.EnemyResult, int>((Func<WebAPI.Request.BattleFinish.EnemyResult, int>) (x => x.enemy_id)).ToArray<int>(), request.enemies.Select<WebAPI.Request.BattleFinish.EnemyResult, int>((Func<WebAPI.Request.BattleFinish.EnemyResult, int>) (x => x.kill_count)).ToArray<int>(), request.enemies.Select<WebAPI.Request.BattleFinish.EnemyResult, int>((Func<WebAPI.Request.BattleFinish.EnemyResult, int>) (x => x.level_difference)).ToArray<int>(), request.enemies.Select<WebAPI.Request.BattleFinish.EnemyResult, int>((Func<WebAPI.Request.BattleFinish.EnemyResult, int>) (x => x.overkill_damage)).ToArray<int>(), request.gears.Select<WebAPI.Request.BattleFinish.GearResult, int>((Func<WebAPI.Request.BattleFinish.GearResult, int>) (x => x.damage_count)).ToArray<int>(), request.gears.Select<WebAPI.Request.BattleFinish.GearResult, int>((Func<WebAPI.Request.BattleFinish.GearResult, int>) (x => x.kill_count)).ToArray<int>(), request.gears.Select<WebAPI.Request.BattleFinish.GearResult, int>((Func<WebAPI.Request.BattleFinish.GearResult, int>) (x => x.player_gear_id)).ToArray<int>(), request.intimates.Select<WebAPI.Request.BattleFinish.IntimateResult, int>((Func<WebAPI.Request.BattleFinish.IntimateResult, int>) (x => x.target_character_id)).ToArray<int>(), request.intimates.Select<WebAPI.Request.BattleFinish.IntimateResult, int>((Func<WebAPI.Request.BattleFinish.IntimateResult, int>) (x => x.exp)).ToArray<int>(), request.intimates.Select<WebAPI.Request.BattleFinish.IntimateResult, int>((Func<WebAPI.Request.BattleFinish.IntimateResult, int>) (x => x.character_id)).ToArray<int>(), request.is_game_over, request.panel_entity_ids.ToArray(), request.supplies.Select<WebAPI.Request.BattleFinish.SupplyResult, int>((Func<WebAPI.Request.BattleFinish.SupplyResult, int>) (x => x.supply_id)).ToArray<int>(), request.supplies.Select<WebAPI.Request.BattleFinish.SupplyResult, int>((Func<WebAPI.Request.BattleFinish.SupplyResult, int>) (x => x.use_quantity)).ToArray<int>(), request.units.Select<WebAPI.Request.BattleFinish.UnitResult, int>((Func<WebAPI.Request.BattleFinish.UnitResult, int>) (x => x.guest)).ToArray<int>(), request.units.Select<WebAPI.Request.BattleFinish.UnitResult, int>((Func<WebAPI.Request.BattleFinish.UnitResult, int>) (x => x.max_hp)).ToArray<int>(), request.units.Select<WebAPI.Request.BattleFinish.UnitResult, int>((Func<WebAPI.Request.BattleFinish.UnitResult, int>) (x => x.player_unit_id)).ToArray<int>(), request.units.Select<WebAPI.Request.BattleFinish.UnitResult, int>((Func<WebAPI.Request.BattleFinish.UnitResult, int>) (x => x.received_damage)).ToArray<int>(), request.units.Select<WebAPI.Request.BattleFinish.UnitResult, int>((Func<WebAPI.Request.BattleFinish.UnitResult, int>) (x => x.remaining_hp)).ToArray<int>(), request.units.Select<WebAPI.Request.BattleFinish.UnitResult, int>((Func<WebAPI.Request.BattleFinish.UnitResult, int>) (x => x.rental)).ToArray<int>(), request.units.Select<WebAPI.Request.BattleFinish.UnitResult, int>((Func<WebAPI.Request.BattleFinish.UnitResult, int>) (x => x.total_damage)).ToArray<int>(), request.units.Select<WebAPI.Request.BattleFinish.UnitResult, int>((Func<WebAPI.Request.BattleFinish.UnitResult, int>) (x => x.total_damage_count)).ToArray<int>(), request.units.Select<WebAPI.Request.BattleFinish.UnitResult, int>((Func<WebAPI.Request.BattleFinish.UnitResult, int>) (x => x.total_kill_count)).ToArray<int>(), ((IEnumerable<int>) request.use_skill_group).ToArray<int>(), request.use_skills.Select<WebAPI.Request.BattleFinish.SkillResult, int>((Func<WebAPI.Request.BattleFinish.SkillResult, int>) (x => x.count)).ToArray<int>(), request.use_skills.Select<WebAPI.Request.BattleFinish.SkillResult, int>((Func<WebAPI.Request.BattleFinish.SkillResult, int>) (x => x.ID)).ToArray<int>(), request.week_element_attack_count, request.week_kind_attack_count, request.win ? 1 : 0, userErrorCallback);
      return extraFinish.Then<BattleEnd>((Func<WebAPI.Response.BattleExtraFinish, BattleEnd>) (f =>
      {
        Singleton<NGGameDataManager>.GetInstance().unReadTalkMessage = extraFinish.Result.unread_talk_messages;
        return f.battle_finish;
      }));
    }
    if (request.quest_type == CommonQuestType.Character)
      return WebAPI.BattleCharacterFinish(request.battle_turn, request.battle_uuid, request.continue_count, request.drop_entity_ids.ToArray(), request.duels_critical_count.ToArray(), request.duels_damage.ToArray(), request.duels_hit_damage.ToArray(), request.duels_max_damage.ToArray(), request.enemies.Select<WebAPI.Request.BattleFinish.EnemyResult, int>((Func<WebAPI.Request.BattleFinish.EnemyResult, int>) (x => x.dead_count)).ToArray<int>(), request.enemies.Select<WebAPI.Request.BattleFinish.EnemyResult, int>((Func<WebAPI.Request.BattleFinish.EnemyResult, int>) (x => x.enemy_id)).ToArray<int>(), request.enemies.Select<WebAPI.Request.BattleFinish.EnemyResult, int>((Func<WebAPI.Request.BattleFinish.EnemyResult, int>) (x => x.kill_count)).ToArray<int>(), request.enemies.Select<WebAPI.Request.BattleFinish.EnemyResult, int>((Func<WebAPI.Request.BattleFinish.EnemyResult, int>) (x => x.level_difference)).ToArray<int>(), request.enemies.Select<WebAPI.Request.BattleFinish.EnemyResult, int>((Func<WebAPI.Request.BattleFinish.EnemyResult, int>) (x => x.overkill_damage)).ToArray<int>(), request.gears.Select<WebAPI.Request.BattleFinish.GearResult, int>((Func<WebAPI.Request.BattleFinish.GearResult, int>) (x => x.damage_count)).ToArray<int>(), request.gears.Select<WebAPI.Request.BattleFinish.GearResult, int>((Func<WebAPI.Request.BattleFinish.GearResult, int>) (x => x.kill_count)).ToArray<int>(), request.gears.Select<WebAPI.Request.BattleFinish.GearResult, int>((Func<WebAPI.Request.BattleFinish.GearResult, int>) (x => x.player_gear_id)).ToArray<int>(), request.intimates.Select<WebAPI.Request.BattleFinish.IntimateResult, int>((Func<WebAPI.Request.BattleFinish.IntimateResult, int>) (x => x.target_character_id)).ToArray<int>(), request.intimates.Select<WebAPI.Request.BattleFinish.IntimateResult, int>((Func<WebAPI.Request.BattleFinish.IntimateResult, int>) (x => x.exp)).ToArray<int>(), request.intimates.Select<WebAPI.Request.BattleFinish.IntimateResult, int>((Func<WebAPI.Request.BattleFinish.IntimateResult, int>) (x => x.character_id)).ToArray<int>(), request.is_game_over, request.panel_entity_ids.ToArray(), request.supplies.Select<WebAPI.Request.BattleFinish.SupplyResult, int>((Func<WebAPI.Request.BattleFinish.SupplyResult, int>) (x => x.supply_id)).ToArray<int>(), request.supplies.Select<WebAPI.Request.BattleFinish.SupplyResult, int>((Func<WebAPI.Request.BattleFinish.SupplyResult, int>) (x => x.use_quantity)).ToArray<int>(), request.units.Select<WebAPI.Request.BattleFinish.UnitResult, int>((Func<WebAPI.Request.BattleFinish.UnitResult, int>) (x => x.guest)).ToArray<int>(), request.units.Select<WebAPI.Request.BattleFinish.UnitResult, int>((Func<WebAPI.Request.BattleFinish.UnitResult, int>) (x => x.player_unit_id)).ToArray<int>(), request.units.Select<WebAPI.Request.BattleFinish.UnitResult, int>((Func<WebAPI.Request.BattleFinish.UnitResult, int>) (x => x.received_damage)).ToArray<int>(), request.units.Select<WebAPI.Request.BattleFinish.UnitResult, int>((Func<WebAPI.Request.BattleFinish.UnitResult, int>) (x => x.remaining_hp)).ToArray<int>(), request.units.Select<WebAPI.Request.BattleFinish.UnitResult, int>((Func<WebAPI.Request.BattleFinish.UnitResult, int>) (x => x.rental)).ToArray<int>(), request.units.Select<WebAPI.Request.BattleFinish.UnitResult, int>((Func<WebAPI.Request.BattleFinish.UnitResult, int>) (x => x.total_damage)).ToArray<int>(), request.units.Select<WebAPI.Request.BattleFinish.UnitResult, int>((Func<WebAPI.Request.BattleFinish.UnitResult, int>) (x => x.total_damage_count)).ToArray<int>(), request.units.Select<WebAPI.Request.BattleFinish.UnitResult, int>((Func<WebAPI.Request.BattleFinish.UnitResult, int>) (x => x.total_kill_count)).ToArray<int>(), request.week_element_attack_count, request.week_kind_attack_count, request.win ? 1 : 0, userErrorCallback).Then<BattleEnd>((Func<WebAPI.Response.BattleCharacterFinish, BattleEnd>) (x => x.battle_finish));
    if (request.quest_type == CommonQuestType.Harmony)
      return WebAPI.BattleHarmonyFinish(request.battle_turn, request.battle_uuid, request.continue_count, request.drop_entity_ids.ToArray(), request.duels_critical_count.ToArray(), request.duels_damage.ToArray(), request.duels_hit_damage.ToArray(), request.duels_max_damage.ToArray(), request.enemies.Select<WebAPI.Request.BattleFinish.EnemyResult, int>((Func<WebAPI.Request.BattleFinish.EnemyResult, int>) (x => x.dead_count)).ToArray<int>(), request.enemies.Select<WebAPI.Request.BattleFinish.EnemyResult, int>((Func<WebAPI.Request.BattleFinish.EnemyResult, int>) (x => x.enemy_id)).ToArray<int>(), request.enemies.Select<WebAPI.Request.BattleFinish.EnemyResult, int>((Func<WebAPI.Request.BattleFinish.EnemyResult, int>) (x => x.kill_count)).ToArray<int>(), request.enemies.Select<WebAPI.Request.BattleFinish.EnemyResult, int>((Func<WebAPI.Request.BattleFinish.EnemyResult, int>) (x => x.level_difference)).ToArray<int>(), request.enemies.Select<WebAPI.Request.BattleFinish.EnemyResult, int>((Func<WebAPI.Request.BattleFinish.EnemyResult, int>) (x => x.overkill_damage)).ToArray<int>(), request.gears.Select<WebAPI.Request.BattleFinish.GearResult, int>((Func<WebAPI.Request.BattleFinish.GearResult, int>) (x => x.damage_count)).ToArray<int>(), request.gears.Select<WebAPI.Request.BattleFinish.GearResult, int>((Func<WebAPI.Request.BattleFinish.GearResult, int>) (x => x.kill_count)).ToArray<int>(), request.gears.Select<WebAPI.Request.BattleFinish.GearResult, int>((Func<WebAPI.Request.BattleFinish.GearResult, int>) (x => x.player_gear_id)).ToArray<int>(), request.intimates.Select<WebAPI.Request.BattleFinish.IntimateResult, int>((Func<WebAPI.Request.BattleFinish.IntimateResult, int>) (x => x.target_character_id)).ToArray<int>(), request.intimates.Select<WebAPI.Request.BattleFinish.IntimateResult, int>((Func<WebAPI.Request.BattleFinish.IntimateResult, int>) (x => x.exp)).ToArray<int>(), request.intimates.Select<WebAPI.Request.BattleFinish.IntimateResult, int>((Func<WebAPI.Request.BattleFinish.IntimateResult, int>) (x => x.character_id)).ToArray<int>(), request.is_game_over, request.panel_entity_ids.ToArray(), request.supplies.Select<WebAPI.Request.BattleFinish.SupplyResult, int>((Func<WebAPI.Request.BattleFinish.SupplyResult, int>) (x => x.supply_id)).ToArray<int>(), request.supplies.Select<WebAPI.Request.BattleFinish.SupplyResult, int>((Func<WebAPI.Request.BattleFinish.SupplyResult, int>) (x => x.use_quantity)).ToArray<int>(), request.units.Select<WebAPI.Request.BattleFinish.UnitResult, int>((Func<WebAPI.Request.BattleFinish.UnitResult, int>) (x => x.guest)).ToArray<int>(), request.units.Select<WebAPI.Request.BattleFinish.UnitResult, int>((Func<WebAPI.Request.BattleFinish.UnitResult, int>) (x => x.player_unit_id)).ToArray<int>(), request.units.Select<WebAPI.Request.BattleFinish.UnitResult, int>((Func<WebAPI.Request.BattleFinish.UnitResult, int>) (x => x.received_damage)).ToArray<int>(), request.units.Select<WebAPI.Request.BattleFinish.UnitResult, int>((Func<WebAPI.Request.BattleFinish.UnitResult, int>) (x => x.remaining_hp)).ToArray<int>(), request.units.Select<WebAPI.Request.BattleFinish.UnitResult, int>((Func<WebAPI.Request.BattleFinish.UnitResult, int>) (x => x.rental)).ToArray<int>(), request.units.Select<WebAPI.Request.BattleFinish.UnitResult, int>((Func<WebAPI.Request.BattleFinish.UnitResult, int>) (x => x.total_damage)).ToArray<int>(), request.units.Select<WebAPI.Request.BattleFinish.UnitResult, int>((Func<WebAPI.Request.BattleFinish.UnitResult, int>) (x => x.total_damage_count)).ToArray<int>(), request.units.Select<WebAPI.Request.BattleFinish.UnitResult, int>((Func<WebAPI.Request.BattleFinish.UnitResult, int>) (x => x.total_kill_count)).ToArray<int>(), request.week_element_attack_count, request.week_kind_attack_count, request.win ? 1 : 0, userErrorCallback).Then<BattleEnd>((Func<WebAPI.Response.BattleHarmonyFinish, BattleEnd>) (x => x.battle_finish));
    if (request.quest_type == CommonQuestType.Sea)
    {
      Future<WebAPI.Response.SeaBattleFinish> seaBattleFinish = WebAPI.SeaBattleFinish(request.battle_turn, request.battle_uuid, request.continue_count, request.drop_entity_ids.ToArray(), request.duels_critical_count.ToArray(), request.duels_damage.ToArray(), request.duels_hit_damage.ToArray(), request.duels_max_damage.ToArray(), request.enemies.Select<WebAPI.Request.BattleFinish.EnemyResult, int>((Func<WebAPI.Request.BattleFinish.EnemyResult, int>) (x => x.dead_count)).ToArray<int>(), request.enemies.Select<WebAPI.Request.BattleFinish.EnemyResult, int>((Func<WebAPI.Request.BattleFinish.EnemyResult, int>) (x => x.enemy_id)).ToArray<int>(), request.enemies.Select<WebAPI.Request.BattleFinish.EnemyResult, int>((Func<WebAPI.Request.BattleFinish.EnemyResult, int>) (x => x.kill_count)).ToArray<int>(), request.enemies.Select<WebAPI.Request.BattleFinish.EnemyResult, int>((Func<WebAPI.Request.BattleFinish.EnemyResult, int>) (x => x.level_difference)).ToArray<int>(), request.enemies.Select<WebAPI.Request.BattleFinish.EnemyResult, int>((Func<WebAPI.Request.BattleFinish.EnemyResult, int>) (x => x.overkill_damage)).ToArray<int>(), request.gears.Select<WebAPI.Request.BattleFinish.GearResult, int>((Func<WebAPI.Request.BattleFinish.GearResult, int>) (x => x.damage_count)).ToArray<int>(), request.gears.Select<WebAPI.Request.BattleFinish.GearResult, int>((Func<WebAPI.Request.BattleFinish.GearResult, int>) (x => x.kill_count)).ToArray<int>(), request.gears.Select<WebAPI.Request.BattleFinish.GearResult, int>((Func<WebAPI.Request.BattleFinish.GearResult, int>) (x => x.player_gear_id)).ToArray<int>(), request.intimates.Select<WebAPI.Request.BattleFinish.IntimateResult, int>((Func<WebAPI.Request.BattleFinish.IntimateResult, int>) (x => x.target_character_id)).ToArray<int>(), request.intimates.Select<WebAPI.Request.BattleFinish.IntimateResult, int>((Func<WebAPI.Request.BattleFinish.IntimateResult, int>) (x => x.exp)).ToArray<int>(), request.intimates.Select<WebAPI.Request.BattleFinish.IntimateResult, int>((Func<WebAPI.Request.BattleFinish.IntimateResult, int>) (x => x.character_id)).ToArray<int>(), request.is_game_over, request.panel_entity_ids.ToArray(), request.supplies.Select<WebAPI.Request.BattleFinish.SupplyResult, int>((Func<WebAPI.Request.BattleFinish.SupplyResult, int>) (x => x.supply_id)).ToArray<int>(), request.supplies.Select<WebAPI.Request.BattleFinish.SupplyResult, int>((Func<WebAPI.Request.BattleFinish.SupplyResult, int>) (x => x.use_quantity)).ToArray<int>(), request.units.Select<WebAPI.Request.BattleFinish.UnitResult, int>((Func<WebAPI.Request.BattleFinish.UnitResult, int>) (x => x.guest)).ToArray<int>(), request.units.Select<WebAPI.Request.BattleFinish.UnitResult, int>((Func<WebAPI.Request.BattleFinish.UnitResult, int>) (x => x.player_unit_id)).ToArray<int>(), request.units.Select<WebAPI.Request.BattleFinish.UnitResult, int>((Func<WebAPI.Request.BattleFinish.UnitResult, int>) (x => x.received_damage)).ToArray<int>(), request.units.Select<WebAPI.Request.BattleFinish.UnitResult, int>((Func<WebAPI.Request.BattleFinish.UnitResult, int>) (x => x.remaining_hp)).ToArray<int>(), request.units.Select<WebAPI.Request.BattleFinish.UnitResult, int>((Func<WebAPI.Request.BattleFinish.UnitResult, int>) (x => x.rental)).ToArray<int>(), request.units.Select<WebAPI.Request.BattleFinish.UnitResult, int>((Func<WebAPI.Request.BattleFinish.UnitResult, int>) (x => x.total_damage)).ToArray<int>(), request.units.Select<WebAPI.Request.BattleFinish.UnitResult, int>((Func<WebAPI.Request.BattleFinish.UnitResult, int>) (x => x.total_damage_count)).ToArray<int>(), request.units.Select<WebAPI.Request.BattleFinish.UnitResult, int>((Func<WebAPI.Request.BattleFinish.UnitResult, int>) (x => x.total_kill_count)).ToArray<int>(), request.week_element_attack_count, request.week_kind_attack_count, request.win ? 1 : 0, userErrorCallback);
      return seaBattleFinish.Then<BattleEnd>((Func<WebAPI.Response.SeaBattleFinish, BattleEnd>) (f =>
      {
        Singleton<NGGameDataManager>.GetInstance().unReadTalkMessage = seaBattleFinish.Result.unread_talk_messages;
        return f.battle_finish;
      }));
    }
    return request.quest_type == CommonQuestType.Earth || request.quest_type == CommonQuestType.EarthExtra ? Singleton<EarthDataManager>.GetInstance().BattleFinish(request, be) : (Future<BattleEnd>) null;
  }

  public static Future<WebAPI.Response.GuildraidBattleFinish> RaidBattleFinish(
    WebAPI.Request.BattleFinish request,
    BE be,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    GuildRaid guildRaid = MasterData.GuildRaid[be.core.battleInfo.quest_s_id];
    int periodId = guildRaid.period_id;
    WebAPI.Request.BattleFinish.EnemyResult enemyResult = request.enemies.First<WebAPI.Request.BattleFinish.EnemyResult>((Func<WebAPI.Request.BattleFinish.EnemyResult, bool>) (x => x.isBoss));
    int boss_damage = enemyResult.damage + enemyResult.overkill_damage;
    if (boss_damage >= 0 && boss_damage < guildRaid.log_threshold_score)
      be.core.battleLogger.Clear();
    return WebAPI.GuildraidBattleFinish(be.core.battleLogger.Dump(), request.battle_turn, request.battle_uuid, boss_damage, enemyResult.enemy_id, enemyResult.level, request.continue_count, request.drop_entity_ids.ToArray(), request.duels_critical_count.ToArray(), request.duels_damage.ToArray(), request.duels_hit_damage.ToArray(), request.duels_max_damage.ToArray(), request.enemies.Select<WebAPI.Request.BattleFinish.EnemyResult, int>((Func<WebAPI.Request.BattleFinish.EnemyResult, int>) (x => x.dead_count)).ToArray<int>(), request.enemies.Select<WebAPI.Request.BattleFinish.EnemyResult, int>((Func<WebAPI.Request.BattleFinish.EnemyResult, int>) (x => x.enemy_id)).ToArray<int>(), request.enemies.Select<WebAPI.Request.BattleFinish.EnemyResult, int>((Func<WebAPI.Request.BattleFinish.EnemyResult, int>) (x => x.kill_count)).ToArray<int>(), request.enemies.Select<WebAPI.Request.BattleFinish.EnemyResult, int>((Func<WebAPI.Request.BattleFinish.EnemyResult, int>) (x => x.level_difference)).ToArray<int>(), request.enemies.Select<WebAPI.Request.BattleFinish.EnemyResult, int>((Func<WebAPI.Request.BattleFinish.EnemyResult, int>) (x => x.overkill_damage)).ToArray<int>(), request.gears.Select<WebAPI.Request.BattleFinish.GearResult, int>((Func<WebAPI.Request.BattleFinish.GearResult, int>) (x => x.damage_count)).ToArray<int>(), request.gears.Select<WebAPI.Request.BattleFinish.GearResult, int>((Func<WebAPI.Request.BattleFinish.GearResult, int>) (x => x.kill_count)).ToArray<int>(), request.gears.Select<WebAPI.Request.BattleFinish.GearResult, int>((Func<WebAPI.Request.BattleFinish.GearResult, int>) (x => x.player_gear_id)).ToArray<int>(), request.intimates.Select<WebAPI.Request.BattleFinish.IntimateResult, int>((Func<WebAPI.Request.BattleFinish.IntimateResult, int>) (x => x.target_character_id)).ToArray<int>(), request.intimates.Select<WebAPI.Request.BattleFinish.IntimateResult, int>((Func<WebAPI.Request.BattleFinish.IntimateResult, int>) (x => x.exp)).ToArray<int>(), request.intimates.Select<WebAPI.Request.BattleFinish.IntimateResult, int>((Func<WebAPI.Request.BattleFinish.IntimateResult, int>) (x => x.character_id)).ToArray<int>(), request.is_game_over, request.is_retire, be.core.battleInfo.isSimulation, request.panel_entity_ids.ToArray(), periodId, be.core.battleInfo.stageId, request.supplies.Select<WebAPI.Request.BattleFinish.SupplyResult, int>((Func<WebAPI.Request.BattleFinish.SupplyResult, int>) (x => x.supply_id)).ToArray<int>(), request.supplies.Select<WebAPI.Request.BattleFinish.SupplyResult, int>((Func<WebAPI.Request.BattleFinish.SupplyResult, int>) (x => x.use_quantity)).ToArray<int>(), request.units.Select<WebAPI.Request.BattleFinish.UnitResult, int>((Func<WebAPI.Request.BattleFinish.UnitResult, int>) (x => x.guest)).ToArray<int>(), request.units.Select<WebAPI.Request.BattleFinish.UnitResult, int>((Func<WebAPI.Request.BattleFinish.UnitResult, int>) (x => x.player_unit_id)).ToArray<int>(), request.units.Select<WebAPI.Request.BattleFinish.UnitResult, int>((Func<WebAPI.Request.BattleFinish.UnitResult, int>) (x => x.received_damage)).ToArray<int>(), request.units.Select<WebAPI.Request.BattleFinish.UnitResult, int>((Func<WebAPI.Request.BattleFinish.UnitResult, int>) (x => x.remaining_hp)).ToArray<int>(), request.units.Select<WebAPI.Request.BattleFinish.UnitResult, int>((Func<WebAPI.Request.BattleFinish.UnitResult, int>) (x => x.rental)).ToArray<int>(), request.units.Select<WebAPI.Request.BattleFinish.UnitResult, int>((Func<WebAPI.Request.BattleFinish.UnitResult, int>) (x => x.total_damage)).ToArray<int>(), request.units.Select<WebAPI.Request.BattleFinish.UnitResult, int>((Func<WebAPI.Request.BattleFinish.UnitResult, int>) (x => x.total_damage_count)).ToArray<int>(), request.units.Select<WebAPI.Request.BattleFinish.UnitResult, int>((Func<WebAPI.Request.BattleFinish.UnitResult, int>) (x => x.total_kill_count)).ToArray<int>(), request.week_element_attack_count, request.week_kind_attack_count, request.win ? 1 : 0, userErrorCallback);
  }

  public static Future<WebAPI.Response.BattleWaveFinish> BattleWaveFinish(
    WebAPI.Request.IBattleWaveFinish request,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.BattleWaveFinish>((Func<Promise<WebAPI.Response.BattleWaveFinish>, IEnumerator>) (promise => WebAPI.LoadBattleWaveFinish(promise, request, userErrorCallback)));
  }

  private static IEnumerator LoadBattleWaveFinish(
    Promise<WebAPI.Response.BattleWaveFinish> promise,
    WebAPI.Request.IBattleWaveFinish request,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalBattleWaveFinish(request, (Action<WebAPI.Response.BattleWaveFinish>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalBattleWaveFinish(
    WebAPI.Request.IBattleWaveFinish request,
    Action<WebAPI.Response.BattleWaveFinish> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/battle/wave/finish", new Dictionary<string, object>()
    {
      ["battle_turn"] = (object) request.battle_turn,
      ["battle_uuid"] = (object) request.battle_uuid,
      ["continue_count"] = (object) request.continue_count,
      ["duels_critical_count"] = (object) request.duels_critical_count,
      ["duels_damage"] = (object) request.duels_damage,
      ["duels_hit_damage"] = (object) request.duels_hit_damage,
      ["duels_max_damage"] = (object) request.duels_max_damage,
      ["gear_results_damage_count"] = (object) request.gear_results_damage_count,
      ["gear_results_kill_count"] = (object) request.gear_results_kill_count,
      ["gear_results_player_gear_id"] = (object) request.gear_results_player_gear_id,
      ["intimate_result_target_player_character_id"] = (object) request.intimate_result_target_player_character_id,
      ["intimate_results_exp"] = (object) request.intimate_results_exp,
      ["intimate_results_player_character_id"] = (object) request.intimate_results_player_character_id,
      ["is_game_over"] = (object) request.is_game_over,
      ["supply_results_supply_id"] = (object) request.supply_results_supply_id,
      ["supply_results_use_quantity"] = (object) request.supply_results_use_quantity,
      ["unit_results_guest_unit"] = (object) request.guests,
      ["unit_results_max_hp"] = (object) request.unit_results_max_hp,
      ["unit_results_player_unit_id"] = (object) request.unit_results_player_unit_id,
      ["unit_results_received_damage"] = (object) request.unit_results_received_damage,
      ["unit_results_remaining_hp"] = (object) request.unit_results_remaining_hp,
      ["unit_results_rental"] = (object) request.unit_results_rental,
      ["unit_results_total_damage"] = (object) request.unit_results_total_damage,
      ["unit_results_total_damage_count"] = (object) request.unit_results_total_damage_count,
      ["unit_results_total_kill_count"] = (object) request.unit_results_total_kill_count,
      ["use_skill_group"] = (object) request.use_skill_group,
      ["use_skill_id_counts"] = (object) request.use_skill_id_counts,
      ["use_skill_ids"] = (object) request.use_skill_ids,
      ["weak_element_attack_count"] = (object) request.weak_element_attack_count,
      ["weak_kind_attack_count"] = (object) request.weak_kind_attack_count,
      ["wave_stage"] = (object) ((IEnumerable<BattleWaveFinishInfo>) request.info).Select<BattleWaveFinishInfo, Dictionary<string, object>>((Func<BattleWaveFinishInfo, Dictionary<string, object>>) (x => x.ToDict())).ToArray<Dictionary<string, object>>(),
      ["win"] = (object) request.win
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.BattleWaveFinish) null);
      }
      else
        callback(new WebAPI.Response.BattleWaveFinish(json.Json));
    }));
  }

  public static Future<WebAPI.Response.GachaDecide> GachaDecide(
    int[] assign_unit_ids,
    int gacha_id,
    string gacha_name,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.GachaDecide>((Func<Promise<WebAPI.Response.GachaDecide>, IEnumerator>) (promise => WebAPI.LoadGachaDecide(promise, assign_unit_ids, gacha_id, gacha_name, userErrorCallback)));
  }

  private static IEnumerator LoadGachaDecide(
    Promise<WebAPI.Response.GachaDecide> promise,
    int[] assign_unit_ids,
    int gacha_id,
    string gacha_name,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalGachaDecide(assign_unit_ids, gacha_id, gacha_name, (Action<WebAPI.Response.GachaDecide>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalGachaDecide(
    int[] assign_unit_ids,
    int gacha_id,
    string gacha_name,
    Action<WebAPI.Response.GachaDecide> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/gacha/decide", new Dictionary<string, object>()
    {
      [nameof (assign_unit_ids)] = (object) assign_unit_ids,
      [nameof (gacha_id)] = (object) gacha_id,
      [nameof (gacha_name)] = (object) gacha_name
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GachaDecide) null);
      }
      else
        callback(new WebAPI.Response.GachaDecide(json.Json));
    }));
  }

  public static Future<T> GachaChargePay<T>(
    string name,
    int execute_count,
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<T>((Func<Promise<T>, IEnumerator>) (promise => WebAPI.LoadGachaChargePay<T>(promise, name, execute_count, gacha_id, userErrorCallback)));
  }

  private static IEnumerator LoadGachaChargePay<T>(
    Promise<T> promise,
    string name,
    int execute_count,
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalGachaChargePay<T>(name, execute_count, gacha_id, (Action<T>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalGachaChargePay<T>(
    string name,
    int execute_count,
    int gacha_id,
    Action<T> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.SafetyPost("/gacha/{0}/pay".F((object) name), new Dictionary<string, object>()
    {
      [nameof (execute_count)] = (object) execute_count,
      [nameof (gacha_id)] = (object) gacha_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback(default (T));
      }
      else
        ((Action<T>) callback)((T) typeof (T).GetConstructor(new System.Type[1]
        {
          typeof (Dictionary<string, object>)
        }).Invoke(new object[1]{ (object) json.Json }));
    }));
  }

  public static Future<T> GachaChargeMultiPay<T>(
    string name,
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<T>((Func<Promise<T>, IEnumerator>) (promise => WebAPI.LoadGachaChargeMultiPay<T>(promise, name, gacha_id, userErrorCallback)));
  }

  private static IEnumerator LoadGachaChargeMultiPay<T>(
    Promise<T> promise,
    string name,
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalGachaChargeMultiPay<T>(name, gacha_id, (Action<T>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalGachaChargeMultiPay<T>(
    string name,
    int gacha_id,
    Action<T> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.SafetyPost("/gacha/{0}/multi/pay".F((object) name), new Dictionary<string, object>()
    {
      [nameof (gacha_id)] = (object) gacha_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback(default (T));
      }
      else
        ((Action<T>) callback)((T) typeof (T).GetConstructor(new System.Type[1]
        {
          typeof (Dictionary<string, object>)
        }).Invoke(new object[1]{ (object) json.Json }));
    }));
  }

  public static Future<WebAPI.Response.GachaG002FriendpointPay> GachaFriendPointPay(
    string name,
    int execute_count,
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.GachaG002FriendpointPay>((Func<Promise<WebAPI.Response.GachaG002FriendpointPay>, IEnumerator>) (promise => WebAPI.LoadGachaG002FriendpointPay(promise, name, execute_count, gacha_id, userErrorCallback)));
  }

  private static IEnumerator LoadGachaG002FriendpointPay(
    Promise<WebAPI.Response.GachaG002FriendpointPay> promise,
    string name,
    int execute_count,
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalGachaFriendpointPay(name, execute_count, gacha_id, (Action<WebAPI.Response.GachaG002FriendpointPay>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalGachaFriendpointPay(
    string name,
    int execute_count,
    int gacha_id,
    Action<WebAPI.Response.GachaG002FriendpointPay> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.SafetyPost("/gacha/{0}/pay".F((object) name), new Dictionary<string, object>()
    {
      [nameof (execute_count)] = (object) execute_count,
      [nameof (gacha_id)] = (object) gacha_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GachaG002FriendpointPay) null);
      }
      else
        callback(new WebAPI.Response.GachaG002FriendpointPay(json.Json));
    }));
  }

  public static Future<T> GachaTicketPay<T>(
    string name,
    int execute_count,
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<T>((Func<Promise<T>, IEnumerator>) (promise => WebAPI.LoadGachaTicketPay<T>(promise, name, execute_count, gacha_id, userErrorCallback)));
  }

  private static IEnumerator LoadGachaTicketPay<T>(
    Promise<T> promise,
    string name,
    int execute_count,
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalGachaTicketPay<T>(name, execute_count, gacha_id, (Action<T>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalGachaTicketPay<T>(
    string name,
    int execute_count,
    int gacha_id,
    Action<T> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.SafetyPost("/gacha/{0}/pay".F((object) name), new Dictionary<string, object>()
    {
      [nameof (execute_count)] = (object) execute_count,
      [nameof (gacha_id)] = (object) gacha_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback(default (T));
      }
      else
        ((Action<T>) callback)((T) typeof (T).GetConstructor(new System.Type[1]
        {
          typeof (Dictionary<string, object>)
        }).Invoke(new object[1]{ (object) json.Json }));
    }));
  }

  public static Future<WebAPI.Response.AchievementApiAuth> AchievementApiAuth(
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.AchievementApiAuth>((Func<Promise<WebAPI.Response.AchievementApiAuth>, IEnumerator>) (promise => WebAPI.LoadAchievementApiAuth(promise, userErrorCallback)));
  }

  private static IEnumerator LoadAchievementApiAuth(
    Promise<WebAPI.Response.AchievementApiAuth> promise,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalAchievementApiAuth((Action<WebAPI.Response.AchievementApiAuth>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalAchievementApiAuth(
    Action<WebAPI.Response.AchievementApiAuth> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Get("/achievement/api/auth", (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.AchievementApiAuth) null);
      }
      else
        callback(new WebAPI.Response.AchievementApiAuth(json.Json));
    }));
  }

  public static Future<WebAPI.Response.Agreement> Agreement(
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.Agreement>((Func<Promise<WebAPI.Response.Agreement>, IEnumerator>) (promise => WebAPI.LoadAgreement(promise, userErrorCallback)));
  }

  private static IEnumerator LoadAgreement(
    Promise<WebAPI.Response.Agreement> promise,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalAgreement((Action<WebAPI.Response.Agreement>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalAgreement(
    Action<WebAPI.Response.Agreement> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Get("/agreement", (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.Agreement) null);
      }
      else
        callback(new WebAPI.Response.Agreement(json.Json));
    }));
  }

  public static Future<WebAPI.Response.AwakeSkillEquip> AwakeSkillEquip(
    int number,
    int? player_awake_skill_id,
    int player_unit_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.AwakeSkillEquip>((Func<Promise<WebAPI.Response.AwakeSkillEquip>, IEnumerator>) (promise => WebAPI.LoadAwakeSkillEquip(promise, number, player_awake_skill_id, player_unit_id, userErrorCallback)));
  }

  private static IEnumerator LoadAwakeSkillEquip(
    Promise<WebAPI.Response.AwakeSkillEquip> promise,
    int number,
    int? player_awake_skill_id,
    int player_unit_id,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalAwakeSkillEquip(number, player_awake_skill_id, player_unit_id, (Action<WebAPI.Response.AwakeSkillEquip>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalAwakeSkillEquip(
    int number,
    int? player_awake_skill_id,
    int player_unit_id,
    Action<WebAPI.Response.AwakeSkillEquip> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/awake/skill/equip", new Dictionary<string, object>()
    {
      [nameof (number)] = (object) number,
      [nameof (player_awake_skill_id)] = (object) player_awake_skill_id,
      [nameof (player_unit_id)] = (object) player_unit_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.AwakeSkillEquip) null);
      }
      else
        callback(new WebAPI.Response.AwakeSkillEquip(json.Json));
    }));
  }

  public static Future<WebAPI.Response.AwakeSkillFavorite> AwakeSkillFavorite(
    int[] lock_player_awake_skill_ids,
    int[] unlock_player_awake_skill_ids,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.AwakeSkillFavorite>((Func<Promise<WebAPI.Response.AwakeSkillFavorite>, IEnumerator>) (promise => WebAPI.LoadAwakeSkillFavorite(promise, lock_player_awake_skill_ids, unlock_player_awake_skill_ids, userErrorCallback)));
  }

  private static IEnumerator LoadAwakeSkillFavorite(
    Promise<WebAPI.Response.AwakeSkillFavorite> promise,
    int[] lock_player_awake_skill_ids,
    int[] unlock_player_awake_skill_ids,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalAwakeSkillFavorite(lock_player_awake_skill_ids, unlock_player_awake_skill_ids, (Action<WebAPI.Response.AwakeSkillFavorite>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalAwakeSkillFavorite(
    int[] lock_player_awake_skill_ids,
    int[] unlock_player_awake_skill_ids,
    Action<WebAPI.Response.AwakeSkillFavorite> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/awake/skill/favorite", new Dictionary<string, object>()
    {
      [nameof (lock_player_awake_skill_ids)] = (object) lock_player_awake_skill_ids,
      [nameof (unlock_player_awake_skill_ids)] = (object) unlock_player_awake_skill_ids
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.AwakeSkillFavorite) null);
      }
      else
        callback(new WebAPI.Response.AwakeSkillFavorite(json.Json));
    }));
  }

  public static Future<WebAPI.Response.BattleCharacterFinish> BattleCharacterFinish(
    int battle_turn,
    string battle_uuid,
    int continue_count,
    int[] drop_entity_ids,
    int[] duels_critical_count,
    int[] duels_damage,
    int[] duels_hit_damage,
    int[] duels_max_damage,
    int[] enemy_results_dead_count,
    int[] enemy_results_enemy_id,
    int[] enemy_results_kill_count,
    int[] enemy_results_level_difference,
    int[] enemy_results_overkill_damage,
    int[] gear_results_damage_count,
    int[] gear_results_kill_count,
    int[] gear_results_player_gear_id,
    int[] intimate_result_target_player_character_id,
    int[] intimate_results_exp,
    int[] intimate_results_player_character_id,
    bool is_game_over,
    int[] panel_entity_ids,
    int[] supply_results_supply_id,
    int[] supply_results_use_quantity,
    int[] unit_results_guest_unit,
    int[] unit_results_player_unit_id,
    int[] unit_results_received_damage,
    int[] unit_results_remaining_hp,
    int[] unit_results_rental,
    int[] unit_results_total_damage,
    int[] unit_results_total_damage_count,
    int[] unit_results_total_kill_count,
    int weak_element_attack_count,
    int weak_kind_attack_count,
    int win,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.BattleCharacterFinish>((Func<Promise<WebAPI.Response.BattleCharacterFinish>, IEnumerator>) (promise => WebAPI.LoadBattleCharacterFinish(promise, battle_turn, battle_uuid, continue_count, drop_entity_ids, duels_critical_count, duels_damage, duels_hit_damage, duels_max_damage, enemy_results_dead_count, enemy_results_enemy_id, enemy_results_kill_count, enemy_results_level_difference, enemy_results_overkill_damage, gear_results_damage_count, gear_results_kill_count, gear_results_player_gear_id, intimate_result_target_player_character_id, intimate_results_exp, intimate_results_player_character_id, is_game_over, panel_entity_ids, supply_results_supply_id, supply_results_use_quantity, unit_results_guest_unit, unit_results_player_unit_id, unit_results_received_damage, unit_results_remaining_hp, unit_results_rental, unit_results_total_damage, unit_results_total_damage_count, unit_results_total_kill_count, weak_element_attack_count, weak_kind_attack_count, win, userErrorCallback)));
  }

  private static IEnumerator LoadBattleCharacterFinish(
    Promise<WebAPI.Response.BattleCharacterFinish> promise,
    int battle_turn,
    string battle_uuid,
    int continue_count,
    int[] drop_entity_ids,
    int[] duels_critical_count,
    int[] duels_damage,
    int[] duels_hit_damage,
    int[] duels_max_damage,
    int[] enemy_results_dead_count,
    int[] enemy_results_enemy_id,
    int[] enemy_results_kill_count,
    int[] enemy_results_level_difference,
    int[] enemy_results_overkill_damage,
    int[] gear_results_damage_count,
    int[] gear_results_kill_count,
    int[] gear_results_player_gear_id,
    int[] intimate_result_target_player_character_id,
    int[] intimate_results_exp,
    int[] intimate_results_player_character_id,
    bool is_game_over,
    int[] panel_entity_ids,
    int[] supply_results_supply_id,
    int[] supply_results_use_quantity,
    int[] unit_results_guest_unit,
    int[] unit_results_player_unit_id,
    int[] unit_results_received_damage,
    int[] unit_results_remaining_hp,
    int[] unit_results_rental,
    int[] unit_results_total_damage,
    int[] unit_results_total_damage_count,
    int[] unit_results_total_kill_count,
    int weak_element_attack_count,
    int weak_kind_attack_count,
    int win,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalBattleCharacterFinish(battle_turn, battle_uuid, continue_count, drop_entity_ids, duels_critical_count, duels_damage, duels_hit_damage, duels_max_damage, enemy_results_dead_count, enemy_results_enemy_id, enemy_results_kill_count, enemy_results_level_difference, enemy_results_overkill_damage, gear_results_damage_count, gear_results_kill_count, gear_results_player_gear_id, intimate_result_target_player_character_id, intimate_results_exp, intimate_results_player_character_id, is_game_over, panel_entity_ids, supply_results_supply_id, supply_results_use_quantity, unit_results_guest_unit, unit_results_player_unit_id, unit_results_received_damage, unit_results_remaining_hp, unit_results_rental, unit_results_total_damage, unit_results_total_damage_count, unit_results_total_kill_count, weak_element_attack_count, weak_kind_attack_count, win, (Action<WebAPI.Response.BattleCharacterFinish>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalBattleCharacterFinish(
    int battle_turn,
    string battle_uuid,
    int continue_count,
    int[] drop_entity_ids,
    int[] duels_critical_count,
    int[] duels_damage,
    int[] duels_hit_damage,
    int[] duels_max_damage,
    int[] enemy_results_dead_count,
    int[] enemy_results_enemy_id,
    int[] enemy_results_kill_count,
    int[] enemy_results_level_difference,
    int[] enemy_results_overkill_damage,
    int[] gear_results_damage_count,
    int[] gear_results_kill_count,
    int[] gear_results_player_gear_id,
    int[] intimate_result_target_player_character_id,
    int[] intimate_results_exp,
    int[] intimate_results_player_character_id,
    bool is_game_over,
    int[] panel_entity_ids,
    int[] supply_results_supply_id,
    int[] supply_results_use_quantity,
    int[] unit_results_guest_unit,
    int[] unit_results_player_unit_id,
    int[] unit_results_received_damage,
    int[] unit_results_remaining_hp,
    int[] unit_results_rental,
    int[] unit_results_total_damage,
    int[] unit_results_total_damage_count,
    int[] unit_results_total_kill_count,
    int weak_element_attack_count,
    int weak_kind_attack_count,
    int win,
    Action<WebAPI.Response.BattleCharacterFinish> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/battle/character/finish", new Dictionary<string, object>()
    {
      [nameof (battle_turn)] = (object) battle_turn,
      [nameof (battle_uuid)] = (object) battle_uuid,
      [nameof (continue_count)] = (object) continue_count,
      [nameof (drop_entity_ids)] = (object) drop_entity_ids,
      [nameof (duels_critical_count)] = (object) duels_critical_count,
      [nameof (duels_damage)] = (object) duels_damage,
      [nameof (duels_hit_damage)] = (object) duels_hit_damage,
      [nameof (duels_max_damage)] = (object) duels_max_damage,
      [nameof (enemy_results_dead_count)] = (object) enemy_results_dead_count,
      [nameof (enemy_results_enemy_id)] = (object) enemy_results_enemy_id,
      [nameof (enemy_results_kill_count)] = (object) enemy_results_kill_count,
      [nameof (enemy_results_level_difference)] = (object) enemy_results_level_difference,
      [nameof (enemy_results_overkill_damage)] = (object) enemy_results_overkill_damage,
      [nameof (gear_results_damage_count)] = (object) gear_results_damage_count,
      [nameof (gear_results_kill_count)] = (object) gear_results_kill_count,
      [nameof (gear_results_player_gear_id)] = (object) gear_results_player_gear_id,
      [nameof (intimate_result_target_player_character_id)] = (object) intimate_result_target_player_character_id,
      [nameof (intimate_results_exp)] = (object) intimate_results_exp,
      [nameof (intimate_results_player_character_id)] = (object) intimate_results_player_character_id,
      [nameof (is_game_over)] = (object) is_game_over,
      [nameof (panel_entity_ids)] = (object) panel_entity_ids,
      [nameof (supply_results_supply_id)] = (object) supply_results_supply_id,
      [nameof (supply_results_use_quantity)] = (object) supply_results_use_quantity,
      [nameof (unit_results_guest_unit)] = (object) unit_results_guest_unit,
      [nameof (unit_results_player_unit_id)] = (object) unit_results_player_unit_id,
      [nameof (unit_results_received_damage)] = (object) unit_results_received_damage,
      [nameof (unit_results_remaining_hp)] = (object) unit_results_remaining_hp,
      [nameof (unit_results_rental)] = (object) unit_results_rental,
      [nameof (unit_results_total_damage)] = (object) unit_results_total_damage,
      [nameof (unit_results_total_damage_count)] = (object) unit_results_total_damage_count,
      [nameof (unit_results_total_kill_count)] = (object) unit_results_total_kill_count,
      [nameof (weak_element_attack_count)] = (object) weak_element_attack_count,
      [nameof (weak_kind_attack_count)] = (object) weak_kind_attack_count,
      [nameof (win)] = (object) win
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.BattleCharacterFinish) null);
      }
      else
        callback(new WebAPI.Response.BattleCharacterFinish(json.Json));
    }));
  }

  public static Future<WebAPI.Response.BattleCharacterQuestDetail> BattleCharacterQuestDetail(
    int quest_s_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.BattleCharacterQuestDetail>((Func<Promise<WebAPI.Response.BattleCharacterQuestDetail>, IEnumerator>) (promise => WebAPI.LoadBattleCharacterQuestDetail(promise, quest_s_id, userErrorCallback)));
  }

  private static IEnumerator LoadBattleCharacterQuestDetail(
    Promise<WebAPI.Response.BattleCharacterQuestDetail> promise,
    int quest_s_id,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalBattleCharacterQuestDetail(quest_s_id, (Action<WebAPI.Response.BattleCharacterQuestDetail>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalBattleCharacterQuestDetail(
    int quest_s_id,
    Action<WebAPI.Response.BattleCharacterQuestDetail> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/battle/character/quest_detail", new Dictionary<string, object>()
    {
      [nameof (quest_s_id)] = (object) quest_s_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.BattleCharacterQuestDetail) null);
      }
      else
        callback(new WebAPI.Response.BattleCharacterQuestDetail(json.Json));
    }));
  }

  public static Future<WebAPI.Response.BattleCharacterStart> BattleCharacterStart(
    int deck_number,
    int deck_type_id,
    int player_unit_id,
    int quest_s_id,
    string support_player_id,
    int support_player_unit_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.BattleCharacterStart>((Func<Promise<WebAPI.Response.BattleCharacterStart>, IEnumerator>) (promise => WebAPI.LoadBattleCharacterStart(promise, deck_number, deck_type_id, player_unit_id, quest_s_id, support_player_id, support_player_unit_id, userErrorCallback)));
  }

  private static IEnumerator LoadBattleCharacterStart(
    Promise<WebAPI.Response.BattleCharacterStart> promise,
    int deck_number,
    int deck_type_id,
    int player_unit_id,
    int quest_s_id,
    string support_player_id,
    int support_player_unit_id,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalBattleCharacterStart(deck_number, deck_type_id, player_unit_id, quest_s_id, support_player_id, support_player_unit_id, (Action<WebAPI.Response.BattleCharacterStart>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalBattleCharacterStart(
    int deck_number,
    int deck_type_id,
    int player_unit_id,
    int quest_s_id,
    string support_player_id,
    int support_player_unit_id,
    Action<WebAPI.Response.BattleCharacterStart> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/battle/character/start", new Dictionary<string, object>()
    {
      [nameof (deck_number)] = (object) deck_number,
      [nameof (deck_type_id)] = (object) deck_type_id,
      [nameof (player_unit_id)] = (object) player_unit_id,
      [nameof (quest_s_id)] = (object) quest_s_id,
      [nameof (support_player_id)] = (object) support_player_id,
      [nameof (support_player_unit_id)] = (object) support_player_unit_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.BattleCharacterStart) null);
      }
      else
        callback(new WebAPI.Response.BattleCharacterStart(json.Json));
    }));
  }

  public static Future<WebAPI.Response.BattleContinueCount> BattleContinueCount(
    int continue_count,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.BattleContinueCount>((Func<Promise<WebAPI.Response.BattleContinueCount>, IEnumerator>) (promise => WebAPI.LoadBattleContinueCount(promise, continue_count, userErrorCallback)));
  }

  private static IEnumerator LoadBattleContinueCount(
    Promise<WebAPI.Response.BattleContinueCount> promise,
    int continue_count,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalBattleContinueCount(continue_count, (Action<WebAPI.Response.BattleContinueCount>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalBattleContinueCount(
    int continue_count,
    Action<WebAPI.Response.BattleContinueCount> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/battle/continue_count", new Dictionary<string, object>()
    {
      [nameof (continue_count)] = (object) continue_count
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.BattleContinueCount) null);
      }
      else
        callback(new WebAPI.Response.BattleContinueCount(json.Json));
    }));
  }

  public static Future<WebAPI.Response.BattleExtraFinish> BattleExtraFinish(
    int battle_turn,
    string battle_uuid,
    int continue_count,
    int[] drop_entity_ids,
    int[] duels_critical_count,
    int[] duels_damage,
    int[] duels_hit_damage,
    int[] duels_max_damage,
    int[] enemy_results_dead_count,
    int[] enemy_results_enemy_id,
    int[] enemy_results_kill_count,
    int[] enemy_results_level_difference,
    int[] enemy_results_overkill_damage,
    int[] gear_results_damage_count,
    int[] gear_results_kill_count,
    int[] gear_results_player_gear_id,
    int[] intimate_result_target_player_character_id,
    int[] intimate_results_exp,
    int[] intimate_results_player_character_id,
    bool is_game_over,
    int[] panel_entity_ids,
    int[] supply_results_supply_id,
    int[] supply_results_use_quantity,
    int[] unit_results_guest_unit,
    int[] unit_results_max_hp,
    int[] unit_results_player_unit_id,
    int[] unit_results_received_damage,
    int[] unit_results_remaining_hp,
    int[] unit_results_rental,
    int[] unit_results_total_damage,
    int[] unit_results_total_damage_count,
    int[] unit_results_total_kill_count,
    int[] use_skill_group,
    int[] use_skill_id_counts,
    int[] use_skill_ids,
    int weak_element_attack_count,
    int weak_kind_attack_count,
    int win,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.BattleExtraFinish>((Func<Promise<WebAPI.Response.BattleExtraFinish>, IEnumerator>) (promise => WebAPI.LoadBattleExtraFinish(promise, battle_turn, battle_uuid, continue_count, drop_entity_ids, duels_critical_count, duels_damage, duels_hit_damage, duels_max_damage, enemy_results_dead_count, enemy_results_enemy_id, enemy_results_kill_count, enemy_results_level_difference, enemy_results_overkill_damage, gear_results_damage_count, gear_results_kill_count, gear_results_player_gear_id, intimate_result_target_player_character_id, intimate_results_exp, intimate_results_player_character_id, is_game_over, panel_entity_ids, supply_results_supply_id, supply_results_use_quantity, unit_results_guest_unit, unit_results_max_hp, unit_results_player_unit_id, unit_results_received_damage, unit_results_remaining_hp, unit_results_rental, unit_results_total_damage, unit_results_total_damage_count, unit_results_total_kill_count, use_skill_group, use_skill_id_counts, use_skill_ids, weak_element_attack_count, weak_kind_attack_count, win, userErrorCallback)));
  }

  private static IEnumerator LoadBattleExtraFinish(
    Promise<WebAPI.Response.BattleExtraFinish> promise,
    int battle_turn,
    string battle_uuid,
    int continue_count,
    int[] drop_entity_ids,
    int[] duels_critical_count,
    int[] duels_damage,
    int[] duels_hit_damage,
    int[] duels_max_damage,
    int[] enemy_results_dead_count,
    int[] enemy_results_enemy_id,
    int[] enemy_results_kill_count,
    int[] enemy_results_level_difference,
    int[] enemy_results_overkill_damage,
    int[] gear_results_damage_count,
    int[] gear_results_kill_count,
    int[] gear_results_player_gear_id,
    int[] intimate_result_target_player_character_id,
    int[] intimate_results_exp,
    int[] intimate_results_player_character_id,
    bool is_game_over,
    int[] panel_entity_ids,
    int[] supply_results_supply_id,
    int[] supply_results_use_quantity,
    int[] unit_results_guest_unit,
    int[] unit_results_max_hp,
    int[] unit_results_player_unit_id,
    int[] unit_results_received_damage,
    int[] unit_results_remaining_hp,
    int[] unit_results_rental,
    int[] unit_results_total_damage,
    int[] unit_results_total_damage_count,
    int[] unit_results_total_kill_count,
    int[] use_skill_group,
    int[] use_skill_id_counts,
    int[] use_skill_ids,
    int weak_element_attack_count,
    int weak_kind_attack_count,
    int win,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalBattleExtraFinish(battle_turn, battle_uuid, continue_count, drop_entity_ids, duels_critical_count, duels_damage, duels_hit_damage, duels_max_damage, enemy_results_dead_count, enemy_results_enemy_id, enemy_results_kill_count, enemy_results_level_difference, enemy_results_overkill_damage, gear_results_damage_count, gear_results_kill_count, gear_results_player_gear_id, intimate_result_target_player_character_id, intimate_results_exp, intimate_results_player_character_id, is_game_over, panel_entity_ids, supply_results_supply_id, supply_results_use_quantity, unit_results_guest_unit, unit_results_max_hp, unit_results_player_unit_id, unit_results_received_damage, unit_results_remaining_hp, unit_results_rental, unit_results_total_damage, unit_results_total_damage_count, unit_results_total_kill_count, use_skill_group, use_skill_id_counts, use_skill_ids, weak_element_attack_count, weak_kind_attack_count, win, (Action<WebAPI.Response.BattleExtraFinish>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalBattleExtraFinish(
    int battle_turn,
    string battle_uuid,
    int continue_count,
    int[] drop_entity_ids,
    int[] duels_critical_count,
    int[] duels_damage,
    int[] duels_hit_damage,
    int[] duels_max_damage,
    int[] enemy_results_dead_count,
    int[] enemy_results_enemy_id,
    int[] enemy_results_kill_count,
    int[] enemy_results_level_difference,
    int[] enemy_results_overkill_damage,
    int[] gear_results_damage_count,
    int[] gear_results_kill_count,
    int[] gear_results_player_gear_id,
    int[] intimate_result_target_player_character_id,
    int[] intimate_results_exp,
    int[] intimate_results_player_character_id,
    bool is_game_over,
    int[] panel_entity_ids,
    int[] supply_results_supply_id,
    int[] supply_results_use_quantity,
    int[] unit_results_guest_unit,
    int[] unit_results_max_hp,
    int[] unit_results_player_unit_id,
    int[] unit_results_received_damage,
    int[] unit_results_remaining_hp,
    int[] unit_results_rental,
    int[] unit_results_total_damage,
    int[] unit_results_total_damage_count,
    int[] unit_results_total_kill_count,
    int[] use_skill_group,
    int[] use_skill_id_counts,
    int[] use_skill_ids,
    int weak_element_attack_count,
    int weak_kind_attack_count,
    int win,
    Action<WebAPI.Response.BattleExtraFinish> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/battle/extra/finish", new Dictionary<string, object>()
    {
      [nameof (battle_turn)] = (object) battle_turn,
      [nameof (battle_uuid)] = (object) battle_uuid,
      [nameof (continue_count)] = (object) continue_count,
      [nameof (drop_entity_ids)] = (object) drop_entity_ids,
      [nameof (duels_critical_count)] = (object) duels_critical_count,
      [nameof (duels_damage)] = (object) duels_damage,
      [nameof (duels_hit_damage)] = (object) duels_hit_damage,
      [nameof (duels_max_damage)] = (object) duels_max_damage,
      [nameof (enemy_results_dead_count)] = (object) enemy_results_dead_count,
      [nameof (enemy_results_enemy_id)] = (object) enemy_results_enemy_id,
      [nameof (enemy_results_kill_count)] = (object) enemy_results_kill_count,
      [nameof (enemy_results_level_difference)] = (object) enemy_results_level_difference,
      [nameof (enemy_results_overkill_damage)] = (object) enemy_results_overkill_damage,
      [nameof (gear_results_damage_count)] = (object) gear_results_damage_count,
      [nameof (gear_results_kill_count)] = (object) gear_results_kill_count,
      [nameof (gear_results_player_gear_id)] = (object) gear_results_player_gear_id,
      [nameof (intimate_result_target_player_character_id)] = (object) intimate_result_target_player_character_id,
      [nameof (intimate_results_exp)] = (object) intimate_results_exp,
      [nameof (intimate_results_player_character_id)] = (object) intimate_results_player_character_id,
      [nameof (is_game_over)] = (object) is_game_over,
      [nameof (panel_entity_ids)] = (object) panel_entity_ids,
      [nameof (supply_results_supply_id)] = (object) supply_results_supply_id,
      [nameof (supply_results_use_quantity)] = (object) supply_results_use_quantity,
      [nameof (unit_results_guest_unit)] = (object) unit_results_guest_unit,
      [nameof (unit_results_max_hp)] = (object) unit_results_max_hp,
      [nameof (unit_results_player_unit_id)] = (object) unit_results_player_unit_id,
      [nameof (unit_results_received_damage)] = (object) unit_results_received_damage,
      [nameof (unit_results_remaining_hp)] = (object) unit_results_remaining_hp,
      [nameof (unit_results_rental)] = (object) unit_results_rental,
      [nameof (unit_results_total_damage)] = (object) unit_results_total_damage,
      [nameof (unit_results_total_damage_count)] = (object) unit_results_total_damage_count,
      [nameof (unit_results_total_kill_count)] = (object) unit_results_total_kill_count,
      [nameof (use_skill_group)] = (object) use_skill_group,
      [nameof (use_skill_id_counts)] = (object) use_skill_id_counts,
      [nameof (use_skill_ids)] = (object) use_skill_ids,
      [nameof (weak_element_attack_count)] = (object) weak_element_attack_count,
      [nameof (weak_kind_attack_count)] = (object) weak_kind_attack_count,
      [nameof (win)] = (object) win
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.BattleExtraFinish) null);
      }
      else
        callback(new WebAPI.Response.BattleExtraFinish(json.Json));
    }));
  }

  public static Future<WebAPI.Response.BattleExtraQuestDetail> BattleExtraQuestDetail(
    int quest_s_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.BattleExtraQuestDetail>((Func<Promise<WebAPI.Response.BattleExtraQuestDetail>, IEnumerator>) (promise => WebAPI.LoadBattleExtraQuestDetail(promise, quest_s_id, userErrorCallback)));
  }

  private static IEnumerator LoadBattleExtraQuestDetail(
    Promise<WebAPI.Response.BattleExtraQuestDetail> promise,
    int quest_s_id,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalBattleExtraQuestDetail(quest_s_id, (Action<WebAPI.Response.BattleExtraQuestDetail>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalBattleExtraQuestDetail(
    int quest_s_id,
    Action<WebAPI.Response.BattleExtraQuestDetail> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/battle/extra/quest_detail", new Dictionary<string, object>()
    {
      [nameof (quest_s_id)] = (object) quest_s_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.BattleExtraQuestDetail) null);
      }
      else
        callback(new WebAPI.Response.BattleExtraQuestDetail(json.Json));
    }));
  }

  public static Future<WebAPI.Response.BattleExtraStart> BattleExtraStart(
    int deck_number,
    int deck_type_id,
    int player_unit_id,
    int quest_s_id,
    string support_player_id,
    int support_player_unit_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.BattleExtraStart>((Func<Promise<WebAPI.Response.BattleExtraStart>, IEnumerator>) (promise => WebAPI.LoadBattleExtraStart(promise, deck_number, deck_type_id, player_unit_id, quest_s_id, support_player_id, support_player_unit_id, userErrorCallback)));
  }

  private static IEnumerator LoadBattleExtraStart(
    Promise<WebAPI.Response.BattleExtraStart> promise,
    int deck_number,
    int deck_type_id,
    int player_unit_id,
    int quest_s_id,
    string support_player_id,
    int support_player_unit_id,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalBattleExtraStart(deck_number, deck_type_id, player_unit_id, quest_s_id, support_player_id, support_player_unit_id, (Action<WebAPI.Response.BattleExtraStart>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalBattleExtraStart(
    int deck_number,
    int deck_type_id,
    int player_unit_id,
    int quest_s_id,
    string support_player_id,
    int support_player_unit_id,
    Action<WebAPI.Response.BattleExtraStart> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/battle/extra/start", new Dictionary<string, object>()
    {
      [nameof (deck_number)] = (object) deck_number,
      [nameof (deck_type_id)] = (object) deck_type_id,
      [nameof (player_unit_id)] = (object) player_unit_id,
      [nameof (quest_s_id)] = (object) quest_s_id,
      [nameof (support_player_id)] = (object) support_player_id,
      [nameof (support_player_unit_id)] = (object) support_player_unit_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.BattleExtraStart) null);
      }
      else
        callback(new WebAPI.Response.BattleExtraStart(json.Json));
    }));
  }

  public static Future<WebAPI.Response.BattleForceClose> BattleForceClose(
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.BattleForceClose>((Func<Promise<WebAPI.Response.BattleForceClose>, IEnumerator>) (promise => WebAPI.LoadBattleForceClose(promise, userErrorCallback)));
  }

  private static IEnumerator LoadBattleForceClose(
    Promise<WebAPI.Response.BattleForceClose> promise,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalBattleForceClose((Action<WebAPI.Response.BattleForceClose>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalBattleForceClose(
    Action<WebAPI.Response.BattleForceClose> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Get("/battle/force-close", (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.BattleForceClose) null);
      }
      else
        callback(new WebAPI.Response.BattleForceClose(json.Json));
    }));
  }

  public static Future<WebAPI.Response.BattleHarmonyFinish> BattleHarmonyFinish(
    int battle_turn,
    string battle_uuid,
    int continue_count,
    int[] drop_entity_ids,
    int[] duels_critical_count,
    int[] duels_damage,
    int[] duels_hit_damage,
    int[] duels_max_damage,
    int[] enemy_results_dead_count,
    int[] enemy_results_enemy_id,
    int[] enemy_results_kill_count,
    int[] enemy_results_level_difference,
    int[] enemy_results_overkill_damage,
    int[] gear_results_damage_count,
    int[] gear_results_kill_count,
    int[] gear_results_player_gear_id,
    int[] intimate_result_target_player_character_id,
    int[] intimate_results_exp,
    int[] intimate_results_player_character_id,
    bool is_game_over,
    int[] panel_entity_ids,
    int[] supply_results_supply_id,
    int[] supply_results_use_quantity,
    int[] unit_results_guest_unit,
    int[] unit_results_player_unit_id,
    int[] unit_results_received_damage,
    int[] unit_results_remaining_hp,
    int[] unit_results_rental,
    int[] unit_results_total_damage,
    int[] unit_results_total_damage_count,
    int[] unit_results_total_kill_count,
    int weak_element_attack_count,
    int weak_kind_attack_count,
    int win,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.BattleHarmonyFinish>((Func<Promise<WebAPI.Response.BattleHarmonyFinish>, IEnumerator>) (promise => WebAPI.LoadBattleHarmonyFinish(promise, battle_turn, battle_uuid, continue_count, drop_entity_ids, duels_critical_count, duels_damage, duels_hit_damage, duels_max_damage, enemy_results_dead_count, enemy_results_enemy_id, enemy_results_kill_count, enemy_results_level_difference, enemy_results_overkill_damage, gear_results_damage_count, gear_results_kill_count, gear_results_player_gear_id, intimate_result_target_player_character_id, intimate_results_exp, intimate_results_player_character_id, is_game_over, panel_entity_ids, supply_results_supply_id, supply_results_use_quantity, unit_results_guest_unit, unit_results_player_unit_id, unit_results_received_damage, unit_results_remaining_hp, unit_results_rental, unit_results_total_damage, unit_results_total_damage_count, unit_results_total_kill_count, weak_element_attack_count, weak_kind_attack_count, win, userErrorCallback)));
  }

  private static IEnumerator LoadBattleHarmonyFinish(
    Promise<WebAPI.Response.BattleHarmonyFinish> promise,
    int battle_turn,
    string battle_uuid,
    int continue_count,
    int[] drop_entity_ids,
    int[] duels_critical_count,
    int[] duels_damage,
    int[] duels_hit_damage,
    int[] duels_max_damage,
    int[] enemy_results_dead_count,
    int[] enemy_results_enemy_id,
    int[] enemy_results_kill_count,
    int[] enemy_results_level_difference,
    int[] enemy_results_overkill_damage,
    int[] gear_results_damage_count,
    int[] gear_results_kill_count,
    int[] gear_results_player_gear_id,
    int[] intimate_result_target_player_character_id,
    int[] intimate_results_exp,
    int[] intimate_results_player_character_id,
    bool is_game_over,
    int[] panel_entity_ids,
    int[] supply_results_supply_id,
    int[] supply_results_use_quantity,
    int[] unit_results_guest_unit,
    int[] unit_results_player_unit_id,
    int[] unit_results_received_damage,
    int[] unit_results_remaining_hp,
    int[] unit_results_rental,
    int[] unit_results_total_damage,
    int[] unit_results_total_damage_count,
    int[] unit_results_total_kill_count,
    int weak_element_attack_count,
    int weak_kind_attack_count,
    int win,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalBattleHarmonyFinish(battle_turn, battle_uuid, continue_count, drop_entity_ids, duels_critical_count, duels_damage, duels_hit_damage, duels_max_damage, enemy_results_dead_count, enemy_results_enemy_id, enemy_results_kill_count, enemy_results_level_difference, enemy_results_overkill_damage, gear_results_damage_count, gear_results_kill_count, gear_results_player_gear_id, intimate_result_target_player_character_id, intimate_results_exp, intimate_results_player_character_id, is_game_over, panel_entity_ids, supply_results_supply_id, supply_results_use_quantity, unit_results_guest_unit, unit_results_player_unit_id, unit_results_received_damage, unit_results_remaining_hp, unit_results_rental, unit_results_total_damage, unit_results_total_damage_count, unit_results_total_kill_count, weak_element_attack_count, weak_kind_attack_count, win, (Action<WebAPI.Response.BattleHarmonyFinish>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalBattleHarmonyFinish(
    int battle_turn,
    string battle_uuid,
    int continue_count,
    int[] drop_entity_ids,
    int[] duels_critical_count,
    int[] duels_damage,
    int[] duels_hit_damage,
    int[] duels_max_damage,
    int[] enemy_results_dead_count,
    int[] enemy_results_enemy_id,
    int[] enemy_results_kill_count,
    int[] enemy_results_level_difference,
    int[] enemy_results_overkill_damage,
    int[] gear_results_damage_count,
    int[] gear_results_kill_count,
    int[] gear_results_player_gear_id,
    int[] intimate_result_target_player_character_id,
    int[] intimate_results_exp,
    int[] intimate_results_player_character_id,
    bool is_game_over,
    int[] panel_entity_ids,
    int[] supply_results_supply_id,
    int[] supply_results_use_quantity,
    int[] unit_results_guest_unit,
    int[] unit_results_player_unit_id,
    int[] unit_results_received_damage,
    int[] unit_results_remaining_hp,
    int[] unit_results_rental,
    int[] unit_results_total_damage,
    int[] unit_results_total_damage_count,
    int[] unit_results_total_kill_count,
    int weak_element_attack_count,
    int weak_kind_attack_count,
    int win,
    Action<WebAPI.Response.BattleHarmonyFinish> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/battle/harmony/finish", new Dictionary<string, object>()
    {
      [nameof (battle_turn)] = (object) battle_turn,
      [nameof (battle_uuid)] = (object) battle_uuid,
      [nameof (continue_count)] = (object) continue_count,
      [nameof (drop_entity_ids)] = (object) drop_entity_ids,
      [nameof (duels_critical_count)] = (object) duels_critical_count,
      [nameof (duels_damage)] = (object) duels_damage,
      [nameof (duels_hit_damage)] = (object) duels_hit_damage,
      [nameof (duels_max_damage)] = (object) duels_max_damage,
      [nameof (enemy_results_dead_count)] = (object) enemy_results_dead_count,
      [nameof (enemy_results_enemy_id)] = (object) enemy_results_enemy_id,
      [nameof (enemy_results_kill_count)] = (object) enemy_results_kill_count,
      [nameof (enemy_results_level_difference)] = (object) enemy_results_level_difference,
      [nameof (enemy_results_overkill_damage)] = (object) enemy_results_overkill_damage,
      [nameof (gear_results_damage_count)] = (object) gear_results_damage_count,
      [nameof (gear_results_kill_count)] = (object) gear_results_kill_count,
      [nameof (gear_results_player_gear_id)] = (object) gear_results_player_gear_id,
      [nameof (intimate_result_target_player_character_id)] = (object) intimate_result_target_player_character_id,
      [nameof (intimate_results_exp)] = (object) intimate_results_exp,
      [nameof (intimate_results_player_character_id)] = (object) intimate_results_player_character_id,
      [nameof (is_game_over)] = (object) is_game_over,
      [nameof (panel_entity_ids)] = (object) panel_entity_ids,
      [nameof (supply_results_supply_id)] = (object) supply_results_supply_id,
      [nameof (supply_results_use_quantity)] = (object) supply_results_use_quantity,
      [nameof (unit_results_guest_unit)] = (object) unit_results_guest_unit,
      [nameof (unit_results_player_unit_id)] = (object) unit_results_player_unit_id,
      [nameof (unit_results_received_damage)] = (object) unit_results_received_damage,
      [nameof (unit_results_remaining_hp)] = (object) unit_results_remaining_hp,
      [nameof (unit_results_rental)] = (object) unit_results_rental,
      [nameof (unit_results_total_damage)] = (object) unit_results_total_damage,
      [nameof (unit_results_total_damage_count)] = (object) unit_results_total_damage_count,
      [nameof (unit_results_total_kill_count)] = (object) unit_results_total_kill_count,
      [nameof (weak_element_attack_count)] = (object) weak_element_attack_count,
      [nameof (weak_kind_attack_count)] = (object) weak_kind_attack_count,
      [nameof (win)] = (object) win
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.BattleHarmonyFinish) null);
      }
      else
        callback(new WebAPI.Response.BattleHarmonyFinish(json.Json));
    }));
  }

  public static Future<WebAPI.Response.BattleHarmonyQuestDetail> BattleHarmonyQuestDetail(
    int quest_s_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.BattleHarmonyQuestDetail>((Func<Promise<WebAPI.Response.BattleHarmonyQuestDetail>, IEnumerator>) (promise => WebAPI.LoadBattleHarmonyQuestDetail(promise, quest_s_id, userErrorCallback)));
  }

  private static IEnumerator LoadBattleHarmonyQuestDetail(
    Promise<WebAPI.Response.BattleHarmonyQuestDetail> promise,
    int quest_s_id,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalBattleHarmonyQuestDetail(quest_s_id, (Action<WebAPI.Response.BattleHarmonyQuestDetail>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalBattleHarmonyQuestDetail(
    int quest_s_id,
    Action<WebAPI.Response.BattleHarmonyQuestDetail> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/battle/harmony/quest_detail", new Dictionary<string, object>()
    {
      [nameof (quest_s_id)] = (object) quest_s_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.BattleHarmonyQuestDetail) null);
      }
      else
        callback(new WebAPI.Response.BattleHarmonyQuestDetail(json.Json));
    }));
  }

  public static Future<WebAPI.Response.BattleHarmonyStart> BattleHarmonyStart(
    int deck_number,
    int deck_type_id,
    int player_unit_id,
    int quest_s_id,
    string support_player_id,
    int support_player_unit_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.BattleHarmonyStart>((Func<Promise<WebAPI.Response.BattleHarmonyStart>, IEnumerator>) (promise => WebAPI.LoadBattleHarmonyStart(promise, deck_number, deck_type_id, player_unit_id, quest_s_id, support_player_id, support_player_unit_id, userErrorCallback)));
  }

  private static IEnumerator LoadBattleHarmonyStart(
    Promise<WebAPI.Response.BattleHarmonyStart> promise,
    int deck_number,
    int deck_type_id,
    int player_unit_id,
    int quest_s_id,
    string support_player_id,
    int support_player_unit_id,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalBattleHarmonyStart(deck_number, deck_type_id, player_unit_id, quest_s_id, support_player_id, support_player_unit_id, (Action<WebAPI.Response.BattleHarmonyStart>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalBattleHarmonyStart(
    int deck_number,
    int deck_type_id,
    int player_unit_id,
    int quest_s_id,
    string support_player_id,
    int support_player_unit_id,
    Action<WebAPI.Response.BattleHarmonyStart> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/battle/harmony/start", new Dictionary<string, object>()
    {
      [nameof (deck_number)] = (object) deck_number,
      [nameof (deck_type_id)] = (object) deck_type_id,
      [nameof (player_unit_id)] = (object) player_unit_id,
      [nameof (quest_s_id)] = (object) quest_s_id,
      [nameof (support_player_id)] = (object) support_player_id,
      [nameof (support_player_unit_id)] = (object) support_player_unit_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.BattleHarmonyStart) null);
      }
      else
        callback(new WebAPI.Response.BattleHarmonyStart(json.Json));
    }));
  }

  public static Future<WebAPI.Response.BattleResume> BattleResume(
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.BattleResume>((Func<Promise<WebAPI.Response.BattleResume>, IEnumerator>) (promise => WebAPI.LoadBattleResume(promise, userErrorCallback)));
  }

  private static IEnumerator LoadBattleResume(
    Promise<WebAPI.Response.BattleResume> promise,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalBattleResume((Action<WebAPI.Response.BattleResume>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalBattleResume(
    Action<WebAPI.Response.BattleResume> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Get("/battle/resume", (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.BattleResume) null);
      }
      else
        callback(new WebAPI.Response.BattleResume(json.Json));
    }));
  }

  public static Future<WebAPI.Response.BattleRetire> BattleRetire(
    int continue_count,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.BattleRetire>((Func<Promise<WebAPI.Response.BattleRetire>, IEnumerator>) (promise => WebAPI.LoadBattleRetire(promise, continue_count, userErrorCallback)));
  }

  private static IEnumerator LoadBattleRetire(
    Promise<WebAPI.Response.BattleRetire> promise,
    int continue_count,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalBattleRetire(continue_count, (Action<WebAPI.Response.BattleRetire>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalBattleRetire(
    int continue_count,
    Action<WebAPI.Response.BattleRetire> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/battle/retire", new Dictionary<string, object>()
    {
      [nameof (continue_count)] = (object) continue_count
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.BattleRetire) null);
      }
      else
        callback(new WebAPI.Response.BattleRetire(json.Json));
    }));
  }

  public static Future<WebAPI.Response.BattleStoryFinish> BattleStoryFinish(
    int battle_turn,
    string battle_uuid,
    int continue_count,
    int[] drop_entity_ids,
    int[] duels_critical_count,
    int[] duels_damage,
    int[] duels_hit_damage,
    int[] duels_max_damage,
    int[] enemy_results_dead_count,
    int[] enemy_results_enemy_id,
    int[] enemy_results_kill_count,
    int[] enemy_results_level_difference,
    int[] enemy_results_overkill_damage,
    int[] gear_results_damage_count,
    int[] gear_results_kill_count,
    int[] gear_results_player_gear_id,
    int[] intimate_result_target_player_character_id,
    int[] intimate_results_exp,
    int[] intimate_results_player_character_id,
    bool is_game_over,
    int[] panel_entity_ids,
    int[] supply_results_supply_id,
    int[] supply_results_use_quantity,
    int[] unit_results_guest_unit,
    int[] unit_results_player_unit_id,
    int[] unit_results_received_damage,
    int[] unit_results_remaining_hp,
    int[] unit_results_rental,
    int[] unit_results_total_damage,
    int[] unit_results_total_damage_count,
    int[] unit_results_total_kill_count,
    int weak_element_attack_count,
    int weak_kind_attack_count,
    int win,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.BattleStoryFinish>((Func<Promise<WebAPI.Response.BattleStoryFinish>, IEnumerator>) (promise => WebAPI.LoadBattleStoryFinish(promise, battle_turn, battle_uuid, continue_count, drop_entity_ids, duels_critical_count, duels_damage, duels_hit_damage, duels_max_damage, enemy_results_dead_count, enemy_results_enemy_id, enemy_results_kill_count, enemy_results_level_difference, enemy_results_overkill_damage, gear_results_damage_count, gear_results_kill_count, gear_results_player_gear_id, intimate_result_target_player_character_id, intimate_results_exp, intimate_results_player_character_id, is_game_over, panel_entity_ids, supply_results_supply_id, supply_results_use_quantity, unit_results_guest_unit, unit_results_player_unit_id, unit_results_received_damage, unit_results_remaining_hp, unit_results_rental, unit_results_total_damage, unit_results_total_damage_count, unit_results_total_kill_count, weak_element_attack_count, weak_kind_attack_count, win, userErrorCallback)));
  }

  private static IEnumerator LoadBattleStoryFinish(
    Promise<WebAPI.Response.BattleStoryFinish> promise,
    int battle_turn,
    string battle_uuid,
    int continue_count,
    int[] drop_entity_ids,
    int[] duels_critical_count,
    int[] duels_damage,
    int[] duels_hit_damage,
    int[] duels_max_damage,
    int[] enemy_results_dead_count,
    int[] enemy_results_enemy_id,
    int[] enemy_results_kill_count,
    int[] enemy_results_level_difference,
    int[] enemy_results_overkill_damage,
    int[] gear_results_damage_count,
    int[] gear_results_kill_count,
    int[] gear_results_player_gear_id,
    int[] intimate_result_target_player_character_id,
    int[] intimate_results_exp,
    int[] intimate_results_player_character_id,
    bool is_game_over,
    int[] panel_entity_ids,
    int[] supply_results_supply_id,
    int[] supply_results_use_quantity,
    int[] unit_results_guest_unit,
    int[] unit_results_player_unit_id,
    int[] unit_results_received_damage,
    int[] unit_results_remaining_hp,
    int[] unit_results_rental,
    int[] unit_results_total_damage,
    int[] unit_results_total_damage_count,
    int[] unit_results_total_kill_count,
    int weak_element_attack_count,
    int weak_kind_attack_count,
    int win,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalBattleStoryFinish(battle_turn, battle_uuid, continue_count, drop_entity_ids, duels_critical_count, duels_damage, duels_hit_damage, duels_max_damage, enemy_results_dead_count, enemy_results_enemy_id, enemy_results_kill_count, enemy_results_level_difference, enemy_results_overkill_damage, gear_results_damage_count, gear_results_kill_count, gear_results_player_gear_id, intimate_result_target_player_character_id, intimate_results_exp, intimate_results_player_character_id, is_game_over, panel_entity_ids, supply_results_supply_id, supply_results_use_quantity, unit_results_guest_unit, unit_results_player_unit_id, unit_results_received_damage, unit_results_remaining_hp, unit_results_rental, unit_results_total_damage, unit_results_total_damage_count, unit_results_total_kill_count, weak_element_attack_count, weak_kind_attack_count, win, (Action<WebAPI.Response.BattleStoryFinish>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalBattleStoryFinish(
    int battle_turn,
    string battle_uuid,
    int continue_count,
    int[] drop_entity_ids,
    int[] duels_critical_count,
    int[] duels_damage,
    int[] duels_hit_damage,
    int[] duels_max_damage,
    int[] enemy_results_dead_count,
    int[] enemy_results_enemy_id,
    int[] enemy_results_kill_count,
    int[] enemy_results_level_difference,
    int[] enemy_results_overkill_damage,
    int[] gear_results_damage_count,
    int[] gear_results_kill_count,
    int[] gear_results_player_gear_id,
    int[] intimate_result_target_player_character_id,
    int[] intimate_results_exp,
    int[] intimate_results_player_character_id,
    bool is_game_over,
    int[] panel_entity_ids,
    int[] supply_results_supply_id,
    int[] supply_results_use_quantity,
    int[] unit_results_guest_unit,
    int[] unit_results_player_unit_id,
    int[] unit_results_received_damage,
    int[] unit_results_remaining_hp,
    int[] unit_results_rental,
    int[] unit_results_total_damage,
    int[] unit_results_total_damage_count,
    int[] unit_results_total_kill_count,
    int weak_element_attack_count,
    int weak_kind_attack_count,
    int win,
    Action<WebAPI.Response.BattleStoryFinish> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/battle/story/finish", new Dictionary<string, object>()
    {
      [nameof (battle_turn)] = (object) battle_turn,
      [nameof (battle_uuid)] = (object) battle_uuid,
      [nameof (continue_count)] = (object) continue_count,
      [nameof (drop_entity_ids)] = (object) drop_entity_ids,
      [nameof (duels_critical_count)] = (object) duels_critical_count,
      [nameof (duels_damage)] = (object) duels_damage,
      [nameof (duels_hit_damage)] = (object) duels_hit_damage,
      [nameof (duels_max_damage)] = (object) duels_max_damage,
      [nameof (enemy_results_dead_count)] = (object) enemy_results_dead_count,
      [nameof (enemy_results_enemy_id)] = (object) enemy_results_enemy_id,
      [nameof (enemy_results_kill_count)] = (object) enemy_results_kill_count,
      [nameof (enemy_results_level_difference)] = (object) enemy_results_level_difference,
      [nameof (enemy_results_overkill_damage)] = (object) enemy_results_overkill_damage,
      [nameof (gear_results_damage_count)] = (object) gear_results_damage_count,
      [nameof (gear_results_kill_count)] = (object) gear_results_kill_count,
      [nameof (gear_results_player_gear_id)] = (object) gear_results_player_gear_id,
      [nameof (intimate_result_target_player_character_id)] = (object) intimate_result_target_player_character_id,
      [nameof (intimate_results_exp)] = (object) intimate_results_exp,
      [nameof (intimate_results_player_character_id)] = (object) intimate_results_player_character_id,
      [nameof (is_game_over)] = (object) is_game_over,
      [nameof (panel_entity_ids)] = (object) panel_entity_ids,
      [nameof (supply_results_supply_id)] = (object) supply_results_supply_id,
      [nameof (supply_results_use_quantity)] = (object) supply_results_use_quantity,
      [nameof (unit_results_guest_unit)] = (object) unit_results_guest_unit,
      [nameof (unit_results_player_unit_id)] = (object) unit_results_player_unit_id,
      [nameof (unit_results_received_damage)] = (object) unit_results_received_damage,
      [nameof (unit_results_remaining_hp)] = (object) unit_results_remaining_hp,
      [nameof (unit_results_rental)] = (object) unit_results_rental,
      [nameof (unit_results_total_damage)] = (object) unit_results_total_damage,
      [nameof (unit_results_total_damage_count)] = (object) unit_results_total_damage_count,
      [nameof (unit_results_total_kill_count)] = (object) unit_results_total_kill_count,
      [nameof (weak_element_attack_count)] = (object) weak_element_attack_count,
      [nameof (weak_kind_attack_count)] = (object) weak_kind_attack_count,
      [nameof (win)] = (object) win
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.BattleStoryFinish) null);
      }
      else
        callback(new WebAPI.Response.BattleStoryFinish(json.Json));
    }));
  }

  public static Future<WebAPI.Response.BattleStoryQuestDetail> BattleStoryQuestDetail(
    int quest_s_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.BattleStoryQuestDetail>((Func<Promise<WebAPI.Response.BattleStoryQuestDetail>, IEnumerator>) (promise => WebAPI.LoadBattleStoryQuestDetail(promise, quest_s_id, userErrorCallback)));
  }

  private static IEnumerator LoadBattleStoryQuestDetail(
    Promise<WebAPI.Response.BattleStoryQuestDetail> promise,
    int quest_s_id,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalBattleStoryQuestDetail(quest_s_id, (Action<WebAPI.Response.BattleStoryQuestDetail>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalBattleStoryQuestDetail(
    int quest_s_id,
    Action<WebAPI.Response.BattleStoryQuestDetail> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/battle/story/quest_detail", new Dictionary<string, object>()
    {
      [nameof (quest_s_id)] = (object) quest_s_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.BattleStoryQuestDetail) null);
      }
      else
        callback(new WebAPI.Response.BattleStoryQuestDetail(json.Json));
    }));
  }

  public static Future<WebAPI.Response.BattleStoryStart> BattleStoryStart(
    int deck_number,
    int deck_type_id,
    int player_unit_id,
    int quest_s_id,
    string support_player_id,
    int support_player_unit_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.BattleStoryStart>((Func<Promise<WebAPI.Response.BattleStoryStart>, IEnumerator>) (promise => WebAPI.LoadBattleStoryStart(promise, deck_number, deck_type_id, player_unit_id, quest_s_id, support_player_id, support_player_unit_id, userErrorCallback)));
  }

  private static IEnumerator LoadBattleStoryStart(
    Promise<WebAPI.Response.BattleStoryStart> promise,
    int deck_number,
    int deck_type_id,
    int player_unit_id,
    int quest_s_id,
    string support_player_id,
    int support_player_unit_id,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalBattleStoryStart(deck_number, deck_type_id, player_unit_id, quest_s_id, support_player_id, support_player_unit_id, (Action<WebAPI.Response.BattleStoryStart>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalBattleStoryStart(
    int deck_number,
    int deck_type_id,
    int player_unit_id,
    int quest_s_id,
    string support_player_id,
    int support_player_unit_id,
    Action<WebAPI.Response.BattleStoryStart> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/battle/story/start", new Dictionary<string, object>()
    {
      [nameof (deck_number)] = (object) deck_number,
      [nameof (deck_type_id)] = (object) deck_type_id,
      [nameof (player_unit_id)] = (object) player_unit_id,
      [nameof (quest_s_id)] = (object) quest_s_id,
      [nameof (support_player_id)] = (object) support_player_id,
      [nameof (support_player_unit_id)] = (object) support_player_unit_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.BattleStoryStart) null);
      }
      else
        callback(new WebAPI.Response.BattleStoryStart(json.Json));
    }));
  }

  public static Future<WebAPI.Response.BattleWaveQuestDetail> BattleWaveQuestDetail(
    int quest_s_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.BattleWaveQuestDetail>((Func<Promise<WebAPI.Response.BattleWaveQuestDetail>, IEnumerator>) (promise => WebAPI.LoadBattleWaveQuestDetail(promise, quest_s_id, userErrorCallback)));
  }

  private static IEnumerator LoadBattleWaveQuestDetail(
    Promise<WebAPI.Response.BattleWaveQuestDetail> promise,
    int quest_s_id,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalBattleWaveQuestDetail(quest_s_id, (Action<WebAPI.Response.BattleWaveQuestDetail>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalBattleWaveQuestDetail(
    int quest_s_id,
    Action<WebAPI.Response.BattleWaveQuestDetail> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/battle/wave/quest_detail", new Dictionary<string, object>()
    {
      [nameof (quest_s_id)] = (object) quest_s_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.BattleWaveQuestDetail) null);
      }
      else
        callback(new WebAPI.Response.BattleWaveQuestDetail(json.Json));
    }));
  }

  public static Future<WebAPI.Response.BattleWaveStart> BattleWaveStart(
    int deck_number,
    int deck_type_id,
    int player_unit_id,
    int quest_s_id,
    string support_player_id,
    int support_player_unit_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.BattleWaveStart>((Func<Promise<WebAPI.Response.BattleWaveStart>, IEnumerator>) (promise => WebAPI.LoadBattleWaveStart(promise, deck_number, deck_type_id, player_unit_id, quest_s_id, support_player_id, support_player_unit_id, userErrorCallback)));
  }

  private static IEnumerator LoadBattleWaveStart(
    Promise<WebAPI.Response.BattleWaveStart> promise,
    int deck_number,
    int deck_type_id,
    int player_unit_id,
    int quest_s_id,
    string support_player_id,
    int support_player_unit_id,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalBattleWaveStart(deck_number, deck_type_id, player_unit_id, quest_s_id, support_player_id, support_player_unit_id, (Action<WebAPI.Response.BattleWaveStart>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalBattleWaveStart(
    int deck_number,
    int deck_type_id,
    int player_unit_id,
    int quest_s_id,
    string support_player_id,
    int support_player_unit_id,
    Action<WebAPI.Response.BattleWaveStart> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/battle/wave/start", new Dictionary<string, object>()
    {
      [nameof (deck_number)] = (object) deck_number,
      [nameof (deck_type_id)] = (object) deck_type_id,
      [nameof (player_unit_id)] = (object) player_unit_id,
      [nameof (quest_s_id)] = (object) quest_s_id,
      [nameof (support_player_id)] = (object) support_player_id,
      [nameof (support_player_unit_id)] = (object) support_player_unit_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.BattleWaveStart) null);
      }
      else
        callback(new WebAPI.Response.BattleWaveStart(json.Json));
    }));
  }

  public static Future<WebAPI.Response.BingoIndex> BingoIndex(
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.BingoIndex>((Func<Promise<WebAPI.Response.BingoIndex>, IEnumerator>) (promise => WebAPI.LoadBingoIndex(promise, userErrorCallback)));
  }

  private static IEnumerator LoadBingoIndex(
    Promise<WebAPI.Response.BingoIndex> promise,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalBingoIndex((Action<WebAPI.Response.BingoIndex>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalBingoIndex(
    Action<WebAPI.Response.BingoIndex> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Get("/bingo/index", (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.BingoIndex) null);
      }
      else
        callback(new WebAPI.Response.BingoIndex(json.Json));
    }));
  }

  public static Future<WebAPI.Response.BingoOpenCheck> BingoOpenCheck(
    int bingo_id,
    int panel_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.BingoOpenCheck>((Func<Promise<WebAPI.Response.BingoOpenCheck>, IEnumerator>) (promise => WebAPI.LoadBingoOpenCheck(promise, bingo_id, panel_id, userErrorCallback)));
  }

  private static IEnumerator LoadBingoOpenCheck(
    Promise<WebAPI.Response.BingoOpenCheck> promise,
    int bingo_id,
    int panel_id,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalBingoOpenCheck(bingo_id, panel_id, (Action<WebAPI.Response.BingoOpenCheck>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalBingoOpenCheck(
    int bingo_id,
    int panel_id,
    Action<WebAPI.Response.BingoOpenCheck> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/bingo/open/check", new Dictionary<string, object>()
    {
      [nameof (bingo_id)] = (object) bingo_id,
      [nameof (panel_id)] = (object) panel_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.BingoOpenCheck) null);
      }
      else
        callback(new WebAPI.Response.BingoOpenCheck(json.Json));
    }));
  }

  public static Future<WebAPI.Response.BingoReceiveReward> BingoReceiveReward(
    int bingo_id,
    int panel_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.BingoReceiveReward>((Func<Promise<WebAPI.Response.BingoReceiveReward>, IEnumerator>) (promise => WebAPI.LoadBingoReceiveReward(promise, bingo_id, panel_id, userErrorCallback)));
  }

  private static IEnumerator LoadBingoReceiveReward(
    Promise<WebAPI.Response.BingoReceiveReward> promise,
    int bingo_id,
    int panel_id,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalBingoReceiveReward(bingo_id, panel_id, (Action<WebAPI.Response.BingoReceiveReward>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalBingoReceiveReward(
    int bingo_id,
    int panel_id,
    Action<WebAPI.Response.BingoReceiveReward> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/bingo/receive/reward", new Dictionary<string, object>()
    {
      [nameof (bingo_id)] = (object) bingo_id,
      [nameof (panel_id)] = (object) panel_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.BingoReceiveReward) null);
      }
      else
        callback(new WebAPI.Response.BingoReceiveReward(json.Json));
    }));
  }

  public static Future<WebAPI.Response.BingoReview> BingoReview(
    int bingo_id,
    int panel_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.BingoReview>((Func<Promise<WebAPI.Response.BingoReview>, IEnumerator>) (promise => WebAPI.LoadBingoReview(promise, bingo_id, panel_id, userErrorCallback)));
  }

  private static IEnumerator LoadBingoReview(
    Promise<WebAPI.Response.BingoReview> promise,
    int bingo_id,
    int panel_id,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalBingoReview(bingo_id, panel_id, (Action<WebAPI.Response.BingoReview>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalBingoReview(
    int bingo_id,
    int panel_id,
    Action<WebAPI.Response.BingoReview> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/bingo/review", new Dictionary<string, object>()
    {
      [nameof (bingo_id)] = (object) bingo_id,
      [nameof (panel_id)] = (object) panel_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.BingoReview) null);
      }
      else
        callback(new WebAPI.Response.BingoReview(json.Json));
    }));
  }

  public static Future<WebAPI.Response.BingoSelectComplete> BingoSelectComplete(
    int bingo_id,
    int group_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.BingoSelectComplete>((Func<Promise<WebAPI.Response.BingoSelectComplete>, IEnumerator>) (promise => WebAPI.LoadBingoSelectComplete(promise, bingo_id, group_id, userErrorCallback)));
  }

  private static IEnumerator LoadBingoSelectComplete(
    Promise<WebAPI.Response.BingoSelectComplete> promise,
    int bingo_id,
    int group_id,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalBingoSelectComplete(bingo_id, group_id, (Action<WebAPI.Response.BingoSelectComplete>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalBingoSelectComplete(
    int bingo_id,
    int group_id,
    Action<WebAPI.Response.BingoSelectComplete> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/bingo/select/complete", new Dictionary<string, object>()
    {
      [nameof (bingo_id)] = (object) bingo_id,
      [nameof (group_id)] = (object) group_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.BingoSelectComplete) null);
      }
      else
        callback(new WebAPI.Response.BingoSelectComplete(json.Json));
    }));
  }

  public static Future<WebAPI.Response.CoinbonusHistory> CoinbonusHistory(
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.CoinbonusHistory>((Func<Promise<WebAPI.Response.CoinbonusHistory>, IEnumerator>) (promise => WebAPI.LoadCoinbonusHistory(promise, userErrorCallback)));
  }

  private static IEnumerator LoadCoinbonusHistory(
    Promise<WebAPI.Response.CoinbonusHistory> promise,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalCoinbonusHistory((Action<WebAPI.Response.CoinbonusHistory>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalCoinbonusHistory(
    Action<WebAPI.Response.CoinbonusHistory> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Get("/coinbonus/history", (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.CoinbonusHistory) null);
      }
      else
        callback(new WebAPI.Response.CoinbonusHistory(json.Json));
    }));
  }

  public static Future<WebAPI.Response.CoinbonusPackVerifyCheck> CoinbonusPackVerifyCheck(
    int logic_type_id,
    int pack_id,
    int step,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.CoinbonusPackVerifyCheck>((Func<Promise<WebAPI.Response.CoinbonusPackVerifyCheck>, IEnumerator>) (promise => WebAPI.LoadCoinbonusPackVerifyCheck(promise, logic_type_id, pack_id, step, userErrorCallback)));
  }

  private static IEnumerator LoadCoinbonusPackVerifyCheck(
    Promise<WebAPI.Response.CoinbonusPackVerifyCheck> promise,
    int logic_type_id,
    int pack_id,
    int step,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalCoinbonusPackVerifyCheck(logic_type_id, pack_id, step, (Action<WebAPI.Response.CoinbonusPackVerifyCheck>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalCoinbonusPackVerifyCheck(
    int logic_type_id,
    int pack_id,
    int step,
    Action<WebAPI.Response.CoinbonusPackVerifyCheck> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/coinbonus/pack_verify_check", new Dictionary<string, object>()
    {
      [nameof (logic_type_id)] = (object) logic_type_id,
      [nameof (pack_id)] = (object) pack_id,
      [nameof (step)] = (object) step
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.CoinbonusPackVerifyCheck) null);
      }
      else
        callback(new WebAPI.Response.CoinbonusPackVerifyCheck(json.Json));
    }));
  }

  public static Future<WebAPI.Response.CoinbonusPresent> CoinbonusPresent(
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.CoinbonusPresent>((Func<Promise<WebAPI.Response.CoinbonusPresent>, IEnumerator>) (promise => WebAPI.LoadCoinbonusPresent(promise, userErrorCallback)));
  }

  private static IEnumerator LoadCoinbonusPresent(
    Promise<WebAPI.Response.CoinbonusPresent> promise,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalCoinbonusPresent((Action<WebAPI.Response.CoinbonusPresent>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalCoinbonusPresent(
    Action<WebAPI.Response.CoinbonusPresent> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Get("/coinbonus/present", (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.CoinbonusPresent) null);
      }
      else
        callback(new WebAPI.Response.CoinbonusPresent(json.Json));
    }));
  }

  public static Future<WebAPI.Response.CoinbonusPresentPack> CoinbonusPresentPack(
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.CoinbonusPresentPack>((Func<Promise<WebAPI.Response.CoinbonusPresentPack>, IEnumerator>) (promise => WebAPI.LoadCoinbonusPresentPack(promise, userErrorCallback)));
  }

  private static IEnumerator LoadCoinbonusPresentPack(
    Promise<WebAPI.Response.CoinbonusPresentPack> promise,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalCoinbonusPresentPack((Action<WebAPI.Response.CoinbonusPresentPack>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalCoinbonusPresentPack(
    Action<WebAPI.Response.CoinbonusPresentPack> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Get("/coinbonus/present_pack", (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.CoinbonusPresentPack) null);
      }
      else
        callback(new WebAPI.Response.CoinbonusPresentPack(json.Json));
    }));
  }

  public static Future<WebAPI.Response.CoinbonusReceiveGiftReward> CoinbonusReceiveGiftReward(
    int gift_type,
    int[] player_gift_ids,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.CoinbonusReceiveGiftReward>((Func<Promise<WebAPI.Response.CoinbonusReceiveGiftReward>, IEnumerator>) (promise => WebAPI.LoadCoinbonusReceiveGiftReward(promise, gift_type, player_gift_ids, userErrorCallback)));
  }

  private static IEnumerator LoadCoinbonusReceiveGiftReward(
    Promise<WebAPI.Response.CoinbonusReceiveGiftReward> promise,
    int gift_type,
    int[] player_gift_ids,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalCoinbonusReceiveGiftReward(gift_type, player_gift_ids, (Action<WebAPI.Response.CoinbonusReceiveGiftReward>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalCoinbonusReceiveGiftReward(
    int gift_type,
    int[] player_gift_ids,
    Action<WebAPI.Response.CoinbonusReceiveGiftReward> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/coinbonus/receive_gift_reward", new Dictionary<string, object>()
    {
      [nameof (gift_type)] = (object) gift_type,
      [nameof (player_gift_ids)] = (object) player_gift_ids
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.CoinbonusReceiveGiftReward) null);
      }
      else
        callback(new WebAPI.Response.CoinbonusReceiveGiftReward(json.Json));
    }));
  }

  public static Future<WebAPI.Response.CoinbonusReceivePackReward> CoinbonusReceivePackReward(
    int logic_type_id,
    int pack_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.CoinbonusReceivePackReward>((Func<Promise<WebAPI.Response.CoinbonusReceivePackReward>, IEnumerator>) (promise => WebAPI.LoadCoinbonusReceivePackReward(promise, logic_type_id, pack_id, userErrorCallback)));
  }

  private static IEnumerator LoadCoinbonusReceivePackReward(
    Promise<WebAPI.Response.CoinbonusReceivePackReward> promise,
    int logic_type_id,
    int pack_id,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalCoinbonusReceivePackReward(logic_type_id, pack_id, (Action<WebAPI.Response.CoinbonusReceivePackReward>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalCoinbonusReceivePackReward(
    int logic_type_id,
    int pack_id,
    Action<WebAPI.Response.CoinbonusReceivePackReward> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/coinbonus/receive_pack_reward", new Dictionary<string, object>()
    {
      [nameof (logic_type_id)] = (object) logic_type_id,
      [nameof (pack_id)] = (object) pack_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.CoinbonusReceivePackReward) null);
      }
      else
        callback(new WebAPI.Response.CoinbonusReceivePackReward(json.Json));
    }));
  }

  public static Future<WebAPI.Response.ColosseumBoot> ColosseumBoot(
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.ColosseumBoot>((Func<Promise<WebAPI.Response.ColosseumBoot>, IEnumerator>) (promise => WebAPI.LoadColosseumBoot(promise, userErrorCallback)));
  }

  private static IEnumerator LoadColosseumBoot(
    Promise<WebAPI.Response.ColosseumBoot> promise,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalColosseumBoot((Action<WebAPI.Response.ColosseumBoot>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalColosseumBoot(
    Action<WebAPI.Response.ColosseumBoot> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Get("/colosseum/boot", (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.ColosseumBoot) null);
      }
      else
        callback(new WebAPI.Response.ColosseumBoot(json.Json));
    }));
  }

  public static Future<WebAPI.Response.ColosseumFinish> ColosseumFinish(
    string arena_transaction_id,
    string battle_log,
    bool is_win,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.ColosseumFinish>((Func<Promise<WebAPI.Response.ColosseumFinish>, IEnumerator>) (promise => WebAPI.LoadColosseumFinish(promise, arena_transaction_id, battle_log, is_win, userErrorCallback)));
  }

  private static IEnumerator LoadColosseumFinish(
    Promise<WebAPI.Response.ColosseumFinish> promise,
    string arena_transaction_id,
    string battle_log,
    bool is_win,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalColosseumFinish(arena_transaction_id, battle_log, is_win, (Action<WebAPI.Response.ColosseumFinish>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalColosseumFinish(
    string arena_transaction_id,
    string battle_log,
    bool is_win,
    Action<WebAPI.Response.ColosseumFinish> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/colosseum/finish", new Dictionary<string, object>()
    {
      [nameof (arena_transaction_id)] = (object) arena_transaction_id,
      [nameof (battle_log)] = (object) battle_log,
      [nameof (is_win)] = (object) is_win
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.ColosseumFinish) null);
      }
      else
        callback(new WebAPI.Response.ColosseumFinish(json.Json));
    }));
  }

  public static Future<WebAPI.Response.ColosseumForceClose> ColosseumForceClose(
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.ColosseumForceClose>((Func<Promise<WebAPI.Response.ColosseumForceClose>, IEnumerator>) (promise => WebAPI.LoadColosseumForceClose(promise, userErrorCallback)));
  }

  private static IEnumerator LoadColosseumForceClose(
    Promise<WebAPI.Response.ColosseumForceClose> promise,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalColosseumForceClose((Action<WebAPI.Response.ColosseumForceClose>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalColosseumForceClose(
    Action<WebAPI.Response.ColosseumForceClose> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Get("/colosseum/force-close", (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.ColosseumForceClose) null);
      }
      else
        callback(new WebAPI.Response.ColosseumForceClose(json.Json));
    }));
  }

  public static Future<WebAPI.Response.ColosseumRanking> ColosseumRanking(
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.ColosseumRanking>((Func<Promise<WebAPI.Response.ColosseumRanking>, IEnumerator>) (promise => WebAPI.LoadColosseumRanking(promise, userErrorCallback)));
  }

  private static IEnumerator LoadColosseumRanking(
    Promise<WebAPI.Response.ColosseumRanking> promise,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalColosseumRanking((Action<WebAPI.Response.ColosseumRanking>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalColosseumRanking(
    Action<WebAPI.Response.ColosseumRanking> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Get("/colosseum/ranking", (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.ColosseumRanking) null);
      }
      else
        callback(new WebAPI.Response.ColosseumRanking(json.Json));
    }));
  }

  public static Future<WebAPI.Response.ColosseumResume> ColosseumResume(
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.ColosseumResume>((Func<Promise<WebAPI.Response.ColosseumResume>, IEnumerator>) (promise => WebAPI.LoadColosseumResume(promise, userErrorCallback)));
  }

  private static IEnumerator LoadColosseumResume(
    Promise<WebAPI.Response.ColosseumResume> promise,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalColosseumResume((Action<WebAPI.Response.ColosseumResume>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalColosseumResume(
    Action<WebAPI.Response.ColosseumResume> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Get("/colosseum/resume", (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.ColosseumResume) null);
      }
      else
        callback(new WebAPI.Response.ColosseumResume(json.Json));
    }));
  }

  public static Future<WebAPI.Response.ColosseumStart> ColosseumStart(
    int deck_number,
    int deck_type_id,
    string target_player_id,
    int target_player_index,
    int total_combat,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.ColosseumStart>((Func<Promise<WebAPI.Response.ColosseumStart>, IEnumerator>) (promise => WebAPI.LoadColosseumStart(promise, deck_number, deck_type_id, target_player_id, target_player_index, total_combat, userErrorCallback)));
  }

  private static IEnumerator LoadColosseumStart(
    Promise<WebAPI.Response.ColosseumStart> promise,
    int deck_number,
    int deck_type_id,
    string target_player_id,
    int target_player_index,
    int total_combat,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalColosseumStart(deck_number, deck_type_id, target_player_id, target_player_index, total_combat, (Action<WebAPI.Response.ColosseumStart>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalColosseumStart(
    int deck_number,
    int deck_type_id,
    string target_player_id,
    int target_player_index,
    int total_combat,
    Action<WebAPI.Response.ColosseumStart> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/colosseum/start", new Dictionary<string, object>()
    {
      [nameof (deck_number)] = (object) deck_number,
      [nameof (deck_type_id)] = (object) deck_type_id,
      [nameof (target_player_id)] = (object) target_player_id,
      [nameof (target_player_index)] = (object) target_player_index,
      [nameof (total_combat)] = (object) total_combat
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.ColosseumStart) null);
      }
      else
        callback(new WebAPI.Response.ColosseumStart(json.Json));
    }));
  }

  public static Future<WebAPI.Response.ColosseumTutorialBoot> ColosseumTutorialBoot(
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.ColosseumTutorialBoot>((Func<Promise<WebAPI.Response.ColosseumTutorialBoot>, IEnumerator>) (promise => WebAPI.LoadColosseumTutorialBoot(promise, userErrorCallback)));
  }

  private static IEnumerator LoadColosseumTutorialBoot(
    Promise<WebAPI.Response.ColosseumTutorialBoot> promise,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalColosseumTutorialBoot((Action<WebAPI.Response.ColosseumTutorialBoot>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalColosseumTutorialBoot(
    Action<WebAPI.Response.ColosseumTutorialBoot> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Get("/colosseum/tutorial/boot", (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.ColosseumTutorialBoot) null);
      }
      else
        callback(new WebAPI.Response.ColosseumTutorialBoot(json.Json));
    }));
  }

  public static Future<WebAPI.Response.ColosseumTutorialFinish> ColosseumTutorialFinish(
    string arena_transaction_id,
    string battle_log,
    int deck_number,
    int deck_type_id,
    bool is_win,
    int total_combat,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.ColosseumTutorialFinish>((Func<Promise<WebAPI.Response.ColosseumTutorialFinish>, IEnumerator>) (promise => WebAPI.LoadColosseumTutorialFinish(promise, arena_transaction_id, battle_log, deck_number, deck_type_id, is_win, total_combat, userErrorCallback)));
  }

  private static IEnumerator LoadColosseumTutorialFinish(
    Promise<WebAPI.Response.ColosseumTutorialFinish> promise,
    string arena_transaction_id,
    string battle_log,
    int deck_number,
    int deck_type_id,
    bool is_win,
    int total_combat,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalColosseumTutorialFinish(arena_transaction_id, battle_log, deck_number, deck_type_id, is_win, total_combat, (Action<WebAPI.Response.ColosseumTutorialFinish>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalColosseumTutorialFinish(
    string arena_transaction_id,
    string battle_log,
    int deck_number,
    int deck_type_id,
    bool is_win,
    int total_combat,
    Action<WebAPI.Response.ColosseumTutorialFinish> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/colosseum/tutorial/finish", new Dictionary<string, object>()
    {
      [nameof (arena_transaction_id)] = (object) arena_transaction_id,
      [nameof (battle_log)] = (object) battle_log,
      [nameof (deck_number)] = (object) deck_number,
      [nameof (deck_type_id)] = (object) deck_type_id,
      [nameof (is_win)] = (object) is_win,
      [nameof (total_combat)] = (object) total_combat
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.ColosseumTutorialFinish) null);
      }
      else
        callback(new WebAPI.Response.ColosseumTutorialFinish(json.Json));
    }));
  }

  public static Future<WebAPI.Response.ColosseumTutorialForceClose> ColosseumTutorialForceClose(
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.ColosseumTutorialForceClose>((Func<Promise<WebAPI.Response.ColosseumTutorialForceClose>, IEnumerator>) (promise => WebAPI.LoadColosseumTutorialForceClose(promise, userErrorCallback)));
  }

  private static IEnumerator LoadColosseumTutorialForceClose(
    Promise<WebAPI.Response.ColosseumTutorialForceClose> promise,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalColosseumTutorialForceClose((Action<WebAPI.Response.ColosseumTutorialForceClose>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalColosseumTutorialForceClose(
    Action<WebAPI.Response.ColosseumTutorialForceClose> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Get("/colosseum/tutorial/force-close", (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.ColosseumTutorialForceClose) null);
      }
      else
        callback(new WebAPI.Response.ColosseumTutorialForceClose(json.Json));
    }));
  }

  public static Future<WebAPI.Response.ColosseumTutorialResume> ColosseumTutorialResume(
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.ColosseumTutorialResume>((Func<Promise<WebAPI.Response.ColosseumTutorialResume>, IEnumerator>) (promise => WebAPI.LoadColosseumTutorialResume(promise, userErrorCallback)));
  }

  private static IEnumerator LoadColosseumTutorialResume(
    Promise<WebAPI.Response.ColosseumTutorialResume> promise,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalColosseumTutorialResume((Action<WebAPI.Response.ColosseumTutorialResume>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalColosseumTutorialResume(
    Action<WebAPI.Response.ColosseumTutorialResume> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Get("/colosseum/tutorial/resume", (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.ColosseumTutorialResume) null);
      }
      else
        callback(new WebAPI.Response.ColosseumTutorialResume(json.Json));
    }));
  }

  public static Future<WebAPI.Response.ColosseumTutorialStart> ColosseumTutorialStart(
    int deck_number,
    int deck_type_id,
    string target_player_id,
    int target_player_index,
    int total_combat,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.ColosseumTutorialStart>((Func<Promise<WebAPI.Response.ColosseumTutorialStart>, IEnumerator>) (promise => WebAPI.LoadColosseumTutorialStart(promise, deck_number, deck_type_id, target_player_id, target_player_index, total_combat, userErrorCallback)));
  }

  private static IEnumerator LoadColosseumTutorialStart(
    Promise<WebAPI.Response.ColosseumTutorialStart> promise,
    int deck_number,
    int deck_type_id,
    string target_player_id,
    int target_player_index,
    int total_combat,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalColosseumTutorialStart(deck_number, deck_type_id, target_player_id, target_player_index, total_combat, (Action<WebAPI.Response.ColosseumTutorialStart>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalColosseumTutorialStart(
    int deck_number,
    int deck_type_id,
    string target_player_id,
    int target_player_index,
    int total_combat,
    Action<WebAPI.Response.ColosseumTutorialStart> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/colosseum/tutorial/start", new Dictionary<string, object>()
    {
      [nameof (deck_number)] = (object) deck_number,
      [nameof (deck_type_id)] = (object) deck_type_id,
      [nameof (target_player_id)] = (object) target_player_id,
      [nameof (target_player_index)] = (object) target_player_index,
      [nameof (total_combat)] = (object) total_combat
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.ColosseumTutorialStart) null);
      }
      else
        callback(new WebAPI.Response.ColosseumTutorialStart(json.Json));
    }));
  }

  public static Future<WebAPI.Response.DailymissionBulkReceive> DailymissionBulkReceive(
    int mission_type,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.DailymissionBulkReceive>((Func<Promise<WebAPI.Response.DailymissionBulkReceive>, IEnumerator>) (promise => WebAPI.LoadDailymissionBulkReceive(promise, mission_type, userErrorCallback)));
  }

  private static IEnumerator LoadDailymissionBulkReceive(
    Promise<WebAPI.Response.DailymissionBulkReceive> promise,
    int mission_type,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalDailymissionBulkReceive(mission_type, (Action<WebAPI.Response.DailymissionBulkReceive>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalDailymissionBulkReceive(
    int mission_type,
    Action<WebAPI.Response.DailymissionBulkReceive> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/dailymission/bulk_receive", new Dictionary<string, object>()
    {
      [nameof (mission_type)] = (object) mission_type
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.DailymissionBulkReceive) null);
      }
      else
        callback(new WebAPI.Response.DailymissionBulkReceive(json.Json));
    }));
  }

  public static Future<WebAPI.Response.DailymissionExternalLink> DailymissionExternalLink(
    int mission_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.DailymissionExternalLink>((Func<Promise<WebAPI.Response.DailymissionExternalLink>, IEnumerator>) (promise => WebAPI.LoadDailymissionExternalLink(promise, mission_id, userErrorCallback)));
  }

  private static IEnumerator LoadDailymissionExternalLink(
    Promise<WebAPI.Response.DailymissionExternalLink> promise,
    int mission_id,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalDailymissionExternalLink(mission_id, (Action<WebAPI.Response.DailymissionExternalLink>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalDailymissionExternalLink(
    int mission_id,
    Action<WebAPI.Response.DailymissionExternalLink> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/dailymission/external_link", new Dictionary<string, object>()
    {
      [nameof (mission_id)] = (object) mission_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.DailymissionExternalLink) null);
      }
      else
        callback(new WebAPI.Response.DailymissionExternalLink(json.Json));
    }));
  }

  public static Future<WebAPI.Response.DailymissionIndex> DailymissionIndex(
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.DailymissionIndex>((Func<Promise<WebAPI.Response.DailymissionIndex>, IEnumerator>) (promise => WebAPI.LoadDailymissionIndex(promise, userErrorCallback)));
  }

  private static IEnumerator LoadDailymissionIndex(
    Promise<WebAPI.Response.DailymissionIndex> promise,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalDailymissionIndex((Action<WebAPI.Response.DailymissionIndex>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalDailymissionIndex(
    Action<WebAPI.Response.DailymissionIndex> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Get("/dailymission/index", (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.DailymissionIndex) null);
      }
      else
        callback(new WebAPI.Response.DailymissionIndex(json.Json));
    }));
  }

  public static Future<WebAPI.Response.DailymissionPointRewardReceive> DailymissionPointRewardReceive(
    int box_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.DailymissionPointRewardReceive>((Func<Promise<WebAPI.Response.DailymissionPointRewardReceive>, IEnumerator>) (promise => WebAPI.LoadDailymissionPointRewardReceive(promise, box_id, userErrorCallback)));
  }

  private static IEnumerator LoadDailymissionPointRewardReceive(
    Promise<WebAPI.Response.DailymissionPointRewardReceive> promise,
    int box_id,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalDailymissionPointRewardReceive(box_id, (Action<WebAPI.Response.DailymissionPointRewardReceive>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalDailymissionPointRewardReceive(
    int box_id,
    Action<WebAPI.Response.DailymissionPointRewardReceive> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/dailymission/point_reward_receive", new Dictionary<string, object>()
    {
      [nameof (box_id)] = (object) box_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.DailymissionPointRewardReceive) null);
      }
      else
        callback(new WebAPI.Response.DailymissionPointRewardReceive(json.Json));
    }));
  }

  public static Future<WebAPI.Response.DailymissionReceive> DailymissionReceive(
    int mission_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.DailymissionReceive>((Func<Promise<WebAPI.Response.DailymissionReceive>, IEnumerator>) (promise => WebAPI.LoadDailymissionReceive(promise, mission_id, userErrorCallback)));
  }

  private static IEnumerator LoadDailymissionReceive(
    Promise<WebAPI.Response.DailymissionReceive> promise,
    int mission_id,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalDailymissionReceive(mission_id, (Action<WebAPI.Response.DailymissionReceive>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalDailymissionReceive(
    int mission_id,
    Action<WebAPI.Response.DailymissionReceive> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/dailymission/receive", new Dictionary<string, object>()
    {
      [nameof (mission_id)] = (object) mission_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.DailymissionReceive) null);
      }
      else
        callback(new WebAPI.Response.DailymissionReceive(json.Json));
    }));
  }

  public static Future<WebAPI.Response.DailymissionReceiveDailyAll> DailymissionReceiveDailyAll(
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.DailymissionReceiveDailyAll>((Func<Promise<WebAPI.Response.DailymissionReceiveDailyAll>, IEnumerator>) (promise => WebAPI.LoadDailymissionReceiveDailyAll(promise, userErrorCallback)));
  }

  private static IEnumerator LoadDailymissionReceiveDailyAll(
    Promise<WebAPI.Response.DailymissionReceiveDailyAll> promise,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalDailymissionReceiveDailyAll((Action<WebAPI.Response.DailymissionReceiveDailyAll>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalDailymissionReceiveDailyAll(
    Action<WebAPI.Response.DailymissionReceiveDailyAll> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Get("/dailymission/receive_daily_all", (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.DailymissionReceiveDailyAll) null);
      }
      else
        callback(new WebAPI.Response.DailymissionReceiveDailyAll(json.Json));
    }));
  }

  public static Future<WebAPI.Response.DailymissionReview> DailymissionReview(
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.DailymissionReview>((Func<Promise<WebAPI.Response.DailymissionReview>, IEnumerator>) (promise => WebAPI.LoadDailymissionReview(promise, userErrorCallback)));
  }

  private static IEnumerator LoadDailymissionReview(
    Promise<WebAPI.Response.DailymissionReview> promise,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalDailymissionReview((Action<WebAPI.Response.DailymissionReview>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalDailymissionReview(
    Action<WebAPI.Response.DailymissionReview> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Get("/dailymission/review", (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.DailymissionReview) null);
      }
      else
        callback(new WebAPI.Response.DailymissionReview(json.Json));
    }));
  }

  public static Future<WebAPI.Response.DeckCustomDeck> DeckCustomDeck(
    int deck_type_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.DeckCustomDeck>((Func<Promise<WebAPI.Response.DeckCustomDeck>, IEnumerator>) (promise => WebAPI.LoadDeckCustomDeck(promise, deck_type_id, userErrorCallback)));
  }

  private static IEnumerator LoadDeckCustomDeck(
    Promise<WebAPI.Response.DeckCustomDeck> promise,
    int deck_type_id,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalDeckCustomDeck(deck_type_id, (Action<WebAPI.Response.DeckCustomDeck>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalDeckCustomDeck(
    int deck_type_id,
    Action<WebAPI.Response.DeckCustomDeck> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/deck/custom_deck", new Dictionary<string, object>()
    {
      [nameof (deck_type_id)] = (object) deck_type_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.DeckCustomDeck) null);
      }
      else
        callback(new WebAPI.Response.DeckCustomDeck(json.Json));
    }));
  }

  public static Future<WebAPI.Response.DeckEdit> DeckEdit(
    int deck_type_id,
    int number,
    int[] player_unit_ids,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.DeckEdit>((Func<Promise<WebAPI.Response.DeckEdit>, IEnumerator>) (promise => WebAPI.LoadDeckEdit(promise, deck_type_id, number, player_unit_ids, userErrorCallback)));
  }

  private static IEnumerator LoadDeckEdit(
    Promise<WebAPI.Response.DeckEdit> promise,
    int deck_type_id,
    int number,
    int[] player_unit_ids,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalDeckEdit(deck_type_id, number, player_unit_ids, (Action<WebAPI.Response.DeckEdit>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalDeckEdit(
    int deck_type_id,
    int number,
    int[] player_unit_ids,
    Action<WebAPI.Response.DeckEdit> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/deck/edit", new Dictionary<string, object>()
    {
      [nameof (deck_type_id)] = (object) deck_type_id,
      [nameof (number)] = (object) number,
      [nameof (player_unit_ids)] = (object) player_unit_ids
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.DeckEdit) null);
      }
      else
        callback(new WebAPI.Response.DeckEdit(json.Json));
    }));
  }

  public static Future<WebAPI.Response.DeckEditCustomDeck> DeckEditCustomDeck(
    int deck_type_id,
    int number,
    int[] player_unit_ids,
    int up_asid0,
    int up_asid1,
    int up_asid2,
    int up_asid3,
    int up_asid4,
    int[] up_gids0,
    int[] up_gids1,
    int[] up_gids2,
    int[] up_gids3,
    int[] up_gids4,
    int up_jid0,
    int up_jid1,
    int up_jid2,
    int up_jid3,
    int up_jid4,
    int[] up_oids0,
    int[] up_oids1,
    int[] up_oids2,
    int[] up_oids3,
    int[] up_oids4,
    int[] up_rids0,
    int[] up_rids1,
    int[] up_rids2,
    int[] up_rids3,
    int[] up_rids4,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.DeckEditCustomDeck>((Func<Promise<WebAPI.Response.DeckEditCustomDeck>, IEnumerator>) (promise => WebAPI.LoadDeckEditCustomDeck(promise, deck_type_id, number, player_unit_ids, up_asid0, up_asid1, up_asid2, up_asid3, up_asid4, up_gids0, up_gids1, up_gids2, up_gids3, up_gids4, up_jid0, up_jid1, up_jid2, up_jid3, up_jid4, up_oids0, up_oids1, up_oids2, up_oids3, up_oids4, up_rids0, up_rids1, up_rids2, up_rids3, up_rids4, userErrorCallback)));
  }

  private static IEnumerator LoadDeckEditCustomDeck(
    Promise<WebAPI.Response.DeckEditCustomDeck> promise,
    int deck_type_id,
    int number,
    int[] player_unit_ids,
    int up_asid0,
    int up_asid1,
    int up_asid2,
    int up_asid3,
    int up_asid4,
    int[] up_gids0,
    int[] up_gids1,
    int[] up_gids2,
    int[] up_gids3,
    int[] up_gids4,
    int up_jid0,
    int up_jid1,
    int up_jid2,
    int up_jid3,
    int up_jid4,
    int[] up_oids0,
    int[] up_oids1,
    int[] up_oids2,
    int[] up_oids3,
    int[] up_oids4,
    int[] up_rids0,
    int[] up_rids1,
    int[] up_rids2,
    int[] up_rids3,
    int[] up_rids4,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalDeckEditCustomDeck(deck_type_id, number, player_unit_ids, up_asid0, up_asid1, up_asid2, up_asid3, up_asid4, up_gids0, up_gids1, up_gids2, up_gids3, up_gids4, up_jid0, up_jid1, up_jid2, up_jid3, up_jid4, up_oids0, up_oids1, up_oids2, up_oids3, up_oids4, up_rids0, up_rids1, up_rids2, up_rids3, up_rids4, (Action<WebAPI.Response.DeckEditCustomDeck>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalDeckEditCustomDeck(
    int deck_type_id,
    int number,
    int[] player_unit_ids,
    int up_asid0,
    int up_asid1,
    int up_asid2,
    int up_asid3,
    int up_asid4,
    int[] up_gids0,
    int[] up_gids1,
    int[] up_gids2,
    int[] up_gids3,
    int[] up_gids4,
    int up_jid0,
    int up_jid1,
    int up_jid2,
    int up_jid3,
    int up_jid4,
    int[] up_oids0,
    int[] up_oids1,
    int[] up_oids2,
    int[] up_oids3,
    int[] up_oids4,
    int[] up_rids0,
    int[] up_rids1,
    int[] up_rids2,
    int[] up_rids3,
    int[] up_rids4,
    Action<WebAPI.Response.DeckEditCustomDeck> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/deck/edit_custom_deck", new Dictionary<string, object>()
    {
      [nameof (deck_type_id)] = (object) deck_type_id,
      [nameof (number)] = (object) number,
      [nameof (player_unit_ids)] = (object) player_unit_ids,
      [nameof (up_asid0)] = (object) up_asid0,
      [nameof (up_asid1)] = (object) up_asid1,
      [nameof (up_asid2)] = (object) up_asid2,
      [nameof (up_asid3)] = (object) up_asid3,
      [nameof (up_asid4)] = (object) up_asid4,
      [nameof (up_gids0)] = (object) up_gids0,
      [nameof (up_gids1)] = (object) up_gids1,
      [nameof (up_gids2)] = (object) up_gids2,
      [nameof (up_gids3)] = (object) up_gids3,
      [nameof (up_gids4)] = (object) up_gids4,
      [nameof (up_jid0)] = (object) up_jid0,
      [nameof (up_jid1)] = (object) up_jid1,
      [nameof (up_jid2)] = (object) up_jid2,
      [nameof (up_jid3)] = (object) up_jid3,
      [nameof (up_jid4)] = (object) up_jid4,
      [nameof (up_oids0)] = (object) up_oids0,
      [nameof (up_oids1)] = (object) up_oids1,
      [nameof (up_oids2)] = (object) up_oids2,
      [nameof (up_oids3)] = (object) up_oids3,
      [nameof (up_oids4)] = (object) up_oids4,
      [nameof (up_rids0)] = (object) up_rids0,
      [nameof (up_rids1)] = (object) up_rids1,
      [nameof (up_rids2)] = (object) up_rids2,
      [nameof (up_rids3)] = (object) up_rids3,
      [nameof (up_rids4)] = (object) up_rids4
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.DeckEditCustomDeck) null);
      }
      else
        callback(new WebAPI.Response.DeckEditCustomDeck(json.Json));
    }));
  }

  public static Future<WebAPI.Response.DeckEditCustomDeckName> DeckEditCustomDeckName(
    int deck_type_id,
    string name,
    int number,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.DeckEditCustomDeckName>((Func<Promise<WebAPI.Response.DeckEditCustomDeckName>, IEnumerator>) (promise => WebAPI.LoadDeckEditCustomDeckName(promise, deck_type_id, name, number, userErrorCallback)));
  }

  private static IEnumerator LoadDeckEditCustomDeckName(
    Promise<WebAPI.Response.DeckEditCustomDeckName> promise,
    int deck_type_id,
    string name,
    int number,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalDeckEditCustomDeckName(deck_type_id, name, number, (Action<WebAPI.Response.DeckEditCustomDeckName>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalDeckEditCustomDeckName(
    int deck_type_id,
    string name,
    int number,
    Action<WebAPI.Response.DeckEditCustomDeckName> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/deck/edit_custom_deck_name", new Dictionary<string, object>()
    {
      [nameof (deck_type_id)] = (object) deck_type_id,
      [nameof (name)] = (object) name,
      [nameof (number)] = (object) number
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.DeckEditCustomDeckName) null);
      }
      else
        callback(new WebAPI.Response.DeckEditCustomDeckName(json.Json));
    }));
  }

  public static Future<WebAPI.Response.DeleteAccount> DeleteAccount(
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.DeleteAccount>((Func<Promise<WebAPI.Response.DeleteAccount>, IEnumerator>) (promise => WebAPI.LoadDeleteAccount(promise, userErrorCallback)));
  }

  private static IEnumerator LoadDeleteAccount(
    Promise<WebAPI.Response.DeleteAccount> promise,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalDeleteAccount((Action<WebAPI.Response.DeleteAccount>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalDeleteAccount(
    Action<WebAPI.Response.DeleteAccount> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Get("/delete_account", (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.DeleteAccount) null);
      }
      else
        callback(new WebAPI.Response.DeleteAccount(json.Json));
    }));
  }

  public static Future<WebAPI.Response.EmblemOtherPlayerStatus> EmblemOtherPlayerStatus(
    string target_player_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.EmblemOtherPlayerStatus>((Func<Promise<WebAPI.Response.EmblemOtherPlayerStatus>, IEnumerator>) (promise => WebAPI.LoadEmblemOtherPlayerStatus(promise, target_player_id, userErrorCallback)));
  }

  private static IEnumerator LoadEmblemOtherPlayerStatus(
    Promise<WebAPI.Response.EmblemOtherPlayerStatus> promise,
    string target_player_id,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalEmblemOtherPlayerStatus(target_player_id, (Action<WebAPI.Response.EmblemOtherPlayerStatus>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalEmblemOtherPlayerStatus(
    string target_player_id,
    Action<WebAPI.Response.EmblemOtherPlayerStatus> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/emblem/other_player_status", new Dictionary<string, object>()
    {
      [nameof (target_player_id)] = (object) target_player_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.EmblemOtherPlayerStatus) null);
      }
      else
        callback(new WebAPI.Response.EmblemOtherPlayerStatus(json.Json));
    }));
  }

  public static Future<WebAPI.Response.EmblemSet> EmblemSet(
    int emblem_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.EmblemSet>((Func<Promise<WebAPI.Response.EmblemSet>, IEnumerator>) (promise => WebAPI.LoadEmblemSet(promise, emblem_id, userErrorCallback)));
  }

  private static IEnumerator LoadEmblemSet(
    Promise<WebAPI.Response.EmblemSet> promise,
    int emblem_id,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalEmblemSet(emblem_id, (Action<WebAPI.Response.EmblemSet>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalEmblemSet(
    int emblem_id,
    Action<WebAPI.Response.EmblemSet> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/emblem/set", new Dictionary<string, object>()
    {
      [nameof (emblem_id)] = (object) emblem_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.EmblemSet) null);
      }
      else
        callback(new WebAPI.Response.EmblemSet(json.Json));
    }));
  }

  public static Future<WebAPI.Response.EmblemStatus> EmblemStatus(
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.EmblemStatus>((Func<Promise<WebAPI.Response.EmblemStatus>, IEnumerator>) (promise => WebAPI.LoadEmblemStatus(promise, userErrorCallback)));
  }

  private static IEnumerator LoadEmblemStatus(
    Promise<WebAPI.Response.EmblemStatus> promise,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalEmblemStatus((Action<WebAPI.Response.EmblemStatus>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalEmblemStatus(
    Action<WebAPI.Response.EmblemStatus> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Get("/emblem/status", (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.EmblemStatus) null);
      }
      else
        callback(new WebAPI.Response.EmblemStatus(json.Json));
    }));
  }

  public static Future<WebAPI.Response.EventDetail> EventDetail(
    int period_id,
    int[] unit_ids,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.EventDetail>((Func<Promise<WebAPI.Response.EventDetail>, IEnumerator>) (promise => WebAPI.LoadEventDetail(promise, period_id, unit_ids, userErrorCallback)));
  }

  private static IEnumerator LoadEventDetail(
    Promise<WebAPI.Response.EventDetail> promise,
    int period_id,
    int[] unit_ids,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalEventDetail(period_id, unit_ids, (Action<WebAPI.Response.EventDetail>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalEventDetail(
    int period_id,
    int[] unit_ids,
    Action<WebAPI.Response.EventDetail> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/event/detail", new Dictionary<string, object>()
    {
      [nameof (period_id)] = (object) period_id,
      [nameof (unit_ids)] = (object) unit_ids
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.EventDetail) null);
      }
      else
        callback(new WebAPI.Response.EventDetail(json.Json));
    }));
  }

  public static Future<WebAPI.Response.EventTop> EventTop(
    int period_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.EventTop>((Func<Promise<WebAPI.Response.EventTop>, IEnumerator>) (promise => WebAPI.LoadEventTop(promise, period_id, userErrorCallback)));
  }

  private static IEnumerator LoadEventTop(
    Promise<WebAPI.Response.EventTop> promise,
    int period_id,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalEventTop(period_id, (Action<WebAPI.Response.EventTop>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalEventTop(
    int period_id,
    Action<WebAPI.Response.EventTop> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/event/top", new Dictionary<string, object>()
    {
      [nameof (period_id)] = (object) period_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.EventTop) null);
      }
      else
        callback(new WebAPI.Response.EventTop(json.Json));
    }));
  }

  public static Future<WebAPI.Response.ExploreChallengeBoot> ExploreChallengeBoot(
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.ExploreChallengeBoot>((Func<Promise<WebAPI.Response.ExploreChallengeBoot>, IEnumerator>) (promise => WebAPI.LoadExploreChallengeBoot(promise, userErrorCallback)));
  }

  private static IEnumerator LoadExploreChallengeBoot(
    Promise<WebAPI.Response.ExploreChallengeBoot> promise,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalExploreChallengeBoot((Action<WebAPI.Response.ExploreChallengeBoot>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalExploreChallengeBoot(
    Action<WebAPI.Response.ExploreChallengeBoot> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Get("/explore/challenge/boot", (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.ExploreChallengeBoot) null);
      }
      else
        callback(new WebAPI.Response.ExploreChallengeBoot(json.Json));
    }));
  }

  public static Future<WebAPI.Response.ExploreChallengeFinish> ExploreChallengeFinish(
    string arena_transaction_id,
    string battle_log,
    bool is_win,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.ExploreChallengeFinish>((Func<Promise<WebAPI.Response.ExploreChallengeFinish>, IEnumerator>) (promise => WebAPI.LoadExploreChallengeFinish(promise, arena_transaction_id, battle_log, is_win, userErrorCallback)));
  }

  private static IEnumerator LoadExploreChallengeFinish(
    Promise<WebAPI.Response.ExploreChallengeFinish> promise,
    string arena_transaction_id,
    string battle_log,
    bool is_win,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalExploreChallengeFinish(arena_transaction_id, battle_log, is_win, (Action<WebAPI.Response.ExploreChallengeFinish>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalExploreChallengeFinish(
    string arena_transaction_id,
    string battle_log,
    bool is_win,
    Action<WebAPI.Response.ExploreChallengeFinish> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/explore/challenge/finish", new Dictionary<string, object>()
    {
      [nameof (arena_transaction_id)] = (object) arena_transaction_id,
      [nameof (battle_log)] = (object) battle_log,
      [nameof (is_win)] = (object) is_win
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.ExploreChallengeFinish) null);
      }
      else
        callback(new WebAPI.Response.ExploreChallengeFinish(json.Json));
    }));
  }

  public static Future<WebAPI.Response.ExploreChallengeStart> ExploreChallengeStart(
    string target_player_id,
    int total_combat,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.ExploreChallengeStart>((Func<Promise<WebAPI.Response.ExploreChallengeStart>, IEnumerator>) (promise => WebAPI.LoadExploreChallengeStart(promise, target_player_id, total_combat, userErrorCallback)));
  }

  private static IEnumerator LoadExploreChallengeStart(
    Promise<WebAPI.Response.ExploreChallengeStart> promise,
    string target_player_id,
    int total_combat,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalExploreChallengeStart(target_player_id, total_combat, (Action<WebAPI.Response.ExploreChallengeStart>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalExploreChallengeStart(
    string target_player_id,
    int total_combat,
    Action<WebAPI.Response.ExploreChallengeStart> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/explore/challenge/start", new Dictionary<string, object>()
    {
      [nameof (target_player_id)] = (object) target_player_id,
      [nameof (total_combat)] = (object) total_combat
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.ExploreChallengeStart) null);
      }
      else
        callback(new WebAPI.Response.ExploreChallengeStart(json.Json));
    }));
  }

  public static Future<WebAPI.Response.ExploreDeckEdit> ExploreDeckEdit(
    int[] box_item_ids,
    string count,
    int deck_type,
    int[] defeat_enemy_count,
    int[] defeat_enemy_ids,
    int floor_id,
    int last_damage,
    int? last_enemy_id,
    int lose_count,
    int[] player_unit_ids,
    int progress,
    int state,
    int takeover_time,
    int total_combat,
    int waiting_time,
    int win_count,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.ExploreDeckEdit>((Func<Promise<WebAPI.Response.ExploreDeckEdit>, IEnumerator>) (promise => WebAPI.LoadExploreDeckEdit(promise, box_item_ids, count, deck_type, defeat_enemy_count, defeat_enemy_ids, floor_id, last_damage, last_enemy_id, lose_count, player_unit_ids, progress, state, takeover_time, total_combat, waiting_time, win_count, userErrorCallback)));
  }

  private static IEnumerator LoadExploreDeckEdit(
    Promise<WebAPI.Response.ExploreDeckEdit> promise,
    int[] box_item_ids,
    string count,
    int deck_type,
    int[] defeat_enemy_count,
    int[] defeat_enemy_ids,
    int floor_id,
    int last_damage,
    int? last_enemy_id,
    int lose_count,
    int[] player_unit_ids,
    int progress,
    int state,
    int takeover_time,
    int total_combat,
    int waiting_time,
    int win_count,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalExploreDeckEdit(box_item_ids, count, deck_type, defeat_enemy_count, defeat_enemy_ids, floor_id, last_damage, last_enemy_id, lose_count, player_unit_ids, progress, state, takeover_time, total_combat, waiting_time, win_count, (Action<WebAPI.Response.ExploreDeckEdit>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalExploreDeckEdit(
    int[] box_item_ids,
    string count,
    int deck_type,
    int[] defeat_enemy_count,
    int[] defeat_enemy_ids,
    int floor_id,
    int last_damage,
    int? last_enemy_id,
    int lose_count,
    int[] player_unit_ids,
    int progress,
    int state,
    int takeover_time,
    int total_combat,
    int waiting_time,
    int win_count,
    Action<WebAPI.Response.ExploreDeckEdit> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/explore/deck/edit", new Dictionary<string, object>()
    {
      [nameof (box_item_ids)] = (object) box_item_ids,
      [nameof (count)] = (object) count,
      [nameof (deck_type)] = (object) deck_type,
      [nameof (defeat_enemy_count)] = (object) defeat_enemy_count,
      [nameof (defeat_enemy_ids)] = (object) defeat_enemy_ids,
      [nameof (floor_id)] = (object) floor_id,
      [nameof (last_damage)] = (object) last_damage,
      [nameof (last_enemy_id)] = (object) last_enemy_id,
      [nameof (lose_count)] = (object) lose_count,
      [nameof (player_unit_ids)] = (object) player_unit_ids,
      [nameof (progress)] = (object) progress,
      [nameof (state)] = (object) state,
      [nameof (takeover_time)] = (object) takeover_time,
      [nameof (total_combat)] = (object) total_combat,
      [nameof (waiting_time)] = (object) waiting_time,
      [nameof (win_count)] = (object) win_count
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.ExploreDeckEdit) null);
      }
      else
        callback(new WebAPI.Response.ExploreDeckEdit(json.Json));
    }));
  }

  public static Future<WebAPI.Response.ExploreExploreGet> ExploreExploreGet(
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.ExploreExploreGet>((Func<Promise<WebAPI.Response.ExploreExploreGet>, IEnumerator>) (promise => WebAPI.LoadExploreExploreGet(promise, userErrorCallback)));
  }

  private static IEnumerator LoadExploreExploreGet(
    Promise<WebAPI.Response.ExploreExploreGet> promise,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalExploreExploreGet((Action<WebAPI.Response.ExploreExploreGet>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalExploreExploreGet(
    Action<WebAPI.Response.ExploreExploreGet> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Get("/explore/explore/get", (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.ExploreExploreGet) null);
      }
      else
        callback(new WebAPI.Response.ExploreExploreGet(json.Json));
    }));
  }

  public static Future<WebAPI.Response.ExploreExploreMoveFloor> ExploreExploreMoveFloor(
    int[] box_item_ids,
    string count,
    int[] defeat_enemy_count,
    int[] defeat_enemy_ids,
    int floor_id,
    int last_damage,
    int? last_enemy_id,
    int lose_count,
    int progress,
    int state,
    int takeover_time,
    int target_floor_id,
    int waiting_time,
    int win_count,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.ExploreExploreMoveFloor>((Func<Promise<WebAPI.Response.ExploreExploreMoveFloor>, IEnumerator>) (promise => WebAPI.LoadExploreExploreMoveFloor(promise, box_item_ids, count, defeat_enemy_count, defeat_enemy_ids, floor_id, last_damage, last_enemy_id, lose_count, progress, state, takeover_time, target_floor_id, waiting_time, win_count, userErrorCallback)));
  }

  private static IEnumerator LoadExploreExploreMoveFloor(
    Promise<WebAPI.Response.ExploreExploreMoveFloor> promise,
    int[] box_item_ids,
    string count,
    int[] defeat_enemy_count,
    int[] defeat_enemy_ids,
    int floor_id,
    int last_damage,
    int? last_enemy_id,
    int lose_count,
    int progress,
    int state,
    int takeover_time,
    int target_floor_id,
    int waiting_time,
    int win_count,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalExploreExploreMoveFloor(box_item_ids, count, defeat_enemy_count, defeat_enemy_ids, floor_id, last_damage, last_enemy_id, lose_count, progress, state, takeover_time, target_floor_id, waiting_time, win_count, (Action<WebAPI.Response.ExploreExploreMoveFloor>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalExploreExploreMoveFloor(
    int[] box_item_ids,
    string count,
    int[] defeat_enemy_count,
    int[] defeat_enemy_ids,
    int floor_id,
    int last_damage,
    int? last_enemy_id,
    int lose_count,
    int progress,
    int state,
    int takeover_time,
    int target_floor_id,
    int waiting_time,
    int win_count,
    Action<WebAPI.Response.ExploreExploreMoveFloor> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/explore/explore/move_floor", new Dictionary<string, object>()
    {
      [nameof (box_item_ids)] = (object) box_item_ids,
      [nameof (count)] = (object) count,
      [nameof (defeat_enemy_count)] = (object) defeat_enemy_count,
      [nameof (defeat_enemy_ids)] = (object) defeat_enemy_ids,
      [nameof (floor_id)] = (object) floor_id,
      [nameof (last_damage)] = (object) last_damage,
      [nameof (last_enemy_id)] = (object) last_enemy_id,
      [nameof (lose_count)] = (object) lose_count,
      [nameof (progress)] = (object) progress,
      [nameof (state)] = (object) state,
      [nameof (takeover_time)] = (object) takeover_time,
      [nameof (target_floor_id)] = (object) target_floor_id,
      [nameof (waiting_time)] = (object) waiting_time,
      [nameof (win_count)] = (object) win_count
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.ExploreExploreMoveFloor) null);
      }
      else
        callback(new WebAPI.Response.ExploreExploreMoveFloor(json.Json));
    }));
  }

  public static Future<WebAPI.Response.ExploreExploreReward> ExploreExploreReward(
    int[] box_item_ids,
    string count,
    int[] defeat_enemy_count,
    int[] defeat_enemy_ids,
    int floor_id,
    int last_damage,
    int? last_enemy_id,
    int lose_count,
    int progress,
    int state,
    int takeover_time,
    int waiting_time,
    int win_count,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.ExploreExploreReward>((Func<Promise<WebAPI.Response.ExploreExploreReward>, IEnumerator>) (promise => WebAPI.LoadExploreExploreReward(promise, box_item_ids, count, defeat_enemy_count, defeat_enemy_ids, floor_id, last_damage, last_enemy_id, lose_count, progress, state, takeover_time, waiting_time, win_count, userErrorCallback)));
  }

  private static IEnumerator LoadExploreExploreReward(
    Promise<WebAPI.Response.ExploreExploreReward> promise,
    int[] box_item_ids,
    string count,
    int[] defeat_enemy_count,
    int[] defeat_enemy_ids,
    int floor_id,
    int last_damage,
    int? last_enemy_id,
    int lose_count,
    int progress,
    int state,
    int takeover_time,
    int waiting_time,
    int win_count,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalExploreExploreReward(box_item_ids, count, defeat_enemy_count, defeat_enemy_ids, floor_id, last_damage, last_enemy_id, lose_count, progress, state, takeover_time, waiting_time, win_count, (Action<WebAPI.Response.ExploreExploreReward>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalExploreExploreReward(
    int[] box_item_ids,
    string count,
    int[] defeat_enemy_count,
    int[] defeat_enemy_ids,
    int floor_id,
    int last_damage,
    int? last_enemy_id,
    int lose_count,
    int progress,
    int state,
    int takeover_time,
    int waiting_time,
    int win_count,
    Action<WebAPI.Response.ExploreExploreReward> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/explore/explore/reward", new Dictionary<string, object>()
    {
      [nameof (box_item_ids)] = (object) box_item_ids,
      [nameof (count)] = (object) count,
      [nameof (defeat_enemy_count)] = (object) defeat_enemy_count,
      [nameof (defeat_enemy_ids)] = (object) defeat_enemy_ids,
      [nameof (floor_id)] = (object) floor_id,
      [nameof (last_damage)] = (object) last_damage,
      [nameof (last_enemy_id)] = (object) last_enemy_id,
      [nameof (lose_count)] = (object) lose_count,
      [nameof (progress)] = (object) progress,
      [nameof (state)] = (object) state,
      [nameof (takeover_time)] = (object) takeover_time,
      [nameof (waiting_time)] = (object) waiting_time,
      [nameof (win_count)] = (object) win_count
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.ExploreExploreReward) null);
      }
      else
        callback(new WebAPI.Response.ExploreExploreReward(json.Json));
    }));
  }

  public static Future<WebAPI.Response.ExploreExploreUpdate> ExploreExploreUpdate(
    int[] box_item_ids,
    string count,
    int[] defeat_enemy_count,
    int[] defeat_enemy_ids,
    int floor_id,
    int last_damage,
    int? last_enemy_id,
    int lose_count,
    int progress,
    int state,
    int takeover_time,
    int waiting_time,
    int win_count,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.ExploreExploreUpdate>((Func<Promise<WebAPI.Response.ExploreExploreUpdate>, IEnumerator>) (promise => WebAPI.LoadExploreExploreUpdate(promise, box_item_ids, count, defeat_enemy_count, defeat_enemy_ids, floor_id, last_damage, last_enemy_id, lose_count, progress, state, takeover_time, waiting_time, win_count, userErrorCallback)));
  }

  private static IEnumerator LoadExploreExploreUpdate(
    Promise<WebAPI.Response.ExploreExploreUpdate> promise,
    int[] box_item_ids,
    string count,
    int[] defeat_enemy_count,
    int[] defeat_enemy_ids,
    int floor_id,
    int last_damage,
    int? last_enemy_id,
    int lose_count,
    int progress,
    int state,
    int takeover_time,
    int waiting_time,
    int win_count,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalExploreExploreUpdate(box_item_ids, count, defeat_enemy_count, defeat_enemy_ids, floor_id, last_damage, last_enemy_id, lose_count, progress, state, takeover_time, waiting_time, win_count, (Action<WebAPI.Response.ExploreExploreUpdate>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalExploreExploreUpdate(
    int[] box_item_ids,
    string count,
    int[] defeat_enemy_count,
    int[] defeat_enemy_ids,
    int floor_id,
    int last_damage,
    int? last_enemy_id,
    int lose_count,
    int progress,
    int state,
    int takeover_time,
    int waiting_time,
    int win_count,
    Action<WebAPI.Response.ExploreExploreUpdate> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/explore/explore/update", new Dictionary<string, object>()
    {
      [nameof (box_item_ids)] = (object) box_item_ids,
      [nameof (count)] = (object) count,
      [nameof (defeat_enemy_count)] = (object) defeat_enemy_count,
      [nameof (defeat_enemy_ids)] = (object) defeat_enemy_ids,
      [nameof (floor_id)] = (object) floor_id,
      [nameof (last_damage)] = (object) last_damage,
      [nameof (last_enemy_id)] = (object) last_enemy_id,
      [nameof (lose_count)] = (object) lose_count,
      [nameof (progress)] = (object) progress,
      [nameof (state)] = (object) state,
      [nameof (takeover_time)] = (object) takeover_time,
      [nameof (waiting_time)] = (object) waiting_time,
      [nameof (win_count)] = (object) win_count
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.ExploreExploreUpdate) null);
      }
      else
        callback(new WebAPI.Response.ExploreExploreUpdate(json.Json));
    }));
  }

  public static Future<WebAPI.Response.ExploreRankingRanking> ExploreRankingRanking(
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.ExploreRankingRanking>((Func<Promise<WebAPI.Response.ExploreRankingRanking>, IEnumerator>) (promise => WebAPI.LoadExploreRankingRanking(promise, userErrorCallback)));
  }

  private static IEnumerator LoadExploreRankingRanking(
    Promise<WebAPI.Response.ExploreRankingRanking> promise,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalExploreRankingRanking((Action<WebAPI.Response.ExploreRankingRanking>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalExploreRankingRanking(
    Action<WebAPI.Response.ExploreRankingRanking> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Get("/explore/ranking/ranking", (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.ExploreRankingRanking) null);
      }
      else
        callback(new WebAPI.Response.ExploreRankingRanking(json.Json));
    }));
  }

  public static Future<WebAPI.Response.ExploreRankingResult> ExploreRankingResult(
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.ExploreRankingResult>((Func<Promise<WebAPI.Response.ExploreRankingResult>, IEnumerator>) (promise => WebAPI.LoadExploreRankingResult(promise, userErrorCallback)));
  }

  private static IEnumerator LoadExploreRankingResult(
    Promise<WebAPI.Response.ExploreRankingResult> promise,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalExploreRankingResult((Action<WebAPI.Response.ExploreRankingResult>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalExploreRankingResult(
    Action<WebAPI.Response.ExploreRankingResult> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Get("/explore/ranking/result", (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.ExploreRankingResult) null);
      }
      else
        callback(new WebAPI.Response.ExploreRankingResult(json.Json));
    }));
  }

  public static Future<WebAPI.Response.FriendAccept> FriendAccept(
    string[] target_player_ids,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.FriendAccept>((Func<Promise<WebAPI.Response.FriendAccept>, IEnumerator>) (promise => WebAPI.LoadFriendAccept(promise, target_player_ids, userErrorCallback)));
  }

  private static IEnumerator LoadFriendAccept(
    Promise<WebAPI.Response.FriendAccept> promise,
    string[] target_player_ids,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalFriendAccept(target_player_ids, (Action<WebAPI.Response.FriendAccept>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalFriendAccept(
    string[] target_player_ids,
    Action<WebAPI.Response.FriendAccept> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/friend/accept", new Dictionary<string, object>()
    {
      [nameof (target_player_ids)] = (object) target_player_ids
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.FriendAccept) null);
      }
      else
        callback(new WebAPI.Response.FriendAccept(json.Json));
    }));
  }

  public static Future<WebAPI.Response.FriendApply> FriendApply(
    string[] target_player_ids,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.FriendApply>((Func<Promise<WebAPI.Response.FriendApply>, IEnumerator>) (promise => WebAPI.LoadFriendApply(promise, target_player_ids, userErrorCallback)));
  }

  private static IEnumerator LoadFriendApply(
    Promise<WebAPI.Response.FriendApply> promise,
    string[] target_player_ids,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalFriendApply(target_player_ids, (Action<WebAPI.Response.FriendApply>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalFriendApply(
    string[] target_player_ids,
    Action<WebAPI.Response.FriendApply> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/friend/apply", new Dictionary<string, object>()
    {
      [nameof (target_player_ids)] = (object) target_player_ids
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.FriendApply) null);
      }
      else
        callback(new WebAPI.Response.FriendApply(json.Json));
    }));
  }

  public static Future<WebAPI.Response.FriendCancel> FriendCancel(
    string[] target_player_ids,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.FriendCancel>((Func<Promise<WebAPI.Response.FriendCancel>, IEnumerator>) (promise => WebAPI.LoadFriendCancel(promise, target_player_ids, userErrorCallback)));
  }

  private static IEnumerator LoadFriendCancel(
    Promise<WebAPI.Response.FriendCancel> promise,
    string[] target_player_ids,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalFriendCancel(target_player_ids, (Action<WebAPI.Response.FriendCancel>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalFriendCancel(
    string[] target_player_ids,
    Action<WebAPI.Response.FriendCancel> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/friend/cancel", new Dictionary<string, object>()
    {
      [nameof (target_player_ids)] = (object) target_player_ids
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.FriendCancel) null);
      }
      else
        callback(new WebAPI.Response.FriendCancel(json.Json));
    }));
  }

  public static Future<WebAPI.Response.FriendDetail> FriendDetail(
    string target_player_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.FriendDetail>((Func<Promise<WebAPI.Response.FriendDetail>, IEnumerator>) (promise => WebAPI.LoadFriendDetail(promise, target_player_id, userErrorCallback)));
  }

  private static IEnumerator LoadFriendDetail(
    Promise<WebAPI.Response.FriendDetail> promise,
    string target_player_id,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalFriendDetail(target_player_id, (Action<WebAPI.Response.FriendDetail>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalFriendDetail(
    string target_player_id,
    Action<WebAPI.Response.FriendDetail> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/friend/detail", new Dictionary<string, object>()
    {
      [nameof (target_player_id)] = (object) target_player_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.FriendDetail) null);
      }
      else
        callback(new WebAPI.Response.FriendDetail(json.Json));
    }));
  }

  public static Future<WebAPI.Response.FriendFavorite> FriendFavorite(
    string[] target_player_ids,
    string[] unlock_target_player_ids,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.FriendFavorite>((Func<Promise<WebAPI.Response.FriendFavorite>, IEnumerator>) (promise => WebAPI.LoadFriendFavorite(promise, target_player_ids, unlock_target_player_ids, userErrorCallback)));
  }

  private static IEnumerator LoadFriendFavorite(
    Promise<WebAPI.Response.FriendFavorite> promise,
    string[] target_player_ids,
    string[] unlock_target_player_ids,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalFriendFavorite(target_player_ids, unlock_target_player_ids, (Action<WebAPI.Response.FriendFavorite>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalFriendFavorite(
    string[] target_player_ids,
    string[] unlock_target_player_ids,
    Action<WebAPI.Response.FriendFavorite> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/friend/favorite", new Dictionary<string, object>()
    {
      [nameof (target_player_ids)] = (object) target_player_ids,
      [nameof (unlock_target_player_ids)] = (object) unlock_target_player_ids
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.FriendFavorite) null);
      }
      else
        callback(new WebAPI.Response.FriendFavorite(json.Json));
    }));
  }

  public static Future<WebAPI.Response.FriendFriends> FriendFriends(
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.FriendFriends>((Func<Promise<WebAPI.Response.FriendFriends>, IEnumerator>) (promise => WebAPI.LoadFriendFriends(promise, userErrorCallback)));
  }

  private static IEnumerator LoadFriendFriends(
    Promise<WebAPI.Response.FriendFriends> promise,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalFriendFriends((Action<WebAPI.Response.FriendFriends>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalFriendFriends(
    Action<WebAPI.Response.FriendFriends> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Get("/friend/friends", (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.FriendFriends) null);
      }
      else
        callback(new WebAPI.Response.FriendFriends(json.Json));
    }));
  }

  public static Future<WebAPI.Response.FriendPvpClassMatchHistory> FriendPvpClassMatchHistory(
    string target_player_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.FriendPvpClassMatchHistory>((Func<Promise<WebAPI.Response.FriendPvpClassMatchHistory>, IEnumerator>) (promise => WebAPI.LoadFriendPvpClassMatchHistory(promise, target_player_id, userErrorCallback)));
  }

  private static IEnumerator LoadFriendPvpClassMatchHistory(
    Promise<WebAPI.Response.FriendPvpClassMatchHistory> promise,
    string target_player_id,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalFriendPvpClassMatchHistory(target_player_id, (Action<WebAPI.Response.FriendPvpClassMatchHistory>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalFriendPvpClassMatchHistory(
    string target_player_id,
    Action<WebAPI.Response.FriendPvpClassMatchHistory> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/friend/pvp_class_match_history", new Dictionary<string, object>()
    {
      [nameof (target_player_id)] = (object) target_player_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.FriendPvpClassMatchHistory) null);
      }
      else
        callback(new WebAPI.Response.FriendPvpClassMatchHistory(json.Json));
    }));
  }

  public static Future<WebAPI.Response.FriendReject> FriendReject(
    string[] target_player_ids,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.FriendReject>((Func<Promise<WebAPI.Response.FriendReject>, IEnumerator>) (promise => WebAPI.LoadFriendReject(promise, target_player_ids, userErrorCallback)));
  }

  private static IEnumerator LoadFriendReject(
    Promise<WebAPI.Response.FriendReject> promise,
    string[] target_player_ids,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalFriendReject(target_player_ids, (Action<WebAPI.Response.FriendReject>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalFriendReject(
    string[] target_player_ids,
    Action<WebAPI.Response.FriendReject> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/friend/reject", new Dictionary<string, object>()
    {
      [nameof (target_player_ids)] = (object) target_player_ids
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.FriendReject) null);
      }
      else
        callback(new WebAPI.Response.FriendReject(json.Json));
    }));
  }

  public static Future<WebAPI.Response.FriendRemove> FriendRemove(
    string[] target_player_ids,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.FriendRemove>((Func<Promise<WebAPI.Response.FriendRemove>, IEnumerator>) (promise => WebAPI.LoadFriendRemove(promise, target_player_ids, userErrorCallback)));
  }

  private static IEnumerator LoadFriendRemove(
    Promise<WebAPI.Response.FriendRemove> promise,
    string[] target_player_ids,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalFriendRemove(target_player_ids, (Action<WebAPI.Response.FriendRemove>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalFriendRemove(
    string[] target_player_ids,
    Action<WebAPI.Response.FriendRemove> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/friend/remove", new Dictionary<string, object>()
    {
      [nameof (target_player_ids)] = (object) target_player_ids
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.FriendRemove) null);
      }
      else
        callback(new WebAPI.Response.FriendRemove(json.Json));
    }));
  }

  public static Future<WebAPI.Response.FriendStatus> FriendStatus(
    string target_player_id,
    int target_player_unit_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.FriendStatus>((Func<Promise<WebAPI.Response.FriendStatus>, IEnumerator>) (promise => WebAPI.LoadFriendStatus(promise, target_player_id, target_player_unit_id, userErrorCallback)));
  }

  private static IEnumerator LoadFriendStatus(
    Promise<WebAPI.Response.FriendStatus> promise,
    string target_player_id,
    int target_player_unit_id,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalFriendStatus(target_player_id, target_player_unit_id, (Action<WebAPI.Response.FriendStatus>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalFriendStatus(
    string target_player_id,
    int target_player_unit_id,
    Action<WebAPI.Response.FriendStatus> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/friend/status", new Dictionary<string, object>()
    {
      [nameof (target_player_id)] = (object) target_player_id,
      [nameof (target_player_unit_id)] = (object) target_player_unit_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.FriendStatus) null);
      }
      else
        callback(new WebAPI.Response.FriendStatus(json.Json));
    }));
  }

  public static Future<WebAPI.Response.Gacha> Gacha(
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.Gacha>((Func<Promise<WebAPI.Response.Gacha>, IEnumerator>) (promise => WebAPI.LoadGacha(promise, userErrorCallback)));
  }

  private static IEnumerator LoadGacha(
    Promise<WebAPI.Response.Gacha> promise,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalGacha((Action<WebAPI.Response.Gacha>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalGacha(
    Action<WebAPI.Response.Gacha> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Get("/gacha", (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.Gacha) null);
      }
      else
        callback(new WebAPI.Response.Gacha(json.Json));
    }));
  }

  public static Future<WebAPI.Response.GachaG001ChargeMultiPay> GachaG001ChargeMultiPay(
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.GachaG001ChargeMultiPay>((Func<Promise<WebAPI.Response.GachaG001ChargeMultiPay>, IEnumerator>) (promise => WebAPI.LoadGachaG001ChargeMultiPay(promise, gacha_id, userErrorCallback)));
  }

  private static IEnumerator LoadGachaG001ChargeMultiPay(
    Promise<WebAPI.Response.GachaG001ChargeMultiPay> promise,
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalGachaG001ChargeMultiPay(gacha_id, (Action<WebAPI.Response.GachaG001ChargeMultiPay>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalGachaG001ChargeMultiPay(
    int gacha_id,
    Action<WebAPI.Response.GachaG001ChargeMultiPay> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/gacha/g001_charge/multi/pay", new Dictionary<string, object>()
    {
      [nameof (gacha_id)] = (object) gacha_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GachaG001ChargeMultiPay) null);
      }
      else
        callback(new WebAPI.Response.GachaG001ChargeMultiPay(json.Json));
    }));
  }

  public static Future<WebAPI.Response.GachaG001ChargePay> GachaG001ChargePay(
    int execute_count,
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.GachaG001ChargePay>((Func<Promise<WebAPI.Response.GachaG001ChargePay>, IEnumerator>) (promise => WebAPI.LoadGachaG001ChargePay(promise, execute_count, gacha_id, userErrorCallback)));
  }

  private static IEnumerator LoadGachaG001ChargePay(
    Promise<WebAPI.Response.GachaG001ChargePay> promise,
    int execute_count,
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalGachaG001ChargePay(execute_count, gacha_id, (Action<WebAPI.Response.GachaG001ChargePay>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalGachaG001ChargePay(
    int execute_count,
    int gacha_id,
    Action<WebAPI.Response.GachaG001ChargePay> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/gacha/g001_charge/pay", new Dictionary<string, object>()
    {
      [nameof (execute_count)] = (object) execute_count,
      [nameof (gacha_id)] = (object) gacha_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GachaG001ChargePay) null);
      }
      else
        callback(new WebAPI.Response.GachaG001ChargePay(json.Json));
    }));
  }

  public static Future<WebAPI.Response.GachaG002FriendpointPay> GachaG002FriendpointPay(
    int execute_count,
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.GachaG002FriendpointPay>((Func<Promise<WebAPI.Response.GachaG002FriendpointPay>, IEnumerator>) (promise => WebAPI.LoadGachaG002FriendpointPay(promise, execute_count, gacha_id, userErrorCallback)));
  }

  private static IEnumerator LoadGachaG002FriendpointPay(
    Promise<WebAPI.Response.GachaG002FriendpointPay> promise,
    int execute_count,
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalGachaG002FriendpointPay(execute_count, gacha_id, (Action<WebAPI.Response.GachaG002FriendpointPay>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalGachaG002FriendpointPay(
    int execute_count,
    int gacha_id,
    Action<WebAPI.Response.GachaG002FriendpointPay> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/gacha/g002_friendpoint/pay", new Dictionary<string, object>()
    {
      [nameof (execute_count)] = (object) execute_count,
      [nameof (gacha_id)] = (object) gacha_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GachaG002FriendpointPay) null);
      }
      else
        callback(new WebAPI.Response.GachaG002FriendpointPay(json.Json));
    }));
  }

  public static Future<WebAPI.Response.GachaG004TicketPay> GachaG004TicketPay(
    int execute_count,
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.GachaG004TicketPay>((Func<Promise<WebAPI.Response.GachaG004TicketPay>, IEnumerator>) (promise => WebAPI.LoadGachaG004TicketPay(promise, execute_count, gacha_id, userErrorCallback)));
  }

  private static IEnumerator LoadGachaG004TicketPay(
    Promise<WebAPI.Response.GachaG004TicketPay> promise,
    int execute_count,
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalGachaG004TicketPay(execute_count, gacha_id, (Action<WebAPI.Response.GachaG004TicketPay>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalGachaG004TicketPay(
    int execute_count,
    int gacha_id,
    Action<WebAPI.Response.GachaG004TicketPay> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/gacha/g004_ticket/pay", new Dictionary<string, object>()
    {
      [nameof (execute_count)] = (object) execute_count,
      [nameof (gacha_id)] = (object) gacha_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GachaG004TicketPay) null);
      }
      else
        callback(new WebAPI.Response.GachaG004TicketPay(json.Json));
    }));
  }

  public static Future<WebAPI.Response.GachaG005NewbieMultiPay> GachaG005NewbieMultiPay(
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.GachaG005NewbieMultiPay>((Func<Promise<WebAPI.Response.GachaG005NewbieMultiPay>, IEnumerator>) (promise => WebAPI.LoadGachaG005NewbieMultiPay(promise, gacha_id, userErrorCallback)));
  }

  private static IEnumerator LoadGachaG005NewbieMultiPay(
    Promise<WebAPI.Response.GachaG005NewbieMultiPay> promise,
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalGachaG005NewbieMultiPay(gacha_id, (Action<WebAPI.Response.GachaG005NewbieMultiPay>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalGachaG005NewbieMultiPay(
    int gacha_id,
    Action<WebAPI.Response.GachaG005NewbieMultiPay> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/gacha/g005_newbie/multi/pay", new Dictionary<string, object>()
    {
      [nameof (gacha_id)] = (object) gacha_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GachaG005NewbieMultiPay) null);
      }
      else
        callback(new WebAPI.Response.GachaG005NewbieMultiPay(json.Json));
    }));
  }

  public static Future<WebAPI.Response.GachaG005NewbiePay> GachaG005NewbiePay(
    int execute_count,
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.GachaG005NewbiePay>((Func<Promise<WebAPI.Response.GachaG005NewbiePay>, IEnumerator>) (promise => WebAPI.LoadGachaG005NewbiePay(promise, execute_count, gacha_id, userErrorCallback)));
  }

  private static IEnumerator LoadGachaG005NewbiePay(
    Promise<WebAPI.Response.GachaG005NewbiePay> promise,
    int execute_count,
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalGachaG005NewbiePay(execute_count, gacha_id, (Action<WebAPI.Response.GachaG005NewbiePay>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalGachaG005NewbiePay(
    int execute_count,
    int gacha_id,
    Action<WebAPI.Response.GachaG005NewbiePay> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/gacha/g005_newbie/pay", new Dictionary<string, object>()
    {
      [nameof (execute_count)] = (object) execute_count,
      [nameof (gacha_id)] = (object) gacha_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GachaG005NewbiePay) null);
      }
      else
        callback(new WebAPI.Response.GachaG005NewbiePay(json.Json));
    }));
  }

  public static Future<WebAPI.Response.GachaG007PanelMultiPay> GachaG007PanelMultiPay(
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.GachaG007PanelMultiPay>((Func<Promise<WebAPI.Response.GachaG007PanelMultiPay>, IEnumerator>) (promise => WebAPI.LoadGachaG007PanelMultiPay(promise, gacha_id, userErrorCallback)));
  }

  private static IEnumerator LoadGachaG007PanelMultiPay(
    Promise<WebAPI.Response.GachaG007PanelMultiPay> promise,
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalGachaG007PanelMultiPay(gacha_id, (Action<WebAPI.Response.GachaG007PanelMultiPay>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalGachaG007PanelMultiPay(
    int gacha_id,
    Action<WebAPI.Response.GachaG007PanelMultiPay> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/gacha/g007_panel/multi/pay", new Dictionary<string, object>()
    {
      [nameof (gacha_id)] = (object) gacha_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GachaG007PanelMultiPay) null);
      }
      else
        callback(new WebAPI.Response.GachaG007PanelMultiPay(json.Json));
    }));
  }

  public static Future<WebAPI.Response.GachaG007PanelPanelInfo> GachaG007PanelPanelInfo(
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.GachaG007PanelPanelInfo>((Func<Promise<WebAPI.Response.GachaG007PanelPanelInfo>, IEnumerator>) (promise => WebAPI.LoadGachaG007PanelPanelInfo(promise, userErrorCallback)));
  }

  private static IEnumerator LoadGachaG007PanelPanelInfo(
    Promise<WebAPI.Response.GachaG007PanelPanelInfo> promise,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalGachaG007PanelPanelInfo((Action<WebAPI.Response.GachaG007PanelPanelInfo>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalGachaG007PanelPanelInfo(
    Action<WebAPI.Response.GachaG007PanelPanelInfo> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Get("/gacha/g007_panel/panel/info", (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GachaG007PanelPanelInfo) null);
      }
      else
        callback(new WebAPI.Response.GachaG007PanelPanelInfo(json.Json));
    }));
  }

  public static Future<WebAPI.Response.GachaG007PanelPanelReset> GachaG007PanelPanelReset(
    int sheet_series_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.GachaG007PanelPanelReset>((Func<Promise<WebAPI.Response.GachaG007PanelPanelReset>, IEnumerator>) (promise => WebAPI.LoadGachaG007PanelPanelReset(promise, sheet_series_id, userErrorCallback)));
  }

  private static IEnumerator LoadGachaG007PanelPanelReset(
    Promise<WebAPI.Response.GachaG007PanelPanelReset> promise,
    int sheet_series_id,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalGachaG007PanelPanelReset(sheet_series_id, (Action<WebAPI.Response.GachaG007PanelPanelReset>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalGachaG007PanelPanelReset(
    int sheet_series_id,
    Action<WebAPI.Response.GachaG007PanelPanelReset> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/gacha/g007_panel/panel/reset", new Dictionary<string, object>()
    {
      [nameof (sheet_series_id)] = (object) sheet_series_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GachaG007PanelPanelReset) null);
      }
      else
        callback(new WebAPI.Response.GachaG007PanelPanelReset(json.Json));
    }));
  }

  public static Future<WebAPI.Response.GachaG007PanelPay> GachaG007PanelPay(
    int execute_count,
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.GachaG007PanelPay>((Func<Promise<WebAPI.Response.GachaG007PanelPay>, IEnumerator>) (promise => WebAPI.LoadGachaG007PanelPay(promise, execute_count, gacha_id, userErrorCallback)));
  }

  private static IEnumerator LoadGachaG007PanelPay(
    Promise<WebAPI.Response.GachaG007PanelPay> promise,
    int execute_count,
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalGachaG007PanelPay(execute_count, gacha_id, (Action<WebAPI.Response.GachaG007PanelPay>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalGachaG007PanelPay(
    int execute_count,
    int gacha_id,
    Action<WebAPI.Response.GachaG007PanelPay> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/gacha/g007_panel/pay", new Dictionary<string, object>()
    {
      [nameof (execute_count)] = (object) execute_count,
      [nameof (gacha_id)] = (object) gacha_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GachaG007PanelPay) null);
      }
      else
        callback(new WebAPI.Response.GachaG007PanelPay(json.Json));
    }));
  }

  public static Future<WebAPI.Response.GachaG008GiftMultiPay> GachaG008GiftMultiPay(
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.GachaG008GiftMultiPay>((Func<Promise<WebAPI.Response.GachaG008GiftMultiPay>, IEnumerator>) (promise => WebAPI.LoadGachaG008GiftMultiPay(promise, gacha_id, userErrorCallback)));
  }

  private static IEnumerator LoadGachaG008GiftMultiPay(
    Promise<WebAPI.Response.GachaG008GiftMultiPay> promise,
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalGachaG008GiftMultiPay(gacha_id, (Action<WebAPI.Response.GachaG008GiftMultiPay>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalGachaG008GiftMultiPay(
    int gacha_id,
    Action<WebAPI.Response.GachaG008GiftMultiPay> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/gacha/g008_gift/multi/pay", new Dictionary<string, object>()
    {
      [nameof (gacha_id)] = (object) gacha_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GachaG008GiftMultiPay) null);
      }
      else
        callback(new WebAPI.Response.GachaG008GiftMultiPay(json.Json));
    }));
  }

  public static Future<WebAPI.Response.GachaG008GiftPay> GachaG008GiftPay(
    int execute_count,
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.GachaG008GiftPay>((Func<Promise<WebAPI.Response.GachaG008GiftPay>, IEnumerator>) (promise => WebAPI.LoadGachaG008GiftPay(promise, execute_count, gacha_id, userErrorCallback)));
  }

  private static IEnumerator LoadGachaG008GiftPay(
    Promise<WebAPI.Response.GachaG008GiftPay> promise,
    int execute_count,
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalGachaG008GiftPay(execute_count, gacha_id, (Action<WebAPI.Response.GachaG008GiftPay>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalGachaG008GiftPay(
    int execute_count,
    int gacha_id,
    Action<WebAPI.Response.GachaG008GiftPay> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/gacha/g008_gift/pay", new Dictionary<string, object>()
    {
      [nameof (execute_count)] = (object) execute_count,
      [nameof (gacha_id)] = (object) gacha_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GachaG008GiftPay) null);
      }
      else
        callback(new WebAPI.Response.GachaG008GiftPay(json.Json));
    }));
  }

  public static Future<WebAPI.Response.GachaG009StatusupMultiPay> GachaG009StatusupMultiPay(
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.GachaG009StatusupMultiPay>((Func<Promise<WebAPI.Response.GachaG009StatusupMultiPay>, IEnumerator>) (promise => WebAPI.LoadGachaG009StatusupMultiPay(promise, gacha_id, userErrorCallback)));
  }

  private static IEnumerator LoadGachaG009StatusupMultiPay(
    Promise<WebAPI.Response.GachaG009StatusupMultiPay> promise,
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalGachaG009StatusupMultiPay(gacha_id, (Action<WebAPI.Response.GachaG009StatusupMultiPay>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalGachaG009StatusupMultiPay(
    int gacha_id,
    Action<WebAPI.Response.GachaG009StatusupMultiPay> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/gacha/g009_statusup/multi/pay", new Dictionary<string, object>()
    {
      [nameof (gacha_id)] = (object) gacha_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GachaG009StatusupMultiPay) null);
      }
      else
        callback(new WebAPI.Response.GachaG009StatusupMultiPay(json.Json));
    }));
  }

  public static Future<WebAPI.Response.GachaG009StatusupPay> GachaG009StatusupPay(
    int execute_count,
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.GachaG009StatusupPay>((Func<Promise<WebAPI.Response.GachaG009StatusupPay>, IEnumerator>) (promise => WebAPI.LoadGachaG009StatusupPay(promise, execute_count, gacha_id, userErrorCallback)));
  }

  private static IEnumerator LoadGachaG009StatusupPay(
    Promise<WebAPI.Response.GachaG009StatusupPay> promise,
    int execute_count,
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalGachaG009StatusupPay(execute_count, gacha_id, (Action<WebAPI.Response.GachaG009StatusupPay>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalGachaG009StatusupPay(
    int execute_count,
    int gacha_id,
    Action<WebAPI.Response.GachaG009StatusupPay> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/gacha/g009_statusup/pay", new Dictionary<string, object>()
    {
      [nameof (execute_count)] = (object) execute_count,
      [nameof (gacha_id)] = (object) gacha_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GachaG009StatusupPay) null);
      }
      else
        callback(new WebAPI.Response.GachaG009StatusupPay(json.Json));
    }));
  }

  public static Future<WebAPI.Response.GachaG010ChargeMultiPay> GachaG010ChargeMultiPay(
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.GachaG010ChargeMultiPay>((Func<Promise<WebAPI.Response.GachaG010ChargeMultiPay>, IEnumerator>) (promise => WebAPI.LoadGachaG010ChargeMultiPay(promise, gacha_id, userErrorCallback)));
  }

  private static IEnumerator LoadGachaG010ChargeMultiPay(
    Promise<WebAPI.Response.GachaG010ChargeMultiPay> promise,
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalGachaG010ChargeMultiPay(gacha_id, (Action<WebAPI.Response.GachaG010ChargeMultiPay>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalGachaG010ChargeMultiPay(
    int gacha_id,
    Action<WebAPI.Response.GachaG010ChargeMultiPay> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/gacha/g010_charge/multi/pay", new Dictionary<string, object>()
    {
      [nameof (gacha_id)] = (object) gacha_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GachaG010ChargeMultiPay) null);
      }
      else
        callback(new WebAPI.Response.GachaG010ChargeMultiPay(json.Json));
    }));
  }

  public static Future<WebAPI.Response.GachaG010ChargePay> GachaG010ChargePay(
    int execute_count,
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.GachaG010ChargePay>((Func<Promise<WebAPI.Response.GachaG010ChargePay>, IEnumerator>) (promise => WebAPI.LoadGachaG010ChargePay(promise, execute_count, gacha_id, userErrorCallback)));
  }

  private static IEnumerator LoadGachaG010ChargePay(
    Promise<WebAPI.Response.GachaG010ChargePay> promise,
    int execute_count,
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalGachaG010ChargePay(execute_count, gacha_id, (Action<WebAPI.Response.GachaG010ChargePay>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalGachaG010ChargePay(
    int execute_count,
    int gacha_id,
    Action<WebAPI.Response.GachaG010ChargePay> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/gacha/g010_charge/pay", new Dictionary<string, object>()
    {
      [nameof (execute_count)] = (object) execute_count,
      [nameof (gacha_id)] = (object) gacha_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GachaG010ChargePay) null);
      }
      else
        callback(new WebAPI.Response.GachaG010ChargePay(json.Json));
    }));
  }

  public static Future<WebAPI.Response.GachaG011GiftMultiPay> GachaG011GiftMultiPay(
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.GachaG011GiftMultiPay>((Func<Promise<WebAPI.Response.GachaG011GiftMultiPay>, IEnumerator>) (promise => WebAPI.LoadGachaG011GiftMultiPay(promise, gacha_id, userErrorCallback)));
  }

  private static IEnumerator LoadGachaG011GiftMultiPay(
    Promise<WebAPI.Response.GachaG011GiftMultiPay> promise,
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalGachaG011GiftMultiPay(gacha_id, (Action<WebAPI.Response.GachaG011GiftMultiPay>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalGachaG011GiftMultiPay(
    int gacha_id,
    Action<WebAPI.Response.GachaG011GiftMultiPay> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/gacha/g011_gift/multi/pay", new Dictionary<string, object>()
    {
      [nameof (gacha_id)] = (object) gacha_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GachaG011GiftMultiPay) null);
      }
      else
        callback(new WebAPI.Response.GachaG011GiftMultiPay(json.Json));
    }));
  }

  public static Future<WebAPI.Response.GachaG011GiftPay> GachaG011GiftPay(
    int execute_count,
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.GachaG011GiftPay>((Func<Promise<WebAPI.Response.GachaG011GiftPay>, IEnumerator>) (promise => WebAPI.LoadGachaG011GiftPay(promise, execute_count, gacha_id, userErrorCallback)));
  }

  private static IEnumerator LoadGachaG011GiftPay(
    Promise<WebAPI.Response.GachaG011GiftPay> promise,
    int execute_count,
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalGachaG011GiftPay(execute_count, gacha_id, (Action<WebAPI.Response.GachaG011GiftPay>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalGachaG011GiftPay(
    int execute_count,
    int gacha_id,
    Action<WebAPI.Response.GachaG011GiftPay> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/gacha/g011_gift/pay", new Dictionary<string, object>()
    {
      [nameof (execute_count)] = (object) execute_count,
      [nameof (gacha_id)] = (object) gacha_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GachaG011GiftPay) null);
      }
      else
        callback(new WebAPI.Response.GachaG011GiftPay(json.Json));
    }));
  }

  public static Future<WebAPI.Response.GachaG012FriendpointPay> GachaG012FriendpointPay(
    int execute_count,
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.GachaG012FriendpointPay>((Func<Promise<WebAPI.Response.GachaG012FriendpointPay>, IEnumerator>) (promise => WebAPI.LoadGachaG012FriendpointPay(promise, execute_count, gacha_id, userErrorCallback)));
  }

  private static IEnumerator LoadGachaG012FriendpointPay(
    Promise<WebAPI.Response.GachaG012FriendpointPay> promise,
    int execute_count,
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalGachaG012FriendpointPay(execute_count, gacha_id, (Action<WebAPI.Response.GachaG012FriendpointPay>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalGachaG012FriendpointPay(
    int execute_count,
    int gacha_id,
    Action<WebAPI.Response.GachaG012FriendpointPay> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/gacha/g012_friendpoint/pay", new Dictionary<string, object>()
    {
      [nameof (execute_count)] = (object) execute_count,
      [nameof (gacha_id)] = (object) gacha_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GachaG012FriendpointPay) null);
      }
      else
        callback(new WebAPI.Response.GachaG012FriendpointPay(json.Json));
    }));
  }

  public static Future<WebAPI.Response.GachaG013FriendpointPay> GachaG013FriendpointPay(
    int execute_count,
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.GachaG013FriendpointPay>((Func<Promise<WebAPI.Response.GachaG013FriendpointPay>, IEnumerator>) (promise => WebAPI.LoadGachaG013FriendpointPay(promise, execute_count, gacha_id, userErrorCallback)));
  }

  private static IEnumerator LoadGachaG013FriendpointPay(
    Promise<WebAPI.Response.GachaG013FriendpointPay> promise,
    int execute_count,
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalGachaG013FriendpointPay(execute_count, gacha_id, (Action<WebAPI.Response.GachaG013FriendpointPay>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalGachaG013FriendpointPay(
    int execute_count,
    int gacha_id,
    Action<WebAPI.Response.GachaG013FriendpointPay> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/gacha/g013_friendpoint/pay", new Dictionary<string, object>()
    {
      [nameof (execute_count)] = (object) execute_count,
      [nameof (gacha_id)] = (object) gacha_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GachaG013FriendpointPay) null);
      }
      else
        callback(new WebAPI.Response.GachaG013FriendpointPay(json.Json));
    }));
  }

  public static Future<WebAPI.Response.GachaG014ChargeMultiPay> GachaG014ChargeMultiPay(
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.GachaG014ChargeMultiPay>((Func<Promise<WebAPI.Response.GachaG014ChargeMultiPay>, IEnumerator>) (promise => WebAPI.LoadGachaG014ChargeMultiPay(promise, gacha_id, userErrorCallback)));
  }

  private static IEnumerator LoadGachaG014ChargeMultiPay(
    Promise<WebAPI.Response.GachaG014ChargeMultiPay> promise,
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalGachaG014ChargeMultiPay(gacha_id, (Action<WebAPI.Response.GachaG014ChargeMultiPay>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalGachaG014ChargeMultiPay(
    int gacha_id,
    Action<WebAPI.Response.GachaG014ChargeMultiPay> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/gacha/g014_charge/multi/pay", new Dictionary<string, object>()
    {
      [nameof (gacha_id)] = (object) gacha_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GachaG014ChargeMultiPay) null);
      }
      else
        callback(new WebAPI.Response.GachaG014ChargeMultiPay(json.Json));
    }));
  }

  public static Future<WebAPI.Response.GachaG014ChargePay> GachaG014ChargePay(
    int execute_count,
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.GachaG014ChargePay>((Func<Promise<WebAPI.Response.GachaG014ChargePay>, IEnumerator>) (promise => WebAPI.LoadGachaG014ChargePay(promise, execute_count, gacha_id, userErrorCallback)));
  }

  private static IEnumerator LoadGachaG014ChargePay(
    Promise<WebAPI.Response.GachaG014ChargePay> promise,
    int execute_count,
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalGachaG014ChargePay(execute_count, gacha_id, (Action<WebAPI.Response.GachaG014ChargePay>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalGachaG014ChargePay(
    int execute_count,
    int gacha_id,
    Action<WebAPI.Response.GachaG014ChargePay> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/gacha/g014_charge/pay", new Dictionary<string, object>()
    {
      [nameof (execute_count)] = (object) execute_count,
      [nameof (gacha_id)] = (object) gacha_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GachaG014ChargePay) null);
      }
      else
        callback(new WebAPI.Response.GachaG014ChargePay(json.Json));
    }));
  }

  public static Future<WebAPI.Response.GachaG015ChargeMultiPay> GachaG015ChargeMultiPay(
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.GachaG015ChargeMultiPay>((Func<Promise<WebAPI.Response.GachaG015ChargeMultiPay>, IEnumerator>) (promise => WebAPI.LoadGachaG015ChargeMultiPay(promise, gacha_id, userErrorCallback)));
  }

  private static IEnumerator LoadGachaG015ChargeMultiPay(
    Promise<WebAPI.Response.GachaG015ChargeMultiPay> promise,
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalGachaG015ChargeMultiPay(gacha_id, (Action<WebAPI.Response.GachaG015ChargeMultiPay>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalGachaG015ChargeMultiPay(
    int gacha_id,
    Action<WebAPI.Response.GachaG015ChargeMultiPay> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/gacha/g015_charge/multi/pay", new Dictionary<string, object>()
    {
      [nameof (gacha_id)] = (object) gacha_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GachaG015ChargeMultiPay) null);
      }
      else
        callback(new WebAPI.Response.GachaG015ChargeMultiPay(json.Json));
    }));
  }

  public static Future<WebAPI.Response.GachaG015ChargePay> GachaG015ChargePay(
    int execute_count,
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.GachaG015ChargePay>((Func<Promise<WebAPI.Response.GachaG015ChargePay>, IEnumerator>) (promise => WebAPI.LoadGachaG015ChargePay(promise, execute_count, gacha_id, userErrorCallback)));
  }

  private static IEnumerator LoadGachaG015ChargePay(
    Promise<WebAPI.Response.GachaG015ChargePay> promise,
    int execute_count,
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalGachaG015ChargePay(execute_count, gacha_id, (Action<WebAPI.Response.GachaG015ChargePay>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalGachaG015ChargePay(
    int execute_count,
    int gacha_id,
    Action<WebAPI.Response.GachaG015ChargePay> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/gacha/g015_charge/pay", new Dictionary<string, object>()
    {
      [nameof (execute_count)] = (object) execute_count,
      [nameof (gacha_id)] = (object) gacha_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GachaG015ChargePay) null);
      }
      else
        callback(new WebAPI.Response.GachaG015ChargePay(json.Json));
    }));
  }

  public static Future<WebAPI.Response.GachaG016ChargeMultiPay> GachaG016ChargeMultiPay(
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.GachaG016ChargeMultiPay>((Func<Promise<WebAPI.Response.GachaG016ChargeMultiPay>, IEnumerator>) (promise => WebAPI.LoadGachaG016ChargeMultiPay(promise, gacha_id, userErrorCallback)));
  }

  private static IEnumerator LoadGachaG016ChargeMultiPay(
    Promise<WebAPI.Response.GachaG016ChargeMultiPay> promise,
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalGachaG016ChargeMultiPay(gacha_id, (Action<WebAPI.Response.GachaG016ChargeMultiPay>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalGachaG016ChargeMultiPay(
    int gacha_id,
    Action<WebAPI.Response.GachaG016ChargeMultiPay> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/gacha/g016_charge/multi/pay", new Dictionary<string, object>()
    {
      [nameof (gacha_id)] = (object) gacha_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GachaG016ChargeMultiPay) null);
      }
      else
        callback(new WebAPI.Response.GachaG016ChargeMultiPay(json.Json));
    }));
  }

  public static Future<WebAPI.Response.GachaG016ChargePay> GachaG016ChargePay(
    int execute_count,
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.GachaG016ChargePay>((Func<Promise<WebAPI.Response.GachaG016ChargePay>, IEnumerator>) (promise => WebAPI.LoadGachaG016ChargePay(promise, execute_count, gacha_id, userErrorCallback)));
  }

  private static IEnumerator LoadGachaG016ChargePay(
    Promise<WebAPI.Response.GachaG016ChargePay> promise,
    int execute_count,
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalGachaG016ChargePay(execute_count, gacha_id, (Action<WebAPI.Response.GachaG016ChargePay>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalGachaG016ChargePay(
    int execute_count,
    int gacha_id,
    Action<WebAPI.Response.GachaG016ChargePay> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/gacha/g016_charge/pay", new Dictionary<string, object>()
    {
      [nameof (execute_count)] = (object) execute_count,
      [nameof (gacha_id)] = (object) gacha_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GachaG016ChargePay) null);
      }
      else
        callback(new WebAPI.Response.GachaG016ChargePay(json.Json));
    }));
  }

  public static Future<WebAPI.Response.GachaG017GiftMultiPay> GachaG017GiftMultiPay(
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.GachaG017GiftMultiPay>((Func<Promise<WebAPI.Response.GachaG017GiftMultiPay>, IEnumerator>) (promise => WebAPI.LoadGachaG017GiftMultiPay(promise, gacha_id, userErrorCallback)));
  }

  private static IEnumerator LoadGachaG017GiftMultiPay(
    Promise<WebAPI.Response.GachaG017GiftMultiPay> promise,
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalGachaG017GiftMultiPay(gacha_id, (Action<WebAPI.Response.GachaG017GiftMultiPay>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalGachaG017GiftMultiPay(
    int gacha_id,
    Action<WebAPI.Response.GachaG017GiftMultiPay> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/gacha/g017_gift/multi/pay", new Dictionary<string, object>()
    {
      [nameof (gacha_id)] = (object) gacha_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GachaG017GiftMultiPay) null);
      }
      else
        callback(new WebAPI.Response.GachaG017GiftMultiPay(json.Json));
    }));
  }

  public static Future<WebAPI.Response.GachaG017GiftPay> GachaG017GiftPay(
    int execute_count,
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.GachaG017GiftPay>((Func<Promise<WebAPI.Response.GachaG017GiftPay>, IEnumerator>) (promise => WebAPI.LoadGachaG017GiftPay(promise, execute_count, gacha_id, userErrorCallback)));
  }

  private static IEnumerator LoadGachaG017GiftPay(
    Promise<WebAPI.Response.GachaG017GiftPay> promise,
    int execute_count,
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalGachaG017GiftPay(execute_count, gacha_id, (Action<WebAPI.Response.GachaG017GiftPay>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalGachaG017GiftPay(
    int execute_count,
    int gacha_id,
    Action<WebAPI.Response.GachaG017GiftPay> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/gacha/g017_gift/pay", new Dictionary<string, object>()
    {
      [nameof (execute_count)] = (object) execute_count,
      [nameof (gacha_id)] = (object) gacha_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GachaG017GiftPay) null);
      }
      else
        callback(new WebAPI.Response.GachaG017GiftPay(json.Json));
    }));
  }

  public static Future<WebAPI.Response.GachaG018GiftMultiPay> GachaG018GiftMultiPay(
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.GachaG018GiftMultiPay>((Func<Promise<WebAPI.Response.GachaG018GiftMultiPay>, IEnumerator>) (promise => WebAPI.LoadGachaG018GiftMultiPay(promise, gacha_id, userErrorCallback)));
  }

  private static IEnumerator LoadGachaG018GiftMultiPay(
    Promise<WebAPI.Response.GachaG018GiftMultiPay> promise,
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalGachaG018GiftMultiPay(gacha_id, (Action<WebAPI.Response.GachaG018GiftMultiPay>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalGachaG018GiftMultiPay(
    int gacha_id,
    Action<WebAPI.Response.GachaG018GiftMultiPay> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/gacha/g018_gift/multi/pay", new Dictionary<string, object>()
    {
      [nameof (gacha_id)] = (object) gacha_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GachaG018GiftMultiPay) null);
      }
      else
        callback(new WebAPI.Response.GachaG018GiftMultiPay(json.Json));
    }));
  }

  public static Future<WebAPI.Response.GachaG018GiftPay> GachaG018GiftPay(
    int execute_count,
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.GachaG018GiftPay>((Func<Promise<WebAPI.Response.GachaG018GiftPay>, IEnumerator>) (promise => WebAPI.LoadGachaG018GiftPay(promise, execute_count, gacha_id, userErrorCallback)));
  }

  private static IEnumerator LoadGachaG018GiftPay(
    Promise<WebAPI.Response.GachaG018GiftPay> promise,
    int execute_count,
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalGachaG018GiftPay(execute_count, gacha_id, (Action<WebAPI.Response.GachaG018GiftPay>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalGachaG018GiftPay(
    int execute_count,
    int gacha_id,
    Action<WebAPI.Response.GachaG018GiftPay> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/gacha/g018_gift/pay", new Dictionary<string, object>()
    {
      [nameof (execute_count)] = (object) execute_count,
      [nameof (gacha_id)] = (object) gacha_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GachaG018GiftPay) null);
      }
      else
        callback(new WebAPI.Response.GachaG018GiftPay(json.Json));
    }));
  }

  public static Future<WebAPI.Response.GachaG019GiftMultiPay> GachaG019GiftMultiPay(
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.GachaG019GiftMultiPay>((Func<Promise<WebAPI.Response.GachaG019GiftMultiPay>, IEnumerator>) (promise => WebAPI.LoadGachaG019GiftMultiPay(promise, gacha_id, userErrorCallback)));
  }

  private static IEnumerator LoadGachaG019GiftMultiPay(
    Promise<WebAPI.Response.GachaG019GiftMultiPay> promise,
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalGachaG019GiftMultiPay(gacha_id, (Action<WebAPI.Response.GachaG019GiftMultiPay>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalGachaG019GiftMultiPay(
    int gacha_id,
    Action<WebAPI.Response.GachaG019GiftMultiPay> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/gacha/g019_gift/multi/pay", new Dictionary<string, object>()
    {
      [nameof (gacha_id)] = (object) gacha_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GachaG019GiftMultiPay) null);
      }
      else
        callback(new WebAPI.Response.GachaG019GiftMultiPay(json.Json));
    }));
  }

  public static Future<WebAPI.Response.GachaG019GiftPay> GachaG019GiftPay(
    int execute_count,
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.GachaG019GiftPay>((Func<Promise<WebAPI.Response.GachaG019GiftPay>, IEnumerator>) (promise => WebAPI.LoadGachaG019GiftPay(promise, execute_count, gacha_id, userErrorCallback)));
  }

  private static IEnumerator LoadGachaG019GiftPay(
    Promise<WebAPI.Response.GachaG019GiftPay> promise,
    int execute_count,
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalGachaG019GiftPay(execute_count, gacha_id, (Action<WebAPI.Response.GachaG019GiftPay>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalGachaG019GiftPay(
    int execute_count,
    int gacha_id,
    Action<WebAPI.Response.GachaG019GiftPay> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/gacha/g019_gift/pay", new Dictionary<string, object>()
    {
      [nameof (execute_count)] = (object) execute_count,
      [nameof (gacha_id)] = (object) gacha_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GachaG019GiftPay) null);
      }
      else
        callback(new WebAPI.Response.GachaG019GiftPay(json.Json));
    }));
  }

  public static Future<WebAPI.Response.GachaG020GiftMultiPay> GachaG020GiftMultiPay(
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.GachaG020GiftMultiPay>((Func<Promise<WebAPI.Response.GachaG020GiftMultiPay>, IEnumerator>) (promise => WebAPI.LoadGachaG020GiftMultiPay(promise, gacha_id, userErrorCallback)));
  }

  private static IEnumerator LoadGachaG020GiftMultiPay(
    Promise<WebAPI.Response.GachaG020GiftMultiPay> promise,
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalGachaG020GiftMultiPay(gacha_id, (Action<WebAPI.Response.GachaG020GiftMultiPay>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalGachaG020GiftMultiPay(
    int gacha_id,
    Action<WebAPI.Response.GachaG020GiftMultiPay> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/gacha/g020_gift/multi/pay", new Dictionary<string, object>()
    {
      [nameof (gacha_id)] = (object) gacha_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GachaG020GiftMultiPay) null);
      }
      else
        callback(new WebAPI.Response.GachaG020GiftMultiPay(json.Json));
    }));
  }

  public static Future<WebAPI.Response.GachaG020GiftPay> GachaG020GiftPay(
    int execute_count,
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.GachaG020GiftPay>((Func<Promise<WebAPI.Response.GachaG020GiftPay>, IEnumerator>) (promise => WebAPI.LoadGachaG020GiftPay(promise, execute_count, gacha_id, userErrorCallback)));
  }

  private static IEnumerator LoadGachaG020GiftPay(
    Promise<WebAPI.Response.GachaG020GiftPay> promise,
    int execute_count,
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalGachaG020GiftPay(execute_count, gacha_id, (Action<WebAPI.Response.GachaG020GiftPay>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalGachaG020GiftPay(
    int execute_count,
    int gacha_id,
    Action<WebAPI.Response.GachaG020GiftPay> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/gacha/g020_gift/pay", new Dictionary<string, object>()
    {
      [nameof (execute_count)] = (object) execute_count,
      [nameof (gacha_id)] = (object) gacha_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GachaG020GiftPay) null);
      }
      else
        callback(new WebAPI.Response.GachaG020GiftPay(json.Json));
    }));
  }

  public static Future<WebAPI.Response.GachaG021FreeMultiPay> GachaG021FreeMultiPay(
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.GachaG021FreeMultiPay>((Func<Promise<WebAPI.Response.GachaG021FreeMultiPay>, IEnumerator>) (promise => WebAPI.LoadGachaG021FreeMultiPay(promise, gacha_id, userErrorCallback)));
  }

  private static IEnumerator LoadGachaG021FreeMultiPay(
    Promise<WebAPI.Response.GachaG021FreeMultiPay> promise,
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalGachaG021FreeMultiPay(gacha_id, (Action<WebAPI.Response.GachaG021FreeMultiPay>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalGachaG021FreeMultiPay(
    int gacha_id,
    Action<WebAPI.Response.GachaG021FreeMultiPay> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/gacha/g021_free/multi/pay", new Dictionary<string, object>()
    {
      [nameof (gacha_id)] = (object) gacha_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GachaG021FreeMultiPay) null);
      }
      else
        callback(new WebAPI.Response.GachaG021FreeMultiPay(json.Json));
    }));
  }

  public static Future<WebAPI.Response.GachaG021FreePay> GachaG021FreePay(
    int execute_count,
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.GachaG021FreePay>((Func<Promise<WebAPI.Response.GachaG021FreePay>, IEnumerator>) (promise => WebAPI.LoadGachaG021FreePay(promise, execute_count, gacha_id, userErrorCallback)));
  }

  private static IEnumerator LoadGachaG021FreePay(
    Promise<WebAPI.Response.GachaG021FreePay> promise,
    int execute_count,
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalGachaG021FreePay(execute_count, gacha_id, (Action<WebAPI.Response.GachaG021FreePay>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalGachaG021FreePay(
    int execute_count,
    int gacha_id,
    Action<WebAPI.Response.GachaG021FreePay> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/gacha/g021_free/pay", new Dictionary<string, object>()
    {
      [nameof (execute_count)] = (object) execute_count,
      [nameof (gacha_id)] = (object) gacha_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GachaG021FreePay) null);
      }
      else
        callback(new WebAPI.Response.GachaG021FreePay(json.Json));
    }));
  }

  public static Future<WebAPI.Response.GachaG022GiftMultiPay> GachaG022GiftMultiPay(
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.GachaG022GiftMultiPay>((Func<Promise<WebAPI.Response.GachaG022GiftMultiPay>, IEnumerator>) (promise => WebAPI.LoadGachaG022GiftMultiPay(promise, gacha_id, userErrorCallback)));
  }

  private static IEnumerator LoadGachaG022GiftMultiPay(
    Promise<WebAPI.Response.GachaG022GiftMultiPay> promise,
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalGachaG022GiftMultiPay(gacha_id, (Action<WebAPI.Response.GachaG022GiftMultiPay>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalGachaG022GiftMultiPay(
    int gacha_id,
    Action<WebAPI.Response.GachaG022GiftMultiPay> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/gacha/g022_gift/multi/pay", new Dictionary<string, object>()
    {
      [nameof (gacha_id)] = (object) gacha_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GachaG022GiftMultiPay) null);
      }
      else
        callback(new WebAPI.Response.GachaG022GiftMultiPay(json.Json));
    }));
  }

  public static Future<WebAPI.Response.GachaG022GiftPay> GachaG022GiftPay(
    int execute_count,
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.GachaG022GiftPay>((Func<Promise<WebAPI.Response.GachaG022GiftPay>, IEnumerator>) (promise => WebAPI.LoadGachaG022GiftPay(promise, execute_count, gacha_id, userErrorCallback)));
  }

  private static IEnumerator LoadGachaG022GiftPay(
    Promise<WebAPI.Response.GachaG022GiftPay> promise,
    int execute_count,
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalGachaG022GiftPay(execute_count, gacha_id, (Action<WebAPI.Response.GachaG022GiftPay>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalGachaG022GiftPay(
    int execute_count,
    int gacha_id,
    Action<WebAPI.Response.GachaG022GiftPay> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/gacha/g022_gift/pay", new Dictionary<string, object>()
    {
      [nameof (execute_count)] = (object) execute_count,
      [nameof (gacha_id)] = (object) gacha_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GachaG022GiftPay) null);
      }
      else
        callback(new WebAPI.Response.GachaG022GiftPay(json.Json));
    }));
  }

  public static Future<WebAPI.Response.GachaG023GiftMultiPay> GachaG023GiftMultiPay(
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.GachaG023GiftMultiPay>((Func<Promise<WebAPI.Response.GachaG023GiftMultiPay>, IEnumerator>) (promise => WebAPI.LoadGachaG023GiftMultiPay(promise, gacha_id, userErrorCallback)));
  }

  private static IEnumerator LoadGachaG023GiftMultiPay(
    Promise<WebAPI.Response.GachaG023GiftMultiPay> promise,
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalGachaG023GiftMultiPay(gacha_id, (Action<WebAPI.Response.GachaG023GiftMultiPay>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalGachaG023GiftMultiPay(
    int gacha_id,
    Action<WebAPI.Response.GachaG023GiftMultiPay> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/gacha/g023_gift/multi/pay", new Dictionary<string, object>()
    {
      [nameof (gacha_id)] = (object) gacha_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GachaG023GiftMultiPay) null);
      }
      else
        callback(new WebAPI.Response.GachaG023GiftMultiPay(json.Json));
    }));
  }

  public static Future<WebAPI.Response.GachaG023GiftPay> GachaG023GiftPay(
    int execute_count,
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.GachaG023GiftPay>((Func<Promise<WebAPI.Response.GachaG023GiftPay>, IEnumerator>) (promise => WebAPI.LoadGachaG023GiftPay(promise, execute_count, gacha_id, userErrorCallback)));
  }

  private static IEnumerator LoadGachaG023GiftPay(
    Promise<WebAPI.Response.GachaG023GiftPay> promise,
    int execute_count,
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalGachaG023GiftPay(execute_count, gacha_id, (Action<WebAPI.Response.GachaG023GiftPay>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalGachaG023GiftPay(
    int execute_count,
    int gacha_id,
    Action<WebAPI.Response.GachaG023GiftPay> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/gacha/g023_gift/pay", new Dictionary<string, object>()
    {
      [nameof (execute_count)] = (object) execute_count,
      [nameof (gacha_id)] = (object) gacha_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GachaG023GiftPay) null);
      }
      else
        callback(new WebAPI.Response.GachaG023GiftPay(json.Json));
    }));
  }

  public static Future<WebAPI.Response.GachaG075ChargeMultiPay> GachaG075ChargeMultiPay(
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.GachaG075ChargeMultiPay>((Func<Promise<WebAPI.Response.GachaG075ChargeMultiPay>, IEnumerator>) (promise => WebAPI.LoadGachaG075ChargeMultiPay(promise, gacha_id, userErrorCallback)));
  }

  private static IEnumerator LoadGachaG075ChargeMultiPay(
    Promise<WebAPI.Response.GachaG075ChargeMultiPay> promise,
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalGachaG075ChargeMultiPay(gacha_id, (Action<WebAPI.Response.GachaG075ChargeMultiPay>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalGachaG075ChargeMultiPay(
    int gacha_id,
    Action<WebAPI.Response.GachaG075ChargeMultiPay> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/gacha/g075_charge/multi/pay", new Dictionary<string, object>()
    {
      [nameof (gacha_id)] = (object) gacha_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GachaG075ChargeMultiPay) null);
      }
      else
        callback(new WebAPI.Response.GachaG075ChargeMultiPay(json.Json));
    }));
  }

  public static Future<WebAPI.Response.GachaG075ChargePay> GachaG075ChargePay(
    int execute_count,
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.GachaG075ChargePay>((Func<Promise<WebAPI.Response.GachaG075ChargePay>, IEnumerator>) (promise => WebAPI.LoadGachaG075ChargePay(promise, execute_count, gacha_id, userErrorCallback)));
  }

  private static IEnumerator LoadGachaG075ChargePay(
    Promise<WebAPI.Response.GachaG075ChargePay> promise,
    int execute_count,
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalGachaG075ChargePay(execute_count, gacha_id, (Action<WebAPI.Response.GachaG075ChargePay>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalGachaG075ChargePay(
    int execute_count,
    int gacha_id,
    Action<WebAPI.Response.GachaG075ChargePay> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/gacha/g075_charge/pay", new Dictionary<string, object>()
    {
      [nameof (execute_count)] = (object) execute_count,
      [nameof (gacha_id)] = (object) gacha_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GachaG075ChargePay) null);
      }
      else
        callback(new WebAPI.Response.GachaG075ChargePay(json.Json));
    }));
  }

  public static Future<WebAPI.Response.GachaG101RetryGiftMultiPay> GachaG101RetryGiftMultiPay(
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.GachaG101RetryGiftMultiPay>((Func<Promise<WebAPI.Response.GachaG101RetryGiftMultiPay>, IEnumerator>) (promise => WebAPI.LoadGachaG101RetryGiftMultiPay(promise, gacha_id, userErrorCallback)));
  }

  private static IEnumerator LoadGachaG101RetryGiftMultiPay(
    Promise<WebAPI.Response.GachaG101RetryGiftMultiPay> promise,
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalGachaG101RetryGiftMultiPay(gacha_id, (Action<WebAPI.Response.GachaG101RetryGiftMultiPay>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalGachaG101RetryGiftMultiPay(
    int gacha_id,
    Action<WebAPI.Response.GachaG101RetryGiftMultiPay> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/gacha/g101_retry_gift/multi/pay", new Dictionary<string, object>()
    {
      [nameof (gacha_id)] = (object) gacha_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GachaG101RetryGiftMultiPay) null);
      }
      else
        callback(new WebAPI.Response.GachaG101RetryGiftMultiPay(json.Json));
    }));
  }

  public static Future<WebAPI.Response.GachaG101RetryGiftPay> GachaG101RetryGiftPay(
    int execute_count,
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.GachaG101RetryGiftPay>((Func<Promise<WebAPI.Response.GachaG101RetryGiftPay>, IEnumerator>) (promise => WebAPI.LoadGachaG101RetryGiftPay(promise, execute_count, gacha_id, userErrorCallback)));
  }

  private static IEnumerator LoadGachaG101RetryGiftPay(
    Promise<WebAPI.Response.GachaG101RetryGiftPay> promise,
    int execute_count,
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalGachaG101RetryGiftPay(execute_count, gacha_id, (Action<WebAPI.Response.GachaG101RetryGiftPay>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalGachaG101RetryGiftPay(
    int execute_count,
    int gacha_id,
    Action<WebAPI.Response.GachaG101RetryGiftPay> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/gacha/g101_retry_gift/pay", new Dictionary<string, object>()
    {
      [nameof (execute_count)] = (object) execute_count,
      [nameof (gacha_id)] = (object) gacha_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GachaG101RetryGiftPay) null);
      }
      else
        callback(new WebAPI.Response.GachaG101RetryGiftPay(json.Json));
    }));
  }

  public static Future<WebAPI.Response.GachaG301PickupSelectPlayerPickup> GachaG301PickupSelectPlayerPickup(
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.GachaG301PickupSelectPlayerPickup>((Func<Promise<WebAPI.Response.GachaG301PickupSelectPlayerPickup>, IEnumerator>) (promise => WebAPI.LoadGachaG301PickupSelectPlayerPickup(promise, gacha_id, userErrorCallback)));
  }

  private static IEnumerator LoadGachaG301PickupSelectPlayerPickup(
    Promise<WebAPI.Response.GachaG301PickupSelectPlayerPickup> promise,
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalGachaG301PickupSelectPlayerPickup(gacha_id, (Action<WebAPI.Response.GachaG301PickupSelectPlayerPickup>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalGachaG301PickupSelectPlayerPickup(
    int gacha_id,
    Action<WebAPI.Response.GachaG301PickupSelectPlayerPickup> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/gacha/g301_pickup_select/player_pickup", new Dictionary<string, object>()
    {
      [nameof (gacha_id)] = (object) gacha_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GachaG301PickupSelectPlayerPickup) null);
      }
      else
        callback(new WebAPI.Response.GachaG301PickupSelectPlayerPickup(json.Json));
    }));
  }

  public static Future<WebAPI.Response.GachaG301PickupSelectSavePickup> GachaG301PickupSelectSavePickup(
    int[] deck_entity_ids,
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.GachaG301PickupSelectSavePickup>((Func<Promise<WebAPI.Response.GachaG301PickupSelectSavePickup>, IEnumerator>) (promise => WebAPI.LoadGachaG301PickupSelectSavePickup(promise, deck_entity_ids, gacha_id, userErrorCallback)));
  }

  private static IEnumerator LoadGachaG301PickupSelectSavePickup(
    Promise<WebAPI.Response.GachaG301PickupSelectSavePickup> promise,
    int[] deck_entity_ids,
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalGachaG301PickupSelectSavePickup(deck_entity_ids, gacha_id, (Action<WebAPI.Response.GachaG301PickupSelectSavePickup>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalGachaG301PickupSelectSavePickup(
    int[] deck_entity_ids,
    int gacha_id,
    Action<WebAPI.Response.GachaG301PickupSelectSavePickup> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/gacha/g301_pickup_select/save_pickup", new Dictionary<string, object>()
    {
      [nameof (deck_entity_ids)] = (object) deck_entity_ids,
      [nameof (gacha_id)] = (object) gacha_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GachaG301PickupSelectSavePickup) null);
      }
      else
        callback(new WebAPI.Response.GachaG301PickupSelectSavePickup(json.Json));
    }));
  }

  public static Future<WebAPI.Response.GachaGetPickupUnitMaxStatus> GachaGetPickupUnitMaxStatus(
    int gacha_id,
    string gacha_name,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.GachaGetPickupUnitMaxStatus>((Func<Promise<WebAPI.Response.GachaGetPickupUnitMaxStatus>, IEnumerator>) (promise => WebAPI.LoadGachaGetPickupUnitMaxStatus(promise, gacha_id, gacha_name, userErrorCallback)));
  }

  private static IEnumerator LoadGachaGetPickupUnitMaxStatus(
    Promise<WebAPI.Response.GachaGetPickupUnitMaxStatus> promise,
    int gacha_id,
    string gacha_name,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalGachaGetPickupUnitMaxStatus(gacha_id, gacha_name, (Action<WebAPI.Response.GachaGetPickupUnitMaxStatus>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalGachaGetPickupUnitMaxStatus(
    int gacha_id,
    string gacha_name,
    Action<WebAPI.Response.GachaGetPickupUnitMaxStatus> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/gacha/get_pickup_unit_max_status", new Dictionary<string, object>()
    {
      [nameof (gacha_id)] = (object) gacha_id,
      [nameof (gacha_name)] = (object) gacha_name
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GachaGetPickupUnitMaxStatus) null);
      }
      else
        callback(new WebAPI.Response.GachaGetPickupUnitMaxStatus(json.Json));
    }));
  }

  public static Future<WebAPI.Response.GachaResume> GachaResume(
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.GachaResume>((Func<Promise<WebAPI.Response.GachaResume>, IEnumerator>) (promise => WebAPI.LoadGachaResume(promise, userErrorCallback)));
  }

  private static IEnumerator LoadGachaResume(
    Promise<WebAPI.Response.GachaResume> promise,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalGachaResume((Action<WebAPI.Response.GachaResume>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalGachaResume(
    Action<WebAPI.Response.GachaResume> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Get("/gacha/resume", (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GachaResume) null);
      }
      else
        callback(new WebAPI.Response.GachaResume(json.Json));
    }));
  }

  public static Future<WebAPI.Response.Gamekit2All> Gamekit2All(
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.Gamekit2All>((Func<Promise<WebAPI.Response.Gamekit2All>, IEnumerator>) (promise => WebAPI.LoadGamekit2All(promise, userErrorCallback)));
  }

  private static IEnumerator LoadGamekit2All(
    Promise<WebAPI.Response.Gamekit2All> promise,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalGamekit2All((Action<WebAPI.Response.Gamekit2All>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalGamekit2All(
    Action<WebAPI.Response.Gamekit2All> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Get("/gamekit2/all", (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.Gamekit2All) null);
      }
      else
        callback(new WebAPI.Response.Gamekit2All(json.Json));
    }));
  }

  public static Future<WebAPI.Response.GamekitAll> GamekitAll(
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.GamekitAll>((Func<Promise<WebAPI.Response.GamekitAll>, IEnumerator>) (promise => WebAPI.LoadGamekitAll(promise, userErrorCallback)));
  }

  private static IEnumerator LoadGamekitAll(
    Promise<WebAPI.Response.GamekitAll> promise,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalGamekitAll((Action<WebAPI.Response.GamekitAll>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalGamekitAll(
    Action<WebAPI.Response.GamekitAll> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Get("/gamekit/all", (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GamekitAll) null);
      }
      else
        callback(new WebAPI.Response.GamekitAll(json.Json));
    }));
  }

  public static Future<WebAPI.Response.GuildApplicantsAccept> GuildApplicantsAccept(
    bool mock,
    string[] target_player_ids,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.GuildApplicantsAccept>((Func<Promise<WebAPI.Response.GuildApplicantsAccept>, IEnumerator>) (promise => WebAPI.LoadGuildApplicantsAccept(promise, mock, target_player_ids, userErrorCallback)));
  }

  private static IEnumerator LoadGuildApplicantsAccept(
    Promise<WebAPI.Response.GuildApplicantsAccept> promise,
    bool mock,
    string[] target_player_ids,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalGuildApplicantsAccept(mock, target_player_ids, (Action<WebAPI.Response.GuildApplicantsAccept>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalGuildApplicantsAccept(
    bool mock,
    string[] target_player_ids,
    Action<WebAPI.Response.GuildApplicantsAccept> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/guild/applicants/accept", new Dictionary<string, object>()
    {
      [nameof (mock)] = (object) mock,
      [nameof (target_player_ids)] = (object) target_player_ids
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GuildApplicantsAccept) null);
      }
      else
        callback(new WebAPI.Response.GuildApplicantsAccept(json.Json));
    }));
  }

  public static Future<WebAPI.Response.GuildApplicantsCancel> GuildApplicantsCancel(
    string target_guild_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.GuildApplicantsCancel>((Func<Promise<WebAPI.Response.GuildApplicantsCancel>, IEnumerator>) (promise => WebAPI.LoadGuildApplicantsCancel(promise, target_guild_id, userErrorCallback)));
  }

  private static IEnumerator LoadGuildApplicantsCancel(
    Promise<WebAPI.Response.GuildApplicantsCancel> promise,
    string target_guild_id,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalGuildApplicantsCancel(target_guild_id, (Action<WebAPI.Response.GuildApplicantsCancel>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalGuildApplicantsCancel(
    string target_guild_id,
    Action<WebAPI.Response.GuildApplicantsCancel> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/guild/applicants/cancel", new Dictionary<string, object>()
    {
      [nameof (target_guild_id)] = (object) target_guild_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GuildApplicantsCancel) null);
      }
      else
        callback(new WebAPI.Response.GuildApplicantsCancel(json.Json));
    }));
  }

  public static Future<WebAPI.Response.GuildApplicantsReject> GuildApplicantsReject(
    bool mock,
    string[] target_player_ids,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.GuildApplicantsReject>((Func<Promise<WebAPI.Response.GuildApplicantsReject>, IEnumerator>) (promise => WebAPI.LoadGuildApplicantsReject(promise, mock, target_player_ids, userErrorCallback)));
  }

  private static IEnumerator LoadGuildApplicantsReject(
    Promise<WebAPI.Response.GuildApplicantsReject> promise,
    bool mock,
    string[] target_player_ids,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalGuildApplicantsReject(mock, target_player_ids, (Action<WebAPI.Response.GuildApplicantsReject>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalGuildApplicantsReject(
    bool mock,
    string[] target_player_ids,
    Action<WebAPI.Response.GuildApplicantsReject> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/guild/applicants/reject", new Dictionary<string, object>()
    {
      [nameof (mock)] = (object) mock,
      [nameof (target_player_ids)] = (object) target_player_ids
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GuildApplicantsReject) null);
      }
      else
        callback(new WebAPI.Response.GuildApplicantsReject(json.Json));
    }));
  }

  public static Future<WebAPI.Response.GuildApplicantsSend> GuildApplicantsSend(
    bool mock,
    string target_guild_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.GuildApplicantsSend>((Func<Promise<WebAPI.Response.GuildApplicantsSend>, IEnumerator>) (promise => WebAPI.LoadGuildApplicantsSend(promise, mock, target_guild_id, userErrorCallback)));
  }

  private static IEnumerator LoadGuildApplicantsSend(
    Promise<WebAPI.Response.GuildApplicantsSend> promise,
    bool mock,
    string target_guild_id,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalGuildApplicantsSend(mock, target_guild_id, (Action<WebAPI.Response.GuildApplicantsSend>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalGuildApplicantsSend(
    bool mock,
    string target_guild_id,
    Action<WebAPI.Response.GuildApplicantsSend> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/guild/applicants/send", new Dictionary<string, object>()
    {
      [nameof (mock)] = (object) mock,
      [nameof (target_guild_id)] = (object) target_guild_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GuildApplicantsSend) null);
      }
      else
        callback(new WebAPI.Response.GuildApplicantsSend(json.Json));
    }));
  }

  public static Future<WebAPI.Response.GuildBankContact> GuildBankContact(
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.GuildBankContact>((Func<Promise<WebAPI.Response.GuildBankContact>, IEnumerator>) (promise => WebAPI.LoadGuildBankContact(promise, userErrorCallback)));
  }

  private static IEnumerator LoadGuildBankContact(
    Promise<WebAPI.Response.GuildBankContact> promise,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalGuildBankContact((Action<WebAPI.Response.GuildBankContact>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalGuildBankContact(
    Action<WebAPI.Response.GuildBankContact> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Get("/guild/bank/contact", (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GuildBankContact) null);
      }
      else
        callback(new WebAPI.Response.GuildBankContact(json.Json));
    }));
  }

  public static Future<WebAPI.Response.GuildBankInvest> GuildBankInvest(
    int rate_id,
    int scale,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.GuildBankInvest>((Func<Promise<WebAPI.Response.GuildBankInvest>, IEnumerator>) (promise => WebAPI.LoadGuildBankInvest(promise, rate_id, scale, userErrorCallback)));
  }

  private static IEnumerator LoadGuildBankInvest(
    Promise<WebAPI.Response.GuildBankInvest> promise,
    int rate_id,
    int scale,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalGuildBankInvest(rate_id, scale, (Action<WebAPI.Response.GuildBankInvest>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalGuildBankInvest(
    int rate_id,
    int scale,
    Action<WebAPI.Response.GuildBankInvest> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/guild/bank/invest", new Dictionary<string, object>()
    {
      [nameof (rate_id)] = (object) rate_id,
      [nameof (scale)] = (object) scale
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GuildBankInvest) null);
      }
      else
        callback(new WebAPI.Response.GuildBankInvest(json.Json));
    }));
  }

  public static Future<WebAPI.Response.GuildBaseInvest> GuildBaseInvest(
    int base_id,
    int from_rank,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.GuildBaseInvest>((Func<Promise<WebAPI.Response.GuildBaseInvest>, IEnumerator>) (promise => WebAPI.LoadGuildBaseInvest(promise, base_id, from_rank, userErrorCallback)));
  }

  private static IEnumerator LoadGuildBaseInvest(
    Promise<WebAPI.Response.GuildBaseInvest> promise,
    int base_id,
    int from_rank,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalGuildBaseInvest(base_id, from_rank, (Action<WebAPI.Response.GuildBaseInvest>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalGuildBaseInvest(
    int base_id,
    int from_rank,
    Action<WebAPI.Response.GuildBaseInvest> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/guild/base/invest", new Dictionary<string, object>()
    {
      [nameof (base_id)] = (object) base_id,
      [nameof (from_rank)] = (object) from_rank
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GuildBaseInvest) null);
      }
      else
        callback(new WebAPI.Response.GuildBaseInvest(json.Json));
    }));
  }

  public static Future<WebAPI.Response.GuildBroadcastMessage> GuildBroadcastMessage(
    string body,
    bool mock,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.GuildBroadcastMessage>((Func<Promise<WebAPI.Response.GuildBroadcastMessage>, IEnumerator>) (promise => WebAPI.LoadGuildBroadcastMessage(promise, body, mock, userErrorCallback)));
  }

  private static IEnumerator LoadGuildBroadcastMessage(
    Promise<WebAPI.Response.GuildBroadcastMessage> promise,
    string body,
    bool mock,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalGuildBroadcastMessage(body, mock, (Action<WebAPI.Response.GuildBroadcastMessage>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalGuildBroadcastMessage(
    string body,
    bool mock,
    Action<WebAPI.Response.GuildBroadcastMessage> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/guild/broadcast_message", new Dictionary<string, object>()
    {
      [nameof (body)] = (object) body,
      [nameof (mock)] = (object) mock
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GuildBroadcastMessage) null);
      }
      else
        callback(new WebAPI.Response.GuildBroadcastMessage(json.Json));
    }));
  }

  public static Future<WebAPI.Response.GuildCheckin> GuildCheckin(
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.GuildCheckin>((Func<Promise<WebAPI.Response.GuildCheckin>, IEnumerator>) (promise => WebAPI.LoadGuildCheckin(promise, userErrorCallback)));
  }

  private static IEnumerator LoadGuildCheckin(
    Promise<WebAPI.Response.GuildCheckin> promise,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalGuildCheckin((Action<WebAPI.Response.GuildCheckin>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalGuildCheckin(
    Action<WebAPI.Response.GuildCheckin> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Get("/guild/checkin", (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GuildCheckin) null);
      }
      else
        callback(new WebAPI.Response.GuildCheckin(json.Json));
    }));
  }

  public static Future<WebAPI.Response.GuildDissolute> GuildDissolute(
    bool mock,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.GuildDissolute>((Func<Promise<WebAPI.Response.GuildDissolute>, IEnumerator>) (promise => WebAPI.LoadGuildDissolute(promise, mock, userErrorCallback)));
  }

  private static IEnumerator LoadGuildDissolute(
    Promise<WebAPI.Response.GuildDissolute> promise,
    bool mock,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalGuildDissolute(mock, (Action<WebAPI.Response.GuildDissolute>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalGuildDissolute(
    bool mock,
    Action<WebAPI.Response.GuildDissolute> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/guild/dissolute", new Dictionary<string, object>()
    {
      [nameof (mock)] = (object) mock
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GuildDissolute) null);
      }
      else
        callback(new WebAPI.Response.GuildDissolute(json.Json));
    }));
  }

  public static Future<WebAPI.Response.GuildEmblemIndex> GuildEmblemIndex(
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.GuildEmblemIndex>((Func<Promise<WebAPI.Response.GuildEmblemIndex>, IEnumerator>) (promise => WebAPI.LoadGuildEmblemIndex(promise, userErrorCallback)));
  }

  private static IEnumerator LoadGuildEmblemIndex(
    Promise<WebAPI.Response.GuildEmblemIndex> promise,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalGuildEmblemIndex((Action<WebAPI.Response.GuildEmblemIndex>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalGuildEmblemIndex(
    Action<WebAPI.Response.GuildEmblemIndex> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Get("/guild/emblem/index", (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GuildEmblemIndex) null);
      }
      else
        callback(new WebAPI.Response.GuildEmblemIndex(json.Json));
    }));
  }

  public static Future<WebAPI.Response.GuildEmblemSetting> GuildEmblemSetting(
    int emblem_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.GuildEmblemSetting>((Func<Promise<WebAPI.Response.GuildEmblemSetting>, IEnumerator>) (promise => WebAPI.LoadGuildEmblemSetting(promise, emblem_id, userErrorCallback)));
  }

  private static IEnumerator LoadGuildEmblemSetting(
    Promise<WebAPI.Response.GuildEmblemSetting> promise,
    int emblem_id,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalGuildEmblemSetting(emblem_id, (Action<WebAPI.Response.GuildEmblemSetting>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalGuildEmblemSetting(
    int emblem_id,
    Action<WebAPI.Response.GuildEmblemSetting> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/guild/emblem/setting", new Dictionary<string, object>()
    {
      [nameof (emblem_id)] = (object) emblem_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GuildEmblemSetting) null);
      }
      else
        callback(new WebAPI.Response.GuildEmblemSetting(json.Json));
    }));
  }

  public static Future<WebAPI.Response.GuildEmblemUnsetting> GuildEmblemUnsetting(
    int emblem_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.GuildEmblemUnsetting>((Func<Promise<WebAPI.Response.GuildEmblemUnsetting>, IEnumerator>) (promise => WebAPI.LoadGuildEmblemUnsetting(promise, emblem_id, userErrorCallback)));
  }

  private static IEnumerator LoadGuildEmblemUnsetting(
    Promise<WebAPI.Response.GuildEmblemUnsetting> promise,
    int emblem_id,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalGuildEmblemUnsetting(emblem_id, (Action<WebAPI.Response.GuildEmblemUnsetting>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalGuildEmblemUnsetting(
    int emblem_id,
    Action<WebAPI.Response.GuildEmblemUnsetting> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/guild/emblem/unsetting", new Dictionary<string, object>()
    {
      [nameof (emblem_id)] = (object) emblem_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GuildEmblemUnsetting) null);
      }
      else
        callback(new WebAPI.Response.GuildEmblemUnsetting(json.Json));
    }));
  }

  public static Future<WebAPI.Response.GuildEstablish> GuildEstablish(
    int approval_policy_id,
    int atmosphere_id,
    int auto_approval_id,
    int auto_kick_id,
    string guild_name,
    bool mock,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.GuildEstablish>((Func<Promise<WebAPI.Response.GuildEstablish>, IEnumerator>) (promise => WebAPI.LoadGuildEstablish(promise, approval_policy_id, atmosphere_id, auto_approval_id, auto_kick_id, guild_name, mock, userErrorCallback)));
  }

  private static IEnumerator LoadGuildEstablish(
    Promise<WebAPI.Response.GuildEstablish> promise,
    int approval_policy_id,
    int atmosphere_id,
    int auto_approval_id,
    int auto_kick_id,
    string guild_name,
    bool mock,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalGuildEstablish(approval_policy_id, atmosphere_id, auto_approval_id, auto_kick_id, guild_name, mock, (Action<WebAPI.Response.GuildEstablish>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalGuildEstablish(
    int approval_policy_id,
    int atmosphere_id,
    int auto_approval_id,
    int auto_kick_id,
    string guild_name,
    bool mock,
    Action<WebAPI.Response.GuildEstablish> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/guild/establish", new Dictionary<string, object>()
    {
      [nameof (approval_policy_id)] = (object) approval_policy_id,
      [nameof (atmosphere_id)] = (object) atmosphere_id,
      [nameof (auto_approval_id)] = (object) auto_approval_id,
      [nameof (auto_kick_id)] = (object) auto_kick_id,
      [nameof (guild_name)] = (object) guild_name,
      [nameof (mock)] = (object) mock
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GuildEstablish) null);
      }
      else
        callback(new WebAPI.Response.GuildEstablish(json.Json));
    }));
  }

  public static Future<WebAPI.Response.GuildFriendAffiliations> GuildFriendAffiliations(
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.GuildFriendAffiliations>((Func<Promise<WebAPI.Response.GuildFriendAffiliations>, IEnumerator>) (promise => WebAPI.LoadGuildFriendAffiliations(promise, userErrorCallback)));
  }

  private static IEnumerator LoadGuildFriendAffiliations(
    Promise<WebAPI.Response.GuildFriendAffiliations> promise,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalGuildFriendAffiliations((Action<WebAPI.Response.GuildFriendAffiliations>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalGuildFriendAffiliations(
    Action<WebAPI.Response.GuildFriendAffiliations> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Get("/guild/friend_affiliations", (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GuildFriendAffiliations) null);
      }
      else
        callback(new WebAPI.Response.GuildFriendAffiliations(json.Json));
    }));
  }

  public static Future<WebAPI.Response.GuildGiftGetWishListMaster> GuildGiftGetWishListMaster(
    bool mock,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.GuildGiftGetWishListMaster>((Func<Promise<WebAPI.Response.GuildGiftGetWishListMaster>, IEnumerator>) (promise => WebAPI.LoadGuildGiftGetWishListMaster(promise, mock, userErrorCallback)));
  }

  private static IEnumerator LoadGuildGiftGetWishListMaster(
    Promise<WebAPI.Response.GuildGiftGetWishListMaster> promise,
    bool mock,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalGuildGiftGetWishListMaster(mock, (Action<WebAPI.Response.GuildGiftGetWishListMaster>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalGuildGiftGetWishListMaster(
    bool mock,
    Action<WebAPI.Response.GuildGiftGetWishListMaster> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/guild/gift/get/wish/list/master", new Dictionary<string, object>()
    {
      [nameof (mock)] = (object) mock
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GuildGiftGetWishListMaster) null);
      }
      else
        callback(new WebAPI.Response.GuildGiftGetWishListMaster(json.Json));
    }));
  }

  public static Future<WebAPI.Response.GuildGiftReceiveExecute> GuildGiftReceiveExecute(
    bool mock,
    string[] target_ids,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.GuildGiftReceiveExecute>((Func<Promise<WebAPI.Response.GuildGiftReceiveExecute>, IEnumerator>) (promise => WebAPI.LoadGuildGiftReceiveExecute(promise, mock, target_ids, userErrorCallback)));
  }

  private static IEnumerator LoadGuildGiftReceiveExecute(
    Promise<WebAPI.Response.GuildGiftReceiveExecute> promise,
    bool mock,
    string[] target_ids,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalGuildGiftReceiveExecute(mock, target_ids, (Action<WebAPI.Response.GuildGiftReceiveExecute>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalGuildGiftReceiveExecute(
    bool mock,
    string[] target_ids,
    Action<WebAPI.Response.GuildGiftReceiveExecute> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/guild/gift/receive/execute", new Dictionary<string, object>()
    {
      [nameof (mock)] = (object) mock,
      [nameof (target_ids)] = (object) target_ids
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GuildGiftReceiveExecute) null);
      }
      else
        callback(new WebAPI.Response.GuildGiftReceiveExecute(json.Json));
    }));
  }

  public static Future<WebAPI.Response.GuildGiftReceiveList> GuildGiftReceiveList(
    bool mock,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.GuildGiftReceiveList>((Func<Promise<WebAPI.Response.GuildGiftReceiveList>, IEnumerator>) (promise => WebAPI.LoadGuildGiftReceiveList(promise, mock, userErrorCallback)));
  }

  private static IEnumerator LoadGuildGiftReceiveList(
    Promise<WebAPI.Response.GuildGiftReceiveList> promise,
    bool mock,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalGuildGiftReceiveList(mock, (Action<WebAPI.Response.GuildGiftReceiveList>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalGuildGiftReceiveList(
    bool mock,
    Action<WebAPI.Response.GuildGiftReceiveList> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/guild/gift/receive/list", new Dictionary<string, object>()
    {
      [nameof (mock)] = (object) mock
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GuildGiftReceiveList) null);
      }
      else
        callback(new WebAPI.Response.GuildGiftReceiveList(json.Json));
    }));
  }

  public static Future<WebAPI.Response.GuildGiftSendExecute> GuildGiftSendExecute(
    bool mock,
    string[] target_player_ids,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.GuildGiftSendExecute>((Func<Promise<WebAPI.Response.GuildGiftSendExecute>, IEnumerator>) (promise => WebAPI.LoadGuildGiftSendExecute(promise, mock, target_player_ids, userErrorCallback)));
  }

  private static IEnumerator LoadGuildGiftSendExecute(
    Promise<WebAPI.Response.GuildGiftSendExecute> promise,
    bool mock,
    string[] target_player_ids,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalGuildGiftSendExecute(mock, target_player_ids, (Action<WebAPI.Response.GuildGiftSendExecute>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalGuildGiftSendExecute(
    bool mock,
    string[] target_player_ids,
    Action<WebAPI.Response.GuildGiftSendExecute> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/guild/gift/send/execute", new Dictionary<string, object>()
    {
      [nameof (mock)] = (object) mock,
      [nameof (target_player_ids)] = (object) target_player_ids
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GuildGiftSendExecute) null);
      }
      else
        callback(new WebAPI.Response.GuildGiftSendExecute(json.Json));
    }));
  }

  public static Future<WebAPI.Response.GuildGiftSendList> GuildGiftSendList(
    bool mock,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.GuildGiftSendList>((Func<Promise<WebAPI.Response.GuildGiftSendList>, IEnumerator>) (promise => WebAPI.LoadGuildGiftSendList(promise, mock, userErrorCallback)));
  }

  private static IEnumerator LoadGuildGiftSendList(
    Promise<WebAPI.Response.GuildGiftSendList> promise,
    bool mock,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalGuildGiftSendList(mock, (Action<WebAPI.Response.GuildGiftSendList>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalGuildGiftSendList(
    bool mock,
    Action<WebAPI.Response.GuildGiftSendList> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/guild/gift/send/list", new Dictionary<string, object>()
    {
      [nameof (mock)] = (object) mock
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GuildGiftSendList) null);
      }
      else
        callback(new WebAPI.Response.GuildGiftSendList(json.Json));
    }));
  }

  public static Future<WebAPI.Response.GuildGiftUpdateWishList> GuildGiftUpdateWishList(
    int gift_id,
    bool mock,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.GuildGiftUpdateWishList>((Func<Promise<WebAPI.Response.GuildGiftUpdateWishList>, IEnumerator>) (promise => WebAPI.LoadGuildGiftUpdateWishList(promise, gift_id, mock, userErrorCallback)));
  }

  private static IEnumerator LoadGuildGiftUpdateWishList(
    Promise<WebAPI.Response.GuildGiftUpdateWishList> promise,
    int gift_id,
    bool mock,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalGuildGiftUpdateWishList(gift_id, mock, (Action<WebAPI.Response.GuildGiftUpdateWishList>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalGuildGiftUpdateWishList(
    int gift_id,
    bool mock,
    Action<WebAPI.Response.GuildGiftUpdateWishList> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/guild/gift/update/wish/list", new Dictionary<string, object>()
    {
      [nameof (gift_id)] = (object) gift_id,
      [nameof (mock)] = (object) mock
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GuildGiftUpdateWishList) null);
      }
      else
        callback(new WebAPI.Response.GuildGiftUpdateWishList(json.Json));
    }));
  }

  public static Future<WebAPI.Response.GuildInfo> GuildInfo(
    string target_guild_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.GuildInfo>((Func<Promise<WebAPI.Response.GuildInfo>, IEnumerator>) (promise => WebAPI.LoadGuildInfo(promise, target_guild_id, userErrorCallback)));
  }

  private static IEnumerator LoadGuildInfo(
    Promise<WebAPI.Response.GuildInfo> promise,
    string target_guild_id,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalGuildInfo(target_guild_id, (Action<WebAPI.Response.GuildInfo>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalGuildInfo(
    string target_guild_id,
    Action<WebAPI.Response.GuildInfo> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/guild/info", new Dictionary<string, object>()
    {
      [nameof (target_guild_id)] = (object) target_guild_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GuildInfo) null);
      }
      else
        callback(new WebAPI.Response.GuildInfo(json.Json));
    }));
  }

  public static Future<WebAPI.Response.GuildlogAutoupdate> GuildlogAutoupdate(
    string current_log_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.GuildlogAutoupdate>((Func<Promise<WebAPI.Response.GuildlogAutoupdate>, IEnumerator>) (promise => WebAPI.LoadGuildlogAutoupdate(promise, current_log_id, userErrorCallback)));
  }

  private static IEnumerator LoadGuildlogAutoupdate(
    Promise<WebAPI.Response.GuildlogAutoupdate> promise,
    string current_log_id,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalGuildlogAutoupdate(current_log_id, (Action<WebAPI.Response.GuildlogAutoupdate>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalGuildlogAutoupdate(
    string current_log_id,
    Action<WebAPI.Response.GuildlogAutoupdate> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/guildlog/autoupdate", new Dictionary<string, object>()
    {
      [nameof (current_log_id)] = (object) current_log_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GuildlogAutoupdate) null);
      }
      else
        callback(new WebAPI.Response.GuildlogAutoupdate(json.Json));
    }));
  }

  public static Future<WebAPI.Response.GuildlogMemberShowLatest> GuildlogMemberShowLatest(
    string target_player_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.GuildlogMemberShowLatest>((Func<Promise<WebAPI.Response.GuildlogMemberShowLatest>, IEnumerator>) (promise => WebAPI.LoadGuildlogMemberShowLatest(promise, target_player_id, userErrorCallback)));
  }

  private static IEnumerator LoadGuildlogMemberShowLatest(
    Promise<WebAPI.Response.GuildlogMemberShowLatest> promise,
    string target_player_id,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalGuildlogMemberShowLatest(target_player_id, (Action<WebAPI.Response.GuildlogMemberShowLatest>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalGuildlogMemberShowLatest(
    string target_player_id,
    Action<WebAPI.Response.GuildlogMemberShowLatest> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/guildlog/member/show/latest", new Dictionary<string, object>()
    {
      [nameof (target_player_id)] = (object) target_player_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GuildlogMemberShowLatest) null);
      }
      else
        callback(new WebAPI.Response.GuildlogMemberShowLatest(json.Json));
    }));
  }

  public static Future<WebAPI.Response.GuildlogMemberShowPast> GuildlogMemberShowPast(
    string oldest_log_id,
    string target_player_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.GuildlogMemberShowPast>((Func<Promise<WebAPI.Response.GuildlogMemberShowPast>, IEnumerator>) (promise => WebAPI.LoadGuildlogMemberShowPast(promise, oldest_log_id, target_player_id, userErrorCallback)));
  }

  private static IEnumerator LoadGuildlogMemberShowPast(
    Promise<WebAPI.Response.GuildlogMemberShowPast> promise,
    string oldest_log_id,
    string target_player_id,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalGuildlogMemberShowPast(oldest_log_id, target_player_id, (Action<WebAPI.Response.GuildlogMemberShowPast>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalGuildlogMemberShowPast(
    string oldest_log_id,
    string target_player_id,
    Action<WebAPI.Response.GuildlogMemberShowPast> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/guildlog/member/show/past", new Dictionary<string, object>()
    {
      [nameof (oldest_log_id)] = (object) oldest_log_id,
      [nameof (target_player_id)] = (object) target_player_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GuildlogMemberShowPast) null);
      }
      else
        callback(new WebAPI.Response.GuildlogMemberShowPast(json.Json));
    }));
  }

  public static Future<WebAPI.Response.GuildlogSendStamp> GuildlogSendStamp(
    int stamp_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.GuildlogSendStamp>((Func<Promise<WebAPI.Response.GuildlogSendStamp>, IEnumerator>) (promise => WebAPI.LoadGuildlogSendStamp(promise, stamp_id, userErrorCallback)));
  }

  private static IEnumerator LoadGuildlogSendStamp(
    Promise<WebAPI.Response.GuildlogSendStamp> promise,
    int stamp_id,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalGuildlogSendStamp(stamp_id, (Action<WebAPI.Response.GuildlogSendStamp>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalGuildlogSendStamp(
    int stamp_id,
    Action<WebAPI.Response.GuildlogSendStamp> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/guildlog/send/stamp", new Dictionary<string, object>()
    {
      [nameof (stamp_id)] = (object) stamp_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GuildlogSendStamp) null);
      }
      else
        callback(new WebAPI.Response.GuildlogSendStamp(json.Json));
    }));
  }

  public static Future<WebAPI.Response.GuildlogShowPast> GuildlogShowPast(
    string oldest_log_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.GuildlogShowPast>((Func<Promise<WebAPI.Response.GuildlogShowPast>, IEnumerator>) (promise => WebAPI.LoadGuildlogShowPast(promise, oldest_log_id, userErrorCallback)));
  }

  private static IEnumerator LoadGuildlogShowPast(
    Promise<WebAPI.Response.GuildlogShowPast> promise,
    string oldest_log_id,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalGuildlogShowPast(oldest_log_id, (Action<WebAPI.Response.GuildlogShowPast>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalGuildlogShowPast(
    string oldest_log_id,
    Action<WebAPI.Response.GuildlogShowPast> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/guildlog/show/past", new Dictionary<string, object>()
    {
      [nameof (oldest_log_id)] = (object) oldest_log_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GuildlogShowPast) null);
      }
      else
        callback(new WebAPI.Response.GuildlogShowPast(json.Json));
    }));
  }

  public static Future<WebAPI.Response.GuildlogWrite> GuildlogWrite(
    string log_text,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.GuildlogWrite>((Func<Promise<WebAPI.Response.GuildlogWrite>, IEnumerator>) (promise => WebAPI.LoadGuildlogWrite(promise, log_text, userErrorCallback)));
  }

  private static IEnumerator LoadGuildlogWrite(
    Promise<WebAPI.Response.GuildlogWrite> promise,
    string log_text,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalGuildlogWrite(log_text, (Action<WebAPI.Response.GuildlogWrite>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalGuildlogWrite(
    string log_text,
    Action<WebAPI.Response.GuildlogWrite> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/guildlog/write", new Dictionary<string, object>()
    {
      [nameof (log_text)] = (object) log_text
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GuildlogWrite) null);
      }
      else
        callback(new WebAPI.Response.GuildlogWrite(json.Json));
    }));
  }

  public static Future<WebAPI.Response.GuildMasterResign> GuildMasterResign(
    bool mock,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.GuildMasterResign>((Func<Promise<WebAPI.Response.GuildMasterResign>, IEnumerator>) (promise => WebAPI.LoadGuildMasterResign(promise, mock, userErrorCallback)));
  }

  private static IEnumerator LoadGuildMasterResign(
    Promise<WebAPI.Response.GuildMasterResign> promise,
    bool mock,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalGuildMasterResign(mock, (Action<WebAPI.Response.GuildMasterResign>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalGuildMasterResign(
    bool mock,
    Action<WebAPI.Response.GuildMasterResign> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/guild/master/resign", new Dictionary<string, object>()
    {
      [nameof (mock)] = (object) mock
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GuildMasterResign) null);
      }
      else
        callback(new WebAPI.Response.GuildMasterResign(json.Json));
    }));
  }

  public static Future<WebAPI.Response.GuildMasterTransfer> GuildMasterTransfer(
    bool mock,
    string target_player_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.GuildMasterTransfer>((Func<Promise<WebAPI.Response.GuildMasterTransfer>, IEnumerator>) (promise => WebAPI.LoadGuildMasterTransfer(promise, mock, target_player_id, userErrorCallback)));
  }

  private static IEnumerator LoadGuildMasterTransfer(
    Promise<WebAPI.Response.GuildMasterTransfer> promise,
    bool mock,
    string target_player_id,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalGuildMasterTransfer(mock, target_player_id, (Action<WebAPI.Response.GuildMasterTransfer>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalGuildMasterTransfer(
    bool mock,
    string target_player_id,
    Action<WebAPI.Response.GuildMasterTransfer> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/guild/master/transfer", new Dictionary<string, object>()
    {
      [nameof (mock)] = (object) mock,
      [nameof (target_player_id)] = (object) target_player_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GuildMasterTransfer) null);
      }
      else
        callback(new WebAPI.Response.GuildMasterTransfer(json.Json));
    }));
  }

  public static Future<WebAPI.Response.GuildMembershipsBanish> GuildMembershipsBanish(
    bool mock,
    string target_player_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.GuildMembershipsBanish>((Func<Promise<WebAPI.Response.GuildMembershipsBanish>, IEnumerator>) (promise => WebAPI.LoadGuildMembershipsBanish(promise, mock, target_player_id, userErrorCallback)));
  }

  private static IEnumerator LoadGuildMembershipsBanish(
    Promise<WebAPI.Response.GuildMembershipsBanish> promise,
    bool mock,
    string target_player_id,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalGuildMembershipsBanish(mock, target_player_id, (Action<WebAPI.Response.GuildMembershipsBanish>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalGuildMembershipsBanish(
    bool mock,
    string target_player_id,
    Action<WebAPI.Response.GuildMembershipsBanish> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/guild/memberships/banish", new Dictionary<string, object>()
    {
      [nameof (mock)] = (object) mock,
      [nameof (target_player_id)] = (object) target_player_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GuildMembershipsBanish) null);
      }
      else
        callback(new WebAPI.Response.GuildMembershipsBanish(json.Json));
    }));
  }

  public static Future<WebAPI.Response.GuildMembershipsLeave> GuildMembershipsLeave(
    bool mock,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.GuildMembershipsLeave>((Func<Promise<WebAPI.Response.GuildMembershipsLeave>, IEnumerator>) (promise => WebAPI.LoadGuildMembershipsLeave(promise, mock, userErrorCallback)));
  }

  private static IEnumerator LoadGuildMembershipsLeave(
    Promise<WebAPI.Response.GuildMembershipsLeave> promise,
    bool mock,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalGuildMembershipsLeave(mock, (Action<WebAPI.Response.GuildMembershipsLeave>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalGuildMembershipsLeave(
    bool mock,
    Action<WebAPI.Response.GuildMembershipsLeave> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/guild/memberships/leave", new Dictionary<string, object>()
    {
      [nameof (mock)] = (object) mock
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GuildMembershipsLeave) null);
      }
      else
        callback(new WebAPI.Response.GuildMembershipsLeave(json.Json));
    }));
  }

  public static Future<WebAPI.Response.GuildmissionBulkReceive> GuildmissionBulkReceive(
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.GuildmissionBulkReceive>((Func<Promise<WebAPI.Response.GuildmissionBulkReceive>, IEnumerator>) (promise => WebAPI.LoadGuildmissionBulkReceive(promise, userErrorCallback)));
  }

  private static IEnumerator LoadGuildmissionBulkReceive(
    Promise<WebAPI.Response.GuildmissionBulkReceive> promise,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalGuildmissionBulkReceive((Action<WebAPI.Response.GuildmissionBulkReceive>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalGuildmissionBulkReceive(
    Action<WebAPI.Response.GuildmissionBulkReceive> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Get("/guildmission/bulk_receive", (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GuildmissionBulkReceive) null);
      }
      else
        callback(new WebAPI.Response.GuildmissionBulkReceive(json.Json));
    }));
  }

  public static Future<WebAPI.Response.GuildmissionIndex> GuildmissionIndex(
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.GuildmissionIndex>((Func<Promise<WebAPI.Response.GuildmissionIndex>, IEnumerator>) (promise => WebAPI.LoadGuildmissionIndex(promise, userErrorCallback)));
  }

  private static IEnumerator LoadGuildmissionIndex(
    Promise<WebAPI.Response.GuildmissionIndex> promise,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalGuildmissionIndex((Action<WebAPI.Response.GuildmissionIndex>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalGuildmissionIndex(
    Action<WebAPI.Response.GuildmissionIndex> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Get("/guildmission/index", (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GuildmissionIndex) null);
      }
      else
        callback(new WebAPI.Response.GuildmissionIndex(json.Json));
    }));
  }

  public static Future<WebAPI.Response.GuildmissionReceive> GuildmissionReceive(
    int mission_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.GuildmissionReceive>((Func<Promise<WebAPI.Response.GuildmissionReceive>, IEnumerator>) (promise => WebAPI.LoadGuildmissionReceive(promise, mission_id, userErrorCallback)));
  }

  private static IEnumerator LoadGuildmissionReceive(
    Promise<WebAPI.Response.GuildmissionReceive> promise,
    int mission_id,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalGuildmissionReceive(mission_id, (Action<WebAPI.Response.GuildmissionReceive>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalGuildmissionReceive(
    int mission_id,
    Action<WebAPI.Response.GuildmissionReceive> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/guildmission/receive", new Dictionary<string, object>()
    {
      [nameof (mission_id)] = (object) mission_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GuildmissionReceive) null);
      }
      else
        callback(new WebAPI.Response.GuildmissionReceive(json.Json));
    }));
  }

  public static Future<WebAPI.Response.GuildPrivateMessage> GuildPrivateMessage(
    string body,
    bool mock,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.GuildPrivateMessage>((Func<Promise<WebAPI.Response.GuildPrivateMessage>, IEnumerator>) (promise => WebAPI.LoadGuildPrivateMessage(promise, body, mock, userErrorCallback)));
  }

  private static IEnumerator LoadGuildPrivateMessage(
    Promise<WebAPI.Response.GuildPrivateMessage> promise,
    string body,
    bool mock,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalGuildPrivateMessage(body, mock, (Action<WebAPI.Response.GuildPrivateMessage>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalGuildPrivateMessage(
    string body,
    bool mock,
    Action<WebAPI.Response.GuildPrivateMessage> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/guild/private_message", new Dictionary<string, object>()
    {
      [nameof (body)] = (object) body,
      [nameof (mock)] = (object) mock
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GuildPrivateMessage) null);
      }
      else
        callback(new WebAPI.Response.GuildPrivateMessage(json.Json));
    }));
  }

  public static Future<WebAPI.Response.GuildraidBattleDetail> GuildraidBattleDetail(
    int loop_count,
    int quest_s_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.GuildraidBattleDetail>((Func<Promise<WebAPI.Response.GuildraidBattleDetail>, IEnumerator>) (promise => WebAPI.LoadGuildraidBattleDetail(promise, loop_count, quest_s_id, userErrorCallback)));
  }

  private static IEnumerator LoadGuildraidBattleDetail(
    Promise<WebAPI.Response.GuildraidBattleDetail> promise,
    int loop_count,
    int quest_s_id,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalGuildraidBattleDetail(loop_count, quest_s_id, (Action<WebAPI.Response.GuildraidBattleDetail>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalGuildraidBattleDetail(
    int loop_count,
    int quest_s_id,
    Action<WebAPI.Response.GuildraidBattleDetail> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/guildraid/battle/detail", new Dictionary<string, object>()
    {
      [nameof (loop_count)] = (object) loop_count,
      [nameof (quest_s_id)] = (object) quest_s_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GuildraidBattleDetail) null);
      }
      else
        callback(new WebAPI.Response.GuildraidBattleDetail(json.Json));
    }));
  }

  public static Future<WebAPI.Response.GuildraidBattleEditSupplyDeck> GuildraidBattleEditSupplyDeck(
    int[] deck_quantities,
    int[] deck_supply_ids,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.GuildraidBattleEditSupplyDeck>((Func<Promise<WebAPI.Response.GuildraidBattleEditSupplyDeck>, IEnumerator>) (promise => WebAPI.LoadGuildraidBattleEditSupplyDeck(promise, deck_quantities, deck_supply_ids, userErrorCallback)));
  }

  private static IEnumerator LoadGuildraidBattleEditSupplyDeck(
    Promise<WebAPI.Response.GuildraidBattleEditSupplyDeck> promise,
    int[] deck_quantities,
    int[] deck_supply_ids,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalGuildraidBattleEditSupplyDeck(deck_quantities, deck_supply_ids, (Action<WebAPI.Response.GuildraidBattleEditSupplyDeck>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalGuildraidBattleEditSupplyDeck(
    int[] deck_quantities,
    int[] deck_supply_ids,
    Action<WebAPI.Response.GuildraidBattleEditSupplyDeck> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/guildraid/battle/edit_supply_deck", new Dictionary<string, object>()
    {
      [nameof (deck_quantities)] = (object) deck_quantities,
      [nameof (deck_supply_ids)] = (object) deck_supply_ids
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GuildraidBattleEditSupplyDeck) null);
      }
      else
        callback(new WebAPI.Response.GuildraidBattleEditSupplyDeck(json.Json));
    }));
  }

  public static Future<WebAPI.Response.GuildraidBattleFinish> GuildraidBattleFinish(
    string battle_log,
    int battle_turn,
    string battle_uuid,
    int boss_damage,
    int boss_id,
    int boss_level,
    int continue_count,
    int[] drop_entity_ids,
    int[] duels_critical_count,
    int[] duels_damage,
    int[] duels_hit_damage,
    int[] duels_max_damage,
    int[] enemy_results_dead_count,
    int[] enemy_results_enemy_id,
    int[] enemy_results_kill_count,
    int[] enemy_results_level_difference,
    int[] enemy_results_overkill_damage,
    int[] gear_results_damage_count,
    int[] gear_results_kill_count,
    int[] gear_results_player_gear_id,
    int[] intimate_result_target_player_character_id,
    int[] intimate_results_exp,
    int[] intimate_results_player_character_id,
    bool is_game_over,
    bool is_retire,
    bool is_simulation,
    int[] panel_entity_ids,
    int period_id,
    int stage_id,
    int[] supply_results_supply_id,
    int[] supply_results_use_quantity,
    int[] unit_results_guest_unit,
    int[] unit_results_player_unit_id,
    int[] unit_results_received_damage,
    int[] unit_results_remaining_hp,
    int[] unit_results_rental,
    int[] unit_results_total_damage,
    int[] unit_results_total_damage_count,
    int[] unit_results_total_kill_count,
    int weak_element_attack_count,
    int weak_kind_attack_count,
    int win,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.GuildraidBattleFinish>((Func<Promise<WebAPI.Response.GuildraidBattleFinish>, IEnumerator>) (promise => WebAPI.LoadGuildraidBattleFinish(promise, battle_log, battle_turn, battle_uuid, boss_damage, boss_id, boss_level, continue_count, drop_entity_ids, duels_critical_count, duels_damage, duels_hit_damage, duels_max_damage, enemy_results_dead_count, enemy_results_enemy_id, enemy_results_kill_count, enemy_results_level_difference, enemy_results_overkill_damage, gear_results_damage_count, gear_results_kill_count, gear_results_player_gear_id, intimate_result_target_player_character_id, intimate_results_exp, intimate_results_player_character_id, is_game_over, is_retire, is_simulation, panel_entity_ids, period_id, stage_id, supply_results_supply_id, supply_results_use_quantity, unit_results_guest_unit, unit_results_player_unit_id, unit_results_received_damage, unit_results_remaining_hp, unit_results_rental, unit_results_total_damage, unit_results_total_damage_count, unit_results_total_kill_count, weak_element_attack_count, weak_kind_attack_count, win, userErrorCallback)));
  }

  private static IEnumerator LoadGuildraidBattleFinish(
    Promise<WebAPI.Response.GuildraidBattleFinish> promise,
    string battle_log,
    int battle_turn,
    string battle_uuid,
    int boss_damage,
    int boss_id,
    int boss_level,
    int continue_count,
    int[] drop_entity_ids,
    int[] duels_critical_count,
    int[] duels_damage,
    int[] duels_hit_damage,
    int[] duels_max_damage,
    int[] enemy_results_dead_count,
    int[] enemy_results_enemy_id,
    int[] enemy_results_kill_count,
    int[] enemy_results_level_difference,
    int[] enemy_results_overkill_damage,
    int[] gear_results_damage_count,
    int[] gear_results_kill_count,
    int[] gear_results_player_gear_id,
    int[] intimate_result_target_player_character_id,
    int[] intimate_results_exp,
    int[] intimate_results_player_character_id,
    bool is_game_over,
    bool is_retire,
    bool is_simulation,
    int[] panel_entity_ids,
    int period_id,
    int stage_id,
    int[] supply_results_supply_id,
    int[] supply_results_use_quantity,
    int[] unit_results_guest_unit,
    int[] unit_results_player_unit_id,
    int[] unit_results_received_damage,
    int[] unit_results_remaining_hp,
    int[] unit_results_rental,
    int[] unit_results_total_damage,
    int[] unit_results_total_damage_count,
    int[] unit_results_total_kill_count,
    int weak_element_attack_count,
    int weak_kind_attack_count,
    int win,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalGuildraidBattleFinish(battle_log, battle_turn, battle_uuid, boss_damage, boss_id, boss_level, continue_count, drop_entity_ids, duels_critical_count, duels_damage, duels_hit_damage, duels_max_damage, enemy_results_dead_count, enemy_results_enemy_id, enemy_results_kill_count, enemy_results_level_difference, enemy_results_overkill_damage, gear_results_damage_count, gear_results_kill_count, gear_results_player_gear_id, intimate_result_target_player_character_id, intimate_results_exp, intimate_results_player_character_id, is_game_over, is_retire, is_simulation, panel_entity_ids, period_id, stage_id, supply_results_supply_id, supply_results_use_quantity, unit_results_guest_unit, unit_results_player_unit_id, unit_results_received_damage, unit_results_remaining_hp, unit_results_rental, unit_results_total_damage, unit_results_total_damage_count, unit_results_total_kill_count, weak_element_attack_count, weak_kind_attack_count, win, (Action<WebAPI.Response.GuildraidBattleFinish>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalGuildraidBattleFinish(
    string battle_log,
    int battle_turn,
    string battle_uuid,
    int boss_damage,
    int boss_id,
    int boss_level,
    int continue_count,
    int[] drop_entity_ids,
    int[] duels_critical_count,
    int[] duels_damage,
    int[] duels_hit_damage,
    int[] duels_max_damage,
    int[] enemy_results_dead_count,
    int[] enemy_results_enemy_id,
    int[] enemy_results_kill_count,
    int[] enemy_results_level_difference,
    int[] enemy_results_overkill_damage,
    int[] gear_results_damage_count,
    int[] gear_results_kill_count,
    int[] gear_results_player_gear_id,
    int[] intimate_result_target_player_character_id,
    int[] intimate_results_exp,
    int[] intimate_results_player_character_id,
    bool is_game_over,
    bool is_retire,
    bool is_simulation,
    int[] panel_entity_ids,
    int period_id,
    int stage_id,
    int[] supply_results_supply_id,
    int[] supply_results_use_quantity,
    int[] unit_results_guest_unit,
    int[] unit_results_player_unit_id,
    int[] unit_results_received_damage,
    int[] unit_results_remaining_hp,
    int[] unit_results_rental,
    int[] unit_results_total_damage,
    int[] unit_results_total_damage_count,
    int[] unit_results_total_kill_count,
    int weak_element_attack_count,
    int weak_kind_attack_count,
    int win,
    Action<WebAPI.Response.GuildraidBattleFinish> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/guildraid/battle/finish", new Dictionary<string, object>()
    {
      [nameof (battle_log)] = (object) battle_log,
      [nameof (battle_turn)] = (object) battle_turn,
      [nameof (battle_uuid)] = (object) battle_uuid,
      [nameof (boss_damage)] = (object) boss_damage,
      [nameof (boss_id)] = (object) boss_id,
      [nameof (boss_level)] = (object) boss_level,
      [nameof (continue_count)] = (object) continue_count,
      [nameof (drop_entity_ids)] = (object) drop_entity_ids,
      [nameof (duels_critical_count)] = (object) duels_critical_count,
      [nameof (duels_damage)] = (object) duels_damage,
      [nameof (duels_hit_damage)] = (object) duels_hit_damage,
      [nameof (duels_max_damage)] = (object) duels_max_damage,
      [nameof (enemy_results_dead_count)] = (object) enemy_results_dead_count,
      [nameof (enemy_results_enemy_id)] = (object) enemy_results_enemy_id,
      [nameof (enemy_results_kill_count)] = (object) enemy_results_kill_count,
      [nameof (enemy_results_level_difference)] = (object) enemy_results_level_difference,
      [nameof (enemy_results_overkill_damage)] = (object) enemy_results_overkill_damage,
      [nameof (gear_results_damage_count)] = (object) gear_results_damage_count,
      [nameof (gear_results_kill_count)] = (object) gear_results_kill_count,
      [nameof (gear_results_player_gear_id)] = (object) gear_results_player_gear_id,
      [nameof (intimate_result_target_player_character_id)] = (object) intimate_result_target_player_character_id,
      [nameof (intimate_results_exp)] = (object) intimate_results_exp,
      [nameof (intimate_results_player_character_id)] = (object) intimate_results_player_character_id,
      [nameof (is_game_over)] = (object) is_game_over,
      [nameof (is_retire)] = (object) is_retire,
      [nameof (is_simulation)] = (object) is_simulation,
      [nameof (panel_entity_ids)] = (object) panel_entity_ids,
      [nameof (period_id)] = (object) period_id,
      [nameof (stage_id)] = (object) stage_id,
      [nameof (supply_results_supply_id)] = (object) supply_results_supply_id,
      [nameof (supply_results_use_quantity)] = (object) supply_results_use_quantity,
      [nameof (unit_results_guest_unit)] = (object) unit_results_guest_unit,
      [nameof (unit_results_player_unit_id)] = (object) unit_results_player_unit_id,
      [nameof (unit_results_received_damage)] = (object) unit_results_received_damage,
      [nameof (unit_results_remaining_hp)] = (object) unit_results_remaining_hp,
      [nameof (unit_results_rental)] = (object) unit_results_rental,
      [nameof (unit_results_total_damage)] = (object) unit_results_total_damage,
      [nameof (unit_results_total_damage_count)] = (object) unit_results_total_damage_count,
      [nameof (unit_results_total_kill_count)] = (object) unit_results_total_kill_count,
      [nameof (weak_element_attack_count)] = (object) weak_element_attack_count,
      [nameof (weak_kind_attack_count)] = (object) weak_kind_attack_count,
      [nameof (win)] = (object) win
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GuildraidBattleFinish) null);
      }
      else
        callback(new WebAPI.Response.GuildraidBattleFinish(json.Json));
    }));
  }

  public static Future<WebAPI.Response.GuildraidBattleForceClose> GuildraidBattleForceClose(
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.GuildraidBattleForceClose>((Func<Promise<WebAPI.Response.GuildraidBattleForceClose>, IEnumerator>) (promise => WebAPI.LoadGuildraidBattleForceClose(promise, userErrorCallback)));
  }

  private static IEnumerator LoadGuildraidBattleForceClose(
    Promise<WebAPI.Response.GuildraidBattleForceClose> promise,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalGuildraidBattleForceClose((Action<WebAPI.Response.GuildraidBattleForceClose>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalGuildraidBattleForceClose(
    Action<WebAPI.Response.GuildraidBattleForceClose> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Get("/guildraid/battle/force-close", (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GuildraidBattleForceClose) null);
      }
      else
        callback(new WebAPI.Response.GuildraidBattleForceClose(json.Json));
    }));
  }

  public static Future<WebAPI.Response.GuildraidBattleHelper> GuildraidBattleHelper(
    int rental_element_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.GuildraidBattleHelper>((Func<Promise<WebAPI.Response.GuildraidBattleHelper>, IEnumerator>) (promise => WebAPI.LoadGuildraidBattleHelper(promise, rental_element_id, userErrorCallback)));
  }

  private static IEnumerator LoadGuildraidBattleHelper(
    Promise<WebAPI.Response.GuildraidBattleHelper> promise,
    int rental_element_id,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalGuildraidBattleHelper(rental_element_id, (Action<WebAPI.Response.GuildraidBattleHelper>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalGuildraidBattleHelper(
    int rental_element_id,
    Action<WebAPI.Response.GuildraidBattleHelper> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/guildraid/battle/helper", new Dictionary<string, object>()
    {
      [nameof (rental_element_id)] = (object) rental_element_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GuildraidBattleHelper) null);
      }
      else
        callback(new WebAPI.Response.GuildraidBattleHelper(json.Json));
    }));
  }

  public static Future<WebAPI.Response.GuildraidBattleResume> GuildraidBattleResume(
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.GuildraidBattleResume>((Func<Promise<WebAPI.Response.GuildraidBattleResume>, IEnumerator>) (promise => WebAPI.LoadGuildraidBattleResume(promise, userErrorCallback)));
  }

  private static IEnumerator LoadGuildraidBattleResume(
    Promise<WebAPI.Response.GuildraidBattleResume> promise,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalGuildraidBattleResume((Action<WebAPI.Response.GuildraidBattleResume>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalGuildraidBattleResume(
    Action<WebAPI.Response.GuildraidBattleResume> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Get("/guildraid/battle/resume", (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GuildraidBattleResume) null);
      }
      else
        callback(new WebAPI.Response.GuildraidBattleResume(json.Json));
    }));
  }

  public static Future<WebAPI.Response.GuildraidBattleStart> GuildraidBattleStart(
    int deck_number,
    int deck_type_id,
    bool is_simulation,
    int loop_count,
    int[] player_unit_ids,
    int quest_s_id,
    string support_player_id,
    int support_player_unit_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.GuildraidBattleStart>((Func<Promise<WebAPI.Response.GuildraidBattleStart>, IEnumerator>) (promise => WebAPI.LoadGuildraidBattleStart(promise, deck_number, deck_type_id, is_simulation, loop_count, player_unit_ids, quest_s_id, support_player_id, support_player_unit_id, userErrorCallback)));
  }

  private static IEnumerator LoadGuildraidBattleStart(
    Promise<WebAPI.Response.GuildraidBattleStart> promise,
    int deck_number,
    int deck_type_id,
    bool is_simulation,
    int loop_count,
    int[] player_unit_ids,
    int quest_s_id,
    string support_player_id,
    int support_player_unit_id,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalGuildraidBattleStart(deck_number, deck_type_id, is_simulation, loop_count, player_unit_ids, quest_s_id, support_player_id, support_player_unit_id, (Action<WebAPI.Response.GuildraidBattleStart>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalGuildraidBattleStart(
    int deck_number,
    int deck_type_id,
    bool is_simulation,
    int loop_count,
    int[] player_unit_ids,
    int quest_s_id,
    string support_player_id,
    int support_player_unit_id,
    Action<WebAPI.Response.GuildraidBattleStart> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/guildraid/battle/start", new Dictionary<string, object>()
    {
      [nameof (deck_number)] = (object) deck_number,
      [nameof (deck_type_id)] = (object) deck_type_id,
      [nameof (is_simulation)] = (object) is_simulation,
      [nameof (loop_count)] = (object) loop_count,
      [nameof (player_unit_ids)] = (object) player_unit_ids,
      [nameof (quest_s_id)] = (object) quest_s_id,
      [nameof (support_player_id)] = (object) support_player_id,
      [nameof (support_player_unit_id)] = (object) support_player_unit_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GuildraidBattleStart) null);
      }
      else
        callback(new WebAPI.Response.GuildraidBattleStart(json.Json));
    }));
  }

  public static Future<WebAPI.Response.GuildraidHistoryDeck> GuildraidHistoryDeck(
    string battle_uuid,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.GuildraidHistoryDeck>((Func<Promise<WebAPI.Response.GuildraidHistoryDeck>, IEnumerator>) (promise => WebAPI.LoadGuildraidHistoryDeck(promise, battle_uuid, userErrorCallback)));
  }

  private static IEnumerator LoadGuildraidHistoryDeck(
    Promise<WebAPI.Response.GuildraidHistoryDeck> promise,
    string battle_uuid,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalGuildraidHistoryDeck(battle_uuid, (Action<WebAPI.Response.GuildraidHistoryDeck>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalGuildraidHistoryDeck(
    string battle_uuid,
    Action<WebAPI.Response.GuildraidHistoryDeck> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/guildraid/history/deck", new Dictionary<string, object>()
    {
      [nameof (battle_uuid)] = (object) battle_uuid
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GuildraidHistoryDeck) null);
      }
      else
        callback(new WebAPI.Response.GuildraidHistoryDeck(json.Json));
    }));
  }

  public static Future<WebAPI.Response.GuildraidRaidEndlessEntry> GuildraidRaidEndlessEntry(
    int period_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.GuildraidRaidEndlessEntry>((Func<Promise<WebAPI.Response.GuildraidRaidEndlessEntry>, IEnumerator>) (promise => WebAPI.LoadGuildraidRaidEndlessEntry(promise, period_id, userErrorCallback)));
  }

  private static IEnumerator LoadGuildraidRaidEndlessEntry(
    Promise<WebAPI.Response.GuildraidRaidEndlessEntry> promise,
    int period_id,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalGuildraidRaidEndlessEntry(period_id, (Action<WebAPI.Response.GuildraidRaidEndlessEntry>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalGuildraidRaidEndlessEntry(
    int period_id,
    Action<WebAPI.Response.GuildraidRaidEndlessEntry> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/guildraid/raid/endless_entry", new Dictionary<string, object>()
    {
      [nameof (period_id)] = (object) period_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GuildraidRaidEndlessEntry) null);
      }
      else
        callback(new WebAPI.Response.GuildraidRaidEndlessEntry(json.Json));
    }));
  }

  public static Future<WebAPI.Response.GuildraidRaidTop> GuildraidRaidTop(
    bool is_complete,
    int last_loop,
    int last_order,
    int last_period_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.GuildraidRaidTop>((Func<Promise<WebAPI.Response.GuildraidRaidTop>, IEnumerator>) (promise => WebAPI.LoadGuildraidRaidTop(promise, is_complete, last_loop, last_order, last_period_id, userErrorCallback)));
  }

  private static IEnumerator LoadGuildraidRaidTop(
    Promise<WebAPI.Response.GuildraidRaidTop> promise,
    bool is_complete,
    int last_loop,
    int last_order,
    int last_period_id,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalGuildraidRaidTop(is_complete, last_loop, last_order, last_period_id, (Action<WebAPI.Response.GuildraidRaidTop>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalGuildraidRaidTop(
    bool is_complete,
    int last_loop,
    int last_order,
    int last_period_id,
    Action<WebAPI.Response.GuildraidRaidTop> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/guildraid/raid/top", new Dictionary<string, object>()
    {
      [nameof (is_complete)] = (object) is_complete,
      [nameof (last_loop)] = (object) last_loop,
      [nameof (last_order)] = (object) last_order,
      [nameof (last_period_id)] = (object) last_period_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GuildraidRaidTop) null);
      }
      else
        callback(new WebAPI.Response.GuildraidRaidTop(json.Json));
    }));
  }

  public static Future<WebAPI.Response.GuildraidRankingGuild> GuildraidRankingGuild(
    int period_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.GuildraidRankingGuild>((Func<Promise<WebAPI.Response.GuildraidRankingGuild>, IEnumerator>) (promise => WebAPI.LoadGuildraidRankingGuild(promise, period_id, userErrorCallback)));
  }

  private static IEnumerator LoadGuildraidRankingGuild(
    Promise<WebAPI.Response.GuildraidRankingGuild> promise,
    int period_id,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalGuildraidRankingGuild(period_id, (Action<WebAPI.Response.GuildraidRankingGuild>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalGuildraidRankingGuild(
    int period_id,
    Action<WebAPI.Response.GuildraidRankingGuild> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/guildraid/ranking/guild", new Dictionary<string, object>()
    {
      [nameof (period_id)] = (object) period_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GuildraidRankingGuild) null);
      }
      else
        callback(new WebAPI.Response.GuildraidRankingGuild(json.Json));
    }));
  }

  public static Future<WebAPI.Response.GuildraidRankingPlayer> GuildraidRankingPlayer(
    int boss_id,
    int period_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.GuildraidRankingPlayer>((Func<Promise<WebAPI.Response.GuildraidRankingPlayer>, IEnumerator>) (promise => WebAPI.LoadGuildraidRankingPlayer(promise, boss_id, period_id, userErrorCallback)));
  }

  private static IEnumerator LoadGuildraidRankingPlayer(
    Promise<WebAPI.Response.GuildraidRankingPlayer> promise,
    int boss_id,
    int period_id,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalGuildraidRankingPlayer(boss_id, period_id, (Action<WebAPI.Response.GuildraidRankingPlayer>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalGuildraidRankingPlayer(
    int boss_id,
    int period_id,
    Action<WebAPI.Response.GuildraidRankingPlayer> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/guildraid/ranking/player", new Dictionary<string, object>()
    {
      [nameof (boss_id)] = (object) boss_id,
      [nameof (period_id)] = (object) period_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GuildraidRankingPlayer) null);
      }
      else
        callback(new WebAPI.Response.GuildraidRankingPlayer(json.Json));
    }));
  }

  public static Future<WebAPI.Response.GuildraidSubjugationHistory> GuildraidSubjugationHistory(
    int period_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.GuildraidSubjugationHistory>((Func<Promise<WebAPI.Response.GuildraidSubjugationHistory>, IEnumerator>) (promise => WebAPI.LoadGuildraidSubjugationHistory(promise, period_id, userErrorCallback)));
  }

  private static IEnumerator LoadGuildraidSubjugationHistory(
    Promise<WebAPI.Response.GuildraidSubjugationHistory> promise,
    int period_id,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalGuildraidSubjugationHistory(period_id, (Action<WebAPI.Response.GuildraidSubjugationHistory>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalGuildraidSubjugationHistory(
    int period_id,
    Action<WebAPI.Response.GuildraidSubjugationHistory> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/guildraid/subjugation_history", new Dictionary<string, object>()
    {
      [nameof (period_id)] = (object) period_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GuildraidSubjugationHistory) null);
      }
      else
        callback(new WebAPI.Response.GuildraidSubjugationHistory(json.Json));
    }));
  }

  public static Future<WebAPI.Response.GuildRecommends> GuildRecommends(
    bool is_random,
    int limit,
    bool mock,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.GuildRecommends>((Func<Promise<WebAPI.Response.GuildRecommends>, IEnumerator>) (promise => WebAPI.LoadGuildRecommends(promise, is_random, limit, mock, userErrorCallback)));
  }

  private static IEnumerator LoadGuildRecommends(
    Promise<WebAPI.Response.GuildRecommends> promise,
    bool is_random,
    int limit,
    bool mock,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalGuildRecommends(is_random, limit, mock, (Action<WebAPI.Response.GuildRecommends>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalGuildRecommends(
    bool is_random,
    int limit,
    bool mock,
    Action<WebAPI.Response.GuildRecommends> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/guild/recommends", new Dictionary<string, object>()
    {
      [nameof (is_random)] = (object) is_random,
      [nameof (limit)] = (object) limit,
      [nameof (mock)] = (object) mock
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GuildRecommends) null);
      }
      else
        callback(new WebAPI.Response.GuildRecommends(json.Json));
    }));
  }

  public static Future<WebAPI.Response.GuildSearch> GuildSearch(
    int approval_policy_id,
    int atmosphere_id,
    int auto_approval_id,
    int auto_kick_id,
    int availability_id,
    string guild_name,
    int limit,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.GuildSearch>((Func<Promise<WebAPI.Response.GuildSearch>, IEnumerator>) (promise => WebAPI.LoadGuildSearch(promise, approval_policy_id, atmosphere_id, auto_approval_id, auto_kick_id, availability_id, guild_name, limit, userErrorCallback)));
  }

  private static IEnumerator LoadGuildSearch(
    Promise<WebAPI.Response.GuildSearch> promise,
    int approval_policy_id,
    int atmosphere_id,
    int auto_approval_id,
    int auto_kick_id,
    int availability_id,
    string guild_name,
    int limit,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalGuildSearch(approval_policy_id, atmosphere_id, auto_approval_id, auto_kick_id, availability_id, guild_name, limit, (Action<WebAPI.Response.GuildSearch>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalGuildSearch(
    int approval_policy_id,
    int atmosphere_id,
    int auto_approval_id,
    int auto_kick_id,
    int availability_id,
    string guild_name,
    int limit,
    Action<WebAPI.Response.GuildSearch> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/guild/search", new Dictionary<string, object>()
    {
      [nameof (approval_policy_id)] = (object) approval_policy_id,
      [nameof (atmosphere_id)] = (object) atmosphere_id,
      [nameof (auto_approval_id)] = (object) auto_approval_id,
      [nameof (auto_kick_id)] = (object) auto_kick_id,
      [nameof (availability_id)] = (object) availability_id,
      [nameof (guild_name)] = (object) guild_name,
      [nameof (limit)] = (object) limit
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GuildSearch) null);
      }
      else
        callback(new WebAPI.Response.GuildSearch(json.Json));
    }));
  }

  public static Future<WebAPI.Response.GuildSettings> GuildSettings(
    int approval_policy_id,
    int atmosphere_id,
    int auto_approval_id,
    int auto_kick_id,
    string guild_name,
    bool mock,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.GuildSettings>((Func<Promise<WebAPI.Response.GuildSettings>, IEnumerator>) (promise => WebAPI.LoadGuildSettings(promise, approval_policy_id, atmosphere_id, auto_approval_id, auto_kick_id, guild_name, mock, userErrorCallback)));
  }

  private static IEnumerator LoadGuildSettings(
    Promise<WebAPI.Response.GuildSettings> promise,
    int approval_policy_id,
    int atmosphere_id,
    int auto_approval_id,
    int auto_kick_id,
    string guild_name,
    bool mock,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalGuildSettings(approval_policy_id, atmosphere_id, auto_approval_id, auto_kick_id, guild_name, mock, (Action<WebAPI.Response.GuildSettings>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalGuildSettings(
    int approval_policy_id,
    int atmosphere_id,
    int auto_approval_id,
    int auto_kick_id,
    string guild_name,
    bool mock,
    Action<WebAPI.Response.GuildSettings> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/guild/settings", new Dictionary<string, object>()
    {
      [nameof (approval_policy_id)] = (object) approval_policy_id,
      [nameof (atmosphere_id)] = (object) atmosphere_id,
      [nameof (auto_approval_id)] = (object) auto_approval_id,
      [nameof (auto_kick_id)] = (object) auto_kick_id,
      [nameof (guild_name)] = (object) guild_name,
      [nameof (mock)] = (object) mock
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GuildSettings) null);
      }
      else
        callback(new WebAPI.Response.GuildSettings(json.Json));
    }));
  }

  public static Future<WebAPI.Response.GuildShow> GuildShow(
    string guild_id,
    bool mock,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.GuildShow>((Func<Promise<WebAPI.Response.GuildShow>, IEnumerator>) (promise => WebAPI.LoadGuildShow(promise, guild_id, mock, userErrorCallback)));
  }

  private static IEnumerator LoadGuildShow(
    Promise<WebAPI.Response.GuildShow> promise,
    string guild_id,
    bool mock,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalGuildShow(guild_id, mock, (Action<WebAPI.Response.GuildShow>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalGuildShow(
    string guild_id,
    bool mock,
    Action<WebAPI.Response.GuildShow> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/guild/show", new Dictionary<string, object>()
    {
      [nameof (guild_id)] = (object) guild_id,
      [nameof (mock)] = (object) mock
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GuildShow) null);
      }
      else
        callback(new WebAPI.Response.GuildShow(json.Json));
    }));
  }

  public static Future<WebAPI.Response.GuildSignal> GuildSignal(
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.GuildSignal>((Func<Promise<WebAPI.Response.GuildSignal>, IEnumerator>) (promise => WebAPI.LoadGuildSignal(promise, userErrorCallback)));
  }

  private static IEnumerator LoadGuildSignal(
    Promise<WebAPI.Response.GuildSignal> promise,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalGuildSignal((Action<WebAPI.Response.GuildSignal>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalGuildSignal(
    Action<WebAPI.Response.GuildSignal> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Get("/guild/signal", (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GuildSignal) null);
      }
      else
        callback(new WebAPI.Response.GuildSignal(json.Json));
    }));
  }

  public static Future<WebAPI.Response.GuildSubmasterAssign> GuildSubmasterAssign(
    bool mock,
    string target_player_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.GuildSubmasterAssign>((Func<Promise<WebAPI.Response.GuildSubmasterAssign>, IEnumerator>) (promise => WebAPI.LoadGuildSubmasterAssign(promise, mock, target_player_id, userErrorCallback)));
  }

  private static IEnumerator LoadGuildSubmasterAssign(
    Promise<WebAPI.Response.GuildSubmasterAssign> promise,
    bool mock,
    string target_player_id,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalGuildSubmasterAssign(mock, target_player_id, (Action<WebAPI.Response.GuildSubmasterAssign>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalGuildSubmasterAssign(
    bool mock,
    string target_player_id,
    Action<WebAPI.Response.GuildSubmasterAssign> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/guild/submaster/assign", new Dictionary<string, object>()
    {
      [nameof (mock)] = (object) mock,
      [nameof (target_player_id)] = (object) target_player_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GuildSubmasterAssign) null);
      }
      else
        callback(new WebAPI.Response.GuildSubmasterAssign(json.Json));
    }));
  }

  public static Future<WebAPI.Response.GuildSubmasterDismiss> GuildSubmasterDismiss(
    bool mock,
    string target_player_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.GuildSubmasterDismiss>((Func<Promise<WebAPI.Response.GuildSubmasterDismiss>, IEnumerator>) (promise => WebAPI.LoadGuildSubmasterDismiss(promise, mock, target_player_id, userErrorCallback)));
  }

  private static IEnumerator LoadGuildSubmasterDismiss(
    Promise<WebAPI.Response.GuildSubmasterDismiss> promise,
    bool mock,
    string target_player_id,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalGuildSubmasterDismiss(mock, target_player_id, (Action<WebAPI.Response.GuildSubmasterDismiss>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalGuildSubmasterDismiss(
    bool mock,
    string target_player_id,
    Action<WebAPI.Response.GuildSubmasterDismiss> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/guild/submaster/dismiss", new Dictionary<string, object>()
    {
      [nameof (mock)] = (object) mock,
      [nameof (target_player_id)] = (object) target_player_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GuildSubmasterDismiss) null);
      }
      else
        callback(new WebAPI.Response.GuildSubmasterDismiss(json.Json));
    }));
  }

  public static Future<WebAPI.Response.GuildSubmasterResign> GuildSubmasterResign(
    bool mock,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.GuildSubmasterResign>((Func<Promise<WebAPI.Response.GuildSubmasterResign>, IEnumerator>) (promise => WebAPI.LoadGuildSubmasterResign(promise, mock, userErrorCallback)));
  }

  private static IEnumerator LoadGuildSubmasterResign(
    Promise<WebAPI.Response.GuildSubmasterResign> promise,
    bool mock,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalGuildSubmasterResign(mock, (Action<WebAPI.Response.GuildSubmasterResign>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalGuildSubmasterResign(
    bool mock,
    Action<WebAPI.Response.GuildSubmasterResign> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/guild/submaster/resign", new Dictionary<string, object>()
    {
      [nameof (mock)] = (object) mock
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GuildSubmasterResign) null);
      }
      else
        callback(new WebAPI.Response.GuildSubmasterResign(json.Json));
    }));
  }

  public static Future<WebAPI.Response.GuildTop> GuildTop(
    string guild_log_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.GuildTop>((Func<Promise<WebAPI.Response.GuildTop>, IEnumerator>) (promise => WebAPI.LoadGuildTop(promise, guild_log_id, userErrorCallback)));
  }

  private static IEnumerator LoadGuildTop(
    Promise<WebAPI.Response.GuildTop> promise,
    string guild_log_id,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalGuildTop(guild_log_id, (Action<WebAPI.Response.GuildTop>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalGuildTop(
    string guild_log_id,
    Action<WebAPI.Response.GuildTop> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/guild/top", new Dictionary<string, object>()
    {
      [nameof (guild_log_id)] = (object) guild_log_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GuildTop) null);
      }
      else
        callback(new WebAPI.Response.GuildTop(json.Json));
    }));
  }

  public static Future<WebAPI.Response.GuildtownChange> GuildtownChange(
    int slot_number,
    int town_master_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.GuildtownChange>((Func<Promise<WebAPI.Response.GuildtownChange>, IEnumerator>) (promise => WebAPI.LoadGuildtownChange(promise, slot_number, town_master_id, userErrorCallback)));
  }

  private static IEnumerator LoadGuildtownChange(
    Promise<WebAPI.Response.GuildtownChange> promise,
    int slot_number,
    int town_master_id,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalGuildtownChange(slot_number, town_master_id, (Action<WebAPI.Response.GuildtownChange>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalGuildtownChange(
    int slot_number,
    int town_master_id,
    Action<WebAPI.Response.GuildtownChange> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/guildtown/change", new Dictionary<string, object>()
    {
      [nameof (slot_number)] = (object) slot_number,
      [nameof (town_master_id)] = (object) town_master_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GuildtownChange) null);
      }
      else
        callback(new WebAPI.Response.GuildtownChange(json.Json));
    }));
  }

  public static Future<WebAPI.Response.GuildtownGuildMedalShop> GuildtownGuildMedalShop(
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.GuildtownGuildMedalShop>((Func<Promise<WebAPI.Response.GuildtownGuildMedalShop>, IEnumerator>) (promise => WebAPI.LoadGuildtownGuildMedalShop(promise, userErrorCallback)));
  }

  private static IEnumerator LoadGuildtownGuildMedalShop(
    Promise<WebAPI.Response.GuildtownGuildMedalShop> promise,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalGuildtownGuildMedalShop((Action<WebAPI.Response.GuildtownGuildMedalShop>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalGuildtownGuildMedalShop(
    Action<WebAPI.Response.GuildtownGuildMedalShop> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Get("/guildtown/guild_medal_shop", (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GuildtownGuildMedalShop) null);
      }
      else
        callback(new WebAPI.Response.GuildtownGuildMedalShop(json.Json));
    }));
  }

  public static Future<WebAPI.Response.GuildtownSave> GuildtownSave(
    int[] facilities_id,
    int[] facilities_position_x,
    int[] facilities_position_y,
    bool select_slot,
    int slot_number,
    int town_master_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.GuildtownSave>((Func<Promise<WebAPI.Response.GuildtownSave>, IEnumerator>) (promise => WebAPI.LoadGuildtownSave(promise, facilities_id, facilities_position_x, facilities_position_y, select_slot, slot_number, town_master_id, userErrorCallback)));
  }

  private static IEnumerator LoadGuildtownSave(
    Promise<WebAPI.Response.GuildtownSave> promise,
    int[] facilities_id,
    int[] facilities_position_x,
    int[] facilities_position_y,
    bool select_slot,
    int slot_number,
    int town_master_id,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalGuildtownSave(facilities_id, facilities_position_x, facilities_position_y, select_slot, slot_number, town_master_id, (Action<WebAPI.Response.GuildtownSave>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalGuildtownSave(
    int[] facilities_id,
    int[] facilities_position_x,
    int[] facilities_position_y,
    bool select_slot,
    int slot_number,
    int town_master_id,
    Action<WebAPI.Response.GuildtownSave> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/guildtown/save", new Dictionary<string, object>()
    {
      [nameof (facilities_id)] = (object) facilities_id,
      [nameof (facilities_position_x)] = (object) facilities_position_x,
      [nameof (facilities_position_y)] = (object) facilities_position_y,
      [nameof (select_slot)] = (object) select_slot,
      [nameof (slot_number)] = (object) slot_number,
      [nameof (town_master_id)] = (object) town_master_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GuildtownSave) null);
      }
      else
        callback(new WebAPI.Response.GuildtownSave(json.Json));
    }));
  }

  public static Future<WebAPI.Response.GuildtownSelect> GuildtownSelect(
    int slot_number,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.GuildtownSelect>((Func<Promise<WebAPI.Response.GuildtownSelect>, IEnumerator>) (promise => WebAPI.LoadGuildtownSelect(promise, slot_number, userErrorCallback)));
  }

  private static IEnumerator LoadGuildtownSelect(
    Promise<WebAPI.Response.GuildtownSelect> promise,
    int slot_number,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalGuildtownSelect(slot_number, (Action<WebAPI.Response.GuildtownSelect>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalGuildtownSelect(
    int slot_number,
    Action<WebAPI.Response.GuildtownSelect> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/guildtown/select", new Dictionary<string, object>()
    {
      [nameof (slot_number)] = (object) slot_number
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GuildtownSelect) null);
      }
      else
        callback(new WebAPI.Response.GuildtownSelect(json.Json));
    }));
  }

  public static Future<WebAPI.Response.GuildtownSellFacility> GuildtownSellFacility(
    int amount,
    int facility_master_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.GuildtownSellFacility>((Func<Promise<WebAPI.Response.GuildtownSellFacility>, IEnumerator>) (promise => WebAPI.LoadGuildtownSellFacility(promise, amount, facility_master_id, userErrorCallback)));
  }

  private static IEnumerator LoadGuildtownSellFacility(
    Promise<WebAPI.Response.GuildtownSellFacility> promise,
    int amount,
    int facility_master_id,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalGuildtownSellFacility(amount, facility_master_id, (Action<WebAPI.Response.GuildtownSellFacility>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalGuildtownSellFacility(
    int amount,
    int facility_master_id,
    Action<WebAPI.Response.GuildtownSellFacility> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/guildtown/sell_facility", new Dictionary<string, object>()
    {
      [nameof (amount)] = (object) amount,
      [nameof (facility_master_id)] = (object) facility_master_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GuildtownSellFacility) null);
      }
      else
        callback(new WebAPI.Response.GuildtownSellFacility(json.Json));
    }));
  }

  public static Future<WebAPI.Response.GuildtownShow> GuildtownShow(
    string target_player_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.GuildtownShow>((Func<Promise<WebAPI.Response.GuildtownShow>, IEnumerator>) (promise => WebAPI.LoadGuildtownShow(promise, target_player_id, userErrorCallback)));
  }

  private static IEnumerator LoadGuildtownShow(
    Promise<WebAPI.Response.GuildtownShow> promise,
    string target_player_id,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalGuildtownShow(target_player_id, (Action<WebAPI.Response.GuildtownShow>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalGuildtownShow(
    string target_player_id,
    Action<WebAPI.Response.GuildtownShow> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/guildtown/show", new Dictionary<string, object>()
    {
      [nameof (target_player_id)] = (object) target_player_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GuildtownShow) null);
      }
      else
        callback(new WebAPI.Response.GuildtownShow(json.Json));
    }));
  }

  public static Future<WebAPI.Response.GuildtownTest> GuildtownTest(
    int slot_number,
    string support_player_id,
    string target_player_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.GuildtownTest>((Func<Promise<WebAPI.Response.GuildtownTest>, IEnumerator>) (promise => WebAPI.LoadGuildtownTest(promise, slot_number, support_player_id, target_player_id, userErrorCallback)));
  }

  private static IEnumerator LoadGuildtownTest(
    Promise<WebAPI.Response.GuildtownTest> promise,
    int slot_number,
    string support_player_id,
    string target_player_id,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalGuildtownTest(slot_number, support_player_id, target_player_id, (Action<WebAPI.Response.GuildtownTest>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalGuildtownTest(
    int slot_number,
    string support_player_id,
    string target_player_id,
    Action<WebAPI.Response.GuildtownTest> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/guildtown/test", new Dictionary<string, object>()
    {
      [nameof (slot_number)] = (object) slot_number,
      [nameof (support_player_id)] = (object) support_player_id,
      [nameof (target_player_id)] = (object) target_player_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GuildtownTest) null);
      }
      else
        callback(new WebAPI.Response.GuildtownTest(json.Json));
    }));
  }

  public static Future<WebAPI.Response.GvgBattleFinish> GvgBattleFinish(
    int annihilation_count,
    string battle_uuid,
    int capture_star,
    int enemy_annihilation_count,
    int[] enemy_results_dead_count,
    int[] enemy_results_player_unit_id,
    int[] enemy_results_rental,
    int[] enemy_results_total_damage,
    int enemy_total_point,
    int total_point,
    int[] unit_results_dead_count,
    int[] unit_results_player_unit_id,
    int[] unit_results_rental,
    int[] unit_results_total_damage,
    bool win,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.GvgBattleFinish>((Func<Promise<WebAPI.Response.GvgBattleFinish>, IEnumerator>) (promise => WebAPI.LoadGvgBattleFinish(promise, annihilation_count, battle_uuid, capture_star, enemy_annihilation_count, enemy_results_dead_count, enemy_results_player_unit_id, enemy_results_rental, enemy_results_total_damage, enemy_total_point, total_point, unit_results_dead_count, unit_results_player_unit_id, unit_results_rental, unit_results_total_damage, win, userErrorCallback)));
  }

  private static IEnumerator LoadGvgBattleFinish(
    Promise<WebAPI.Response.GvgBattleFinish> promise,
    int annihilation_count,
    string battle_uuid,
    int capture_star,
    int enemy_annihilation_count,
    int[] enemy_results_dead_count,
    int[] enemy_results_player_unit_id,
    int[] enemy_results_rental,
    int[] enemy_results_total_damage,
    int enemy_total_point,
    int total_point,
    int[] unit_results_dead_count,
    int[] unit_results_player_unit_id,
    int[] unit_results_rental,
    int[] unit_results_total_damage,
    bool win,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalGvgBattleFinish(annihilation_count, battle_uuid, capture_star, enemy_annihilation_count, enemy_results_dead_count, enemy_results_player_unit_id, enemy_results_rental, enemy_results_total_damage, enemy_total_point, total_point, unit_results_dead_count, unit_results_player_unit_id, unit_results_rental, unit_results_total_damage, win, (Action<WebAPI.Response.GvgBattleFinish>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalGvgBattleFinish(
    int annihilation_count,
    string battle_uuid,
    int capture_star,
    int enemy_annihilation_count,
    int[] enemy_results_dead_count,
    int[] enemy_results_player_unit_id,
    int[] enemy_results_rental,
    int[] enemy_results_total_damage,
    int enemy_total_point,
    int total_point,
    int[] unit_results_dead_count,
    int[] unit_results_player_unit_id,
    int[] unit_results_rental,
    int[] unit_results_total_damage,
    bool win,
    Action<WebAPI.Response.GvgBattleFinish> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/gvg/battle/finish", new Dictionary<string, object>()
    {
      [nameof (annihilation_count)] = (object) annihilation_count,
      [nameof (battle_uuid)] = (object) battle_uuid,
      [nameof (capture_star)] = (object) capture_star,
      [nameof (enemy_annihilation_count)] = (object) enemy_annihilation_count,
      [nameof (enemy_results_dead_count)] = (object) enemy_results_dead_count,
      [nameof (enemy_results_player_unit_id)] = (object) enemy_results_player_unit_id,
      [nameof (enemy_results_rental)] = (object) enemy_results_rental,
      [nameof (enemy_results_total_damage)] = (object) enemy_results_total_damage,
      [nameof (enemy_total_point)] = (object) enemy_total_point,
      [nameof (total_point)] = (object) total_point,
      [nameof (unit_results_dead_count)] = (object) unit_results_dead_count,
      [nameof (unit_results_player_unit_id)] = (object) unit_results_player_unit_id,
      [nameof (unit_results_rental)] = (object) unit_results_rental,
      [nameof (unit_results_total_damage)] = (object) unit_results_total_damage,
      [nameof (win)] = (object) win
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GvgBattleFinish) null);
      }
      else
        callback(new WebAPI.Response.GvgBattleFinish(json.Json));
    }));
  }

  public static Future<WebAPI.Response.GvgBattleForceClose> GvgBattleForceClose(
    string battle_uuid,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.GvgBattleForceClose>((Func<Promise<WebAPI.Response.GvgBattleForceClose>, IEnumerator>) (promise => WebAPI.LoadGvgBattleForceClose(promise, battle_uuid, userErrorCallback)));
  }

  private static IEnumerator LoadGvgBattleForceClose(
    Promise<WebAPI.Response.GvgBattleForceClose> promise,
    string battle_uuid,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalGvgBattleForceClose(battle_uuid, (Action<WebAPI.Response.GvgBattleForceClose>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalGvgBattleForceClose(
    string battle_uuid,
    Action<WebAPI.Response.GvgBattleForceClose> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/gvg/battle/force-close", new Dictionary<string, object>()
    {
      [nameof (battle_uuid)] = (object) battle_uuid
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GvgBattleForceClose) null);
      }
      else
        callback(new WebAPI.Response.GvgBattleForceClose(json.Json));
    }));
  }

  public static Future<WebAPI.Response.GvgBattleResume> GvgBattleResume(
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.GvgBattleResume>((Func<Promise<WebAPI.Response.GvgBattleResume>, IEnumerator>) (promise => WebAPI.LoadGvgBattleResume(promise, userErrorCallback)));
  }

  private static IEnumerator LoadGvgBattleResume(
    Promise<WebAPI.Response.GvgBattleResume> promise,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalGvgBattleResume((Action<WebAPI.Response.GvgBattleResume>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalGvgBattleResume(
    Action<WebAPI.Response.GvgBattleResume> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Get("/gvg/battle/resume", (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GvgBattleResume) null);
      }
      else
        callback(new WebAPI.Response.GvgBattleResume(json.Json));
    }));
  }

  public static Future<WebAPI.Response.GvgBattleStart> GvgBattleStart(
    string support_player_id,
    string target_player_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.GvgBattleStart>((Func<Promise<WebAPI.Response.GvgBattleStart>, IEnumerator>) (promise => WebAPI.LoadGvgBattleStart(promise, support_player_id, target_player_id, userErrorCallback)));
  }

  private static IEnumerator LoadGvgBattleStart(
    Promise<WebAPI.Response.GvgBattleStart> promise,
    string support_player_id,
    string target_player_id,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalGvgBattleStart(support_player_id, target_player_id, (Action<WebAPI.Response.GvgBattleStart>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalGvgBattleStart(
    string support_player_id,
    string target_player_id,
    Action<WebAPI.Response.GvgBattleStart> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/gvg/battle/start", new Dictionary<string, object>()
    {
      [nameof (support_player_id)] = (object) support_player_id,
      [nameof (target_player_id)] = (object) target_player_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GvgBattleStart) null);
      }
      else
        callback(new WebAPI.Response.GvgBattleStart(json.Json));
    }));
  }

  public static Future<WebAPI.Response.GvgDeckAttackEdit> GvgDeckAttackEdit(
    int[] player_unit_ids,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.GvgDeckAttackEdit>((Func<Promise<WebAPI.Response.GvgDeckAttackEdit>, IEnumerator>) (promise => WebAPI.LoadGvgDeckAttackEdit(promise, player_unit_ids, userErrorCallback)));
  }

  private static IEnumerator LoadGvgDeckAttackEdit(
    Promise<WebAPI.Response.GvgDeckAttackEdit> promise,
    int[] player_unit_ids,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalGvgDeckAttackEdit(player_unit_ids, (Action<WebAPI.Response.GvgDeckAttackEdit>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalGvgDeckAttackEdit(
    int[] player_unit_ids,
    Action<WebAPI.Response.GvgDeckAttackEdit> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/gvg/deck/attack-edit", new Dictionary<string, object>()
    {
      [nameof (player_unit_ids)] = (object) player_unit_ids
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GvgDeckAttackEdit) null);
      }
      else
        callback(new WebAPI.Response.GvgDeckAttackEdit(json.Json));
    }));
  }

  public static Future<WebAPI.Response.GvgDeckAttackShow> GvgDeckAttackShow(
    string guild_id,
    string player_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.GvgDeckAttackShow>((Func<Promise<WebAPI.Response.GvgDeckAttackShow>, IEnumerator>) (promise => WebAPI.LoadGvgDeckAttackShow(promise, guild_id, player_id, userErrorCallback)));
  }

  private static IEnumerator LoadGvgDeckAttackShow(
    Promise<WebAPI.Response.GvgDeckAttackShow> promise,
    string guild_id,
    string player_id,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalGvgDeckAttackShow(guild_id, player_id, (Action<WebAPI.Response.GvgDeckAttackShow>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalGvgDeckAttackShow(
    string guild_id,
    string player_id,
    Action<WebAPI.Response.GvgDeckAttackShow> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/gvg/deck/attack-show", new Dictionary<string, object>()
    {
      [nameof (guild_id)] = (object) guild_id,
      [nameof (player_id)] = (object) player_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GvgDeckAttackShow) null);
      }
      else
        callback(new WebAPI.Response.GvgDeckAttackShow(json.Json));
    }));
  }

  public static Future<WebAPI.Response.GvgDeckDefenseEdit> GvgDeckDefenseEdit(
    int[] player_unit_ids,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.GvgDeckDefenseEdit>((Func<Promise<WebAPI.Response.GvgDeckDefenseEdit>, IEnumerator>) (promise => WebAPI.LoadGvgDeckDefenseEdit(promise, player_unit_ids, userErrorCallback)));
  }

  private static IEnumerator LoadGvgDeckDefenseEdit(
    Promise<WebAPI.Response.GvgDeckDefenseEdit> promise,
    int[] player_unit_ids,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalGvgDeckDefenseEdit(player_unit_ids, (Action<WebAPI.Response.GvgDeckDefenseEdit>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalGvgDeckDefenseEdit(
    int[] player_unit_ids,
    Action<WebAPI.Response.GvgDeckDefenseEdit> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/gvg/deck/defense-edit", new Dictionary<string, object>()
    {
      [nameof (player_unit_ids)] = (object) player_unit_ids
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GvgDeckDefenseEdit) null);
      }
      else
        callback(new WebAPI.Response.GvgDeckDefenseEdit(json.Json));
    }));
  }

  public static Future<WebAPI.Response.GvgDeckDefenseReinforcement> GvgDeckDefenseReinforcement(
    string player_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.GvgDeckDefenseReinforcement>((Func<Promise<WebAPI.Response.GvgDeckDefenseReinforcement>, IEnumerator>) (promise => WebAPI.LoadGvgDeckDefenseReinforcement(promise, player_id, userErrorCallback)));
  }

  private static IEnumerator LoadGvgDeckDefenseReinforcement(
    Promise<WebAPI.Response.GvgDeckDefenseReinforcement> promise,
    string player_id,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalGvgDeckDefenseReinforcement(player_id, (Action<WebAPI.Response.GvgDeckDefenseReinforcement>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalGvgDeckDefenseReinforcement(
    string player_id,
    Action<WebAPI.Response.GvgDeckDefenseReinforcement> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/gvg/deck/defense-reinforcement", new Dictionary<string, object>()
    {
      [nameof (player_id)] = (object) player_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GvgDeckDefenseReinforcement) null);
      }
      else
        callback(new WebAPI.Response.GvgDeckDefenseReinforcement(json.Json));
    }));
  }

  public static Future<WebAPI.Response.GvgDeckDefenseRemoveReinforcement> GvgDeckDefenseRemoveReinforcement(
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.GvgDeckDefenseRemoveReinforcement>((Func<Promise<WebAPI.Response.GvgDeckDefenseRemoveReinforcement>, IEnumerator>) (promise => WebAPI.LoadGvgDeckDefenseRemoveReinforcement(promise, userErrorCallback)));
  }

  private static IEnumerator LoadGvgDeckDefenseRemoveReinforcement(
    Promise<WebAPI.Response.GvgDeckDefenseRemoveReinforcement> promise,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalGvgDeckDefenseRemoveReinforcement((Action<WebAPI.Response.GvgDeckDefenseRemoveReinforcement>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalGvgDeckDefenseRemoveReinforcement(
    Action<WebAPI.Response.GvgDeckDefenseRemoveReinforcement> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Get("/gvg/deck/defense-remove-reinforcement", (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GvgDeckDefenseRemoveReinforcement) null);
      }
      else
        callback(new WebAPI.Response.GvgDeckDefenseRemoveReinforcement(json.Json));
    }));
  }

  public static Future<WebAPI.Response.GvgDeckDefenseShow> GvgDeckDefenseShow(
    string guild_id,
    string player_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.GvgDeckDefenseShow>((Func<Promise<WebAPI.Response.GvgDeckDefenseShow>, IEnumerator>) (promise => WebAPI.LoadGvgDeckDefenseShow(promise, guild_id, player_id, userErrorCallback)));
  }

  private static IEnumerator LoadGvgDeckDefenseShow(
    Promise<WebAPI.Response.GvgDeckDefenseShow> promise,
    string guild_id,
    string player_id,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalGvgDeckDefenseShow(guild_id, player_id, (Action<WebAPI.Response.GvgDeckDefenseShow>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalGvgDeckDefenseShow(
    string guild_id,
    string player_id,
    Action<WebAPI.Response.GvgDeckDefenseShow> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/gvg/deck/defense-show", new Dictionary<string, object>()
    {
      [nameof (guild_id)] = (object) guild_id,
      [nameof (player_id)] = (object) player_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GvgDeckDefenseShow) null);
      }
      else
        callback(new WebAPI.Response.GvgDeckDefenseShow(json.Json));
    }));
  }

  public static Future<WebAPI.Response.GvgDeckReinforcementCandidates> GvgDeckReinforcementCandidates(
    bool for_defense,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.GvgDeckReinforcementCandidates>((Func<Promise<WebAPI.Response.GvgDeckReinforcementCandidates>, IEnumerator>) (promise => WebAPI.LoadGvgDeckReinforcementCandidates(promise, for_defense, userErrorCallback)));
  }

  private static IEnumerator LoadGvgDeckReinforcementCandidates(
    Promise<WebAPI.Response.GvgDeckReinforcementCandidates> promise,
    bool for_defense,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalGvgDeckReinforcementCandidates(for_defense, (Action<WebAPI.Response.GvgDeckReinforcementCandidates>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalGvgDeckReinforcementCandidates(
    bool for_defense,
    Action<WebAPI.Response.GvgDeckReinforcementCandidates> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/gvg/deck/reinforcement-candidates", new Dictionary<string, object>()
    {
      [nameof (for_defense)] = (object) for_defense
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GvgDeckReinforcementCandidates) null);
      }
      else
        callback(new WebAPI.Response.GvgDeckReinforcementCandidates(json.Json));
    }));
  }

  public static Future<WebAPI.Response.GvgDeckReinforcementStatus> GvgDeckReinforcementStatus(
    bool is_attack,
    string target_player_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.GvgDeckReinforcementStatus>((Func<Promise<WebAPI.Response.GvgDeckReinforcementStatus>, IEnumerator>) (promise => WebAPI.LoadGvgDeckReinforcementStatus(promise, is_attack, target_player_id, userErrorCallback)));
  }

  private static IEnumerator LoadGvgDeckReinforcementStatus(
    Promise<WebAPI.Response.GvgDeckReinforcementStatus> promise,
    bool is_attack,
    string target_player_id,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalGvgDeckReinforcementStatus(is_attack, target_player_id, (Action<WebAPI.Response.GvgDeckReinforcementStatus>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalGvgDeckReinforcementStatus(
    bool is_attack,
    string target_player_id,
    Action<WebAPI.Response.GvgDeckReinforcementStatus> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/gvg/deck/reinforcement-status", new Dictionary<string, object>()
    {
      [nameof (is_attack)] = (object) is_attack,
      [nameof (target_player_id)] = (object) target_player_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GvgDeckReinforcementStatus) null);
      }
      else
        callback(new WebAPI.Response.GvgDeckReinforcementStatus(json.Json));
    }));
  }

  public static Future<WebAPI.Response.GvgDefenseMember> GvgDefenseMember(
    int[] defense_scores,
    string[] player_ids,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.GvgDefenseMember>((Func<Promise<WebAPI.Response.GvgDefenseMember>, IEnumerator>) (promise => WebAPI.LoadGvgDefenseMember(promise, defense_scores, player_ids, userErrorCallback)));
  }

  private static IEnumerator LoadGvgDefenseMember(
    Promise<WebAPI.Response.GvgDefenseMember> promise,
    int[] defense_scores,
    string[] player_ids,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalGvgDefenseMember(defense_scores, player_ids, (Action<WebAPI.Response.GvgDefenseMember>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalGvgDefenseMember(
    int[] defense_scores,
    string[] player_ids,
    Action<WebAPI.Response.GvgDefenseMember> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/gvg/defense_member", new Dictionary<string, object>()
    {
      [nameof (defense_scores)] = (object) defense_scores,
      [nameof (player_ids)] = (object) player_ids
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GvgDefenseMember) null);
      }
      else
        callback(new WebAPI.Response.GvgDefenseMember(json.Json));
    }));
  }

  public static Future<WebAPI.Response.GvgHistoryHistoryGet> GvgHistoryHistoryGet(
    bool mock,
    string target_guild_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.GvgHistoryHistoryGet>((Func<Promise<WebAPI.Response.GvgHistoryHistoryGet>, IEnumerator>) (promise => WebAPI.LoadGvgHistoryHistoryGet(promise, mock, target_guild_id, userErrorCallback)));
  }

  private static IEnumerator LoadGvgHistoryHistoryGet(
    Promise<WebAPI.Response.GvgHistoryHistoryGet> promise,
    bool mock,
    string target_guild_id,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalGvgHistoryHistoryGet(mock, target_guild_id, (Action<WebAPI.Response.GvgHistoryHistoryGet>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalGvgHistoryHistoryGet(
    bool mock,
    string target_guild_id,
    Action<WebAPI.Response.GvgHistoryHistoryGet> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/gvg/history/history-get", new Dictionary<string, object>()
    {
      [nameof (mock)] = (object) mock,
      [nameof (target_guild_id)] = (object) target_guild_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GvgHistoryHistoryGet) null);
      }
      else
        callback(new WebAPI.Response.GvgHistoryHistoryGet(json.Json));
    }));
  }

  public static Future<WebAPI.Response.GvgMatchingCancel> GvgMatchingCancel(
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.GvgMatchingCancel>((Func<Promise<WebAPI.Response.GvgMatchingCancel>, IEnumerator>) (promise => WebAPI.LoadGvgMatchingCancel(promise, userErrorCallback)));
  }

  private static IEnumerator LoadGvgMatchingCancel(
    Promise<WebAPI.Response.GvgMatchingCancel> promise,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalGvgMatchingCancel((Action<WebAPI.Response.GvgMatchingCancel>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalGvgMatchingCancel(
    Action<WebAPI.Response.GvgMatchingCancel> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Get("/gvg/matching/cancel", (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GvgMatchingCancel) null);
      }
      else
        callback(new WebAPI.Response.GvgMatchingCancel(json.Json));
    }));
  }

  public static Future<WebAPI.Response.GvgMatchingEntry> GvgMatchingEntry(
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.GvgMatchingEntry>((Func<Promise<WebAPI.Response.GvgMatchingEntry>, IEnumerator>) (promise => WebAPI.LoadGvgMatchingEntry(promise, userErrorCallback)));
  }

  private static IEnumerator LoadGvgMatchingEntry(
    Promise<WebAPI.Response.GvgMatchingEntry> promise,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalGvgMatchingEntry((Action<WebAPI.Response.GvgMatchingEntry>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalGvgMatchingEntry(
    Action<WebAPI.Response.GvgMatchingEntry> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Get("/gvg/matching/entry", (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GvgMatchingEntry) null);
      }
      else
        callback(new WebAPI.Response.GvgMatchingEntry(json.Json));
    }));
  }

  public static Future<WebAPI.Response.GvgResult> GvgResult(
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.GvgResult>((Func<Promise<WebAPI.Response.GvgResult>, IEnumerator>) (promise => WebAPI.LoadGvgResult(promise, userErrorCallback)));
  }

  private static IEnumerator LoadGvgResult(
    Promise<WebAPI.Response.GvgResult> promise,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalGvgResult((Action<WebAPI.Response.GvgResult>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalGvgResult(
    Action<WebAPI.Response.GvgResult> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Get("/gvg/result", (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GvgResult) null);
      }
      else
        callback(new WebAPI.Response.GvgResult(json.Json));
    }));
  }

  public static Future<WebAPI.Response.HomeExchangeSubCoin> HomeExchangeSubCoin(
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.HomeExchangeSubCoin>((Func<Promise<WebAPI.Response.HomeExchangeSubCoin>, IEnumerator>) (promise => WebAPI.LoadHomeExchangeSubCoin(promise, userErrorCallback)));
  }

  private static IEnumerator LoadHomeExchangeSubCoin(
    Promise<WebAPI.Response.HomeExchangeSubCoin> promise,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalHomeExchangeSubCoin((Action<WebAPI.Response.HomeExchangeSubCoin>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalHomeExchangeSubCoin(
    Action<WebAPI.Response.HomeExchangeSubCoin> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Get("/home/exchange_sub_coin", (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.HomeExchangeSubCoin) null);
      }
      else
        callback(new WebAPI.Response.HomeExchangeSubCoin(json.Json));
    }));
  }

  public static Future<WebAPI.Response.HomeNow> HomeNow(
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.HomeNow>((Func<Promise<WebAPI.Response.HomeNow>, IEnumerator>) (promise => WebAPI.LoadHomeNow(promise, userErrorCallback)));
  }

  private static IEnumerator LoadHomeNow(
    Promise<WebAPI.Response.HomeNow> promise,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalHomeNow((Action<WebAPI.Response.HomeNow>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalHomeNow(
    Action<WebAPI.Response.HomeNow> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Get("/home/now", (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.HomeNow) null);
      }
      else
        callback(new WebAPI.Response.HomeNow(json.Json));
    }));
  }

  public static Future<WebAPI.Response.HomeStartUp> HomeStartUp(
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.HomeStartUp>((Func<Promise<WebAPI.Response.HomeStartUp>, IEnumerator>) (promise => WebAPI.LoadHomeStartUp(promise, userErrorCallback)));
  }

  private static IEnumerator LoadHomeStartUp(
    Promise<WebAPI.Response.HomeStartUp> promise,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalHomeStartUp((Action<WebAPI.Response.HomeStartUp>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalHomeStartUp(
    Action<WebAPI.Response.HomeStartUp> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Get("/home/start_up", (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.HomeStartUp) null);
      }
      else
        callback(new WebAPI.Response.HomeStartUp(json.Json));
    }));
  }

  public static Future<WebAPI.Response.HomeStartUp2> HomeStartUp2(
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.HomeStartUp2>((Func<Promise<WebAPI.Response.HomeStartUp2>, IEnumerator>) (promise => WebAPI.LoadHomeStartUp2(promise, userErrorCallback)));
  }

  private static IEnumerator LoadHomeStartUp2(
    Promise<WebAPI.Response.HomeStartUp2> promise,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalHomeStartUp2((Action<WebAPI.Response.HomeStartUp2>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalHomeStartUp2(
    Action<WebAPI.Response.HomeStartUp2> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Get("/home/start_up2", (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.HomeStartUp2) null);
      }
      else
        callback(new WebAPI.Response.HomeStartUp2(json.Json));
    }));
  }

  public static Future<WebAPI.Response.HomeStartUpTransition> HomeStartUpTransition(
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.HomeStartUpTransition>((Func<Promise<WebAPI.Response.HomeStartUpTransition>, IEnumerator>) (promise => WebAPI.LoadHomeStartUpTransition(promise, userErrorCallback)));
  }

  private static IEnumerator LoadHomeStartUpTransition(
    Promise<WebAPI.Response.HomeStartUpTransition> promise,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalHomeStartUpTransition((Action<WebAPI.Response.HomeStartUpTransition>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalHomeStartUpTransition(
    Action<WebAPI.Response.HomeStartUpTransition> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Get("/home/start_up_transition", (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.HomeStartUpTransition) null);
      }
      else
        callback(new WebAPI.Response.HomeStartUpTransition(json.Json));
    }));
  }

  public static Future<WebAPI.Response.HotdealPackVerifyCheck> HotdealPackVerifyCheck(
    int pack_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.HotdealPackVerifyCheck>((Func<Promise<WebAPI.Response.HotdealPackVerifyCheck>, IEnumerator>) (promise => WebAPI.LoadHotdealPackVerifyCheck(promise, pack_id, userErrorCallback)));
  }

  private static IEnumerator LoadHotdealPackVerifyCheck(
    Promise<WebAPI.Response.HotdealPackVerifyCheck> promise,
    int pack_id,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalHotdealPackVerifyCheck(pack_id, (Action<WebAPI.Response.HotdealPackVerifyCheck>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalHotdealPackVerifyCheck(
    int pack_id,
    Action<WebAPI.Response.HotdealPackVerifyCheck> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/hotdeal/pack_verify_check", new Dictionary<string, object>()
    {
      [nameof (pack_id)] = (object) pack_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.HotdealPackVerifyCheck) null);
      }
      else
        callback(new WebAPI.Response.HotdealPackVerifyCheck(json.Json));
    }));
  }

  public static Future<WebAPI.Response.HotdealPresentPack> HotdealPresentPack(
    int pack_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.HotdealPresentPack>((Func<Promise<WebAPI.Response.HotdealPresentPack>, IEnumerator>) (promise => WebAPI.LoadHotdealPresentPack(promise, pack_id, userErrorCallback)));
  }

  private static IEnumerator LoadHotdealPresentPack(
    Promise<WebAPI.Response.HotdealPresentPack> promise,
    int pack_id,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalHotdealPresentPack(pack_id, (Action<WebAPI.Response.HotdealPresentPack>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalHotdealPresentPack(
    int pack_id,
    Action<WebAPI.Response.HotdealPresentPack> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/hotdeal/present_pack", new Dictionary<string, object>()
    {
      [nameof (pack_id)] = (object) pack_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.HotdealPresentPack) null);
      }
      else
        callback(new WebAPI.Response.HotdealPresentPack(json.Json));
    }));
  }

  public static Future<WebAPI.Response.ItemBodyExchange> ItemBodyExchange(
    int[] material_gear_ids,
    int[] material_gear_quantities,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.ItemBodyExchange>((Func<Promise<WebAPI.Response.ItemBodyExchange>, IEnumerator>) (promise => WebAPI.LoadItemBodyExchange(promise, material_gear_ids, material_gear_quantities, userErrorCallback)));
  }

  private static IEnumerator LoadItemBodyExchange(
    Promise<WebAPI.Response.ItemBodyExchange> promise,
    int[] material_gear_ids,
    int[] material_gear_quantities,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalItemBodyExchange(material_gear_ids, material_gear_quantities, (Action<WebAPI.Response.ItemBodyExchange>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalItemBodyExchange(
    int[] material_gear_ids,
    int[] material_gear_quantities,
    Action<WebAPI.Response.ItemBodyExchange> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/item/body/exchange", new Dictionary<string, object>()
    {
      [nameof (material_gear_ids)] = (object) material_gear_ids,
      [nameof (material_gear_quantities)] = (object) material_gear_quantities
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.ItemBodyExchange) null);
      }
      else
        callback(new WebAPI.Response.ItemBodyExchange(json.Json));
    }));
  }

  public static Future<WebAPI.Response.ItemGearBuildup> ItemGearBuildup(
    int base_player_gear_id,
    int[] material_player_gear_ids,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.ItemGearBuildup>((Func<Promise<WebAPI.Response.ItemGearBuildup>, IEnumerator>) (promise => WebAPI.LoadItemGearBuildup(promise, base_player_gear_id, material_player_gear_ids, userErrorCallback)));
  }

  private static IEnumerator LoadItemGearBuildup(
    Promise<WebAPI.Response.ItemGearBuildup> promise,
    int base_player_gear_id,
    int[] material_player_gear_ids,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalItemGearBuildup(base_player_gear_id, material_player_gear_ids, (Action<WebAPI.Response.ItemGearBuildup>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalItemGearBuildup(
    int base_player_gear_id,
    int[] material_player_gear_ids,
    Action<WebAPI.Response.ItemGearBuildup> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/item/gear/buildup", new Dictionary<string, object>()
    {
      [nameof (base_player_gear_id)] = (object) base_player_gear_id,
      [nameof (material_player_gear_ids)] = (object) material_player_gear_ids
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.ItemGearBuildup) null);
      }
      else
        callback(new WebAPI.Response.ItemGearBuildup(json.Json));
    }));
  }

  public static Future<WebAPI.Response.ItemGearBulkDrilling> ItemGearBulkDrilling(
    int base_player_gear_id,
    int[] cost_player_gear_ids,
    int[] cost_player_material_gear_ids,
    int[] cost_player_material_gear_nums,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.ItemGearBulkDrilling>((Func<Promise<WebAPI.Response.ItemGearBulkDrilling>, IEnumerator>) (promise => WebAPI.LoadItemGearBulkDrilling(promise, base_player_gear_id, cost_player_gear_ids, cost_player_material_gear_ids, cost_player_material_gear_nums, userErrorCallback)));
  }

  private static IEnumerator LoadItemGearBulkDrilling(
    Promise<WebAPI.Response.ItemGearBulkDrilling> promise,
    int base_player_gear_id,
    int[] cost_player_gear_ids,
    int[] cost_player_material_gear_ids,
    int[] cost_player_material_gear_nums,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalItemGearBulkDrilling(base_player_gear_id, cost_player_gear_ids, cost_player_material_gear_ids, cost_player_material_gear_nums, (Action<WebAPI.Response.ItemGearBulkDrilling>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalItemGearBulkDrilling(
    int base_player_gear_id,
    int[] cost_player_gear_ids,
    int[] cost_player_material_gear_ids,
    int[] cost_player_material_gear_nums,
    Action<WebAPI.Response.ItemGearBulkDrilling> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/item/gear/bulk_drilling", new Dictionary<string, object>()
    {
      [nameof (base_player_gear_id)] = (object) base_player_gear_id,
      [nameof (cost_player_gear_ids)] = (object) cost_player_gear_ids,
      [nameof (cost_player_material_gear_ids)] = (object) cost_player_material_gear_ids,
      [nameof (cost_player_material_gear_nums)] = (object) cost_player_material_gear_nums
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.ItemGearBulkDrilling) null);
      }
      else
        callback(new WebAPI.Response.ItemGearBulkDrilling(json.Json));
    }));
  }

  public static Future<WebAPI.Response.ItemGearBulkDrillingConfirm> ItemGearBulkDrillingConfirm(
    int base_player_gear_id,
    int[] cost_player_gear_ids,
    int[] cost_player_material_gear_ids,
    int[] cost_player_material_gear_nums,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.ItemGearBulkDrillingConfirm>((Func<Promise<WebAPI.Response.ItemGearBulkDrillingConfirm>, IEnumerator>) (promise => WebAPI.LoadItemGearBulkDrillingConfirm(promise, base_player_gear_id, cost_player_gear_ids, cost_player_material_gear_ids, cost_player_material_gear_nums, userErrorCallback)));
  }

  private static IEnumerator LoadItemGearBulkDrillingConfirm(
    Promise<WebAPI.Response.ItemGearBulkDrillingConfirm> promise,
    int base_player_gear_id,
    int[] cost_player_gear_ids,
    int[] cost_player_material_gear_ids,
    int[] cost_player_material_gear_nums,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalItemGearBulkDrillingConfirm(base_player_gear_id, cost_player_gear_ids, cost_player_material_gear_ids, cost_player_material_gear_nums, (Action<WebAPI.Response.ItemGearBulkDrillingConfirm>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalItemGearBulkDrillingConfirm(
    int base_player_gear_id,
    int[] cost_player_gear_ids,
    int[] cost_player_material_gear_ids,
    int[] cost_player_material_gear_nums,
    Action<WebAPI.Response.ItemGearBulkDrillingConfirm> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/item/gear/bulk_drilling/confirm", new Dictionary<string, object>()
    {
      [nameof (base_player_gear_id)] = (object) base_player_gear_id,
      [nameof (cost_player_gear_ids)] = (object) cost_player_gear_ids,
      [nameof (cost_player_material_gear_ids)] = (object) cost_player_material_gear_ids,
      [nameof (cost_player_material_gear_nums)] = (object) cost_player_material_gear_nums
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.ItemGearBulkDrillingConfirm) null);
      }
      else
        callback(new WebAPI.Response.ItemGearBulkDrillingConfirm(json.Json));
    }));
  }

  public static Future<WebAPI.Response.ItemGearCallGift> ItemGearCallGift(
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.ItemGearCallGift>((Func<Promise<WebAPI.Response.ItemGearCallGift>, IEnumerator>) (promise => WebAPI.LoadItemGearCallGift(promise, userErrorCallback)));
  }

  private static IEnumerator LoadItemGearCallGift(
    Promise<WebAPI.Response.ItemGearCallGift> promise,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalItemGearCallGift((Action<WebAPI.Response.ItemGearCallGift>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalItemGearCallGift(
    Action<WebAPI.Response.ItemGearCallGift> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Get("/item/gear/call_gift", (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.ItemGearCallGift) null);
      }
      else
        callback(new WebAPI.Response.ItemGearCallGift(json.Json));
    }));
  }

  public static Future<WebAPI.Response.ItemGearCombine> ItemGearCombine(
    int[] player_gear_ids,
    int[] player_material_gear_ids,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.ItemGearCombine>((Func<Promise<WebAPI.Response.ItemGearCombine>, IEnumerator>) (promise => WebAPI.LoadItemGearCombine(promise, player_gear_ids, player_material_gear_ids, userErrorCallback)));
  }

  private static IEnumerator LoadItemGearCombine(
    Promise<WebAPI.Response.ItemGearCombine> promise,
    int[] player_gear_ids,
    int[] player_material_gear_ids,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalItemGearCombine(player_gear_ids, player_material_gear_ids, (Action<WebAPI.Response.ItemGearCombine>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalItemGearCombine(
    int[] player_gear_ids,
    int[] player_material_gear_ids,
    Action<WebAPI.Response.ItemGearCombine> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/item/gear/combine", new Dictionary<string, object>()
    {
      [nameof (player_gear_ids)] = (object) player_gear_ids,
      [nameof (player_material_gear_ids)] = (object) player_material_gear_ids
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.ItemGearCombine) null);
      }
      else
        callback(new WebAPI.Response.ItemGearCombine(json.Json));
    }));
  }

  public static Future<WebAPI.Response.ItemGearCombineRecipe> ItemGearCombineRecipe(
    int create_num,
    int recipe_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.ItemGearCombineRecipe>((Func<Promise<WebAPI.Response.ItemGearCombineRecipe>, IEnumerator>) (promise => WebAPI.LoadItemGearCombineRecipe(promise, create_num, recipe_id, userErrorCallback)));
  }

  private static IEnumerator LoadItemGearCombineRecipe(
    Promise<WebAPI.Response.ItemGearCombineRecipe> promise,
    int create_num,
    int recipe_id,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalItemGearCombineRecipe(create_num, recipe_id, (Action<WebAPI.Response.ItemGearCombineRecipe>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalItemGearCombineRecipe(
    int create_num,
    int recipe_id,
    Action<WebAPI.Response.ItemGearCombineRecipe> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/item/gear/combine/recipe", new Dictionary<string, object>()
    {
      [nameof (create_num)] = (object) create_num,
      [nameof (recipe_id)] = (object) recipe_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.ItemGearCombineRecipe) null);
      }
      else
        callback(new WebAPI.Response.ItemGearCombineRecipe(json.Json));
    }));
  }

  public static Future<WebAPI.Response.ItemGearCombineRecipeConfirm> ItemGearCombineRecipeConfirm(
    int create_num,
    int recipe_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.ItemGearCombineRecipeConfirm>((Func<Promise<WebAPI.Response.ItemGearCombineRecipeConfirm>, IEnumerator>) (promise => WebAPI.LoadItemGearCombineRecipeConfirm(promise, create_num, recipe_id, userErrorCallback)));
  }

  private static IEnumerator LoadItemGearCombineRecipeConfirm(
    Promise<WebAPI.Response.ItemGearCombineRecipeConfirm> promise,
    int create_num,
    int recipe_id,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalItemGearCombineRecipeConfirm(create_num, recipe_id, (Action<WebAPI.Response.ItemGearCombineRecipeConfirm>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalItemGearCombineRecipeConfirm(
    int create_num,
    int recipe_id,
    Action<WebAPI.Response.ItemGearCombineRecipeConfirm> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/item/gear/combine/recipe/confirm", new Dictionary<string, object>()
    {
      [nameof (create_num)] = (object) create_num,
      [nameof (recipe_id)] = (object) recipe_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.ItemGearCombineRecipeConfirm) null);
      }
      else
        callback(new WebAPI.Response.ItemGearCombineRecipeConfirm(json.Json));
    }));
  }

  public static Future<WebAPI.Response.ItemGearCreateCallGift> ItemGearCreateCallGift(
    int create_num,
    int recipe_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.ItemGearCreateCallGift>((Func<Promise<WebAPI.Response.ItemGearCreateCallGift>, IEnumerator>) (promise => WebAPI.LoadItemGearCreateCallGift(promise, create_num, recipe_id, userErrorCallback)));
  }

  private static IEnumerator LoadItemGearCreateCallGift(
    Promise<WebAPI.Response.ItemGearCreateCallGift> promise,
    int create_num,
    int recipe_id,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalItemGearCreateCallGift(create_num, recipe_id, (Action<WebAPI.Response.ItemGearCreateCallGift>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalItemGearCreateCallGift(
    int create_num,
    int recipe_id,
    Action<WebAPI.Response.ItemGearCreateCallGift> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/item/gear/create_call_gift", new Dictionary<string, object>()
    {
      [nameof (create_num)] = (object) create_num,
      [nameof (recipe_id)] = (object) recipe_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.ItemGearCreateCallGift) null);
      }
      else
        callback(new WebAPI.Response.ItemGearCreateCallGift(json.Json));
    }));
  }

  public static Future<WebAPI.Response.ItemGearDrilling> ItemGearDrilling(
    int base_player_gear_id,
    int[] material_player_gear_ids,
    int[] material_player_material_gear_ids,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.ItemGearDrilling>((Func<Promise<WebAPI.Response.ItemGearDrilling>, IEnumerator>) (promise => WebAPI.LoadItemGearDrilling(promise, base_player_gear_id, material_player_gear_ids, material_player_material_gear_ids, userErrorCallback)));
  }

  private static IEnumerator LoadItemGearDrilling(
    Promise<WebAPI.Response.ItemGearDrilling> promise,
    int base_player_gear_id,
    int[] material_player_gear_ids,
    int[] material_player_material_gear_ids,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalItemGearDrilling(base_player_gear_id, material_player_gear_ids, material_player_material_gear_ids, (Action<WebAPI.Response.ItemGearDrilling>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalItemGearDrilling(
    int base_player_gear_id,
    int[] material_player_gear_ids,
    int[] material_player_material_gear_ids,
    Action<WebAPI.Response.ItemGearDrilling> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/item/gear/drilling", new Dictionary<string, object>()
    {
      [nameof (base_player_gear_id)] = (object) base_player_gear_id,
      [nameof (material_player_gear_ids)] = (object) material_player_gear_ids,
      [nameof (material_player_material_gear_ids)] = (object) material_player_material_gear_ids
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.ItemGearDrilling) null);
      }
      else
        callback(new WebAPI.Response.ItemGearDrilling(json.Json));
    }));
  }

  public static Future<WebAPI.Response.ItemGearDrillingConfirm> ItemGearDrillingConfirm(
    int base_player_gear_id,
    int[] material_player_gear_ids,
    int[] material_player_material_gear_ids,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.ItemGearDrillingConfirm>((Func<Promise<WebAPI.Response.ItemGearDrillingConfirm>, IEnumerator>) (promise => WebAPI.LoadItemGearDrillingConfirm(promise, base_player_gear_id, material_player_gear_ids, material_player_material_gear_ids, userErrorCallback)));
  }

  private static IEnumerator LoadItemGearDrillingConfirm(
    Promise<WebAPI.Response.ItemGearDrillingConfirm> promise,
    int base_player_gear_id,
    int[] material_player_gear_ids,
    int[] material_player_material_gear_ids,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalItemGearDrillingConfirm(base_player_gear_id, material_player_gear_ids, material_player_material_gear_ids, (Action<WebAPI.Response.ItemGearDrillingConfirm>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalItemGearDrillingConfirm(
    int base_player_gear_id,
    int[] material_player_gear_ids,
    int[] material_player_material_gear_ids,
    Action<WebAPI.Response.ItemGearDrillingConfirm> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/item/gear/drilling/confirm", new Dictionary<string, object>()
    {
      [nameof (base_player_gear_id)] = (object) base_player_gear_id,
      [nameof (material_player_gear_ids)] = (object) material_player_gear_ids,
      [nameof (material_player_material_gear_ids)] = (object) material_player_material_gear_ids
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.ItemGearDrillingConfirm) null);
      }
      else
        callback(new WebAPI.Response.ItemGearDrillingConfirm(json.Json));
    }));
  }

  public static Future<WebAPI.Response.ItemGearExchange> ItemGearExchange(
    int[] player_gear_ids,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.ItemGearExchange>((Func<Promise<WebAPI.Response.ItemGearExchange>, IEnumerator>) (promise => WebAPI.LoadItemGearExchange(promise, player_gear_ids, userErrorCallback)));
  }

  private static IEnumerator LoadItemGearExchange(
    Promise<WebAPI.Response.ItemGearExchange> promise,
    int[] player_gear_ids,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalItemGearExchange(player_gear_ids, (Action<WebAPI.Response.ItemGearExchange>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalItemGearExchange(
    int[] player_gear_ids,
    Action<WebAPI.Response.ItemGearExchange> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/item/gear/exchange", new Dictionary<string, object>()
    {
      [nameof (player_gear_ids)] = (object) player_gear_ids
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.ItemGearExchange) null);
      }
      else
        callback(new WebAPI.Response.ItemGearExchange(json.Json));
    }));
  }

  public static Future<WebAPI.Response.ItemGearFavorite> ItemGearFavorite(
    int[] favorite_player_gear_ids,
    int[] un_favorite_player_gear_ids,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.ItemGearFavorite>((Func<Promise<WebAPI.Response.ItemGearFavorite>, IEnumerator>) (promise => WebAPI.LoadItemGearFavorite(promise, favorite_player_gear_ids, un_favorite_player_gear_ids, userErrorCallback)));
  }

  private static IEnumerator LoadItemGearFavorite(
    Promise<WebAPI.Response.ItemGearFavorite> promise,
    int[] favorite_player_gear_ids,
    int[] un_favorite_player_gear_ids,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalItemGearFavorite(favorite_player_gear_ids, un_favorite_player_gear_ids, (Action<WebAPI.Response.ItemGearFavorite>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalItemGearFavorite(
    int[] favorite_player_gear_ids,
    int[] un_favorite_player_gear_ids,
    Action<WebAPI.Response.ItemGearFavorite> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/item/gear/favorite", new Dictionary<string, object>()
    {
      [nameof (favorite_player_gear_ids)] = (object) favorite_player_gear_ids,
      [nameof (un_favorite_player_gear_ids)] = (object) un_favorite_player_gear_ids
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.ItemGearFavorite) null);
      }
      else
        callback(new WebAPI.Response.ItemGearFavorite(json.Json));
    }));
  }

  public static Future<WebAPI.Response.ItemGearMixer> ItemGearMixer(
    int[] material_gear_quantities,
    int[] player_gear_ids,
    int[] player_material_gear_ids,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.ItemGearMixer>((Func<Promise<WebAPI.Response.ItemGearMixer>, IEnumerator>) (promise => WebAPI.LoadItemGearMixer(promise, material_gear_quantities, player_gear_ids, player_material_gear_ids, userErrorCallback)));
  }

  private static IEnumerator LoadItemGearMixer(
    Promise<WebAPI.Response.ItemGearMixer> promise,
    int[] material_gear_quantities,
    int[] player_gear_ids,
    int[] player_material_gear_ids,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalItemGearMixer(material_gear_quantities, player_gear_ids, player_material_gear_ids, (Action<WebAPI.Response.ItemGearMixer>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalItemGearMixer(
    int[] material_gear_quantities,
    int[] player_gear_ids,
    int[] player_material_gear_ids,
    Action<WebAPI.Response.ItemGearMixer> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/item/gear/mixer", new Dictionary<string, object>()
    {
      [nameof (material_gear_quantities)] = (object) material_gear_quantities,
      [nameof (player_gear_ids)] = (object) player_gear_ids,
      [nameof (player_material_gear_ids)] = (object) player_material_gear_ids
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.ItemGearMixer) null);
      }
      else
        callback(new WebAPI.Response.ItemGearMixer(json.Json));
    }));
  }

  public static Future<WebAPI.Response.ItemGearPoweredRepair> ItemGearPoweredRepair(
    int bet,
    int medal,
    int player_gear_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.ItemGearPoweredRepair>((Func<Promise<WebAPI.Response.ItemGearPoweredRepair>, IEnumerator>) (promise => WebAPI.LoadItemGearPoweredRepair(promise, bet, medal, player_gear_id, userErrorCallback)));
  }

  private static IEnumerator LoadItemGearPoweredRepair(
    Promise<WebAPI.Response.ItemGearPoweredRepair> promise,
    int bet,
    int medal,
    int player_gear_id,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalItemGearPoweredRepair(bet, medal, player_gear_id, (Action<WebAPI.Response.ItemGearPoweredRepair>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalItemGearPoweredRepair(
    int bet,
    int medal,
    int player_gear_id,
    Action<WebAPI.Response.ItemGearPoweredRepair> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/item/gear/powered/repair", new Dictionary<string, object>()
    {
      [nameof (bet)] = (object) bet,
      [nameof (medal)] = (object) medal,
      [nameof (player_gear_id)] = (object) player_gear_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.ItemGearPoweredRepair) null);
      }
      else
        callback(new WebAPI.Response.ItemGearPoweredRepair(json.Json));
    }));
  }

  public static Future<WebAPI.Response.ItemGearReisouCreation> ItemGearReisouCreation(
    int creation_reisou_recipe_id,
    int num,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.ItemGearReisouCreation>((Func<Promise<WebAPI.Response.ItemGearReisouCreation>, IEnumerator>) (promise => WebAPI.LoadItemGearReisouCreation(promise, creation_reisou_recipe_id, num, userErrorCallback)));
  }

  private static IEnumerator LoadItemGearReisouCreation(
    Promise<WebAPI.Response.ItemGearReisouCreation> promise,
    int creation_reisou_recipe_id,
    int num,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalItemGearReisouCreation(creation_reisou_recipe_id, num, (Action<WebAPI.Response.ItemGearReisouCreation>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalItemGearReisouCreation(
    int creation_reisou_recipe_id,
    int num,
    Action<WebAPI.Response.ItemGearReisouCreation> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/item/gear/reisou/creation", new Dictionary<string, object>()
    {
      [nameof (creation_reisou_recipe_id)] = (object) creation_reisou_recipe_id,
      [nameof (num)] = (object) num
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.ItemGearReisouCreation) null);
      }
      else
        callback(new WebAPI.Response.ItemGearReisouCreation(json.Json));
    }));
  }

  public static Future<WebAPI.Response.ItemGearReisouEquip> ItemGearReisouEquip(
    int base_player_gear_id,
    int? reisou_player_gear_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.ItemGearReisouEquip>((Func<Promise<WebAPI.Response.ItemGearReisouEquip>, IEnumerator>) (promise => WebAPI.LoadItemGearReisouEquip(promise, base_player_gear_id, reisou_player_gear_id, userErrorCallback)));
  }

  private static IEnumerator LoadItemGearReisouEquip(
    Promise<WebAPI.Response.ItemGearReisouEquip> promise,
    int base_player_gear_id,
    int? reisou_player_gear_id,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalItemGearReisouEquip(base_player_gear_id, reisou_player_gear_id, (Action<WebAPI.Response.ItemGearReisouEquip>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalItemGearReisouEquip(
    int base_player_gear_id,
    int? reisou_player_gear_id,
    Action<WebAPI.Response.ItemGearReisouEquip> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/item/gear/reisou/equip", new Dictionary<string, object>()
    {
      [nameof (base_player_gear_id)] = (object) base_player_gear_id,
      [nameof (reisou_player_gear_id)] = (object) reisou_player_gear_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.ItemGearReisouEquip) null);
      }
      else
        callback(new WebAPI.Response.ItemGearReisouEquip(json.Json));
    }));
  }

  public static Future<WebAPI.Response.ItemGearReisouFusion> ItemGearReisouFusion(
    int chaos_player_gear_id,
    int holy_player_gear_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.ItemGearReisouFusion>((Func<Promise<WebAPI.Response.ItemGearReisouFusion>, IEnumerator>) (promise => WebAPI.LoadItemGearReisouFusion(promise, chaos_player_gear_id, holy_player_gear_id, userErrorCallback)));
  }

  private static IEnumerator LoadItemGearReisouFusion(
    Promise<WebAPI.Response.ItemGearReisouFusion> promise,
    int chaos_player_gear_id,
    int holy_player_gear_id,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalItemGearReisouFusion(chaos_player_gear_id, holy_player_gear_id, (Action<WebAPI.Response.ItemGearReisouFusion>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalItemGearReisouFusion(
    int chaos_player_gear_id,
    int holy_player_gear_id,
    Action<WebAPI.Response.ItemGearReisouFusion> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/item/gear/reisou/fusion", new Dictionary<string, object>()
    {
      [nameof (chaos_player_gear_id)] = (object) chaos_player_gear_id,
      [nameof (holy_player_gear_id)] = (object) holy_player_gear_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.ItemGearReisouFusion) null);
      }
      else
        callback(new WebAPI.Response.ItemGearReisouFusion(json.Json));
    }));
  }

  public static Future<WebAPI.Response.ItemGearRepair> ItemGearRepair(
    int[] player_gear_ids,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.ItemGearRepair>((Func<Promise<WebAPI.Response.ItemGearRepair>, IEnumerator>) (promise => WebAPI.LoadItemGearRepair(promise, player_gear_ids, userErrorCallback)));
  }

  private static IEnumerator LoadItemGearRepair(
    Promise<WebAPI.Response.ItemGearRepair> promise,
    int[] player_gear_ids,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalItemGearRepair(player_gear_ids, (Action<WebAPI.Response.ItemGearRepair>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalItemGearRepair(
    int[] player_gear_ids,
    Action<WebAPI.Response.ItemGearRepair> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/item/gear/repair", new Dictionary<string, object>()
    {
      [nameof (player_gear_ids)] = (object) player_gear_ids
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.ItemGearRepair) null);
      }
      else
        callback(new WebAPI.Response.ItemGearRepair(json.Json));
    }));
  }

  public static Future<WebAPI.Response.ItemGearRepairList> ItemGearRepairList(
    int bet,
    int medal,
    int[] player_gear_ids,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.ItemGearRepairList>((Func<Promise<WebAPI.Response.ItemGearRepairList>, IEnumerator>) (promise => WebAPI.LoadItemGearRepairList(promise, bet, medal, player_gear_ids, userErrorCallback)));
  }

  private static IEnumerator LoadItemGearRepairList(
    Promise<WebAPI.Response.ItemGearRepairList> promise,
    int bet,
    int medal,
    int[] player_gear_ids,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalItemGearRepairList(bet, medal, player_gear_ids, (Action<WebAPI.Response.ItemGearRepairList>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalItemGearRepairList(
    int bet,
    int medal,
    int[] player_gear_ids,
    Action<WebAPI.Response.ItemGearRepairList> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/item/gear/repair/list", new Dictionary<string, object>()
    {
      [nameof (bet)] = (object) bet,
      [nameof (medal)] = (object) medal,
      [nameof (player_gear_ids)] = (object) player_gear_ids
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.ItemGearRepairList) null);
      }
      else
        callback(new WebAPI.Response.ItemGearRepairList(json.Json));
    }));
  }

  public static Future<WebAPI.Response.ItemSell> ItemSell(
    int[] material_gear_ids,
    long[] material_gear_quantities,
    int[] player_gear_ids,
    int[] supply_ids,
    int[] supply_quantities,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.ItemSell>((Func<Promise<WebAPI.Response.ItemSell>, IEnumerator>) (promise => WebAPI.LoadItemSell(promise, material_gear_ids, material_gear_quantities, player_gear_ids, supply_ids, supply_quantities, userErrorCallback)));
  }

  private static IEnumerator LoadItemSell(
    Promise<WebAPI.Response.ItemSell> promise,
    int[] material_gear_ids,
    long[] material_gear_quantities,
    int[] player_gear_ids,
    int[] supply_ids,
    int[] supply_quantities,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalItemSell(material_gear_ids, material_gear_quantities, player_gear_ids, supply_ids, supply_quantities, (Action<WebAPI.Response.ItemSell>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalItemSell(
    int[] material_gear_ids,
    long[] material_gear_quantities,
    int[] player_gear_ids,
    int[] supply_ids,
    int[] supply_quantities,
    Action<WebAPI.Response.ItemSell> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/item/sell", new Dictionary<string, object>()
    {
      [nameof (material_gear_ids)] = (object) material_gear_ids,
      [nameof (material_gear_quantities)] = (object) material_gear_quantities,
      [nameof (player_gear_ids)] = (object) player_gear_ids,
      [nameof (supply_ids)] = (object) supply_ids,
      [nameof (supply_quantities)] = (object) supply_quantities
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.ItemSell) null);
      }
      else
        callback(new WebAPI.Response.ItemSell(json.Json));
    }));
  }

  public static Future<WebAPI.Response.ItemSupplyDeckEdit> ItemSupplyDeckEdit(
    int[] deck_quantities,
    int[] deck_supply_ids,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.ItemSupplyDeckEdit>((Func<Promise<WebAPI.Response.ItemSupplyDeckEdit>, IEnumerator>) (promise => WebAPI.LoadItemSupplyDeckEdit(promise, deck_quantities, deck_supply_ids, userErrorCallback)));
  }

  private static IEnumerator LoadItemSupplyDeckEdit(
    Promise<WebAPI.Response.ItemSupplyDeckEdit> promise,
    int[] deck_quantities,
    int[] deck_supply_ids,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalItemSupplyDeckEdit(deck_quantities, deck_supply_ids, (Action<WebAPI.Response.ItemSupplyDeckEdit>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalItemSupplyDeckEdit(
    int[] deck_quantities,
    int[] deck_supply_ids,
    Action<WebAPI.Response.ItemSupplyDeckEdit> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/item/supply/deck/edit", new Dictionary<string, object>()
    {
      [nameof (deck_quantities)] = (object) deck_quantities,
      [nameof (deck_supply_ids)] = (object) deck_supply_ids
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.ItemSupplyDeckEdit) null);
      }
      else
        callback(new WebAPI.Response.ItemSupplyDeckEdit(json.Json));
    }));
  }

  public static Future<WebAPI.Response.LoginbonusFill> LoginbonusFill(
    int bonus_reward_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.LoginbonusFill>((Func<Promise<WebAPI.Response.LoginbonusFill>, IEnumerator>) (promise => WebAPI.LoadLoginbonusFill(promise, bonus_reward_id, userErrorCallback)));
  }

  private static IEnumerator LoadLoginbonusFill(
    Promise<WebAPI.Response.LoginbonusFill> promise,
    int bonus_reward_id,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalLoginbonusFill(bonus_reward_id, (Action<WebAPI.Response.LoginbonusFill>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalLoginbonusFill(
    int bonus_reward_id,
    Action<WebAPI.Response.LoginbonusFill> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/loginbonus/fill", new Dictionary<string, object>()
    {
      [nameof (bonus_reward_id)] = (object) bonus_reward_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.LoginbonusFill) null);
      }
      else
        callback(new WebAPI.Response.LoginbonusFill(json.Json));
    }));
  }

  public static Future<WebAPI.Response.LoginbonusTop> LoginbonusTop(
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.LoginbonusTop>((Func<Promise<WebAPI.Response.LoginbonusTop>, IEnumerator>) (promise => WebAPI.LoadLoginbonusTop(promise, userErrorCallback)));
  }

  private static IEnumerator LoadLoginbonusTop(
    Promise<WebAPI.Response.LoginbonusTop> promise,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalLoginbonusTop((Action<WebAPI.Response.LoginbonusTop>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalLoginbonusTop(
    Action<WebAPI.Response.LoginbonusTop> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Get("/loginbonus/top", (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.LoginbonusTop) null);
      }
      else
        callback(new WebAPI.Response.LoginbonusTop(json.Json));
    }));
  }

  public static Future<WebAPI.Response.Officialinfo> Officialinfo(
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.Officialinfo>((Func<Promise<WebAPI.Response.Officialinfo>, IEnumerator>) (promise => WebAPI.LoadOfficialinfo(promise, userErrorCallback)));
  }

  private static IEnumerator LoadOfficialinfo(
    Promise<WebAPI.Response.Officialinfo> promise,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalOfficialinfo((Action<WebAPI.Response.Officialinfo>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalOfficialinfo(
    Action<WebAPI.Response.Officialinfo> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Get("/officialinfo", (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.Officialinfo) null);
      }
      else
        callback(new WebAPI.Response.Officialinfo(json.Json));
    }));
  }

  public static Future<WebAPI.Response.OfficialinfoMaintenance> OfficialinfoMaintenance(
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.OfficialinfoMaintenance>((Func<Promise<WebAPI.Response.OfficialinfoMaintenance>, IEnumerator>) (promise => WebAPI.LoadOfficialinfoMaintenance(promise, userErrorCallback)));
  }

  private static IEnumerator LoadOfficialinfoMaintenance(
    Promise<WebAPI.Response.OfficialinfoMaintenance> promise,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalOfficialinfoMaintenance((Action<WebAPI.Response.OfficialinfoMaintenance>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalOfficialinfoMaintenance(
    Action<WebAPI.Response.OfficialinfoMaintenance> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Get("/officialinfo/maintenance", (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.OfficialinfoMaintenance) null);
      }
      else
        callback(new WebAPI.Response.OfficialinfoMaintenance(json.Json));
    }));
  }

  public static Future<WebAPI.Response.PaymentbonusList> PaymentbonusList(
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.PaymentbonusList>((Func<Promise<WebAPI.Response.PaymentbonusList>, IEnumerator>) (promise => WebAPI.LoadPaymentbonusList(promise, userErrorCallback)));
  }

  private static IEnumerator LoadPaymentbonusList(
    Promise<WebAPI.Response.PaymentbonusList> promise,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalPaymentbonusList((Action<WebAPI.Response.PaymentbonusList>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalPaymentbonusList(
    Action<WebAPI.Response.PaymentbonusList> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Get("/paymentbonus/list", (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.PaymentbonusList) null);
      }
      else
        callback(new WebAPI.Response.PaymentbonusList(json.Json));
    }));
  }

  public static Future<WebAPI.Response.PaymentbonusReceive> PaymentbonusReceive(
    int bonus_item_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.PaymentbonusReceive>((Func<Promise<WebAPI.Response.PaymentbonusReceive>, IEnumerator>) (promise => WebAPI.LoadPaymentbonusReceive(promise, bonus_item_id, userErrorCallback)));
  }

  private static IEnumerator LoadPaymentbonusReceive(
    Promise<WebAPI.Response.PaymentbonusReceive> promise,
    int bonus_item_id,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalPaymentbonusReceive(bonus_item_id, (Action<WebAPI.Response.PaymentbonusReceive>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalPaymentbonusReceive(
    int bonus_item_id,
    Action<WebAPI.Response.PaymentbonusReceive> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/paymentbonus/receive", new Dictionary<string, object>()
    {
      [nameof (bonus_item_id)] = (object) bonus_item_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.PaymentbonusReceive) null);
      }
      else
        callback(new WebAPI.Response.PaymentbonusReceive(json.Json));
    }));
  }

  public static Future<WebAPI.Response.PlayerBoot> PlayerBoot(
    string application_version,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.PlayerBoot>((Func<Promise<WebAPI.Response.PlayerBoot>, IEnumerator>) (promise => WebAPI.LoadPlayerBoot(promise, application_version, userErrorCallback)));
  }

  private static IEnumerator LoadPlayerBoot(
    Promise<WebAPI.Response.PlayerBoot> promise,
    string application_version,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalPlayerBoot(application_version, (Action<WebAPI.Response.PlayerBoot>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalPlayerBoot(
    string application_version,
    Action<WebAPI.Response.PlayerBoot> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/player/boot", new Dictionary<string, object>()
    {
      [nameof (application_version)] = (object) application_version
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.PlayerBoot) null);
      }
      else
        callback(new WebAPI.Response.PlayerBoot(json.Json));
    }));
  }

  public static Future<WebAPI.Response.PlayerBootRelease> PlayerBootRelease(
    string application_version,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.PlayerBootRelease>((Func<Promise<WebAPI.Response.PlayerBootRelease>, IEnumerator>) (promise => WebAPI.LoadPlayerBootRelease(promise, application_version, userErrorCallback)));
  }

  private static IEnumerator LoadPlayerBootRelease(
    Promise<WebAPI.Response.PlayerBootRelease> promise,
    string application_version,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalPlayerBootRelease(application_version, (Action<WebAPI.Response.PlayerBootRelease>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalPlayerBootRelease(
    string application_version,
    Action<WebAPI.Response.PlayerBootRelease> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/player/boot/release", new Dictionary<string, object>()
    {
      [nameof (application_version)] = (object) application_version
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.PlayerBootRelease) null);
      }
      else
        callback(new WebAPI.Response.PlayerBootRelease(json.Json));
    }));
  }

  public static Future<WebAPI.Response.PlayerCommentEdit> PlayerCommentEdit(
    string comment,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.PlayerCommentEdit>((Func<Promise<WebAPI.Response.PlayerCommentEdit>, IEnumerator>) (promise => WebAPI.LoadPlayerCommentEdit(promise, comment, userErrorCallback)));
  }

  private static IEnumerator LoadPlayerCommentEdit(
    Promise<WebAPI.Response.PlayerCommentEdit> promise,
    string comment,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalPlayerCommentEdit(comment, (Action<WebAPI.Response.PlayerCommentEdit>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalPlayerCommentEdit(
    string comment,
    Action<WebAPI.Response.PlayerCommentEdit> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/player/comment/edit", new Dictionary<string, object>()
    {
      [nameof (comment)] = (object) comment
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.PlayerCommentEdit) null);
      }
      else
        callback(new WebAPI.Response.PlayerCommentEdit(json.Json));
    }));
  }

  public static Future<WebAPI.Response.PlayerDisplayPvpHistoryEdit> PlayerDisplayPvpHistoryEdit(
    bool display_pvp_history,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.PlayerDisplayPvpHistoryEdit>((Func<Promise<WebAPI.Response.PlayerDisplayPvpHistoryEdit>, IEnumerator>) (promise => WebAPI.LoadPlayerDisplayPvpHistoryEdit(promise, display_pvp_history, userErrorCallback)));
  }

  private static IEnumerator LoadPlayerDisplayPvpHistoryEdit(
    Promise<WebAPI.Response.PlayerDisplayPvpHistoryEdit> promise,
    bool display_pvp_history,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalPlayerDisplayPvpHistoryEdit(display_pvp_history, (Action<WebAPI.Response.PlayerDisplayPvpHistoryEdit>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalPlayerDisplayPvpHistoryEdit(
    bool display_pvp_history,
    Action<WebAPI.Response.PlayerDisplayPvpHistoryEdit> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/player/display_pvp_history/edit", new Dictionary<string, object>()
    {
      [nameof (display_pvp_history)] = (object) display_pvp_history
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.PlayerDisplayPvpHistoryEdit) null);
      }
      else
        callback(new WebAPI.Response.PlayerDisplayPvpHistoryEdit(json.Json));
    }));
  }

  public static Future<WebAPI.Response.PlayerHelpers> PlayerHelpers(
    int rental_element_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.PlayerHelpers>((Func<Promise<WebAPI.Response.PlayerHelpers>, IEnumerator>) (promise => WebAPI.LoadPlayerHelpers(promise, rental_element_id, userErrorCallback)));
  }

  private static IEnumerator LoadPlayerHelpers(
    Promise<WebAPI.Response.PlayerHelpers> promise,
    int rental_element_id,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalPlayerHelpers(rental_element_id, (Action<WebAPI.Response.PlayerHelpers>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalPlayerHelpers(
    int rental_element_id,
    Action<WebAPI.Response.PlayerHelpers> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/player/helpers", new Dictionary<string, object>()
    {
      [nameof (rental_element_id)] = (object) rental_element_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.PlayerHelpers) null);
      }
      else
        callback(new WebAPI.Response.PlayerHelpers(json.Json));
    }));
  }

  public static Future<WebAPI.Response.PlayerLightUserData> PlayerLightUserData(
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.PlayerLightUserData>((Func<Promise<WebAPI.Response.PlayerLightUserData>, IEnumerator>) (promise => WebAPI.LoadPlayerLightUserData(promise, userErrorCallback)));
  }

  private static IEnumerator LoadPlayerLightUserData(
    Promise<WebAPI.Response.PlayerLightUserData> promise,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalPlayerLightUserData((Action<WebAPI.Response.PlayerLightUserData>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalPlayerLightUserData(
    Action<WebAPI.Response.PlayerLightUserData> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Get("/player/light_user_data", (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.PlayerLightUserData) null);
      }
      else
        callback(new WebAPI.Response.PlayerLightUserData(json.Json));
    }));
  }

  public static Future<WebAPI.Response.PlayerNameEdit> PlayerNameEdit(
    string name,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.PlayerNameEdit>((Func<Promise<WebAPI.Response.PlayerNameEdit>, IEnumerator>) (promise => WebAPI.LoadPlayerNameEdit(promise, name, userErrorCallback)));
  }

  private static IEnumerator LoadPlayerNameEdit(
    Promise<WebAPI.Response.PlayerNameEdit> promise,
    string name,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalPlayerNameEdit(name, (Action<WebAPI.Response.PlayerNameEdit>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalPlayerNameEdit(
    string name,
    Action<WebAPI.Response.PlayerNameEdit> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/player/name/edit", new Dictionary<string, object>()
    {
      [nameof (name)] = (object) name
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.PlayerNameEdit) null);
      }
      else
        callback(new WebAPI.Response.PlayerNameEdit(json.Json));
    }));
  }

  public static Future<WebAPI.Response.PlayerSearch> PlayerSearch(
    string target_player_short_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.PlayerSearch>((Func<Promise<WebAPI.Response.PlayerSearch>, IEnumerator>) (promise => WebAPI.LoadPlayerSearch(promise, target_player_short_id, userErrorCallback)));
  }

  private static IEnumerator LoadPlayerSearch(
    Promise<WebAPI.Response.PlayerSearch> promise,
    string target_player_short_id,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalPlayerSearch(target_player_short_id, (Action<WebAPI.Response.PlayerSearch>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalPlayerSearch(
    string target_player_short_id,
    Action<WebAPI.Response.PlayerSearch> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/player/search", new Dictionary<string, object>()
    {
      [nameof (target_player_short_id)] = (object) target_player_short_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.PlayerSearch) null);
      }
      else
        callback(new WebAPI.Response.PlayerSearch(json.Json));
    }));
  }

  public static Future<WebAPI.Response.PlayerSignin> PlayerSignin(
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.PlayerSignin>((Func<Promise<WebAPI.Response.PlayerSignin>, IEnumerator>) (promise => WebAPI.LoadPlayerSignin(promise, userErrorCallback)));
  }

  private static IEnumerator LoadPlayerSignin(
    Promise<WebAPI.Response.PlayerSignin> promise,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalPlayerSignin((Action<WebAPI.Response.PlayerSignin>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalPlayerSignin(
    Action<WebAPI.Response.PlayerSignin> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Get("/player/signin", (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.PlayerSignin) null);
      }
      else
        callback(new WebAPI.Response.PlayerSignin(json.Json));
    }));
  }

  public static Future<WebAPI.Response.PlayerSignup> PlayerSignup(
    int killing_count,
    string name,
    int unit_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.PlayerSignup>((Func<Promise<WebAPI.Response.PlayerSignup>, IEnumerator>) (promise => WebAPI.LoadPlayerSignup(promise, killing_count, name, unit_id, userErrorCallback)));
  }

  private static IEnumerator LoadPlayerSignup(
    Promise<WebAPI.Response.PlayerSignup> promise,
    int killing_count,
    string name,
    int unit_id,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalPlayerSignup(killing_count, name, unit_id, (Action<WebAPI.Response.PlayerSignup>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalPlayerSignup(
    int killing_count,
    string name,
    int unit_id,
    Action<WebAPI.Response.PlayerSignup> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/player/signup", new Dictionary<string, object>()
    {
      [nameof (killing_count)] = (object) killing_count,
      [nameof (name)] = (object) name,
      [nameof (unit_id)] = (object) unit_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.PlayerSignup) null);
      }
      else
        callback(new WebAPI.Response.PlayerSignup(json.Json));
    }));
  }

  public static Future<WebAPI.Response.PlayerStatus> PlayerStatus(
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.PlayerStatus>((Func<Promise<WebAPI.Response.PlayerStatus>, IEnumerator>) (promise => WebAPI.LoadPlayerStatus(promise, userErrorCallback)));
  }

  private static IEnumerator LoadPlayerStatus(
    Promise<WebAPI.Response.PlayerStatus> promise,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalPlayerStatus((Action<WebAPI.Response.PlayerStatus>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalPlayerStatus(
    Action<WebAPI.Response.PlayerStatus> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Get("/player/status", (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.PlayerStatus) null);
      }
      else
        callback(new WebAPI.Response.PlayerStatus(json.Json));
    }));
  }

  public static Future<WebAPI.Response.PresentDelete> PresentDelete(
    int[] present_ids,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.PresentDelete>((Func<Promise<WebAPI.Response.PresentDelete>, IEnumerator>) (promise => WebAPI.LoadPresentDelete(promise, present_ids, userErrorCallback)));
  }

  private static IEnumerator LoadPresentDelete(
    Promise<WebAPI.Response.PresentDelete> promise,
    int[] present_ids,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalPresentDelete(present_ids, (Action<WebAPI.Response.PresentDelete>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalPresentDelete(
    int[] present_ids,
    Action<WebAPI.Response.PresentDelete> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/present/delete", new Dictionary<string, object>()
    {
      [nameof (present_ids)] = (object) present_ids
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.PresentDelete) null);
      }
      else
        callback(new WebAPI.Response.PresentDelete(json.Json));
    }));
  }

  public static Future<WebAPI.Response.PresentRead> PresentRead(
    int[] present_ids,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.PresentRead>((Func<Promise<WebAPI.Response.PresentRead>, IEnumerator>) (promise => WebAPI.LoadPresentRead(promise, present_ids, userErrorCallback)));
  }

  private static IEnumerator LoadPresentRead(
    Promise<WebAPI.Response.PresentRead> promise,
    int[] present_ids,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalPresentRead(present_ids, (Action<WebAPI.Response.PresentRead>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalPresentRead(
    int[] present_ids,
    Action<WebAPI.Response.PresentRead> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/present/read", new Dictionary<string, object>()
    {
      [nameof (present_ids)] = (object) present_ids
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.PresentRead) null);
      }
      else
        callback(new WebAPI.Response.PresentRead(json.Json));
    }));
  }

  public static Future<WebAPI.Response.PresentReadLump> PresentReadLump(
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.PresentReadLump>((Func<Promise<WebAPI.Response.PresentReadLump>, IEnumerator>) (promise => WebAPI.LoadPresentReadLump(promise, userErrorCallback)));
  }

  private static IEnumerator LoadPresentReadLump(
    Promise<WebAPI.Response.PresentReadLump> promise,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalPresentReadLump((Action<WebAPI.Response.PresentReadLump>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalPresentReadLump(
    Action<WebAPI.Response.PresentReadLump> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Get("/present/read/lump", (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.PresentReadLump) null);
      }
      else
        callback(new WebAPI.Response.PresentReadLump(json.Json));
    }));
  }

  public static Future<WebAPI.Response.PresentUrlPresent> PresentUrlPresent(
    int period_id,
    string serial,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.PresentUrlPresent>((Func<Promise<WebAPI.Response.PresentUrlPresent>, IEnumerator>) (promise => WebAPI.LoadPresentUrlPresent(promise, period_id, serial, userErrorCallback)));
  }

  private static IEnumerator LoadPresentUrlPresent(
    Promise<WebAPI.Response.PresentUrlPresent> promise,
    int period_id,
    string serial,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalPresentUrlPresent(period_id, serial, (Action<WebAPI.Response.PresentUrlPresent>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalPresentUrlPresent(
    int period_id,
    string serial,
    Action<WebAPI.Response.PresentUrlPresent> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/present/url/present", new Dictionary<string, object>()
    {
      [nameof (period_id)] = (object) period_id,
      [nameof (serial)] = (object) serial
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.PresentUrlPresent) null);
      }
      else
        callback(new WebAPI.Response.PresentUrlPresent(json.Json));
    }));
  }

  public static Future<WebAPI.Response.PvpBoot> PvpBoot(
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.PvpBoot>((Func<Promise<WebAPI.Response.PvpBoot>, IEnumerator>) (promise => WebAPI.LoadPvpBoot(promise, userErrorCallback)));
  }

  private static IEnumerator LoadPvpBoot(
    Promise<WebAPI.Response.PvpBoot> promise,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalPvpBoot((Action<WebAPI.Response.PvpBoot>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalPvpBoot(
    Action<WebAPI.Response.PvpBoot> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Get("/pvp/boot", (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.PvpBoot) null);
      }
      else
        callback(new WebAPI.Response.PvpBoot(json.Json));
    }));
  }

  public static Future<WebAPI.Response.PvpClassMatchHistory> PvpClassMatchHistory(
    string player_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.PvpClassMatchHistory>((Func<Promise<WebAPI.Response.PvpClassMatchHistory>, IEnumerator>) (promise => WebAPI.LoadPvpClassMatchHistory(promise, player_id, userErrorCallback)));
  }

  private static IEnumerator LoadPvpClassMatchHistory(
    Promise<WebAPI.Response.PvpClassMatchHistory> promise,
    string player_id,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalPvpClassMatchHistory(player_id, (Action<WebAPI.Response.PvpClassMatchHistory>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalPvpClassMatchHistory(
    string player_id,
    Action<WebAPI.Response.PvpClassMatchHistory> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/pvp/class_match_history", new Dictionary<string, object>()
    {
      [nameof (player_id)] = (object) player_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.PvpClassMatchHistory) null);
      }
      else
        callback(new WebAPI.Response.PvpClassMatchHistory(json.Json));
    }));
  }

  public static Future<WebAPI.Response.PvpClassMatchHistoryDetail> PvpClassMatchHistoryDetail(
    string battle_uuid,
    string player_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.PvpClassMatchHistoryDetail>((Func<Promise<WebAPI.Response.PvpClassMatchHistoryDetail>, IEnumerator>) (promise => WebAPI.LoadPvpClassMatchHistoryDetail(promise, battle_uuid, player_id, userErrorCallback)));
  }

  private static IEnumerator LoadPvpClassMatchHistoryDetail(
    Promise<WebAPI.Response.PvpClassMatchHistoryDetail> promise,
    string battle_uuid,
    string player_id,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalPvpClassMatchHistoryDetail(battle_uuid, player_id, (Action<WebAPI.Response.PvpClassMatchHistoryDetail>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalPvpClassMatchHistoryDetail(
    string battle_uuid,
    string player_id,
    Action<WebAPI.Response.PvpClassMatchHistoryDetail> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/pvp/class_match_history_detail", new Dictionary<string, object>()
    {
      [nameof (battle_uuid)] = (object) battle_uuid,
      [nameof (player_id)] = (object) player_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.PvpClassMatchHistoryDetail) null);
      }
      else
        callback(new WebAPI.Response.PvpClassMatchHistoryDetail(json.Json));
    }));
  }

  public static Future<WebAPI.Response.PvpForceClose> PvpForceClose(
    bool is_lose,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.PvpForceClose>((Func<Promise<WebAPI.Response.PvpForceClose>, IEnumerator>) (promise => WebAPI.LoadPvpForceClose(promise, is_lose, userErrorCallback)));
  }

  private static IEnumerator LoadPvpForceClose(
    Promise<WebAPI.Response.PvpForceClose> promise,
    bool is_lose,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalPvpForceClose(is_lose, (Action<WebAPI.Response.PvpForceClose>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalPvpForceClose(
    bool is_lose,
    Action<WebAPI.Response.PvpForceClose> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/pvp/force-close", new Dictionary<string, object>()
    {
      [nameof (is_lose)] = (object) is_lose
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.PvpForceClose) null);
      }
      else
        callback(new WebAPI.Response.PvpForceClose(json.Json));
    }));
  }

  public static Future<WebAPI.Response.PvpFriend> PvpFriend(
    string target_player_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.PvpFriend>((Func<Promise<WebAPI.Response.PvpFriend>, IEnumerator>) (promise => WebAPI.LoadPvpFriend(promise, target_player_id, userErrorCallback)));
  }

  private static IEnumerator LoadPvpFriend(
    Promise<WebAPI.Response.PvpFriend> promise,
    string target_player_id,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalPvpFriend(target_player_id, (Action<WebAPI.Response.PvpFriend>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalPvpFriend(
    string target_player_id,
    Action<WebAPI.Response.PvpFriend> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/pvp/friend", new Dictionary<string, object>()
    {
      [nameof (target_player_id)] = (object) target_player_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.PvpFriend) null);
      }
      else
        callback(new WebAPI.Response.PvpFriend(json.Json));
    }));
  }

  public static Future<WebAPI.Response.PvpLiteBoot> PvpLiteBoot(
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.PvpLiteBoot>((Func<Promise<WebAPI.Response.PvpLiteBoot>, IEnumerator>) (promise => WebAPI.LoadPvpLiteBoot(promise, userErrorCallback)));
  }

  private static IEnumerator LoadPvpLiteBoot(
    Promise<WebAPI.Response.PvpLiteBoot> promise,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalPvpLiteBoot((Action<WebAPI.Response.PvpLiteBoot>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalPvpLiteBoot(
    Action<WebAPI.Response.PvpLiteBoot> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Get("/pvp/lite/boot", (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.PvpLiteBoot) null);
      }
      else
        callback(new WebAPI.Response.PvpLiteBoot(json.Json));
    }));
  }

  public static Future<WebAPI.Response.PvpNpcForceClose> PvpNpcForceClose(
    bool is_lose,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.PvpNpcForceClose>((Func<Promise<WebAPI.Response.PvpNpcForceClose>, IEnumerator>) (promise => WebAPI.LoadPvpNpcForceClose(promise, is_lose, userErrorCallback)));
  }

  private static IEnumerator LoadPvpNpcForceClose(
    Promise<WebAPI.Response.PvpNpcForceClose> promise,
    bool is_lose,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalPvpNpcForceClose(is_lose, (Action<WebAPI.Response.PvpNpcForceClose>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalPvpNpcForceClose(
    bool is_lose,
    Action<WebAPI.Response.PvpNpcForceClose> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/pvp/npc/force-close", new Dictionary<string, object>()
    {
      [nameof (is_lose)] = (object) is_lose
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.PvpNpcForceClose) null);
      }
      else
        callback(new WebAPI.Response.PvpNpcForceClose(json.Json));
    }));
  }

  public static Future<WebAPI.Response.PvpOtherRanking> PvpOtherRanking(
    int rank_kind,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.PvpOtherRanking>((Func<Promise<WebAPI.Response.PvpOtherRanking>, IEnumerator>) (promise => WebAPI.LoadPvpOtherRanking(promise, rank_kind, userErrorCallback)));
  }

  private static IEnumerator LoadPvpOtherRanking(
    Promise<WebAPI.Response.PvpOtherRanking> promise,
    int rank_kind,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalPvpOtherRanking(rank_kind, (Action<WebAPI.Response.PvpOtherRanking>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalPvpOtherRanking(
    int rank_kind,
    Action<WebAPI.Response.PvpOtherRanking> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/pvp/other-ranking", new Dictionary<string, object>()
    {
      [nameof (rank_kind)] = (object) rank_kind
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.PvpOtherRanking) null);
      }
      else
        callback(new WebAPI.Response.PvpOtherRanking(json.Json));
    }));
  }

  public static Future<WebAPI.Response.PvpPlayerFinish> PvpPlayerFinish(
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.PvpPlayerFinish>((Func<Promise<WebAPI.Response.PvpPlayerFinish>, IEnumerator>) (promise => WebAPI.LoadPvpPlayerFinish(promise, userErrorCallback)));
  }

  private static IEnumerator LoadPvpPlayerFinish(
    Promise<WebAPI.Response.PvpPlayerFinish> promise,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalPvpPlayerFinish((Action<WebAPI.Response.PvpPlayerFinish>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalPvpPlayerFinish(
    Action<WebAPI.Response.PvpPlayerFinish> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Get("/pvp/player/finish", (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.PvpPlayerFinish) null);
      }
      else
        callback(new WebAPI.Response.PvpPlayerFinish(json.Json));
    }));
  }

  public static Future<WebAPI.Response.PvpPlayerNpcFinish> PvpPlayerNpcFinish(
    string[] battle_results_player_id,
    int[] battle_results_player_result,
    int[] battle_results_player_result_effect,
    int battle_stage_point,
    string battle_uuid,
    int[] intimate_results_character_id,
    int[] intimate_results_exp,
    int[] intimate_results_target_character_id,
    int player_battle_result_point,
    int target_player_battle_result_point,
    int[] target_unit_results_dead_count,
    int[] target_unit_results_defeat_count,
    int[] target_unit_results_duel_count,
    int[] target_unit_results_player_unit_id,
    int[] target_unit_results_point,
    int[] unit_results_dead_count,
    int[] unit_results_defeat_count,
    int[] unit_results_duel_count,
    int[] unit_results_player_unit_id,
    int[] unit_results_point,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.PvpPlayerNpcFinish>((Func<Promise<WebAPI.Response.PvpPlayerNpcFinish>, IEnumerator>) (promise => WebAPI.LoadPvpPlayerNpcFinish(promise, battle_results_player_id, battle_results_player_result, battle_results_player_result_effect, battle_stage_point, battle_uuid, intimate_results_character_id, intimate_results_exp, intimate_results_target_character_id, player_battle_result_point, target_player_battle_result_point, target_unit_results_dead_count, target_unit_results_defeat_count, target_unit_results_duel_count, target_unit_results_player_unit_id, target_unit_results_point, unit_results_dead_count, unit_results_defeat_count, unit_results_duel_count, unit_results_player_unit_id, unit_results_point, userErrorCallback)));
  }

  private static IEnumerator LoadPvpPlayerNpcFinish(
    Promise<WebAPI.Response.PvpPlayerNpcFinish> promise,
    string[] battle_results_player_id,
    int[] battle_results_player_result,
    int[] battle_results_player_result_effect,
    int battle_stage_point,
    string battle_uuid,
    int[] intimate_results_character_id,
    int[] intimate_results_exp,
    int[] intimate_results_target_character_id,
    int player_battle_result_point,
    int target_player_battle_result_point,
    int[] target_unit_results_dead_count,
    int[] target_unit_results_defeat_count,
    int[] target_unit_results_duel_count,
    int[] target_unit_results_player_unit_id,
    int[] target_unit_results_point,
    int[] unit_results_dead_count,
    int[] unit_results_defeat_count,
    int[] unit_results_duel_count,
    int[] unit_results_player_unit_id,
    int[] unit_results_point,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalPvpPlayerNpcFinish(battle_results_player_id, battle_results_player_result, battle_results_player_result_effect, battle_stage_point, battle_uuid, intimate_results_character_id, intimate_results_exp, intimate_results_target_character_id, player_battle_result_point, target_player_battle_result_point, target_unit_results_dead_count, target_unit_results_defeat_count, target_unit_results_duel_count, target_unit_results_player_unit_id, target_unit_results_point, unit_results_dead_count, unit_results_defeat_count, unit_results_duel_count, unit_results_player_unit_id, unit_results_point, (Action<WebAPI.Response.PvpPlayerNpcFinish>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalPvpPlayerNpcFinish(
    string[] battle_results_player_id,
    int[] battle_results_player_result,
    int[] battle_results_player_result_effect,
    int battle_stage_point,
    string battle_uuid,
    int[] intimate_results_character_id,
    int[] intimate_results_exp,
    int[] intimate_results_target_character_id,
    int player_battle_result_point,
    int target_player_battle_result_point,
    int[] target_unit_results_dead_count,
    int[] target_unit_results_defeat_count,
    int[] target_unit_results_duel_count,
    int[] target_unit_results_player_unit_id,
    int[] target_unit_results_point,
    int[] unit_results_dead_count,
    int[] unit_results_defeat_count,
    int[] unit_results_duel_count,
    int[] unit_results_player_unit_id,
    int[] unit_results_point,
    Action<WebAPI.Response.PvpPlayerNpcFinish> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/pvp/player/npc/finish", new Dictionary<string, object>()
    {
      [nameof (battle_results_player_id)] = (object) battle_results_player_id,
      [nameof (battle_results_player_result)] = (object) battle_results_player_result,
      [nameof (battle_results_player_result_effect)] = (object) battle_results_player_result_effect,
      [nameof (battle_stage_point)] = (object) battle_stage_point,
      [nameof (battle_uuid)] = (object) battle_uuid,
      [nameof (intimate_results_character_id)] = (object) intimate_results_character_id,
      [nameof (intimate_results_exp)] = (object) intimate_results_exp,
      [nameof (intimate_results_target_character_id)] = (object) intimate_results_target_character_id,
      [nameof (player_battle_result_point)] = (object) player_battle_result_point,
      [nameof (target_player_battle_result_point)] = (object) target_player_battle_result_point,
      [nameof (target_unit_results_dead_count)] = (object) target_unit_results_dead_count,
      [nameof (target_unit_results_defeat_count)] = (object) target_unit_results_defeat_count,
      [nameof (target_unit_results_duel_count)] = (object) target_unit_results_duel_count,
      [nameof (target_unit_results_player_unit_id)] = (object) target_unit_results_player_unit_id,
      [nameof (target_unit_results_point)] = (object) target_unit_results_point,
      [nameof (unit_results_dead_count)] = (object) unit_results_dead_count,
      [nameof (unit_results_defeat_count)] = (object) unit_results_defeat_count,
      [nameof (unit_results_duel_count)] = (object) unit_results_duel_count,
      [nameof (unit_results_player_unit_id)] = (object) unit_results_player_unit_id,
      [nameof (unit_results_point)] = (object) unit_results_point
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.PvpPlayerNpcFinish) null);
      }
      else
        callback(new WebAPI.Response.PvpPlayerNpcFinish(json.Json));
    }));
  }

  public static Future<WebAPI.Response.PvpPlayerNpcStart> PvpPlayerNpcStart(
    int deck_number,
    int deck_type_id,
    int matching_type,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.PvpPlayerNpcStart>((Func<Promise<WebAPI.Response.PvpPlayerNpcStart>, IEnumerator>) (promise => WebAPI.LoadPvpPlayerNpcStart(promise, deck_number, deck_type_id, matching_type, userErrorCallback)));
  }

  private static IEnumerator LoadPvpPlayerNpcStart(
    Promise<WebAPI.Response.PvpPlayerNpcStart> promise,
    int deck_number,
    int deck_type_id,
    int matching_type,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalPvpPlayerNpcStart(deck_number, deck_type_id, matching_type, (Action<WebAPI.Response.PvpPlayerNpcStart>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalPvpPlayerNpcStart(
    int deck_number,
    int deck_type_id,
    int matching_type,
    Action<WebAPI.Response.PvpPlayerNpcStart> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/pvp/player/npc/start", new Dictionary<string, object>()
    {
      [nameof (deck_number)] = (object) deck_number,
      [nameof (deck_type_id)] = (object) deck_type_id,
      [nameof (matching_type)] = (object) matching_type
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.PvpPlayerNpcStart) null);
      }
      else
        callback(new WebAPI.Response.PvpPlayerNpcStart(json.Json));
    }));
  }

  public static Future<WebAPI.Response.PvpPlayerStatus> PvpPlayerStatus(
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.PvpPlayerStatus>((Func<Promise<WebAPI.Response.PvpPlayerStatus>, IEnumerator>) (promise => WebAPI.LoadPvpPlayerStatus(promise, userErrorCallback)));
  }

  private static IEnumerator LoadPvpPlayerStatus(
    Promise<WebAPI.Response.PvpPlayerStatus> promise,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalPvpPlayerStatus((Action<WebAPI.Response.PvpPlayerStatus>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalPvpPlayerStatus(
    Action<WebAPI.Response.PvpPlayerStatus> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Get("/pvp/player/status", (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.PvpPlayerStatus) null);
      }
      else
        callback(new WebAPI.Response.PvpPlayerStatus(json.Json));
    }));
  }

  public static Future<WebAPI.Response.PvpRanking> PvpRanking(
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.PvpRanking>((Func<Promise<WebAPI.Response.PvpRanking>, IEnumerator>) (promise => WebAPI.LoadPvpRanking(promise, userErrorCallback)));
  }

  private static IEnumerator LoadPvpRanking(
    Promise<WebAPI.Response.PvpRanking> promise,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalPvpRanking((Action<WebAPI.Response.PvpRanking>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalPvpRanking(
    Action<WebAPI.Response.PvpRanking> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Get("/pvp/ranking", (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.PvpRanking) null);
      }
      else
        callback(new WebAPI.Response.PvpRanking(json.Json));
    }));
  }

  public static Future<WebAPI.Response.PvpRankingClose> PvpRankingClose(
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.PvpRankingClose>((Func<Promise<WebAPI.Response.PvpRankingClose>, IEnumerator>) (promise => WebAPI.LoadPvpRankingClose(promise, userErrorCallback)));
  }

  private static IEnumerator LoadPvpRankingClose(
    Promise<WebAPI.Response.PvpRankingClose> promise,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalPvpRankingClose((Action<WebAPI.Response.PvpRankingClose>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalPvpRankingClose(
    Action<WebAPI.Response.PvpRankingClose> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Get("/pvp/ranking-close", (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.PvpRankingClose) null);
      }
      else
        callback(new WebAPI.Response.PvpRankingClose(json.Json));
    }));
  }

  public static Future<WebAPI.Response.PvpResume> PvpResume(
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.PvpResume>((Func<Promise<WebAPI.Response.PvpResume>, IEnumerator>) (promise => WebAPI.LoadPvpResume(promise, userErrorCallback)));
  }

  private static IEnumerator LoadPvpResume(
    Promise<WebAPI.Response.PvpResume> promise,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalPvpResume((Action<WebAPI.Response.PvpResume>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalPvpResume(
    Action<WebAPI.Response.PvpResume> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Get("/pvp/resume", (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.PvpResume) null);
      }
      else
        callback(new WebAPI.Response.PvpResume(json.Json));
    }));
  }

  public static Future<WebAPI.Response.PvpSeasonClose> PvpSeasonClose(
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.PvpSeasonClose>((Func<Promise<WebAPI.Response.PvpSeasonClose>, IEnumerator>) (promise => WebAPI.LoadPvpSeasonClose(promise, userErrorCallback)));
  }

  private static IEnumerator LoadPvpSeasonClose(
    Promise<WebAPI.Response.PvpSeasonClose> promise,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalPvpSeasonClose((Action<WebAPI.Response.PvpSeasonClose>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalPvpSeasonClose(
    Action<WebAPI.Response.PvpSeasonClose> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Get("/pvp/season-close", (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.PvpSeasonClose) null);
      }
      else
        callback(new WebAPI.Response.PvpSeasonClose(json.Json));
    }));
  }

  public static Future<WebAPI.Response.PvpTutorialPlayerFinish> PvpTutorialPlayerFinish(
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.PvpTutorialPlayerFinish>((Func<Promise<WebAPI.Response.PvpTutorialPlayerFinish>, IEnumerator>) (promise => WebAPI.LoadPvpTutorialPlayerFinish(promise, userErrorCallback)));
  }

  private static IEnumerator LoadPvpTutorialPlayerFinish(
    Promise<WebAPI.Response.PvpTutorialPlayerFinish> promise,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalPvpTutorialPlayerFinish((Action<WebAPI.Response.PvpTutorialPlayerFinish>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalPvpTutorialPlayerFinish(
    Action<WebAPI.Response.PvpTutorialPlayerFinish> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Get("/pvp/tutorial/player/finish", (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.PvpTutorialPlayerFinish) null);
      }
      else
        callback(new WebAPI.Response.PvpTutorialPlayerFinish(json.Json));
    }));
  }

  public static Future<WebAPI.Response.PvpTutorialProgressFinish> PvpTutorialProgressFinish(
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.PvpTutorialProgressFinish>((Func<Promise<WebAPI.Response.PvpTutorialProgressFinish>, IEnumerator>) (promise => WebAPI.LoadPvpTutorialProgressFinish(promise, userErrorCallback)));
  }

  private static IEnumerator LoadPvpTutorialProgressFinish(
    Promise<WebAPI.Response.PvpTutorialProgressFinish> promise,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalPvpTutorialProgressFinish((Action<WebAPI.Response.PvpTutorialProgressFinish>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalPvpTutorialProgressFinish(
    Action<WebAPI.Response.PvpTutorialProgressFinish> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Get("/pvp/tutorial/progress/finish", (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.PvpTutorialProgressFinish) null);
      }
      else
        callback(new WebAPI.Response.PvpTutorialProgressFinish(json.Json));
    }));
  }

  public static Future<WebAPI.Response.QuestCorpsBattleFinish> QuestCorpsBattleFinish(
    int battle_turn,
    string battle_uuid,
    string corps_battle_log,
    int overkill_damage,
    int[] result_enemy_hitpoint,
    int[] result_enemy_id,
    int[] result_enemy_kill_count,
    int[] result_player_unit_hitpoint,
    int[] result_player_unit_hitpoint_max,
    int[] result_player_unit_id,
    int[] result_supply_id,
    int[] result_supply_use_quantity,
    bool win,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.QuestCorpsBattleFinish>((Func<Promise<WebAPI.Response.QuestCorpsBattleFinish>, IEnumerator>) (promise => WebAPI.LoadQuestCorpsBattleFinish(promise, battle_turn, battle_uuid, corps_battle_log, overkill_damage, result_enemy_hitpoint, result_enemy_id, result_enemy_kill_count, result_player_unit_hitpoint, result_player_unit_hitpoint_max, result_player_unit_id, result_supply_id, result_supply_use_quantity, win, userErrorCallback)));
  }

  private static IEnumerator LoadQuestCorpsBattleFinish(
    Promise<WebAPI.Response.QuestCorpsBattleFinish> promise,
    int battle_turn,
    string battle_uuid,
    string corps_battle_log,
    int overkill_damage,
    int[] result_enemy_hitpoint,
    int[] result_enemy_id,
    int[] result_enemy_kill_count,
    int[] result_player_unit_hitpoint,
    int[] result_player_unit_hitpoint_max,
    int[] result_player_unit_id,
    int[] result_supply_id,
    int[] result_supply_use_quantity,
    bool win,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalQuestCorpsBattleFinish(battle_turn, battle_uuid, corps_battle_log, overkill_damage, result_enemy_hitpoint, result_enemy_id, result_enemy_kill_count, result_player_unit_hitpoint, result_player_unit_hitpoint_max, result_player_unit_id, result_supply_id, result_supply_use_quantity, win, (Action<WebAPI.Response.QuestCorpsBattleFinish>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalQuestCorpsBattleFinish(
    int battle_turn,
    string battle_uuid,
    string corps_battle_log,
    int overkill_damage,
    int[] result_enemy_hitpoint,
    int[] result_enemy_id,
    int[] result_enemy_kill_count,
    int[] result_player_unit_hitpoint,
    int[] result_player_unit_hitpoint_max,
    int[] result_player_unit_id,
    int[] result_supply_id,
    int[] result_supply_use_quantity,
    bool win,
    Action<WebAPI.Response.QuestCorpsBattleFinish> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/quest_corps/battle/finish", new Dictionary<string, object>()
    {
      [nameof (battle_turn)] = (object) battle_turn,
      [nameof (battle_uuid)] = (object) battle_uuid,
      [nameof (corps_battle_log)] = (object) corps_battle_log,
      [nameof (overkill_damage)] = (object) overkill_damage,
      [nameof (result_enemy_hitpoint)] = (object) result_enemy_hitpoint,
      [nameof (result_enemy_id)] = (object) result_enemy_id,
      [nameof (result_enemy_kill_count)] = (object) result_enemy_kill_count,
      [nameof (result_player_unit_hitpoint)] = (object) result_player_unit_hitpoint,
      [nameof (result_player_unit_hitpoint_max)] = (object) result_player_unit_hitpoint_max,
      [nameof (result_player_unit_id)] = (object) result_player_unit_id,
      [nameof (result_supply_id)] = (object) result_supply_id,
      [nameof (result_supply_use_quantity)] = (object) result_supply_use_quantity,
      [nameof (win)] = (object) win
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.QuestCorpsBattleFinish) null);
      }
      else
        callback(new WebAPI.Response.QuestCorpsBattleFinish(json.Json));
    }));
  }

  public static Future<WebAPI.Response.QuestCorpsBattleForceClose> QuestCorpsBattleForceClose(
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.QuestCorpsBattleForceClose>((Func<Promise<WebAPI.Response.QuestCorpsBattleForceClose>, IEnumerator>) (promise => WebAPI.LoadQuestCorpsBattleForceClose(promise, userErrorCallback)));
  }

  private static IEnumerator LoadQuestCorpsBattleForceClose(
    Promise<WebAPI.Response.QuestCorpsBattleForceClose> promise,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalQuestCorpsBattleForceClose((Action<WebAPI.Response.QuestCorpsBattleForceClose>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalQuestCorpsBattleForceClose(
    Action<WebAPI.Response.QuestCorpsBattleForceClose> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Get("/quest_corps/battle/force-close", (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.QuestCorpsBattleForceClose) null);
      }
      else
        callback(new WebAPI.Response.QuestCorpsBattleForceClose(json.Json));
    }));
  }

  public static Future<WebAPI.Response.QuestCorpsBattleResume> QuestCorpsBattleResume(
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.QuestCorpsBattleResume>((Func<Promise<WebAPI.Response.QuestCorpsBattleResume>, IEnumerator>) (promise => WebAPI.LoadQuestCorpsBattleResume(promise, userErrorCallback)));
  }

  private static IEnumerator LoadQuestCorpsBattleResume(
    Promise<WebAPI.Response.QuestCorpsBattleResume> promise,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalQuestCorpsBattleResume((Action<WebAPI.Response.QuestCorpsBattleResume>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalQuestCorpsBattleResume(
    Action<WebAPI.Response.QuestCorpsBattleResume> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Get("/quest_corps/battle/resume", (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.QuestCorpsBattleResume) null);
      }
      else
        callback(new WebAPI.Response.QuestCorpsBattleResume(json.Json));
    }));
  }

  public static Future<WebAPI.Response.QuestCorpsBattleStart> QuestCorpsBattleStart(
    int period_id,
    int stage_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.QuestCorpsBattleStart>((Func<Promise<WebAPI.Response.QuestCorpsBattleStart>, IEnumerator>) (promise => WebAPI.LoadQuestCorpsBattleStart(promise, period_id, stage_id, userErrorCallback)));
  }

  private static IEnumerator LoadQuestCorpsBattleStart(
    Promise<WebAPI.Response.QuestCorpsBattleStart> promise,
    int period_id,
    int stage_id,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalQuestCorpsBattleStart(period_id, stage_id, (Action<WebAPI.Response.QuestCorpsBattleStart>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalQuestCorpsBattleStart(
    int period_id,
    int stage_id,
    Action<WebAPI.Response.QuestCorpsBattleStart> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/quest_corps/battle/start", new Dictionary<string, object>()
    {
      [nameof (period_id)] = (object) period_id,
      [nameof (stage_id)] = (object) stage_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.QuestCorpsBattleStart) null);
      }
      else
        callback(new WebAPI.Response.QuestCorpsBattleStart(json.Json));
    }));
  }

  public static Future<WebAPI.Response.QuestCorpsDeckEdit> QuestCorpsDeckEdit(
    int period_id,
    int[] player_unit_ids,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.QuestCorpsDeckEdit>((Func<Promise<WebAPI.Response.QuestCorpsDeckEdit>, IEnumerator>) (promise => WebAPI.LoadQuestCorpsDeckEdit(promise, period_id, player_unit_ids, userErrorCallback)));
  }

  private static IEnumerator LoadQuestCorpsDeckEdit(
    Promise<WebAPI.Response.QuestCorpsDeckEdit> promise,
    int period_id,
    int[] player_unit_ids,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalQuestCorpsDeckEdit(period_id, player_unit_ids, (Action<WebAPI.Response.QuestCorpsDeckEdit>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalQuestCorpsDeckEdit(
    int period_id,
    int[] player_unit_ids,
    Action<WebAPI.Response.QuestCorpsDeckEdit> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/quest_corps/deck/edit", new Dictionary<string, object>()
    {
      [nameof (period_id)] = (object) period_id,
      [nameof (player_unit_ids)] = (object) player_unit_ids
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.QuestCorpsDeckEdit) null);
      }
      else
        callback(new WebAPI.Response.QuestCorpsDeckEdit(json.Json));
    }));
  }

  public static Future<WebAPI.Response.QuestCorpsEntry> QuestCorpsEntry(
    int[] deck_quantities,
    int[] deck_supply_ids,
    int period_id,
    int[] player_unit_ids,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.QuestCorpsEntry>((Func<Promise<WebAPI.Response.QuestCorpsEntry>, IEnumerator>) (promise => WebAPI.LoadQuestCorpsEntry(promise, deck_quantities, deck_supply_ids, period_id, player_unit_ids, userErrorCallback)));
  }

  private static IEnumerator LoadQuestCorpsEntry(
    Promise<WebAPI.Response.QuestCorpsEntry> promise,
    int[] deck_quantities,
    int[] deck_supply_ids,
    int period_id,
    int[] player_unit_ids,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalQuestCorpsEntry(deck_quantities, deck_supply_ids, period_id, player_unit_ids, (Action<WebAPI.Response.QuestCorpsEntry>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalQuestCorpsEntry(
    int[] deck_quantities,
    int[] deck_supply_ids,
    int period_id,
    int[] player_unit_ids,
    Action<WebAPI.Response.QuestCorpsEntry> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/quest_corps/entry", new Dictionary<string, object>()
    {
      [nameof (deck_quantities)] = (object) deck_quantities,
      [nameof (deck_supply_ids)] = (object) deck_supply_ids,
      [nameof (period_id)] = (object) period_id,
      [nameof (player_unit_ids)] = (object) player_unit_ids
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.QuestCorpsEntry) null);
      }
      else
        callback(new WebAPI.Response.QuestCorpsEntry(json.Json));
    }));
  }

  public static Future<WebAPI.Response.QuestCorpsReset> QuestCorpsReset(
    int[] deck_quantities,
    int[] deck_supply_ids,
    int period_id,
    int[] player_unit_ids,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.QuestCorpsReset>((Func<Promise<WebAPI.Response.QuestCorpsReset>, IEnumerator>) (promise => WebAPI.LoadQuestCorpsReset(promise, deck_quantities, deck_supply_ids, period_id, player_unit_ids, userErrorCallback)));
  }

  private static IEnumerator LoadQuestCorpsReset(
    Promise<WebAPI.Response.QuestCorpsReset> promise,
    int[] deck_quantities,
    int[] deck_supply_ids,
    int period_id,
    int[] player_unit_ids,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalQuestCorpsReset(deck_quantities, deck_supply_ids, period_id, player_unit_ids, (Action<WebAPI.Response.QuestCorpsReset>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalQuestCorpsReset(
    int[] deck_quantities,
    int[] deck_supply_ids,
    int period_id,
    int[] player_unit_ids,
    Action<WebAPI.Response.QuestCorpsReset> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/quest_corps/reset", new Dictionary<string, object>()
    {
      [nameof (deck_quantities)] = (object) deck_quantities,
      [nameof (deck_supply_ids)] = (object) deck_supply_ids,
      [nameof (period_id)] = (object) period_id,
      [nameof (player_unit_ids)] = (object) player_unit_ids
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.QuestCorpsReset) null);
      }
      else
        callback(new WebAPI.Response.QuestCorpsReset(json.Json));
    }));
  }

  public static Future<WebAPI.Response.QuestCorpsTop> QuestCorpsTop(
    int period_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.QuestCorpsTop>((Func<Promise<WebAPI.Response.QuestCorpsTop>, IEnumerator>) (promise => WebAPI.LoadQuestCorpsTop(promise, period_id, userErrorCallback)));
  }

  private static IEnumerator LoadQuestCorpsTop(
    Promise<WebAPI.Response.QuestCorpsTop> promise,
    int period_id,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalQuestCorpsTop(period_id, (Action<WebAPI.Response.QuestCorpsTop>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalQuestCorpsTop(
    int period_id,
    Action<WebAPI.Response.QuestCorpsTop> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/quest_corps/top", new Dictionary<string, object>()
    {
      [nameof (period_id)] = (object) period_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.QuestCorpsTop) null);
      }
      else
        callback(new WebAPI.Response.QuestCorpsTop(json.Json));
    }));
  }

  public static Future<WebAPI.Response.QuestHistoryExtra> QuestHistoryExtra(
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.QuestHistoryExtra>((Func<Promise<WebAPI.Response.QuestHistoryExtra>, IEnumerator>) (promise => WebAPI.LoadQuestHistoryExtra(promise, userErrorCallback)));
  }

  private static IEnumerator LoadQuestHistoryExtra(
    Promise<WebAPI.Response.QuestHistoryExtra> promise,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalQuestHistoryExtra((Action<WebAPI.Response.QuestHistoryExtra>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalQuestHistoryExtra(
    Action<WebAPI.Response.QuestHistoryExtra> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Get("/quest/history/extra", (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.QuestHistoryExtra) null);
      }
      else
        callback(new WebAPI.Response.QuestHistoryExtra(json.Json));
    }));
  }

  public static Future<WebAPI.Response.QuestkeyIndex> QuestkeyIndex(
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.QuestkeyIndex>((Func<Promise<WebAPI.Response.QuestkeyIndex>, IEnumerator>) (promise => WebAPI.LoadQuestkeyIndex(promise, userErrorCallback)));
  }

  private static IEnumerator LoadQuestkeyIndex(
    Promise<WebAPI.Response.QuestkeyIndex> promise,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalQuestkeyIndex((Action<WebAPI.Response.QuestkeyIndex>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalQuestkeyIndex(
    Action<WebAPI.Response.QuestkeyIndex> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Get("/questkey/index", (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.QuestkeyIndex) null);
      }
      else
        callback(new WebAPI.Response.QuestkeyIndex(json.Json));
    }));
  }

  public static Future<WebAPI.Response.QuestkeySpend> QuestkeySpend(
    int key_id,
    int quantity,
    int quest_gate_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.QuestkeySpend>((Func<Promise<WebAPI.Response.QuestkeySpend>, IEnumerator>) (promise => WebAPI.LoadQuestkeySpend(promise, key_id, quantity, quest_gate_id, userErrorCallback)));
  }

  private static IEnumerator LoadQuestkeySpend(
    Promise<WebAPI.Response.QuestkeySpend> promise,
    int key_id,
    int quantity,
    int quest_gate_id,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalQuestkeySpend(key_id, quantity, quest_gate_id, (Action<WebAPI.Response.QuestkeySpend>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalQuestkeySpend(
    int key_id,
    int quantity,
    int quest_gate_id,
    Action<WebAPI.Response.QuestkeySpend> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/questkey/spend", new Dictionary<string, object>()
    {
      [nameof (key_id)] = (object) key_id,
      [nameof (quantity)] = (object) quantity,
      [nameof (quest_gate_id)] = (object) quest_gate_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.QuestkeySpend) null);
      }
      else
        callback(new WebAPI.Response.QuestkeySpend(json.Json));
    }));
  }

  public static Future<WebAPI.Response.QuestLimitationCharacter> QuestLimitationCharacter(
    int quest_s_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.QuestLimitationCharacter>((Func<Promise<WebAPI.Response.QuestLimitationCharacter>, IEnumerator>) (promise => WebAPI.LoadQuestLimitationCharacter(promise, quest_s_id, userErrorCallback)));
  }

  private static IEnumerator LoadQuestLimitationCharacter(
    Promise<WebAPI.Response.QuestLimitationCharacter> promise,
    int quest_s_id,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalQuestLimitationCharacter(quest_s_id, (Action<WebAPI.Response.QuestLimitationCharacter>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalQuestLimitationCharacter(
    int quest_s_id,
    Action<WebAPI.Response.QuestLimitationCharacter> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/quest/limitation/character", new Dictionary<string, object>()
    {
      [nameof (quest_s_id)] = (object) quest_s_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.QuestLimitationCharacter) null);
      }
      else
        callback(new WebAPI.Response.QuestLimitationCharacter(json.Json));
    }));
  }

  public static Future<WebAPI.Response.QuestLimitationExtra> QuestLimitationExtra(
    int quest_s_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.QuestLimitationExtra>((Func<Promise<WebAPI.Response.QuestLimitationExtra>, IEnumerator>) (promise => WebAPI.LoadQuestLimitationExtra(promise, quest_s_id, userErrorCallback)));
  }

  private static IEnumerator LoadQuestLimitationExtra(
    Promise<WebAPI.Response.QuestLimitationExtra> promise,
    int quest_s_id,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalQuestLimitationExtra(quest_s_id, (Action<WebAPI.Response.QuestLimitationExtra>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalQuestLimitationExtra(
    int quest_s_id,
    Action<WebAPI.Response.QuestLimitationExtra> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/quest/limitation/extra", new Dictionary<string, object>()
    {
      [nameof (quest_s_id)] = (object) quest_s_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.QuestLimitationExtra) null);
      }
      else
        callback(new WebAPI.Response.QuestLimitationExtra(json.Json));
    }));
  }

  public static Future<WebAPI.Response.QuestLimitationHarmony> QuestLimitationHarmony(
    int quest_s_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.QuestLimitationHarmony>((Func<Promise<WebAPI.Response.QuestLimitationHarmony>, IEnumerator>) (promise => WebAPI.LoadQuestLimitationHarmony(promise, quest_s_id, userErrorCallback)));
  }

  private static IEnumerator LoadQuestLimitationHarmony(
    Promise<WebAPI.Response.QuestLimitationHarmony> promise,
    int quest_s_id,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalQuestLimitationHarmony(quest_s_id, (Action<WebAPI.Response.QuestLimitationHarmony>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalQuestLimitationHarmony(
    int quest_s_id,
    Action<WebAPI.Response.QuestLimitationHarmony> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/quest/limitation/harmony", new Dictionary<string, object>()
    {
      [nameof (quest_s_id)] = (object) quest_s_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.QuestLimitationHarmony) null);
      }
      else
        callback(new WebAPI.Response.QuestLimitationHarmony(json.Json));
    }));
  }

  public static Future<WebAPI.Response.QuestLimitationStory> QuestLimitationStory(
    int quest_s_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.QuestLimitationStory>((Func<Promise<WebAPI.Response.QuestLimitationStory>, IEnumerator>) (promise => WebAPI.LoadQuestLimitationStory(promise, quest_s_id, userErrorCallback)));
  }

  private static IEnumerator LoadQuestLimitationStory(
    Promise<WebAPI.Response.QuestLimitationStory> promise,
    int quest_s_id,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalQuestLimitationStory(quest_s_id, (Action<WebAPI.Response.QuestLimitationStory>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalQuestLimitationStory(
    int quest_s_id,
    Action<WebAPI.Response.QuestLimitationStory> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/quest/limitation/story", new Dictionary<string, object>()
    {
      [nameof (quest_s_id)] = (object) quest_s_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.QuestLimitationStory) null);
      }
      else
        callback(new WebAPI.Response.QuestLimitationStory(json.Json));
    }));
  }

  public static Future<WebAPI.Response.QuestProgressCharacter> QuestProgressCharacter(
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.QuestProgressCharacter>((Func<Promise<WebAPI.Response.QuestProgressCharacter>, IEnumerator>) (promise => WebAPI.LoadQuestProgressCharacter(promise, userErrorCallback)));
  }

  private static IEnumerator LoadQuestProgressCharacter(
    Promise<WebAPI.Response.QuestProgressCharacter> promise,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalQuestProgressCharacter((Action<WebAPI.Response.QuestProgressCharacter>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalQuestProgressCharacter(
    Action<WebAPI.Response.QuestProgressCharacter> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Get("/quest/progress/character", (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.QuestProgressCharacter) null);
      }
      else
        callback(new WebAPI.Response.QuestProgressCharacter(json.Json));
    }));
  }

  public static Future<WebAPI.Response.QuestProgressExtra> QuestProgressExtra(
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.QuestProgressExtra>((Func<Promise<WebAPI.Response.QuestProgressExtra>, IEnumerator>) (promise => WebAPI.LoadQuestProgressExtra(promise, userErrorCallback)));
  }

  private static IEnumerator LoadQuestProgressExtra(
    Promise<WebAPI.Response.QuestProgressExtra> promise,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalQuestProgressExtra((Action<WebAPI.Response.QuestProgressExtra>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalQuestProgressExtra(
    Action<WebAPI.Response.QuestProgressExtra> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Get("/quest/progress/extra", (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.QuestProgressExtra) null);
      }
      else
        callback(new WebAPI.Response.QuestProgressExtra(json.Json));
    }));
  }

  public static Future<WebAPI.Response.QuestProgressGuildraid> QuestProgressGuildraid(
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.QuestProgressGuildraid>((Func<Promise<WebAPI.Response.QuestProgressGuildraid>, IEnumerator>) (promise => WebAPI.LoadQuestProgressGuildraid(promise, userErrorCallback)));
  }

  private static IEnumerator LoadQuestProgressGuildraid(
    Promise<WebAPI.Response.QuestProgressGuildraid> promise,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalQuestProgressGuildraid((Action<WebAPI.Response.QuestProgressGuildraid>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalQuestProgressGuildraid(
    Action<WebAPI.Response.QuestProgressGuildraid> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Get("/quest/progress/guildraid", (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.QuestProgressGuildraid) null);
      }
      else
        callback(new WebAPI.Response.QuestProgressGuildraid(json.Json));
    }));
  }

  public static Future<WebAPI.Response.QuestProgressHarmony> QuestProgressHarmony(
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.QuestProgressHarmony>((Func<Promise<WebAPI.Response.QuestProgressHarmony>, IEnumerator>) (promise => WebAPI.LoadQuestProgressHarmony(promise, userErrorCallback)));
  }

  private static IEnumerator LoadQuestProgressHarmony(
    Promise<WebAPI.Response.QuestProgressHarmony> promise,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalQuestProgressHarmony((Action<WebAPI.Response.QuestProgressHarmony>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalQuestProgressHarmony(
    Action<WebAPI.Response.QuestProgressHarmony> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Get("/quest/progress/harmony", (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.QuestProgressHarmony) null);
      }
      else
        callback(new WebAPI.Response.QuestProgressHarmony(json.Json));
    }));
  }

  public static Future<WebAPI.Response.QuestProgressLimited> QuestProgressLimited(
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.QuestProgressLimited>((Func<Promise<WebAPI.Response.QuestProgressLimited>, IEnumerator>) (promise => WebAPI.LoadQuestProgressLimited(promise, userErrorCallback)));
  }

  private static IEnumerator LoadQuestProgressLimited(
    Promise<WebAPI.Response.QuestProgressLimited> promise,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalQuestProgressLimited((Action<WebAPI.Response.QuestProgressLimited>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalQuestProgressLimited(
    Action<WebAPI.Response.QuestProgressLimited> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Get("/quest/progress/limited/", (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.QuestProgressLimited) null);
      }
      else
        callback(new WebAPI.Response.QuestProgressLimited(json.Json));
    }));
  }

  public static Future<WebAPI.Response.QuestProgressSea> QuestProgressSea(
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.QuestProgressSea>((Func<Promise<WebAPI.Response.QuestProgressSea>, IEnumerator>) (promise => WebAPI.LoadQuestProgressSea(promise, userErrorCallback)));
  }

  private static IEnumerator LoadQuestProgressSea(
    Promise<WebAPI.Response.QuestProgressSea> promise,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalQuestProgressSea((Action<WebAPI.Response.QuestProgressSea>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalQuestProgressSea(
    Action<WebAPI.Response.QuestProgressSea> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Get("/quest/progress/sea", (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.QuestProgressSea) null);
      }
      else
        callback(new WebAPI.Response.QuestProgressSea(json.Json));
    }));
  }

  public static Future<WebAPI.Response.QuestProgressStory> QuestProgressStory(
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.QuestProgressStory>((Func<Promise<WebAPI.Response.QuestProgressStory>, IEnumerator>) (promise => WebAPI.LoadQuestProgressStory(promise, userErrorCallback)));
  }

  private static IEnumerator LoadQuestProgressStory(
    Promise<WebAPI.Response.QuestProgressStory> promise,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalQuestProgressStory((Action<WebAPI.Response.QuestProgressStory>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalQuestProgressStory(
    Action<WebAPI.Response.QuestProgressStory> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Get("/quest/progress/story", (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.QuestProgressStory) null);
      }
      else
        callback(new WebAPI.Response.QuestProgressStory(json.Json));
    }));
  }

  public static Future<WebAPI.Response.QuestRankingExtra> QuestRankingExtra(
    int score_campaign_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.QuestRankingExtra>((Func<Promise<WebAPI.Response.QuestRankingExtra>, IEnumerator>) (promise => WebAPI.LoadQuestRankingExtra(promise, score_campaign_id, userErrorCallback)));
  }

  private static IEnumerator LoadQuestRankingExtra(
    Promise<WebAPI.Response.QuestRankingExtra> promise,
    int score_campaign_id,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalQuestRankingExtra(score_campaign_id, (Action<WebAPI.Response.QuestRankingExtra>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalQuestRankingExtra(
    int score_campaign_id,
    Action<WebAPI.Response.QuestRankingExtra> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/quest/ranking/extra", new Dictionary<string, object>()
    {
      [nameof (score_campaign_id)] = (object) score_campaign_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.QuestRankingExtra) null);
      }
      else
        callback(new WebAPI.Response.QuestRankingExtra(json.Json));
    }));
  }

  public static Future<WebAPI.Response.QuestscoreReward> QuestscoreReward(
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.QuestscoreReward>((Func<Promise<WebAPI.Response.QuestscoreReward>, IEnumerator>) (promise => WebAPI.LoadQuestscoreReward(promise, userErrorCallback)));
  }

  private static IEnumerator LoadQuestscoreReward(
    Promise<WebAPI.Response.QuestscoreReward> promise,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalQuestscoreReward((Action<WebAPI.Response.QuestscoreReward>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalQuestscoreReward(
    Action<WebAPI.Response.QuestscoreReward> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Get("/questscore/reward", (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.QuestscoreReward) null);
      }
      else
        callback(new WebAPI.Response.QuestscoreReward(json.Json));
    }));
  }

  public static Future<WebAPI.Response.RecoveryItemRecovery> RecoveryItemRecovery(
    int quantity,
    int recovery_item_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.RecoveryItemRecovery>((Func<Promise<WebAPI.Response.RecoveryItemRecovery>, IEnumerator>) (promise => WebAPI.LoadRecoveryItemRecovery(promise, quantity, recovery_item_id, userErrorCallback)));
  }

  private static IEnumerator LoadRecoveryItemRecovery(
    Promise<WebAPI.Response.RecoveryItemRecovery> promise,
    int quantity,
    int recovery_item_id,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalRecoveryItemRecovery(quantity, recovery_item_id, (Action<WebAPI.Response.RecoveryItemRecovery>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalRecoveryItemRecovery(
    int quantity,
    int recovery_item_id,
    Action<WebAPI.Response.RecoveryItemRecovery> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/recovery_item/recovery", new Dictionary<string, object>()
    {
      [nameof (quantity)] = (object) quantity,
      [nameof (recovery_item_id)] = (object) recovery_item_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.RecoveryItemRecovery) null);
      }
      else
        callback(new WebAPI.Response.RecoveryItemRecovery(json.Json));
    }));
  }

  public static Future<WebAPI.Response.RentalunitEditRentalUnit> RentalunitEditRentalUnit(
    int?[] player_unit_ids,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.RentalunitEditRentalUnit>((Func<Promise<WebAPI.Response.RentalunitEditRentalUnit>, IEnumerator>) (promise => WebAPI.LoadRentalunitEditRentalUnit(promise, player_unit_ids, userErrorCallback)));
  }

  private static IEnumerator LoadRentalunitEditRentalUnit(
    Promise<WebAPI.Response.RentalunitEditRentalUnit> promise,
    int?[] player_unit_ids,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalRentalunitEditRentalUnit(player_unit_ids, (Action<WebAPI.Response.RentalunitEditRentalUnit>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalRentalunitEditRentalUnit(
    int?[] player_unit_ids,
    Action<WebAPI.Response.RentalunitEditRentalUnit> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/rentalunit/edit_rental_unit", new Dictionary<string, object>()
    {
      [nameof (player_unit_ids)] = (object) player_unit_ids
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.RentalunitEditRentalUnit) null);
      }
      else
        callback(new WebAPI.Response.RentalunitEditRentalUnit(json.Json));
    }));
  }

  public static Future<WebAPI.Response.RentalunitRentalUnit> RentalunitRentalUnit(
    int rental_element_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.RentalunitRentalUnit>((Func<Promise<WebAPI.Response.RentalunitRentalUnit>, IEnumerator>) (promise => WebAPI.LoadRentalunitRentalUnit(promise, rental_element_id, userErrorCallback)));
  }

  private static IEnumerator LoadRentalunitRentalUnit(
    Promise<WebAPI.Response.RentalunitRentalUnit> promise,
    int rental_element_id,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalRentalunitRentalUnit(rental_element_id, (Action<WebAPI.Response.RentalunitRentalUnit>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalRentalunitRentalUnit(
    int rental_element_id,
    Action<WebAPI.Response.RentalunitRentalUnit> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/rentalunit/rental_unit", new Dictionary<string, object>()
    {
      [nameof (rental_element_id)] = (object) rental_element_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.RentalunitRentalUnit) null);
      }
      else
        callback(new WebAPI.Response.RentalunitRentalUnit(json.Json));
    }));
  }

  public static Future<WebAPI.Response.ReviewCancel> ReviewCancel(
    string review_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.ReviewCancel>((Func<Promise<WebAPI.Response.ReviewCancel>, IEnumerator>) (promise => WebAPI.LoadReviewCancel(promise, review_id, userErrorCallback)));
  }

  private static IEnumerator LoadReviewCancel(
    Promise<WebAPI.Response.ReviewCancel> promise,
    string review_id,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalReviewCancel(review_id, (Action<WebAPI.Response.ReviewCancel>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalReviewCancel(
    string review_id,
    Action<WebAPI.Response.ReviewCancel> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/review/cancel", new Dictionary<string, object>()
    {
      [nameof (review_id)] = (object) review_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.ReviewCancel) null);
      }
      else
        callback(new WebAPI.Response.ReviewCancel(json.Json));
    }));
  }

  public static Future<WebAPI.Response.ReviewContribute> ReviewContribute(
    string review_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.ReviewContribute>((Func<Promise<WebAPI.Response.ReviewContribute>, IEnumerator>) (promise => WebAPI.LoadReviewContribute(promise, review_id, userErrorCallback)));
  }

  private static IEnumerator LoadReviewContribute(
    Promise<WebAPI.Response.ReviewContribute> promise,
    string review_id,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalReviewContribute(review_id, (Action<WebAPI.Response.ReviewContribute>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalReviewContribute(
    string review_id,
    Action<WebAPI.Response.ReviewContribute> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/review/contribute", new Dictionary<string, object>()
    {
      [nameof (review_id)] = (object) review_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.ReviewContribute) null);
      }
      else
        callback(new WebAPI.Response.ReviewContribute(json.Json));
    }));
  }

  public static Future<WebAPI.Response.Roulette> Roulette(
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.Roulette>((Func<Promise<WebAPI.Response.Roulette>, IEnumerator>) (promise => WebAPI.LoadRoulette(promise, userErrorCallback)));
  }

  private static IEnumerator LoadRoulette(
    Promise<WebAPI.Response.Roulette> promise,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalRoulette((Action<WebAPI.Response.Roulette>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalRoulette(
    Action<WebAPI.Response.Roulette> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Get("/roulette", (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.Roulette) null);
      }
      else
        callback(new WebAPI.Response.Roulette(json.Json));
    }));
  }

  public static Future<WebAPI.Response.RouletteR001FreePay> RouletteR001FreePay(
    int roulette_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.RouletteR001FreePay>((Func<Promise<WebAPI.Response.RouletteR001FreePay>, IEnumerator>) (promise => WebAPI.LoadRouletteR001FreePay(promise, roulette_id, userErrorCallback)));
  }

  private static IEnumerator LoadRouletteR001FreePay(
    Promise<WebAPI.Response.RouletteR001FreePay> promise,
    int roulette_id,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalRouletteR001FreePay(roulette_id, (Action<WebAPI.Response.RouletteR001FreePay>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalRouletteR001FreePay(
    int roulette_id,
    Action<WebAPI.Response.RouletteR001FreePay> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/roulette/r001_free/pay", new Dictionary<string, object>()
    {
      [nameof (roulette_id)] = (object) roulette_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.RouletteR001FreePay) null);
      }
      else
        callback(new WebAPI.Response.RouletteR001FreePay(json.Json));
    }));
  }

  public static Future<WebAPI.Response.RpcReviewEnvConnect> RpcReviewEnvConnect(
    string application_version,
    string platform,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.RpcReviewEnvConnect>((Func<Promise<WebAPI.Response.RpcReviewEnvConnect>, IEnumerator>) (promise => WebAPI.LoadRpcReviewEnvConnect(promise, application_version, platform, userErrorCallback)));
  }

  private static IEnumerator LoadRpcReviewEnvConnect(
    Promise<WebAPI.Response.RpcReviewEnvConnect> promise,
    string application_version,
    string platform,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalRpcReviewEnvConnect(application_version, platform, (Action<WebAPI.Response.RpcReviewEnvConnect>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalRpcReviewEnvConnect(
    string application_version,
    string platform,
    Action<WebAPI.Response.RpcReviewEnvConnect> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/rpc/review/env_connect", new Dictionary<string, object>()
    {
      [nameof (application_version)] = (object) application_version,
      [nameof (platform)] = (object) platform
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.RpcReviewEnvConnect) null);
      }
      else
        callback(new WebAPI.Response.RpcReviewEnvConnect(json.Json));
    }));
  }

  public static Future<WebAPI.Response.SeaAlbumIndex> SeaAlbumIndex(
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.SeaAlbumIndex>((Func<Promise<WebAPI.Response.SeaAlbumIndex>, IEnumerator>) (promise => WebAPI.LoadSeaAlbumIndex(promise, userErrorCallback)));
  }

  private static IEnumerator LoadSeaAlbumIndex(
    Promise<WebAPI.Response.SeaAlbumIndex> promise,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalSeaAlbumIndex((Action<WebAPI.Response.SeaAlbumIndex>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalSeaAlbumIndex(
    Action<WebAPI.Response.SeaAlbumIndex> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Get("/sea/album/index", (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.SeaAlbumIndex) null);
      }
      else
        callback(new WebAPI.Response.SeaAlbumIndex(json.Json));
    }));
  }

  public static Future<WebAPI.Response.SeaAlbumOpen> SeaAlbumOpen(
    int[] unit_ids,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.SeaAlbumOpen>((Func<Promise<WebAPI.Response.SeaAlbumOpen>, IEnumerator>) (promise => WebAPI.LoadSeaAlbumOpen(promise, unit_ids, userErrorCallback)));
  }

  private static IEnumerator LoadSeaAlbumOpen(
    Promise<WebAPI.Response.SeaAlbumOpen> promise,
    int[] unit_ids,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalSeaAlbumOpen(unit_ids, (Action<WebAPI.Response.SeaAlbumOpen>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalSeaAlbumOpen(
    int[] unit_ids,
    Action<WebAPI.Response.SeaAlbumOpen> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/sea/album/open", new Dictionary<string, object>()
    {
      [nameof (unit_ids)] = (object) unit_ids
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.SeaAlbumOpen) null);
      }
      else
        callback(new WebAPI.Response.SeaAlbumOpen(json.Json));
    }));
  }

  public static Future<WebAPI.Response.SeaAlbumReceiveReward> SeaAlbumReceiveReward(
    int album_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.SeaAlbumReceiveReward>((Func<Promise<WebAPI.Response.SeaAlbumReceiveReward>, IEnumerator>) (promise => WebAPI.LoadSeaAlbumReceiveReward(promise, album_id, userErrorCallback)));
  }

  private static IEnumerator LoadSeaAlbumReceiveReward(
    Promise<WebAPI.Response.SeaAlbumReceiveReward> promise,
    int album_id,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalSeaAlbumReceiveReward(album_id, (Action<WebAPI.Response.SeaAlbumReceiveReward>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalSeaAlbumReceiveReward(
    int album_id,
    Action<WebAPI.Response.SeaAlbumReceiveReward> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/sea/album/receive/reward", new Dictionary<string, object>()
    {
      [nameof (album_id)] = (object) album_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.SeaAlbumReceiveReward) null);
      }
      else
        callback(new WebAPI.Response.SeaAlbumReceiveReward(json.Json));
    }));
  }

  public static Future<WebAPI.Response.SeaBattleFinish> SeaBattleFinish(
    int battle_turn,
    string battle_uuid,
    int continue_count,
    int[] drop_entity_ids,
    int[] duels_critical_count,
    int[] duels_damage,
    int[] duels_hit_damage,
    int[] duels_max_damage,
    int[] enemy_results_dead_count,
    int[] enemy_results_enemy_id,
    int[] enemy_results_kill_count,
    int[] enemy_results_level_difference,
    int[] enemy_results_overkill_damage,
    int[] gear_results_damage_count,
    int[] gear_results_kill_count,
    int[] gear_results_player_gear_id,
    int[] intimate_result_target_player_character_id,
    int[] intimate_results_exp,
    int[] intimate_results_player_character_id,
    bool is_game_over,
    int[] panel_entity_ids,
    int[] supply_results_supply_id,
    int[] supply_results_use_quantity,
    int[] unit_results_guest_unit,
    int[] unit_results_player_unit_id,
    int[] unit_results_received_damage,
    int[] unit_results_remaining_hp,
    int[] unit_results_rental,
    int[] unit_results_total_damage,
    int[] unit_results_total_damage_count,
    int[] unit_results_total_kill_count,
    int weak_element_attack_count,
    int weak_kind_attack_count,
    int win,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.SeaBattleFinish>((Func<Promise<WebAPI.Response.SeaBattleFinish>, IEnumerator>) (promise => WebAPI.LoadSeaBattleFinish(promise, battle_turn, battle_uuid, continue_count, drop_entity_ids, duels_critical_count, duels_damage, duels_hit_damage, duels_max_damage, enemy_results_dead_count, enemy_results_enemy_id, enemy_results_kill_count, enemy_results_level_difference, enemy_results_overkill_damage, gear_results_damage_count, gear_results_kill_count, gear_results_player_gear_id, intimate_result_target_player_character_id, intimate_results_exp, intimate_results_player_character_id, is_game_over, panel_entity_ids, supply_results_supply_id, supply_results_use_quantity, unit_results_guest_unit, unit_results_player_unit_id, unit_results_received_damage, unit_results_remaining_hp, unit_results_rental, unit_results_total_damage, unit_results_total_damage_count, unit_results_total_kill_count, weak_element_attack_count, weak_kind_attack_count, win, userErrorCallback)));
  }

  private static IEnumerator LoadSeaBattleFinish(
    Promise<WebAPI.Response.SeaBattleFinish> promise,
    int battle_turn,
    string battle_uuid,
    int continue_count,
    int[] drop_entity_ids,
    int[] duels_critical_count,
    int[] duels_damage,
    int[] duels_hit_damage,
    int[] duels_max_damage,
    int[] enemy_results_dead_count,
    int[] enemy_results_enemy_id,
    int[] enemy_results_kill_count,
    int[] enemy_results_level_difference,
    int[] enemy_results_overkill_damage,
    int[] gear_results_damage_count,
    int[] gear_results_kill_count,
    int[] gear_results_player_gear_id,
    int[] intimate_result_target_player_character_id,
    int[] intimate_results_exp,
    int[] intimate_results_player_character_id,
    bool is_game_over,
    int[] panel_entity_ids,
    int[] supply_results_supply_id,
    int[] supply_results_use_quantity,
    int[] unit_results_guest_unit,
    int[] unit_results_player_unit_id,
    int[] unit_results_received_damage,
    int[] unit_results_remaining_hp,
    int[] unit_results_rental,
    int[] unit_results_total_damage,
    int[] unit_results_total_damage_count,
    int[] unit_results_total_kill_count,
    int weak_element_attack_count,
    int weak_kind_attack_count,
    int win,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalSeaBattleFinish(battle_turn, battle_uuid, continue_count, drop_entity_ids, duels_critical_count, duels_damage, duels_hit_damage, duels_max_damage, enemy_results_dead_count, enemy_results_enemy_id, enemy_results_kill_count, enemy_results_level_difference, enemy_results_overkill_damage, gear_results_damage_count, gear_results_kill_count, gear_results_player_gear_id, intimate_result_target_player_character_id, intimate_results_exp, intimate_results_player_character_id, is_game_over, panel_entity_ids, supply_results_supply_id, supply_results_use_quantity, unit_results_guest_unit, unit_results_player_unit_id, unit_results_received_damage, unit_results_remaining_hp, unit_results_rental, unit_results_total_damage, unit_results_total_damage_count, unit_results_total_kill_count, weak_element_attack_count, weak_kind_attack_count, win, (Action<WebAPI.Response.SeaBattleFinish>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalSeaBattleFinish(
    int battle_turn,
    string battle_uuid,
    int continue_count,
    int[] drop_entity_ids,
    int[] duels_critical_count,
    int[] duels_damage,
    int[] duels_hit_damage,
    int[] duels_max_damage,
    int[] enemy_results_dead_count,
    int[] enemy_results_enemy_id,
    int[] enemy_results_kill_count,
    int[] enemy_results_level_difference,
    int[] enemy_results_overkill_damage,
    int[] gear_results_damage_count,
    int[] gear_results_kill_count,
    int[] gear_results_player_gear_id,
    int[] intimate_result_target_player_character_id,
    int[] intimate_results_exp,
    int[] intimate_results_player_character_id,
    bool is_game_over,
    int[] panel_entity_ids,
    int[] supply_results_supply_id,
    int[] supply_results_use_quantity,
    int[] unit_results_guest_unit,
    int[] unit_results_player_unit_id,
    int[] unit_results_received_damage,
    int[] unit_results_remaining_hp,
    int[] unit_results_rental,
    int[] unit_results_total_damage,
    int[] unit_results_total_damage_count,
    int[] unit_results_total_kill_count,
    int weak_element_attack_count,
    int weak_kind_attack_count,
    int win,
    Action<WebAPI.Response.SeaBattleFinish> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/sea/battle/finish", new Dictionary<string, object>()
    {
      [nameof (battle_turn)] = (object) battle_turn,
      [nameof (battle_uuid)] = (object) battle_uuid,
      [nameof (continue_count)] = (object) continue_count,
      [nameof (drop_entity_ids)] = (object) drop_entity_ids,
      [nameof (duels_critical_count)] = (object) duels_critical_count,
      [nameof (duels_damage)] = (object) duels_damage,
      [nameof (duels_hit_damage)] = (object) duels_hit_damage,
      [nameof (duels_max_damage)] = (object) duels_max_damage,
      [nameof (enemy_results_dead_count)] = (object) enemy_results_dead_count,
      [nameof (enemy_results_enemy_id)] = (object) enemy_results_enemy_id,
      [nameof (enemy_results_kill_count)] = (object) enemy_results_kill_count,
      [nameof (enemy_results_level_difference)] = (object) enemy_results_level_difference,
      [nameof (enemy_results_overkill_damage)] = (object) enemy_results_overkill_damage,
      [nameof (gear_results_damage_count)] = (object) gear_results_damage_count,
      [nameof (gear_results_kill_count)] = (object) gear_results_kill_count,
      [nameof (gear_results_player_gear_id)] = (object) gear_results_player_gear_id,
      [nameof (intimate_result_target_player_character_id)] = (object) intimate_result_target_player_character_id,
      [nameof (intimate_results_exp)] = (object) intimate_results_exp,
      [nameof (intimate_results_player_character_id)] = (object) intimate_results_player_character_id,
      [nameof (is_game_over)] = (object) is_game_over,
      [nameof (panel_entity_ids)] = (object) panel_entity_ids,
      [nameof (supply_results_supply_id)] = (object) supply_results_supply_id,
      [nameof (supply_results_use_quantity)] = (object) supply_results_use_quantity,
      [nameof (unit_results_guest_unit)] = (object) unit_results_guest_unit,
      [nameof (unit_results_player_unit_id)] = (object) unit_results_player_unit_id,
      [nameof (unit_results_received_damage)] = (object) unit_results_received_damage,
      [nameof (unit_results_remaining_hp)] = (object) unit_results_remaining_hp,
      [nameof (unit_results_rental)] = (object) unit_results_rental,
      [nameof (unit_results_total_damage)] = (object) unit_results_total_damage,
      [nameof (unit_results_total_damage_count)] = (object) unit_results_total_damage_count,
      [nameof (unit_results_total_kill_count)] = (object) unit_results_total_kill_count,
      [nameof (weak_element_attack_count)] = (object) weak_element_attack_count,
      [nameof (weak_kind_attack_count)] = (object) weak_kind_attack_count,
      [nameof (win)] = (object) win
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.SeaBattleFinish) null);
      }
      else
        callback(new WebAPI.Response.SeaBattleFinish(json.Json));
    }));
  }

  public static Future<WebAPI.Response.SeaBattleQuestDetail> SeaBattleQuestDetail(
    int quest_s_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.SeaBattleQuestDetail>((Func<Promise<WebAPI.Response.SeaBattleQuestDetail>, IEnumerator>) (promise => WebAPI.LoadSeaBattleQuestDetail(promise, quest_s_id, userErrorCallback)));
  }

  private static IEnumerator LoadSeaBattleQuestDetail(
    Promise<WebAPI.Response.SeaBattleQuestDetail> promise,
    int quest_s_id,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalSeaBattleQuestDetail(quest_s_id, (Action<WebAPI.Response.SeaBattleQuestDetail>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalSeaBattleQuestDetail(
    int quest_s_id,
    Action<WebAPI.Response.SeaBattleQuestDetail> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/sea/battle/quest_detail", new Dictionary<string, object>()
    {
      [nameof (quest_s_id)] = (object) quest_s_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.SeaBattleQuestDetail) null);
      }
      else
        callback(new WebAPI.Response.SeaBattleQuestDetail(json.Json));
    }));
  }

  public static Future<WebAPI.Response.SeaBattleStart> SeaBattleStart(
    int deck_number,
    int deck_type_id,
    int player_unit_id,
    int quest_s_id,
    string support_player_id,
    int support_player_unit_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.SeaBattleStart>((Func<Promise<WebAPI.Response.SeaBattleStart>, IEnumerator>) (promise => WebAPI.LoadSeaBattleStart(promise, deck_number, deck_type_id, player_unit_id, quest_s_id, support_player_id, support_player_unit_id, userErrorCallback)));
  }

  private static IEnumerator LoadSeaBattleStart(
    Promise<WebAPI.Response.SeaBattleStart> promise,
    int deck_number,
    int deck_type_id,
    int player_unit_id,
    int quest_s_id,
    string support_player_id,
    int support_player_unit_id,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalSeaBattleStart(deck_number, deck_type_id, player_unit_id, quest_s_id, support_player_id, support_player_unit_id, (Action<WebAPI.Response.SeaBattleStart>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalSeaBattleStart(
    int deck_number,
    int deck_type_id,
    int player_unit_id,
    int quest_s_id,
    string support_player_id,
    int support_player_unit_id,
    Action<WebAPI.Response.SeaBattleStart> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/sea/battle/start", new Dictionary<string, object>()
    {
      [nameof (deck_number)] = (object) deck_number,
      [nameof (deck_type_id)] = (object) deck_type_id,
      [nameof (player_unit_id)] = (object) player_unit_id,
      [nameof (quest_s_id)] = (object) quest_s_id,
      [nameof (support_player_id)] = (object) support_player_id,
      [nameof (support_player_unit_id)] = (object) support_player_unit_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.SeaBattleStart) null);
      }
      else
        callback(new WebAPI.Response.SeaBattleStart(json.Json));
    }));
  }

  public static Future<WebAPI.Response.SeaCallConclusion> SeaCallConclusion(
    int partner,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.SeaCallConclusion>((Func<Promise<WebAPI.Response.SeaCallConclusion>, IEnumerator>) (promise => WebAPI.LoadSeaCallConclusion(promise, partner, userErrorCallback)));
  }

  private static IEnumerator LoadSeaCallConclusion(
    Promise<WebAPI.Response.SeaCallConclusion> promise,
    int partner,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalSeaCallConclusion(partner, (Action<WebAPI.Response.SeaCallConclusion>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalSeaCallConclusion(
    int partner,
    Action<WebAPI.Response.SeaCallConclusion> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/sea/call/conclusion", new Dictionary<string, object>()
    {
      [nameof (partner)] = (object) partner
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.SeaCallConclusion) null);
      }
      else
        callback(new WebAPI.Response.SeaCallConclusion(json.Json));
    }));
  }

  public static Future<WebAPI.Response.SeaCallDateCondition> SeaCallDateCondition(
    int partner,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.SeaCallDateCondition>((Func<Promise<WebAPI.Response.SeaCallDateCondition>, IEnumerator>) (promise => WebAPI.LoadSeaCallDateCondition(promise, partner, userErrorCallback)));
  }

  private static IEnumerator LoadSeaCallDateCondition(
    Promise<WebAPI.Response.SeaCallDateCondition> promise,
    int partner,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalSeaCallDateCondition(partner, (Action<WebAPI.Response.SeaCallDateCondition>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalSeaCallDateCondition(
    int partner,
    Action<WebAPI.Response.SeaCallDateCondition> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/sea/call/date_condition", new Dictionary<string, object>()
    {
      [nameof (partner)] = (object) partner
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.SeaCallDateCondition) null);
      }
      else
        callback(new WebAPI.Response.SeaCallDateCondition(json.Json));
    }));
  }

  public static Future<WebAPI.Response.SeaCallDivorce> SeaCallDivorce(
    int partner,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.SeaCallDivorce>((Func<Promise<WebAPI.Response.SeaCallDivorce>, IEnumerator>) (promise => WebAPI.LoadSeaCallDivorce(promise, partner, userErrorCallback)));
  }

  private static IEnumerator LoadSeaCallDivorce(
    Promise<WebAPI.Response.SeaCallDivorce> promise,
    int partner,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalSeaCallDivorce(partner, (Action<WebAPI.Response.SeaCallDivorce>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalSeaCallDivorce(
    int partner,
    Action<WebAPI.Response.SeaCallDivorce> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/sea/call/divorce", new Dictionary<string, object>()
    {
      [nameof (partner)] = (object) partner
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.SeaCallDivorce) null);
      }
      else
        callback(new WebAPI.Response.SeaCallDivorce(json.Json));
    }));
  }

  public static Future<WebAPI.Response.SeaCallMakeletter> SeaCallMakeletter(
    int partner,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.SeaCallMakeletter>((Func<Promise<WebAPI.Response.SeaCallMakeletter>, IEnumerator>) (promise => WebAPI.LoadSeaCallMakeletter(promise, partner, userErrorCallback)));
  }

  private static IEnumerator LoadSeaCallMakeletter(
    Promise<WebAPI.Response.SeaCallMakeletter> promise,
    int partner,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalSeaCallMakeletter(partner, (Action<WebAPI.Response.SeaCallMakeletter>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalSeaCallMakeletter(
    int partner,
    Action<WebAPI.Response.SeaCallMakeletter> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/sea/call/makeletter", new Dictionary<string, object>()
    {
      [nameof (partner)] = (object) partner
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.SeaCallMakeletter) null);
      }
      else
        callback(new WebAPI.Response.SeaCallMakeletter(json.Json));
    }));
  }

  public static Future<WebAPI.Response.SeaDateChoice> SeaDateChoice(
    int choice_type,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.SeaDateChoice>((Func<Promise<WebAPI.Response.SeaDateChoice>, IEnumerator>) (promise => WebAPI.LoadSeaDateChoice(promise, choice_type, userErrorCallback)));
  }

  private static IEnumerator LoadSeaDateChoice(
    Promise<WebAPI.Response.SeaDateChoice> promise,
    int choice_type,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalSeaDateChoice(choice_type, (Action<WebAPI.Response.SeaDateChoice>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalSeaDateChoice(
    int choice_type,
    Action<WebAPI.Response.SeaDateChoice> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/sea/date/choice", new Dictionary<string, object>()
    {
      [nameof (choice_type)] = (object) choice_type
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.SeaDateChoice) null);
      }
      else
        callback(new WebAPI.Response.SeaDateChoice(json.Json));
    }));
  }

  public static Future<WebAPI.Response.SeaDateFinish> SeaDateFinish(
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.SeaDateFinish>((Func<Promise<WebAPI.Response.SeaDateFinish>, IEnumerator>) (promise => WebAPI.LoadSeaDateFinish(promise, userErrorCallback)));
  }

  private static IEnumerator LoadSeaDateFinish(
    Promise<WebAPI.Response.SeaDateFinish> promise,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalSeaDateFinish((Action<WebAPI.Response.SeaDateFinish>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalSeaDateFinish(
    Action<WebAPI.Response.SeaDateFinish> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Get("/sea/date/finish", (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.SeaDateFinish) null);
      }
      else
        callback(new WebAPI.Response.SeaDateFinish(json.Json));
    }));
  }

  public static Future<WebAPI.Response.SeaDateForceClose> SeaDateForceClose(
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.SeaDateForceClose>((Func<Promise<WebAPI.Response.SeaDateForceClose>, IEnumerator>) (promise => WebAPI.LoadSeaDateForceClose(promise, userErrorCallback)));
  }

  private static IEnumerator LoadSeaDateForceClose(
    Promise<WebAPI.Response.SeaDateForceClose> promise,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalSeaDateForceClose((Action<WebAPI.Response.SeaDateForceClose>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalSeaDateForceClose(
    Action<WebAPI.Response.SeaDateForceClose> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Get("/sea/date/force-close", (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.SeaDateForceClose) null);
      }
      else
        callback(new WebAPI.Response.SeaDateForceClose(json.Json));
    }));
  }

  public static Future<WebAPI.Response.SeaDateResume> SeaDateResume(
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.SeaDateResume>((Func<Promise<WebAPI.Response.SeaDateResume>, IEnumerator>) (promise => WebAPI.LoadSeaDateResume(promise, userErrorCallback)));
  }

  private static IEnumerator LoadSeaDateResume(
    Promise<WebAPI.Response.SeaDateResume> promise,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalSeaDateResume((Action<WebAPI.Response.SeaDateResume>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalSeaDateResume(
    Action<WebAPI.Response.SeaDateResume> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Get("/sea/date/resume", (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.SeaDateResume) null);
      }
      else
        callback(new WebAPI.Response.SeaDateResume(json.Json));
    }));
  }

  public static Future<WebAPI.Response.SeaDateStart> SeaDateStart(
    int spot_id,
    int target_player_unit_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.SeaDateStart>((Func<Promise<WebAPI.Response.SeaDateStart>, IEnumerator>) (promise => WebAPI.LoadSeaDateStart(promise, spot_id, target_player_unit_id, userErrorCallback)));
  }

  private static IEnumerator LoadSeaDateStart(
    Promise<WebAPI.Response.SeaDateStart> promise,
    int spot_id,
    int target_player_unit_id,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalSeaDateStart(spot_id, target_player_unit_id, (Action<WebAPI.Response.SeaDateStart>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalSeaDateStart(
    int spot_id,
    int target_player_unit_id,
    Action<WebAPI.Response.SeaDateStart> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/sea/date/start", new Dictionary<string, object>()
    {
      [nameof (spot_id)] = (object) spot_id,
      [nameof (target_player_unit_id)] = (object) target_player_unit_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.SeaDateStart) null);
      }
      else
        callback(new WebAPI.Response.SeaDateStart(json.Json));
    }));
  }

  public static Future<WebAPI.Response.SeaDeckEdit> SeaDeckEdit(
    int number,
    int[] player_unit_ids,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.SeaDeckEdit>((Func<Promise<WebAPI.Response.SeaDeckEdit>, IEnumerator>) (promise => WebAPI.LoadSeaDeckEdit(promise, number, player_unit_ids, userErrorCallback)));
  }

  private static IEnumerator LoadSeaDeckEdit(
    Promise<WebAPI.Response.SeaDeckEdit> promise,
    int number,
    int[] player_unit_ids,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalSeaDeckEdit(number, player_unit_ids, (Action<WebAPI.Response.SeaDeckEdit>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalSeaDeckEdit(
    int number,
    int[] player_unit_ids,
    Action<WebAPI.Response.SeaDeckEdit> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/sea/deck/edit", new Dictionary<string, object>()
    {
      [nameof (number)] = (object) number,
      [nameof (player_unit_ids)] = (object) player_unit_ids
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.SeaDeckEdit) null);
      }
      else
        callback(new WebAPI.Response.SeaDeckEdit(json.Json));
    }));
  }

  public static Future<WebAPI.Response.SeaFriendStatus> SeaFriendStatus(
    string target_player_id,
    int target_player_unit_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.SeaFriendStatus>((Func<Promise<WebAPI.Response.SeaFriendStatus>, IEnumerator>) (promise => WebAPI.LoadSeaFriendStatus(promise, target_player_id, target_player_unit_id, userErrorCallback)));
  }

  private static IEnumerator LoadSeaFriendStatus(
    Promise<WebAPI.Response.SeaFriendStatus> promise,
    string target_player_id,
    int target_player_unit_id,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalSeaFriendStatus(target_player_id, target_player_unit_id, (Action<WebAPI.Response.SeaFriendStatus>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalSeaFriendStatus(
    string target_player_id,
    int target_player_unit_id,
    Action<WebAPI.Response.SeaFriendStatus> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/sea/friend/status", new Dictionary<string, object>()
    {
      [nameof (target_player_id)] = (object) target_player_id,
      [nameof (target_player_unit_id)] = (object) target_player_unit_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.SeaFriendStatus) null);
      }
      else
        callback(new WebAPI.Response.SeaFriendStatus(json.Json));
    }));
  }

  public static Future<WebAPI.Response.SeaPresentGive> SeaPresentGive(
    int[] present_player_material_gear_ids,
    int target_player_unit_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.SeaPresentGive>((Func<Promise<WebAPI.Response.SeaPresentGive>, IEnumerator>) (promise => WebAPI.LoadSeaPresentGive(promise, present_player_material_gear_ids, target_player_unit_id, userErrorCallback)));
  }

  private static IEnumerator LoadSeaPresentGive(
    Promise<WebAPI.Response.SeaPresentGive> promise,
    int[] present_player_material_gear_ids,
    int target_player_unit_id,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalSeaPresentGive(present_player_material_gear_ids, target_player_unit_id, (Action<WebAPI.Response.SeaPresentGive>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalSeaPresentGive(
    int[] present_player_material_gear_ids,
    int target_player_unit_id,
    Action<WebAPI.Response.SeaPresentGive> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/sea/present/give", new Dictionary<string, object>()
    {
      [nameof (present_player_material_gear_ids)] = (object) present_player_material_gear_ids,
      [nameof (target_player_unit_id)] = (object) target_player_unit_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.SeaPresentGive) null);
      }
      else
        callback(new WebAPI.Response.SeaPresentGive(json.Json));
    }));
  }

  public static Future<WebAPI.Response.SeasonticketIndex> SeasonticketIndex(
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.SeasonticketIndex>((Func<Promise<WebAPI.Response.SeasonticketIndex>, IEnumerator>) (promise => WebAPI.LoadSeasonticketIndex(promise, userErrorCallback)));
  }

  private static IEnumerator LoadSeasonticketIndex(
    Promise<WebAPI.Response.SeasonticketIndex> promise,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalSeasonticketIndex((Action<WebAPI.Response.SeasonticketIndex>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalSeasonticketIndex(
    Action<WebAPI.Response.SeasonticketIndex> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Get("/seasonticket/index", (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.SeasonticketIndex) null);
      }
      else
        callback(new WebAPI.Response.SeasonticketIndex(json.Json));
    }));
  }

  public static Future<WebAPI.Response.SeasonticketSpend> SeasonticketSpend(
    int quantity,
    int ticket_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.SeasonticketSpend>((Func<Promise<WebAPI.Response.SeasonticketSpend>, IEnumerator>) (promise => WebAPI.LoadSeasonticketSpend(promise, quantity, ticket_id, userErrorCallback)));
  }

  private static IEnumerator LoadSeasonticketSpend(
    Promise<WebAPI.Response.SeasonticketSpend> promise,
    int quantity,
    int ticket_id,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalSeasonticketSpend(quantity, ticket_id, (Action<WebAPI.Response.SeasonticketSpend>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalSeasonticketSpend(
    int quantity,
    int ticket_id,
    Action<WebAPI.Response.SeasonticketSpend> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/seasonticket/spend", new Dictionary<string, object>()
    {
      [nameof (quantity)] = (object) quantity,
      [nameof (ticket_id)] = (object) ticket_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.SeasonticketSpend) null);
      }
      else
        callback(new WebAPI.Response.SeasonticketSpend(json.Json));
    }));
  }

  public static Future<WebAPI.Response.SeaStartUp> SeaStartUp(
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.SeaStartUp>((Func<Promise<WebAPI.Response.SeaStartUp>, IEnumerator>) (promise => WebAPI.LoadSeaStartUp(promise, userErrorCallback)));
  }

  private static IEnumerator LoadSeaStartUp(
    Promise<WebAPI.Response.SeaStartUp> promise,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalSeaStartUp((Action<WebAPI.Response.SeaStartUp>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalSeaStartUp(
    Action<WebAPI.Response.SeaStartUp> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Get("/sea/start_up", (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.SeaStartUp) null);
      }
      else
        callback(new WebAPI.Response.SeaStartUp(json.Json));
    }));
  }

  public static Future<WebAPI.Response.SeaStartUp2> SeaStartUp2(
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.SeaStartUp2>((Func<Promise<WebAPI.Response.SeaStartUp2>, IEnumerator>) (promise => WebAPI.LoadSeaStartUp2(promise, userErrorCallback)));
  }

  private static IEnumerator LoadSeaStartUp2(
    Promise<WebAPI.Response.SeaStartUp2> promise,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalSeaStartUp2((Action<WebAPI.Response.SeaStartUp2>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalSeaStartUp2(
    Action<WebAPI.Response.SeaStartUp2> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Get("/sea/start_up2", (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.SeaStartUp2) null);
      }
      else
        callback(new WebAPI.Response.SeaStartUp2(json.Json));
    }));
  }

  public static Future<WebAPI.Response.SeaTalkGift> SeaTalkGift(
    int gift,
    int partner,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.SeaTalkGift>((Func<Promise<WebAPI.Response.SeaTalkGift>, IEnumerator>) (promise => WebAPI.LoadSeaTalkGift(promise, gift, partner, userErrorCallback)));
  }

  private static IEnumerator LoadSeaTalkGift(
    Promise<WebAPI.Response.SeaTalkGift> promise,
    int gift,
    int partner,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalSeaTalkGift(gift, partner, (Action<WebAPI.Response.SeaTalkGift>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalSeaTalkGift(
    int gift,
    int partner,
    Action<WebAPI.Response.SeaTalkGift> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/sea/talk/gift", new Dictionary<string, object>()
    {
      [nameof (gift)] = (object) gift,
      [nameof (partner)] = (object) partner
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.SeaTalkGift) null);
      }
      else
        callback(new WebAPI.Response.SeaTalkGift(json.Json));
    }));
  }

  public static Future<WebAPI.Response.SeaTalkMessage> SeaTalkMessage(
    int partner,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.SeaTalkMessage>((Func<Promise<WebAPI.Response.SeaTalkMessage>, IEnumerator>) (promise => WebAPI.LoadSeaTalkMessage(promise, partner, userErrorCallback)));
  }

  private static IEnumerator LoadSeaTalkMessage(
    Promise<WebAPI.Response.SeaTalkMessage> promise,
    int partner,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalSeaTalkMessage(partner, (Action<WebAPI.Response.SeaTalkMessage>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalSeaTalkMessage(
    int partner,
    Action<WebAPI.Response.SeaTalkMessage> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/sea/talk/message", new Dictionary<string, object>()
    {
      [nameof (partner)] = (object) partner
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.SeaTalkMessage) null);
      }
      else
        callback(new WebAPI.Response.SeaTalkMessage(json.Json));
    }));
  }

  public static Future<WebAPI.Response.SeaTalkPartner> SeaTalkPartner(
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.SeaTalkPartner>((Func<Promise<WebAPI.Response.SeaTalkPartner>, IEnumerator>) (promise => WebAPI.LoadSeaTalkPartner(promise, userErrorCallback)));
  }

  private static IEnumerator LoadSeaTalkPartner(
    Promise<WebAPI.Response.SeaTalkPartner> promise,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalSeaTalkPartner((Action<WebAPI.Response.SeaTalkPartner>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalSeaTalkPartner(
    Action<WebAPI.Response.SeaTalkPartner> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Get("/sea/talk/partner", (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.SeaTalkPartner) null);
      }
      else
        callback(new WebAPI.Response.SeaTalkPartner(json.Json));
    }));
  }

  public static Future<WebAPI.Response.SeaTalkReceive> SeaTalkReceive(
    int mission,
    int partner,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.SeaTalkReceive>((Func<Promise<WebAPI.Response.SeaTalkReceive>, IEnumerator>) (promise => WebAPI.LoadSeaTalkReceive(promise, mission, partner, userErrorCallback)));
  }

  private static IEnumerator LoadSeaTalkReceive(
    Promise<WebAPI.Response.SeaTalkReceive> promise,
    int mission,
    int partner,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalSeaTalkReceive(mission, partner, (Action<WebAPI.Response.SeaTalkReceive>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalSeaTalkReceive(
    int mission,
    int partner,
    Action<WebAPI.Response.SeaTalkReceive> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/sea/talk/receive", new Dictionary<string, object>()
    {
      [nameof (mission)] = (object) mission,
      [nameof (partner)] = (object) partner
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.SeaTalkReceive) null);
      }
      else
        callback(new WebAPI.Response.SeaTalkReceive(json.Json));
    }));
  }

  public static Future<WebAPI.Response.SeaTalkReply> SeaTalkReply(
    int choice,
    int partner,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.SeaTalkReply>((Func<Promise<WebAPI.Response.SeaTalkReply>, IEnumerator>) (promise => WebAPI.LoadSeaTalkReply(promise, choice, partner, userErrorCallback)));
  }

  private static IEnumerator LoadSeaTalkReply(
    Promise<WebAPI.Response.SeaTalkReply> promise,
    int choice,
    int partner,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalSeaTalkReply(choice, partner, (Action<WebAPI.Response.SeaTalkReply>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalSeaTalkReply(
    int choice,
    int partner,
    Action<WebAPI.Response.SeaTalkReply> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/sea/talk/reply", new Dictionary<string, object>()
    {
      [nameof (choice)] = (object) choice,
      [nameof (partner)] = (object) partner
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.SeaTalkReply) null);
      }
      else
        callback(new WebAPI.Response.SeaTalkReply(json.Json));
    }));
  }

  public static Future<WebAPI.Response.SelectticketSpend> SelectticketSpend(
    int select_ticket_choice,
    int unit_type,
    int use_count,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.SelectticketSpend>((Func<Promise<WebAPI.Response.SelectticketSpend>, IEnumerator>) (promise => WebAPI.LoadSelectticketSpend(promise, select_ticket_choice, unit_type, use_count, userErrorCallback)));
  }

  private static IEnumerator LoadSelectticketSpend(
    Promise<WebAPI.Response.SelectticketSpend> promise,
    int select_ticket_choice,
    int unit_type,
    int use_count,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalSelectticketSpend(select_ticket_choice, unit_type, use_count, (Action<WebAPI.Response.SelectticketSpend>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalSelectticketSpend(
    int select_ticket_choice,
    int unit_type,
    int use_count,
    Action<WebAPI.Response.SelectticketSpend> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/selectticket/spend", new Dictionary<string, object>()
    {
      [nameof (select_ticket_choice)] = (object) select_ticket_choice,
      [nameof (unit_type)] = (object) unit_type,
      [nameof (use_count)] = (object) use_count
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.SelectticketSpend) null);
      }
      else
        callback(new WebAPI.Response.SelectticketSpend(json.Json));
    }));
  }

  public static Future<WebAPI.Response.ShopBuy> ShopBuy(
    int article_id,
    int quantity,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.ShopBuy>((Func<Promise<WebAPI.Response.ShopBuy>, IEnumerator>) (promise => WebAPI.LoadShopBuy(promise, article_id, quantity, userErrorCallback)));
  }

  private static IEnumerator LoadShopBuy(
    Promise<WebAPI.Response.ShopBuy> promise,
    int article_id,
    int quantity,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalShopBuy(article_id, quantity, (Action<WebAPI.Response.ShopBuy>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalShopBuy(
    int article_id,
    int quantity,
    Action<WebAPI.Response.ShopBuy> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/shop/buy", new Dictionary<string, object>()
    {
      [nameof (article_id)] = (object) article_id,
      [nameof (quantity)] = (object) quantity
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.ShopBuy) null);
      }
      else
        callback(new WebAPI.Response.ShopBuy(json.Json));
    }));
  }

  public static Future<WebAPI.Response.ShopStatus> ShopStatus(
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.ShopStatus>((Func<Promise<WebAPI.Response.ShopStatus>, IEnumerator>) (promise => WebAPI.LoadShopStatus(promise, userErrorCallback)));
  }

  private static IEnumerator LoadShopStatus(
    Promise<WebAPI.Response.ShopStatus> promise,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalShopStatus((Action<WebAPI.Response.ShopStatus>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalShopStatus(
    Action<WebAPI.Response.ShopStatus> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Get("/shop/status", (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.ShopStatus) null);
      }
      else
        callback(new WebAPI.Response.ShopStatus(json.Json));
    }));
  }

  public static Future<WebAPI.Response.Slot> Slot(
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.Slot>((Func<Promise<WebAPI.Response.Slot>, IEnumerator>) (promise => WebAPI.LoadSlot(promise, userErrorCallback)));
  }

  private static IEnumerator LoadSlot(
    Promise<WebAPI.Response.Slot> promise,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalSlot((Action<WebAPI.Response.Slot>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalSlot(
    Action<WebAPI.Response.Slot> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Get("/slot", (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.Slot) null);
      }
      else
        callback(new WebAPI.Response.Slot(json.Json));
    }));
  }

  public static Future<WebAPI.Response.SlotS001MedalPay> SlotS001MedalPay(
    int slot_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.SlotS001MedalPay>((Func<Promise<WebAPI.Response.SlotS001MedalPay>, IEnumerator>) (promise => WebAPI.LoadSlotS001MedalPay(promise, slot_id, userErrorCallback)));
  }

  private static IEnumerator LoadSlotS001MedalPay(
    Promise<WebAPI.Response.SlotS001MedalPay> promise,
    int slot_id,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalSlotS001MedalPay(slot_id, (Action<WebAPI.Response.SlotS001MedalPay>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalSlotS001MedalPay(
    int slot_id,
    Action<WebAPI.Response.SlotS001MedalPay> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/slot/s001_medal/pay", new Dictionary<string, object>()
    {
      [nameof (slot_id)] = (object) slot_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.SlotS001MedalPay) null);
      }
      else
        callback(new WebAPI.Response.SlotS001MedalPay(json.Json));
    }));
  }

  public static Future<WebAPI.Response.TowerBattleFinish> TowerBattleFinish(
    int battle_turn,
    string battle_uuid,
    int overkill_damage,
    float[] result_enemy_hitpoint_rate,
    int[] result_enemy_id,
    int[] result_enemy_kill_count,
    float[] result_player_unit_hitpoint_rate,
    int[] result_player_unit_id,
    int[] result_supply_id,
    int[] result_supply_use_quantity,
    string tower_battle_log,
    bool win,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.TowerBattleFinish>((Func<Promise<WebAPI.Response.TowerBattleFinish>, IEnumerator>) (promise => WebAPI.LoadTowerBattleFinish(promise, battle_turn, battle_uuid, overkill_damage, result_enemy_hitpoint_rate, result_enemy_id, result_enemy_kill_count, result_player_unit_hitpoint_rate, result_player_unit_id, result_supply_id, result_supply_use_quantity, tower_battle_log, win, userErrorCallback)));
  }

  private static IEnumerator LoadTowerBattleFinish(
    Promise<WebAPI.Response.TowerBattleFinish> promise,
    int battle_turn,
    string battle_uuid,
    int overkill_damage,
    float[] result_enemy_hitpoint_rate,
    int[] result_enemy_id,
    int[] result_enemy_kill_count,
    float[] result_player_unit_hitpoint_rate,
    int[] result_player_unit_id,
    int[] result_supply_id,
    int[] result_supply_use_quantity,
    string tower_battle_log,
    bool win,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalTowerBattleFinish(battle_turn, battle_uuid, overkill_damage, result_enemy_hitpoint_rate, result_enemy_id, result_enemy_kill_count, result_player_unit_hitpoint_rate, result_player_unit_id, result_supply_id, result_supply_use_quantity, tower_battle_log, win, (Action<WebAPI.Response.TowerBattleFinish>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalTowerBattleFinish(
    int battle_turn,
    string battle_uuid,
    int overkill_damage,
    float[] result_enemy_hitpoint_rate,
    int[] result_enemy_id,
    int[] result_enemy_kill_count,
    float[] result_player_unit_hitpoint_rate,
    int[] result_player_unit_id,
    int[] result_supply_id,
    int[] result_supply_use_quantity,
    string tower_battle_log,
    bool win,
    Action<WebAPI.Response.TowerBattleFinish> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/tower/battle/finish", new Dictionary<string, object>()
    {
      [nameof (battle_turn)] = (object) battle_turn,
      [nameof (battle_uuid)] = (object) battle_uuid,
      [nameof (overkill_damage)] = (object) overkill_damage,
      [nameof (result_enemy_hitpoint_rate)] = (object) result_enemy_hitpoint_rate,
      [nameof (result_enemy_id)] = (object) result_enemy_id,
      [nameof (result_enemy_kill_count)] = (object) result_enemy_kill_count,
      [nameof (result_player_unit_hitpoint_rate)] = (object) result_player_unit_hitpoint_rate,
      [nameof (result_player_unit_id)] = (object) result_player_unit_id,
      [nameof (result_supply_id)] = (object) result_supply_id,
      [nameof (result_supply_use_quantity)] = (object) result_supply_use_quantity,
      [nameof (tower_battle_log)] = (object) tower_battle_log,
      [nameof (win)] = (object) win
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.TowerBattleFinish) null);
      }
      else
        callback(new WebAPI.Response.TowerBattleFinish(json.Json));
    }));
  }

  public static Future<WebAPI.Response.TowerBattleForceClose> TowerBattleForceClose(
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.TowerBattleForceClose>((Func<Promise<WebAPI.Response.TowerBattleForceClose>, IEnumerator>) (promise => WebAPI.LoadTowerBattleForceClose(promise, userErrorCallback)));
  }

  private static IEnumerator LoadTowerBattleForceClose(
    Promise<WebAPI.Response.TowerBattleForceClose> promise,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalTowerBattleForceClose((Action<WebAPI.Response.TowerBattleForceClose>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalTowerBattleForceClose(
    Action<WebAPI.Response.TowerBattleForceClose> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Get("/tower/battle/force-close", (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.TowerBattleForceClose) null);
      }
      else
        callback(new WebAPI.Response.TowerBattleForceClose(json.Json));
    }));
  }

  public static Future<WebAPI.Response.TowerBattleResume> TowerBattleResume(
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.TowerBattleResume>((Func<Promise<WebAPI.Response.TowerBattleResume>, IEnumerator>) (promise => WebAPI.LoadTowerBattleResume(promise, userErrorCallback)));
  }

  private static IEnumerator LoadTowerBattleResume(
    Promise<WebAPI.Response.TowerBattleResume> promise,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalTowerBattleResume((Action<WebAPI.Response.TowerBattleResume>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalTowerBattleResume(
    Action<WebAPI.Response.TowerBattleResume> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Get("/tower/battle/resume", (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.TowerBattleResume) null);
      }
      else
        callback(new WebAPI.Response.TowerBattleResume(json.Json));
    }));
  }

  public static Future<WebAPI.Response.TowerBattleRetire> TowerBattleRetire(
    int battle_turn,
    int[] result_enemy_kill_count,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.TowerBattleRetire>((Func<Promise<WebAPI.Response.TowerBattleRetire>, IEnumerator>) (promise => WebAPI.LoadTowerBattleRetire(promise, battle_turn, result_enemy_kill_count, userErrorCallback)));
  }

  private static IEnumerator LoadTowerBattleRetire(
    Promise<WebAPI.Response.TowerBattleRetire> promise,
    int battle_turn,
    int[] result_enemy_kill_count,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalTowerBattleRetire(battle_turn, result_enemy_kill_count, (Action<WebAPI.Response.TowerBattleRetire>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalTowerBattleRetire(
    int battle_turn,
    int[] result_enemy_kill_count,
    Action<WebAPI.Response.TowerBattleRetire> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/tower/battle/retire", new Dictionary<string, object>()
    {
      [nameof (battle_turn)] = (object) battle_turn,
      [nameof (result_enemy_kill_count)] = (object) result_enemy_kill_count
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.TowerBattleRetire) null);
      }
      else
        callback(new WebAPI.Response.TowerBattleRetire(json.Json));
    }));
  }

  public static Future<WebAPI.Response.TowerBattleStart> TowerBattleStart(
    int tower_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.TowerBattleStart>((Func<Promise<WebAPI.Response.TowerBattleStart>, IEnumerator>) (promise => WebAPI.LoadTowerBattleStart(promise, tower_id, userErrorCallback)));
  }

  private static IEnumerator LoadTowerBattleStart(
    Promise<WebAPI.Response.TowerBattleStart> promise,
    int tower_id,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalTowerBattleStart(tower_id, (Action<WebAPI.Response.TowerBattleStart>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalTowerBattleStart(
    int tower_id,
    Action<WebAPI.Response.TowerBattleStart> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/tower/battle/start", new Dictionary<string, object>()
    {
      [nameof (tower_id)] = (object) tower_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.TowerBattleStart) null);
      }
      else
        callback(new WebAPI.Response.TowerBattleStart(json.Json));
    }));
  }

  public static Future<WebAPI.Response.TowerDeckEdit> TowerDeckEdit(
    int[] player_unit_ids,
    int tower_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.TowerDeckEdit>((Func<Promise<WebAPI.Response.TowerDeckEdit>, IEnumerator>) (promise => WebAPI.LoadTowerDeckEdit(promise, player_unit_ids, tower_id, userErrorCallback)));
  }

  private static IEnumerator LoadTowerDeckEdit(
    Promise<WebAPI.Response.TowerDeckEdit> promise,
    int[] player_unit_ids,
    int tower_id,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalTowerDeckEdit(player_unit_ids, tower_id, (Action<WebAPI.Response.TowerDeckEdit>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalTowerDeckEdit(
    int[] player_unit_ids,
    int tower_id,
    Action<WebAPI.Response.TowerDeckEdit> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/tower/deck/edit", new Dictionary<string, object>()
    {
      [nameof (player_unit_ids)] = (object) player_unit_ids,
      [nameof (tower_id)] = (object) tower_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.TowerDeckEdit) null);
      }
      else
        callback(new WebAPI.Response.TowerDeckEdit(json.Json));
    }));
  }

  public static Future<WebAPI.Response.TowerEntry> TowerEntry(
    int[] deck_quantities,
    int[] deck_supply_ids,
    int[] player_unit_ids,
    int tower_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.TowerEntry>((Func<Promise<WebAPI.Response.TowerEntry>, IEnumerator>) (promise => WebAPI.LoadTowerEntry(promise, deck_quantities, deck_supply_ids, player_unit_ids, tower_id, userErrorCallback)));
  }

  private static IEnumerator LoadTowerEntry(
    Promise<WebAPI.Response.TowerEntry> promise,
    int[] deck_quantities,
    int[] deck_supply_ids,
    int[] player_unit_ids,
    int tower_id,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalTowerEntry(deck_quantities, deck_supply_ids, player_unit_ids, tower_id, (Action<WebAPI.Response.TowerEntry>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalTowerEntry(
    int[] deck_quantities,
    int[] deck_supply_ids,
    int[] player_unit_ids,
    int tower_id,
    Action<WebAPI.Response.TowerEntry> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/tower/entry", new Dictionary<string, object>()
    {
      [nameof (deck_quantities)] = (object) deck_quantities,
      [nameof (deck_supply_ids)] = (object) deck_supply_ids,
      [nameof (player_unit_ids)] = (object) player_unit_ids,
      [nameof (tower_id)] = (object) tower_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.TowerEntry) null);
      }
      else
        callback(new WebAPI.Response.TowerEntry(json.Json));
    }));
  }

  public static Future<WebAPI.Response.TowerReassign> TowerReassign(
    int[] deck_quantities,
    int[] deck_supply_ids,
    bool is_free_recover,
    int[] player_unit_ids,
    int tower_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.TowerReassign>((Func<Promise<WebAPI.Response.TowerReassign>, IEnumerator>) (promise => WebAPI.LoadTowerReassign(promise, deck_quantities, deck_supply_ids, is_free_recover, player_unit_ids, tower_id, userErrorCallback)));
  }

  private static IEnumerator LoadTowerReassign(
    Promise<WebAPI.Response.TowerReassign> promise,
    int[] deck_quantities,
    int[] deck_supply_ids,
    bool is_free_recover,
    int[] player_unit_ids,
    int tower_id,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalTowerReassign(deck_quantities, deck_supply_ids, is_free_recover, player_unit_ids, tower_id, (Action<WebAPI.Response.TowerReassign>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalTowerReassign(
    int[] deck_quantities,
    int[] deck_supply_ids,
    bool is_free_recover,
    int[] player_unit_ids,
    int tower_id,
    Action<WebAPI.Response.TowerReassign> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/tower/reassign", new Dictionary<string, object>()
    {
      [nameof (deck_quantities)] = (object) deck_quantities,
      [nameof (deck_supply_ids)] = (object) deck_supply_ids,
      [nameof (is_free_recover)] = (object) is_free_recover,
      [nameof (player_unit_ids)] = (object) player_unit_ids,
      [nameof (tower_id)] = (object) tower_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.TowerReassign) null);
      }
      else
        callback(new WebAPI.Response.TowerReassign(json.Json));
    }));
  }

  public static Future<WebAPI.Response.TowerRestart> TowerRestart(
    int[] deck_quantities,
    int[] deck_supply_ids,
    int[] player_unit_ids,
    int tower_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.TowerRestart>((Func<Promise<WebAPI.Response.TowerRestart>, IEnumerator>) (promise => WebAPI.LoadTowerRestart(promise, deck_quantities, deck_supply_ids, player_unit_ids, tower_id, userErrorCallback)));
  }

  private static IEnumerator LoadTowerRestart(
    Promise<WebAPI.Response.TowerRestart> promise,
    int[] deck_quantities,
    int[] deck_supply_ids,
    int[] player_unit_ids,
    int tower_id,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalTowerRestart(deck_quantities, deck_supply_ids, player_unit_ids, tower_id, (Action<WebAPI.Response.TowerRestart>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalTowerRestart(
    int[] deck_quantities,
    int[] deck_supply_ids,
    int[] player_unit_ids,
    int tower_id,
    Action<WebAPI.Response.TowerRestart> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/tower/restart", new Dictionary<string, object>()
    {
      [nameof (deck_quantities)] = (object) deck_quantities,
      [nameof (deck_supply_ids)] = (object) deck_supply_ids,
      [nameof (player_unit_ids)] = (object) player_unit_ids,
      [nameof (tower_id)] = (object) tower_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.TowerRestart) null);
      }
      else
        callback(new WebAPI.Response.TowerRestart(json.Json));
    }));
  }

  public static Future<WebAPI.Response.TowerScoreDetail> TowerScoreDetail(
    int period_id,
    int tower_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.TowerScoreDetail>((Func<Promise<WebAPI.Response.TowerScoreDetail>, IEnumerator>) (promise => WebAPI.LoadTowerScoreDetail(promise, period_id, tower_id, userErrorCallback)));
  }

  private static IEnumerator LoadTowerScoreDetail(
    Promise<WebAPI.Response.TowerScoreDetail> promise,
    int period_id,
    int tower_id,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalTowerScoreDetail(period_id, tower_id, (Action<WebAPI.Response.TowerScoreDetail>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalTowerScoreDetail(
    int period_id,
    int tower_id,
    Action<WebAPI.Response.TowerScoreDetail> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/tower/score/detail", new Dictionary<string, object>()
    {
      [nameof (period_id)] = (object) period_id,
      [nameof (tower_id)] = (object) tower_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.TowerScoreDetail) null);
      }
      else
        callback(new WebAPI.Response.TowerScoreDetail(json.Json));
    }));
  }

  public static Future<WebAPI.Response.TowerScoreRankingDamage> TowerScoreRankingDamage(
    int period_id,
    int tower_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.TowerScoreRankingDamage>((Func<Promise<WebAPI.Response.TowerScoreRankingDamage>, IEnumerator>) (promise => WebAPI.LoadTowerScoreRankingDamage(promise, period_id, tower_id, userErrorCallback)));
  }

  private static IEnumerator LoadTowerScoreRankingDamage(
    Promise<WebAPI.Response.TowerScoreRankingDamage> promise,
    int period_id,
    int tower_id,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalTowerScoreRankingDamage(period_id, tower_id, (Action<WebAPI.Response.TowerScoreRankingDamage>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalTowerScoreRankingDamage(
    int period_id,
    int tower_id,
    Action<WebAPI.Response.TowerScoreRankingDamage> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/tower/score/ranking/damage", new Dictionary<string, object>()
    {
      [nameof (period_id)] = (object) period_id,
      [nameof (tower_id)] = (object) tower_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.TowerScoreRankingDamage) null);
      }
      else
        callback(new WebAPI.Response.TowerScoreRankingDamage(json.Json));
    }));
  }

  public static Future<WebAPI.Response.TowerScoreRankingSpeed> TowerScoreRankingSpeed(
    int period_id,
    int tower_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.TowerScoreRankingSpeed>((Func<Promise<WebAPI.Response.TowerScoreRankingSpeed>, IEnumerator>) (promise => WebAPI.LoadTowerScoreRankingSpeed(promise, period_id, tower_id, userErrorCallback)));
  }

  private static IEnumerator LoadTowerScoreRankingSpeed(
    Promise<WebAPI.Response.TowerScoreRankingSpeed> promise,
    int period_id,
    int tower_id,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalTowerScoreRankingSpeed(period_id, tower_id, (Action<WebAPI.Response.TowerScoreRankingSpeed>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalTowerScoreRankingSpeed(
    int period_id,
    int tower_id,
    Action<WebAPI.Response.TowerScoreRankingSpeed> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/tower/score/ranking/speed", new Dictionary<string, object>()
    {
      [nameof (period_id)] = (object) period_id,
      [nameof (tower_id)] = (object) tower_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.TowerScoreRankingSpeed) null);
      }
      else
        callback(new WebAPI.Response.TowerScoreRankingSpeed(json.Json));
    }));
  }

  public static Future<WebAPI.Response.TowerScoreRankingTechnical> TowerScoreRankingTechnical(
    int period_id,
    int tower_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.TowerScoreRankingTechnical>((Func<Promise<WebAPI.Response.TowerScoreRankingTechnical>, IEnumerator>) (promise => WebAPI.LoadTowerScoreRankingTechnical(promise, period_id, tower_id, userErrorCallback)));
  }

  private static IEnumerator LoadTowerScoreRankingTechnical(
    Promise<WebAPI.Response.TowerScoreRankingTechnical> promise,
    int period_id,
    int tower_id,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalTowerScoreRankingTechnical(period_id, tower_id, (Action<WebAPI.Response.TowerScoreRankingTechnical>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalTowerScoreRankingTechnical(
    int period_id,
    int tower_id,
    Action<WebAPI.Response.TowerScoreRankingTechnical> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/tower/score/ranking/technical", new Dictionary<string, object>()
    {
      [nameof (period_id)] = (object) period_id,
      [nameof (tower_id)] = (object) tower_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.TowerScoreRankingTechnical) null);
      }
      else
        callback(new WebAPI.Response.TowerScoreRankingTechnical(json.Json));
    }));
  }

  public static Future<WebAPI.Response.TowerShopTop> TowerShopTop(
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.TowerShopTop>((Func<Promise<WebAPI.Response.TowerShopTop>, IEnumerator>) (promise => WebAPI.LoadTowerShopTop(promise, userErrorCallback)));
  }

  private static IEnumerator LoadTowerShopTop(
    Promise<WebAPI.Response.TowerShopTop> promise,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalTowerShopTop((Action<WebAPI.Response.TowerShopTop>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalTowerShopTop(
    Action<WebAPI.Response.TowerShopTop> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Get("/tower/shop/top", (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.TowerShopTop) null);
      }
      else
        callback(new WebAPI.Response.TowerShopTop(json.Json));
    }));
  }

  public static Future<WebAPI.Response.TowerTop> TowerTop(
    int tower_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.TowerTop>((Func<Promise<WebAPI.Response.TowerTop>, IEnumerator>) (promise => WebAPI.LoadTowerTop(promise, tower_id, userErrorCallback)));
  }

  private static IEnumerator LoadTowerTop(
    Promise<WebAPI.Response.TowerTop> promise,
    int tower_id,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalTowerTop(tower_id, (Action<WebAPI.Response.TowerTop>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalTowerTop(
    int tower_id,
    Action<WebAPI.Response.TowerTop> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/tower/top", new Dictionary<string, object>()
    {
      [nameof (tower_id)] = (object) tower_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.TowerTop) null);
      }
      else
        callback(new WebAPI.Response.TowerTop(json.Json));
    }));
  }

  public static Future<WebAPI.Response.TutorialTutorialRagnarokResume> TutorialTutorialRagnarokResume(
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.TutorialTutorialRagnarokResume>((Func<Promise<WebAPI.Response.TutorialTutorialRagnarokResume>, IEnumerator>) (promise => WebAPI.LoadTutorialTutorialRagnarokResume(promise, userErrorCallback)));
  }

  private static IEnumerator LoadTutorialTutorialRagnarokResume(
    Promise<WebAPI.Response.TutorialTutorialRagnarokResume> promise,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalTutorialTutorialRagnarokResume((Action<WebAPI.Response.TutorialTutorialRagnarokResume>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalTutorialTutorialRagnarokResume(
    Action<WebAPI.Response.TutorialTutorialRagnarokResume> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Get("/tutorial/tutorial_ragnarok/resume", (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.TutorialTutorialRagnarokResume) null);
      }
      else
        callback(new WebAPI.Response.TutorialTutorialRagnarokResume(json.Json));
    }));
  }

  public static Future<WebAPI.Response.TutorialTutorialResume> TutorialTutorialResume(
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.TutorialTutorialResume>((Func<Promise<WebAPI.Response.TutorialTutorialResume>, IEnumerator>) (promise => WebAPI.LoadTutorialTutorialResume(promise, userErrorCallback)));
  }

  private static IEnumerator LoadTutorialTutorialResume(
    Promise<WebAPI.Response.TutorialTutorialResume> promise,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalTutorialTutorialResume((Action<WebAPI.Response.TutorialTutorialResume>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalTutorialTutorialResume(
    Action<WebAPI.Response.TutorialTutorialResume> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Get("/tutorial/tutorial/resume", (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.TutorialTutorialResume) null);
      }
      else
        callback(new WebAPI.Response.TutorialTutorialResume(json.Json));
    }));
  }

  public static Future<WebAPI.Response.TutorialTutorialValid> TutorialTutorialValid(
    string name,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.TutorialTutorialValid>((Func<Promise<WebAPI.Response.TutorialTutorialValid>, IEnumerator>) (promise => WebAPI.LoadTutorialTutorialValid(promise, name, userErrorCallback)));
  }

  private static IEnumerator LoadTutorialTutorialValid(
    Promise<WebAPI.Response.TutorialTutorialValid> promise,
    string name,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalTutorialTutorialValid(name, (Action<WebAPI.Response.TutorialTutorialValid>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalTutorialTutorialValid(
    string name,
    Action<WebAPI.Response.TutorialTutorialValid> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/tutorial/tutorial/valid", new Dictionary<string, object>()
    {
      [nameof (name)] = (object) name
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.TutorialTutorialValid) null);
      }
      else
        callback(new WebAPI.Response.TutorialTutorialValid(json.Json));
    }));
  }

  public static Future<WebAPI.Response.UnitAcquireGearQuest> UnitAcquireGearQuest(
    int same_character_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.UnitAcquireGearQuest>((Func<Promise<WebAPI.Response.UnitAcquireGearQuest>, IEnumerator>) (promise => WebAPI.LoadUnitAcquireGearQuest(promise, same_character_id, userErrorCallback)));
  }

  private static IEnumerator LoadUnitAcquireGearQuest(
    Promise<WebAPI.Response.UnitAcquireGearQuest> promise,
    int same_character_id,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalUnitAcquireGearQuest(same_character_id, (Action<WebAPI.Response.UnitAcquireGearQuest>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalUnitAcquireGearQuest(
    int same_character_id,
    Action<WebAPI.Response.UnitAcquireGearQuest> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/unit/acquire_gear_quest", new Dictionary<string, object>()
    {
      [nameof (same_character_id)] = (object) same_character_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.UnitAcquireGearQuest) null);
      }
      else
        callback(new WebAPI.Response.UnitAcquireGearQuest(json.Json));
    }));
  }

  public static Future<WebAPI.Response.UnitBuildup> UnitBuildup(
    int base_player_unit_id,
    int[] material_player_material_unit_ids,
    int[] material_player_material_unit_nums,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.UnitBuildup>((Func<Promise<WebAPI.Response.UnitBuildup>, IEnumerator>) (promise => WebAPI.LoadUnitBuildup(promise, base_player_unit_id, material_player_material_unit_ids, material_player_material_unit_nums, userErrorCallback)));
  }

  private static IEnumerator LoadUnitBuildup(
    Promise<WebAPI.Response.UnitBuildup> promise,
    int base_player_unit_id,
    int[] material_player_material_unit_ids,
    int[] material_player_material_unit_nums,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalUnitBuildup(base_player_unit_id, material_player_material_unit_ids, material_player_material_unit_nums, (Action<WebAPI.Response.UnitBuildup>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalUnitBuildup(
    int base_player_unit_id,
    int[] material_player_material_unit_ids,
    int[] material_player_material_unit_nums,
    Action<WebAPI.Response.UnitBuildup> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/unit/buildup", new Dictionary<string, object>()
    {
      [nameof (base_player_unit_id)] = (object) base_player_unit_id,
      [nameof (material_player_material_unit_ids)] = (object) material_player_material_unit_ids,
      [nameof (material_player_material_unit_nums)] = (object) material_player_material_unit_nums
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.UnitBuildup) null);
      }
      else
        callback(new WebAPI.Response.UnitBuildup(json.Json));
    }));
  }

  public static Future<WebAPI.Response.UnitBulkEquip> UnitBulkEquip(
    int[] player_gear_ids,
    int player_unit_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.UnitBulkEquip>((Func<Promise<WebAPI.Response.UnitBulkEquip>, IEnumerator>) (promise => WebAPI.LoadUnitBulkEquip(promise, player_gear_ids, player_unit_id, userErrorCallback)));
  }

  private static IEnumerator LoadUnitBulkEquip(
    Promise<WebAPI.Response.UnitBulkEquip> promise,
    int[] player_gear_ids,
    int player_unit_id,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalUnitBulkEquip(player_gear_ids, player_unit_id, (Action<WebAPI.Response.UnitBulkEquip>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalUnitBulkEquip(
    int[] player_gear_ids,
    int player_unit_id,
    Action<WebAPI.Response.UnitBulkEquip> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/unit/bulk_equip", new Dictionary<string, object>()
    {
      [nameof (player_gear_ids)] = (object) player_gear_ids,
      [nameof (player_unit_id)] = (object) player_unit_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.UnitBulkEquip) null);
      }
      else
        callback(new WebAPI.Response.UnitBulkEquip(json.Json));
    }));
  }

  public static Future<WebAPI.Response.UnitCompose> UnitCompose(
    int base_player_unit_id,
    int[] material_player_material_unit_ids,
    int[] material_player_material_unit_nums,
    int[] material_player_unit_ids,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.UnitCompose>((Func<Promise<WebAPI.Response.UnitCompose>, IEnumerator>) (promise => WebAPI.LoadUnitCompose(promise, base_player_unit_id, material_player_material_unit_ids, material_player_material_unit_nums, material_player_unit_ids, userErrorCallback)));
  }

  private static IEnumerator LoadUnitCompose(
    Promise<WebAPI.Response.UnitCompose> promise,
    int base_player_unit_id,
    int[] material_player_material_unit_ids,
    int[] material_player_material_unit_nums,
    int[] material_player_unit_ids,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalUnitCompose(base_player_unit_id, material_player_material_unit_ids, material_player_material_unit_nums, material_player_unit_ids, (Action<WebAPI.Response.UnitCompose>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalUnitCompose(
    int base_player_unit_id,
    int[] material_player_material_unit_ids,
    int[] material_player_material_unit_nums,
    int[] material_player_unit_ids,
    Action<WebAPI.Response.UnitCompose> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/unit/compose", new Dictionary<string, object>()
    {
      [nameof (base_player_unit_id)] = (object) base_player_unit_id,
      [nameof (material_player_material_unit_ids)] = (object) material_player_material_unit_ids,
      [nameof (material_player_material_unit_nums)] = (object) material_player_material_unit_nums,
      [nameof (material_player_unit_ids)] = (object) material_player_unit_ids
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.UnitCompose) null);
      }
      else
        callback(new WebAPI.Response.UnitCompose(json.Json));
    }));
  }

  public static Future<WebAPI.Response.UnitDegenerate> UnitDegenerate(
    int base_player_unit_id,
    int[] material_player_material_unit_ids,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.UnitDegenerate>((Func<Promise<WebAPI.Response.UnitDegenerate>, IEnumerator>) (promise => WebAPI.LoadUnitDegenerate(promise, base_player_unit_id, material_player_material_unit_ids, userErrorCallback)));
  }

  private static IEnumerator LoadUnitDegenerate(
    Promise<WebAPI.Response.UnitDegenerate> promise,
    int base_player_unit_id,
    int[] material_player_material_unit_ids,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalUnitDegenerate(base_player_unit_id, material_player_material_unit_ids, (Action<WebAPI.Response.UnitDegenerate>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalUnitDegenerate(
    int base_player_unit_id,
    int[] material_player_material_unit_ids,
    Action<WebAPI.Response.UnitDegenerate> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/unit/degenerate", new Dictionary<string, object>()
    {
      [nameof (base_player_unit_id)] = (object) base_player_unit_id,
      [nameof (material_player_material_unit_ids)] = (object) material_player_material_unit_ids
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.UnitDegenerate) null);
      }
      else
        callback(new WebAPI.Response.UnitDegenerate(json.Json));
    }));
  }

  public static Future<WebAPI.Response.UnitDeleteTransmigrateMemory> UnitDeleteTransmigrateMemory(
    int player_unit_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.UnitDeleteTransmigrateMemory>((Func<Promise<WebAPI.Response.UnitDeleteTransmigrateMemory>, IEnumerator>) (promise => WebAPI.LoadUnitDeleteTransmigrateMemory(promise, player_unit_id, userErrorCallback)));
  }

  private static IEnumerator LoadUnitDeleteTransmigrateMemory(
    Promise<WebAPI.Response.UnitDeleteTransmigrateMemory> promise,
    int player_unit_id,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalUnitDeleteTransmigrateMemory(player_unit_id, (Action<WebAPI.Response.UnitDeleteTransmigrateMemory>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalUnitDeleteTransmigrateMemory(
    int player_unit_id,
    Action<WebAPI.Response.UnitDeleteTransmigrateMemory> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/unit/delete_transmigrate_memory", new Dictionary<string, object>()
    {
      [nameof (player_unit_id)] = (object) player_unit_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.UnitDeleteTransmigrateMemory) null);
      }
      else
        callback(new WebAPI.Response.UnitDeleteTransmigrateMemory(json.Json));
    }));
  }

  public static Future<WebAPI.Response.UnitEquip> UnitEquip(
    int number,
    int? player_gear_id,
    int player_unit_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.UnitEquip>((Func<Promise<WebAPI.Response.UnitEquip>, IEnumerator>) (promise => WebAPI.LoadUnitEquip(promise, number, player_gear_id, player_unit_id, userErrorCallback)));
  }

  private static IEnumerator LoadUnitEquip(
    Promise<WebAPI.Response.UnitEquip> promise,
    int number,
    int? player_gear_id,
    int player_unit_id,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalUnitEquip(number, player_gear_id, player_unit_id, (Action<WebAPI.Response.UnitEquip>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalUnitEquip(
    int number,
    int? player_gear_id,
    int player_unit_id,
    Action<WebAPI.Response.UnitEquip> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/unit/equip", new Dictionary<string, object>()
    {
      [nameof (number)] = (object) number,
      [nameof (player_gear_id)] = (object) player_gear_id,
      [nameof (player_unit_id)] = (object) player_unit_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.UnitEquip) null);
      }
      else
        callback(new WebAPI.Response.UnitEquip(json.Json));
    }));
  }

  public static Future<WebAPI.Response.UnitEvolution> UnitEvolution(
    int base_player_material_unit_id,
    int base_player_unit_id,
    int[] material_player_material_unit_ids,
    int[] material_player_unit_ids,
    int pattern_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.UnitEvolution>((Func<Promise<WebAPI.Response.UnitEvolution>, IEnumerator>) (promise => WebAPI.LoadUnitEvolution(promise, base_player_material_unit_id, base_player_unit_id, material_player_material_unit_ids, material_player_unit_ids, pattern_id, userErrorCallback)));
  }

  private static IEnumerator LoadUnitEvolution(
    Promise<WebAPI.Response.UnitEvolution> promise,
    int base_player_material_unit_id,
    int base_player_unit_id,
    int[] material_player_material_unit_ids,
    int[] material_player_unit_ids,
    int pattern_id,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalUnitEvolution(base_player_material_unit_id, base_player_unit_id, material_player_material_unit_ids, material_player_unit_ids, pattern_id, (Action<WebAPI.Response.UnitEvolution>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalUnitEvolution(
    int base_player_material_unit_id,
    int base_player_unit_id,
    int[] material_player_material_unit_ids,
    int[] material_player_unit_ids,
    int pattern_id,
    Action<WebAPI.Response.UnitEvolution> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/unit/evolution", new Dictionary<string, object>()
    {
      [nameof (base_player_material_unit_id)] = (object) base_player_material_unit_id,
      [nameof (base_player_unit_id)] = (object) base_player_unit_id,
      [nameof (material_player_material_unit_ids)] = (object) material_player_material_unit_ids,
      [nameof (material_player_unit_ids)] = (object) material_player_unit_ids,
      [nameof (pattern_id)] = (object) pattern_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.UnitEvolution) null);
      }
      else
        callback(new WebAPI.Response.UnitEvolution(json.Json));
    }));
  }

  public static Future<WebAPI.Response.UnitEvolutionParameter> UnitEvolutionParameter(
    int base_player_material_unit_id,
    int base_player_unit_id,
    int pattern_id,
    int[] pattern_ids,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.UnitEvolutionParameter>((Func<Promise<WebAPI.Response.UnitEvolutionParameter>, IEnumerator>) (promise => WebAPI.LoadUnitEvolutionParameter(promise, base_player_material_unit_id, base_player_unit_id, pattern_id, pattern_ids, userErrorCallback)));
  }

  private static IEnumerator LoadUnitEvolutionParameter(
    Promise<WebAPI.Response.UnitEvolutionParameter> promise,
    int base_player_material_unit_id,
    int base_player_unit_id,
    int pattern_id,
    int[] pattern_ids,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalUnitEvolutionParameter(base_player_material_unit_id, base_player_unit_id, pattern_id, pattern_ids, (Action<WebAPI.Response.UnitEvolutionParameter>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalUnitEvolutionParameter(
    int base_player_material_unit_id,
    int base_player_unit_id,
    int pattern_id,
    int[] pattern_ids,
    Action<WebAPI.Response.UnitEvolutionParameter> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/unit/evolution-parameter", new Dictionary<string, object>()
    {
      [nameof (base_player_material_unit_id)] = (object) base_player_material_unit_id,
      [nameof (base_player_unit_id)] = (object) base_player_unit_id,
      [nameof (pattern_id)] = (object) pattern_id,
      [nameof (pattern_ids)] = (object) pattern_ids
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.UnitEvolutionParameter) null);
      }
      else
        callback(new WebAPI.Response.UnitEvolutionParameter(json.Json));
    }));
  }

  public static Future<WebAPI.Response.UnitFavorite> UnitFavorite(
    int[] player_unit_ids,
    int[] unlock_player_unit_ids,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.UnitFavorite>((Func<Promise<WebAPI.Response.UnitFavorite>, IEnumerator>) (promise => WebAPI.LoadUnitFavorite(promise, player_unit_ids, unlock_player_unit_ids, userErrorCallback)));
  }

  private static IEnumerator LoadUnitFavorite(
    Promise<WebAPI.Response.UnitFavorite> promise,
    int[] player_unit_ids,
    int[] unlock_player_unit_ids,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalUnitFavorite(player_unit_ids, unlock_player_unit_ids, (Action<WebAPI.Response.UnitFavorite>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalUnitFavorite(
    int[] player_unit_ids,
    int[] unlock_player_unit_ids,
    Action<WebAPI.Response.UnitFavorite> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/unit/favorite", new Dictionary<string, object>()
    {
      [nameof (player_unit_ids)] = (object) player_unit_ids,
      [nameof (unlock_player_unit_ids)] = (object) unlock_player_unit_ids
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.UnitFavorite) null);
      }
      else
        callback(new WebAPI.Response.UnitFavorite(json.Json));
    }));
  }

  public static Future<WebAPI.Response.UnitJobchange> UnitJobchange(
    int base_player_unit_id,
    int[] material_player_material_unit_ids,
    int target_job_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.UnitJobchange>((Func<Promise<WebAPI.Response.UnitJobchange>, IEnumerator>) (promise => WebAPI.LoadUnitJobchange(promise, base_player_unit_id, material_player_material_unit_ids, target_job_id, userErrorCallback)));
  }

  private static IEnumerator LoadUnitJobchange(
    Promise<WebAPI.Response.UnitJobchange> promise,
    int base_player_unit_id,
    int[] material_player_material_unit_ids,
    int target_job_id,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalUnitJobchange(base_player_unit_id, material_player_material_unit_ids, target_job_id, (Action<WebAPI.Response.UnitJobchange>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalUnitJobchange(
    int base_player_unit_id,
    int[] material_player_material_unit_ids,
    int target_job_id,
    Action<WebAPI.Response.UnitJobchange> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/unit/jobchange", new Dictionary<string, object>()
    {
      [nameof (base_player_unit_id)] = (object) base_player_unit_id,
      [nameof (material_player_material_unit_ids)] = (object) material_player_material_unit_ids,
      [nameof (target_job_id)] = (object) target_job_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.UnitJobchange) null);
      }
      else
        callback(new WebAPI.Response.UnitJobchange(json.Json));
    }));
  }

  public static Future<WebAPI.Response.UnitListTransmigrateMemory> UnitListTransmigrateMemory(
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.UnitListTransmigrateMemory>((Func<Promise<WebAPI.Response.UnitListTransmigrateMemory>, IEnumerator>) (promise => WebAPI.LoadUnitListTransmigrateMemory(promise, userErrorCallback)));
  }

  private static IEnumerator LoadUnitListTransmigrateMemory(
    Promise<WebAPI.Response.UnitListTransmigrateMemory> promise,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalUnitListTransmigrateMemory((Action<WebAPI.Response.UnitListTransmigrateMemory>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalUnitListTransmigrateMemory(
    Action<WebAPI.Response.UnitListTransmigrateMemory> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Get("/unit/list_transmigrate_memory", (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.UnitListTransmigrateMemory) null);
      }
      else
        callback(new WebAPI.Response.UnitListTransmigrateMemory(json.Json));
    }));
  }

  public static Future<WebAPI.Response.UnitLumpCompose> UnitLumpCompose(
    int[] base_player_unit_ids,
    int[] mmpu_ids,
    int[] mmpu_nums,
    int[] mmpu_pos,
    int[] mpu_ids0,
    int[] mpu_ids1,
    int[] mpu_ids2,
    int[] mpu_ids3,
    int[] mpu_ids4,
    int[] mpu_ids5,
    int[] mpu_ids6,
    int[] mpu_ids7,
    int[] mpu_ids8,
    int[] mpu_ids9,
    int[] mpu_ids10,
    int[] mpu_ids11,
    int[] mpu_ids12,
    int[] mpu_ids13,
    int[] mpu_ids14,
    int[] mpu_ids15,
    int[] mpu_ids16,
    int[] mpu_ids17,
    int[] mpu_ids18,
    int[] mpu_ids19,
    int[] mpu_ids20,
    int[] mpu_ids21,
    int[] mpu_ids22,
    int[] mpu_ids23,
    int[] mpu_ids24,
    int[] mpu_ids25,
    int[] mpu_ids26,
    int[] mpu_ids27,
    int[] mpu_ids28,
    int[] mpu_ids29,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.UnitLumpCompose>((Func<Promise<WebAPI.Response.UnitLumpCompose>, IEnumerator>) (promise => WebAPI.LoadUnitLumpCompose(promise, base_player_unit_ids, mmpu_ids, mmpu_nums, mmpu_pos, mpu_ids0, mpu_ids1, mpu_ids2, mpu_ids3, mpu_ids4, mpu_ids5, mpu_ids6, mpu_ids7, mpu_ids8, mpu_ids9, mpu_ids10, mpu_ids11, mpu_ids12, mpu_ids13, mpu_ids14, mpu_ids15, mpu_ids16, mpu_ids17, mpu_ids18, mpu_ids19, mpu_ids20, mpu_ids21, mpu_ids22, mpu_ids23, mpu_ids24, mpu_ids25, mpu_ids26, mpu_ids27, mpu_ids28, mpu_ids29, userErrorCallback)));
  }

  private static IEnumerator LoadUnitLumpCompose(
    Promise<WebAPI.Response.UnitLumpCompose> promise,
    int[] base_player_unit_ids,
    int[] mmpu_ids,
    int[] mmpu_nums,
    int[] mmpu_pos,
    int[] mpu_ids0,
    int[] mpu_ids1,
    int[] mpu_ids2,
    int[] mpu_ids3,
    int[] mpu_ids4,
    int[] mpu_ids5,
    int[] mpu_ids6,
    int[] mpu_ids7,
    int[] mpu_ids8,
    int[] mpu_ids9,
    int[] mpu_ids10,
    int[] mpu_ids11,
    int[] mpu_ids12,
    int[] mpu_ids13,
    int[] mpu_ids14,
    int[] mpu_ids15,
    int[] mpu_ids16,
    int[] mpu_ids17,
    int[] mpu_ids18,
    int[] mpu_ids19,
    int[] mpu_ids20,
    int[] mpu_ids21,
    int[] mpu_ids22,
    int[] mpu_ids23,
    int[] mpu_ids24,
    int[] mpu_ids25,
    int[] mpu_ids26,
    int[] mpu_ids27,
    int[] mpu_ids28,
    int[] mpu_ids29,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalUnitLumpCompose(base_player_unit_ids, mmpu_ids, mmpu_nums, mmpu_pos, mpu_ids0, mpu_ids1, mpu_ids2, mpu_ids3, mpu_ids4, mpu_ids5, mpu_ids6, mpu_ids7, mpu_ids8, mpu_ids9, mpu_ids10, mpu_ids11, mpu_ids12, mpu_ids13, mpu_ids14, mpu_ids15, mpu_ids16, mpu_ids17, mpu_ids18, mpu_ids19, mpu_ids20, mpu_ids21, mpu_ids22, mpu_ids23, mpu_ids24, mpu_ids25, mpu_ids26, mpu_ids27, mpu_ids28, mpu_ids29, (Action<WebAPI.Response.UnitLumpCompose>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalUnitLumpCompose(
    int[] base_player_unit_ids,
    int[] mmpu_ids,
    int[] mmpu_nums,
    int[] mmpu_pos,
    int[] mpu_ids0,
    int[] mpu_ids1,
    int[] mpu_ids2,
    int[] mpu_ids3,
    int[] mpu_ids4,
    int[] mpu_ids5,
    int[] mpu_ids6,
    int[] mpu_ids7,
    int[] mpu_ids8,
    int[] mpu_ids9,
    int[] mpu_ids10,
    int[] mpu_ids11,
    int[] mpu_ids12,
    int[] mpu_ids13,
    int[] mpu_ids14,
    int[] mpu_ids15,
    int[] mpu_ids16,
    int[] mpu_ids17,
    int[] mpu_ids18,
    int[] mpu_ids19,
    int[] mpu_ids20,
    int[] mpu_ids21,
    int[] mpu_ids22,
    int[] mpu_ids23,
    int[] mpu_ids24,
    int[] mpu_ids25,
    int[] mpu_ids26,
    int[] mpu_ids27,
    int[] mpu_ids28,
    int[] mpu_ids29,
    Action<WebAPI.Response.UnitLumpCompose> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/unit/lump-compose", new Dictionary<string, object>()
    {
      [nameof (base_player_unit_ids)] = (object) base_player_unit_ids,
      [nameof (mmpu_ids)] = (object) mmpu_ids,
      [nameof (mmpu_nums)] = (object) mmpu_nums,
      [nameof (mmpu_pos)] = (object) mmpu_pos,
      [nameof (mpu_ids0)] = (object) mpu_ids0,
      [nameof (mpu_ids1)] = (object) mpu_ids1,
      [nameof (mpu_ids10)] = (object) mpu_ids10,
      [nameof (mpu_ids11)] = (object) mpu_ids11,
      [nameof (mpu_ids12)] = (object) mpu_ids12,
      [nameof (mpu_ids13)] = (object) mpu_ids13,
      [nameof (mpu_ids14)] = (object) mpu_ids14,
      [nameof (mpu_ids15)] = (object) mpu_ids15,
      [nameof (mpu_ids16)] = (object) mpu_ids16,
      [nameof (mpu_ids17)] = (object) mpu_ids17,
      [nameof (mpu_ids18)] = (object) mpu_ids18,
      [nameof (mpu_ids19)] = (object) mpu_ids19,
      [nameof (mpu_ids2)] = (object) mpu_ids2,
      [nameof (mpu_ids20)] = (object) mpu_ids20,
      [nameof (mpu_ids21)] = (object) mpu_ids21,
      [nameof (mpu_ids22)] = (object) mpu_ids22,
      [nameof (mpu_ids23)] = (object) mpu_ids23,
      [nameof (mpu_ids24)] = (object) mpu_ids24,
      [nameof (mpu_ids25)] = (object) mpu_ids25,
      [nameof (mpu_ids26)] = (object) mpu_ids26,
      [nameof (mpu_ids27)] = (object) mpu_ids27,
      [nameof (mpu_ids28)] = (object) mpu_ids28,
      [nameof (mpu_ids29)] = (object) mpu_ids29,
      [nameof (mpu_ids3)] = (object) mpu_ids3,
      [nameof (mpu_ids4)] = (object) mpu_ids4,
      [nameof (mpu_ids5)] = (object) mpu_ids5,
      [nameof (mpu_ids6)] = (object) mpu_ids6,
      [nameof (mpu_ids7)] = (object) mpu_ids7,
      [nameof (mpu_ids8)] = (object) mpu_ids8,
      [nameof (mpu_ids9)] = (object) mpu_ids9
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.UnitLumpCompose) null);
      }
      else
        callback(new WebAPI.Response.UnitLumpCompose(json.Json));
    }));
  }

  public static Future<WebAPI.Response.UnitOpenGearEquipNumber> UnitOpenGearEquipNumber(
    int player_unit_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.UnitOpenGearEquipNumber>((Func<Promise<WebAPI.Response.UnitOpenGearEquipNumber>, IEnumerator>) (promise => WebAPI.LoadUnitOpenGearEquipNumber(promise, player_unit_id, userErrorCallback)));
  }

  private static IEnumerator LoadUnitOpenGearEquipNumber(
    Promise<WebAPI.Response.UnitOpenGearEquipNumber> promise,
    int player_unit_id,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalUnitOpenGearEquipNumber(player_unit_id, (Action<WebAPI.Response.UnitOpenGearEquipNumber>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalUnitOpenGearEquipNumber(
    int player_unit_id,
    Action<WebAPI.Response.UnitOpenGearEquipNumber> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/unit/open_gear_equip_number", new Dictionary<string, object>()
    {
      [nameof (player_unit_id)] = (object) player_unit_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.UnitOpenGearEquipNumber) null);
      }
      else
        callback(new WebAPI.Response.UnitOpenGearEquipNumber(json.Json));
    }));
  }

  public static Future<WebAPI.Response.UnitPreviewInheritance> UnitPreviewInheritance(
    int base_player_unit_id,
    int[] material_player_unit_ids,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.UnitPreviewInheritance>((Func<Promise<WebAPI.Response.UnitPreviewInheritance>, IEnumerator>) (promise => WebAPI.LoadUnitPreviewInheritance(promise, base_player_unit_id, material_player_unit_ids, userErrorCallback)));
  }

  private static IEnumerator LoadUnitPreviewInheritance(
    Promise<WebAPI.Response.UnitPreviewInheritance> promise,
    int base_player_unit_id,
    int[] material_player_unit_ids,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalUnitPreviewInheritance(base_player_unit_id, material_player_unit_ids, (Action<WebAPI.Response.UnitPreviewInheritance>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalUnitPreviewInheritance(
    int base_player_unit_id,
    int[] material_player_unit_ids,
    Action<WebAPI.Response.UnitPreviewInheritance> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/unit/preview_inheritance", new Dictionary<string, object>()
    {
      [nameof (base_player_unit_id)] = (object) base_player_unit_id,
      [nameof (material_player_unit_ids)] = (object) material_player_unit_ids
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.UnitPreviewInheritance) null);
      }
      else
        callback(new WebAPI.Response.UnitPreviewInheritance(json.Json));
    }));
  }

  public static Future<WebAPI.Response.UnitPreviewJob> UnitPreviewJob(
    int base_player_unit_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.UnitPreviewJob>((Func<Promise<WebAPI.Response.UnitPreviewJob>, IEnumerator>) (promise => WebAPI.LoadUnitPreviewJob(promise, base_player_unit_id, userErrorCallback)));
  }

  private static IEnumerator LoadUnitPreviewJob(
    Promise<WebAPI.Response.UnitPreviewJob> promise,
    int base_player_unit_id,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalUnitPreviewJob(base_player_unit_id, (Action<WebAPI.Response.UnitPreviewJob>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalUnitPreviewJob(
    int base_player_unit_id,
    Action<WebAPI.Response.UnitPreviewJob> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/unit/preview_job", new Dictionary<string, object>()
    {
      [nameof (base_player_unit_id)] = (object) base_player_unit_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.UnitPreviewJob) null);
      }
      else
        callback(new WebAPI.Response.UnitPreviewJob(json.Json));
    }));
  }

  public static Future<WebAPI.Response.UnitReleaseFrameOverKillers> UnitReleaseFrameOverKillers(
    int base_player_unit_id,
    int[] material_player_material_unit_ids,
    int number,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.UnitReleaseFrameOverKillers>((Func<Promise<WebAPI.Response.UnitReleaseFrameOverKillers>, IEnumerator>) (promise => WebAPI.LoadUnitReleaseFrameOverKillers(promise, base_player_unit_id, material_player_material_unit_ids, number, userErrorCallback)));
  }

  private static IEnumerator LoadUnitReleaseFrameOverKillers(
    Promise<WebAPI.Response.UnitReleaseFrameOverKillers> promise,
    int base_player_unit_id,
    int[] material_player_material_unit_ids,
    int number,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalUnitReleaseFrameOverKillers(base_player_unit_id, material_player_material_unit_ids, number, (Action<WebAPI.Response.UnitReleaseFrameOverKillers>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalUnitReleaseFrameOverKillers(
    int base_player_unit_id,
    int[] material_player_material_unit_ids,
    int number,
    Action<WebAPI.Response.UnitReleaseFrameOverKillers> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/unit/release_frame_over_killers", new Dictionary<string, object>()
    {
      [nameof (base_player_unit_id)] = (object) base_player_unit_id,
      [nameof (material_player_material_unit_ids)] = (object) material_player_material_unit_ids,
      [nameof (number)] = (object) number
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.UnitReleaseFrameOverKillers) null);
      }
      else
        callback(new WebAPI.Response.UnitReleaseFrameOverKillers(json.Json));
    }));
  }

  public static Future<WebAPI.Response.UnitRemoveOverKillers> UnitRemoveOverKillers(
    int base_player_unit_id,
    int number,
    int over_killers_player_unit_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.UnitRemoveOverKillers>((Func<Promise<WebAPI.Response.UnitRemoveOverKillers>, IEnumerator>) (promise => WebAPI.LoadUnitRemoveOverKillers(promise, base_player_unit_id, number, over_killers_player_unit_id, userErrorCallback)));
  }

  private static IEnumerator LoadUnitRemoveOverKillers(
    Promise<WebAPI.Response.UnitRemoveOverKillers> promise,
    int base_player_unit_id,
    int number,
    int over_killers_player_unit_id,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalUnitRemoveOverKillers(base_player_unit_id, number, over_killers_player_unit_id, (Action<WebAPI.Response.UnitRemoveOverKillers>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalUnitRemoveOverKillers(
    int base_player_unit_id,
    int number,
    int over_killers_player_unit_id,
    Action<WebAPI.Response.UnitRemoveOverKillers> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/unit/remove_over_killers", new Dictionary<string, object>()
    {
      [nameof (base_player_unit_id)] = (object) base_player_unit_id,
      [nameof (number)] = (object) number,
      [nameof (over_killers_player_unit_id)] = (object) over_killers_player_unit_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.UnitRemoveOverKillers) null);
      }
      else
        callback(new WebAPI.Response.UnitRemoveOverKillers(json.Json));
    }));
  }

  public static Future<WebAPI.Response.UnitReservesAdd> UnitReservesAdd(
    int[] player_unit_ids,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.UnitReservesAdd>((Func<Promise<WebAPI.Response.UnitReservesAdd>, IEnumerator>) (promise => WebAPI.LoadUnitReservesAdd(promise, player_unit_ids, userErrorCallback)));
  }

  private static IEnumerator LoadUnitReservesAdd(
    Promise<WebAPI.Response.UnitReservesAdd> promise,
    int[] player_unit_ids,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalUnitReservesAdd(player_unit_ids, (Action<WebAPI.Response.UnitReservesAdd>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalUnitReservesAdd(
    int[] player_unit_ids,
    Action<WebAPI.Response.UnitReservesAdd> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/unit_reserves/add", new Dictionary<string, object>()
    {
      [nameof (player_unit_ids)] = (object) player_unit_ids
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.UnitReservesAdd) null);
      }
      else
        callback(new WebAPI.Response.UnitReservesAdd(json.Json));
    }));
  }

  public static Future<WebAPI.Response.UnitReservesCount> UnitReservesCount(
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.UnitReservesCount>((Func<Promise<WebAPI.Response.UnitReservesCount>, IEnumerator>) (promise => WebAPI.LoadUnitReservesCount(promise, userErrorCallback)));
  }

  private static IEnumerator LoadUnitReservesCount(
    Promise<WebAPI.Response.UnitReservesCount> promise,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalUnitReservesCount((Action<WebAPI.Response.UnitReservesCount>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalUnitReservesCount(
    Action<WebAPI.Response.UnitReservesCount> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Get("/unit_reserves/count", (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.UnitReservesCount) null);
      }
      else
        callback(new WebAPI.Response.UnitReservesCount(json.Json));
    }));
  }

  public static Future<WebAPI.Response.UnitReservesFavorite> UnitReservesFavorite(
    int[] player_unit_ids,
    int[] unlock_player_unit_ids,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.UnitReservesFavorite>((Func<Promise<WebAPI.Response.UnitReservesFavorite>, IEnumerator>) (promise => WebAPI.LoadUnitReservesFavorite(promise, player_unit_ids, unlock_player_unit_ids, userErrorCallback)));
  }

  private static IEnumerator LoadUnitReservesFavorite(
    Promise<WebAPI.Response.UnitReservesFavorite> promise,
    int[] player_unit_ids,
    int[] unlock_player_unit_ids,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalUnitReservesFavorite(player_unit_ids, unlock_player_unit_ids, (Action<WebAPI.Response.UnitReservesFavorite>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalUnitReservesFavorite(
    int[] player_unit_ids,
    int[] unlock_player_unit_ids,
    Action<WebAPI.Response.UnitReservesFavorite> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/unit/reserves/favorite", new Dictionary<string, object>()
    {
      [nameof (player_unit_ids)] = (object) player_unit_ids,
      [nameof (unlock_player_unit_ids)] = (object) unlock_player_unit_ids
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.UnitReservesFavorite) null);
      }
      else
        callback(new WebAPI.Response.UnitReservesFavorite(json.Json));
    }));
  }

  public static Future<WebAPI.Response.UnitReservesIndex> UnitReservesIndex(
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.UnitReservesIndex>((Func<Promise<WebAPI.Response.UnitReservesIndex>, IEnumerator>) (promise => WebAPI.LoadUnitReservesIndex(promise, userErrorCallback)));
  }

  private static IEnumerator LoadUnitReservesIndex(
    Promise<WebAPI.Response.UnitReservesIndex> promise,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalUnitReservesIndex((Action<WebAPI.Response.UnitReservesIndex>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalUnitReservesIndex(
    Action<WebAPI.Response.UnitReservesIndex> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Get("/unit_reserves/index", (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.UnitReservesIndex) null);
      }
      else
        callback(new WebAPI.Response.UnitReservesIndex(json.Json));
    }));
  }

  public static Future<WebAPI.Response.UnitReservesRestore> UnitReservesRestore(
    int[] player_unit_ids,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.UnitReservesRestore>((Func<Promise<WebAPI.Response.UnitReservesRestore>, IEnumerator>) (promise => WebAPI.LoadUnitReservesRestore(promise, player_unit_ids, userErrorCallback)));
  }

  private static IEnumerator LoadUnitReservesRestore(
    Promise<WebAPI.Response.UnitReservesRestore> promise,
    int[] player_unit_ids,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalUnitReservesRestore(player_unit_ids, (Action<WebAPI.Response.UnitReservesRestore>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalUnitReservesRestore(
    int[] player_unit_ids,
    Action<WebAPI.Response.UnitReservesRestore> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/unit_reserves/restore", new Dictionary<string, object>()
    {
      [nameof (player_unit_ids)] = (object) player_unit_ids
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.UnitReservesRestore) null);
      }
      else
        callback(new WebAPI.Response.UnitReservesRestore(json.Json));
    }));
  }

  public static Future<WebAPI.Response.UnitReservesSell> UnitReservesSell(
    int[] player_unit_ids,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.UnitReservesSell>((Func<Promise<WebAPI.Response.UnitReservesSell>, IEnumerator>) (promise => WebAPI.LoadUnitReservesSell(promise, player_unit_ids, userErrorCallback)));
  }

  private static IEnumerator LoadUnitReservesSell(
    Promise<WebAPI.Response.UnitReservesSell> promise,
    int[] player_unit_ids,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalUnitReservesSell(player_unit_ids, (Action<WebAPI.Response.UnitReservesSell>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalUnitReservesSell(
    int[] player_unit_ids,
    Action<WebAPI.Response.UnitReservesSell> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/unit_reserves/sell", new Dictionary<string, object>()
    {
      [nameof (player_unit_ids)] = (object) player_unit_ids
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.UnitReservesSell) null);
      }
      else
        callback(new WebAPI.Response.UnitReservesSell(json.Json));
    }));
  }

  public static Future<WebAPI.Response.UnitSaveJobAbility> UnitSaveJobAbility(
    int base_player_unit_id,
    int job_ability_id,
    int target_level,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.UnitSaveJobAbility>((Func<Promise<WebAPI.Response.UnitSaveJobAbility>, IEnumerator>) (promise => WebAPI.LoadUnitSaveJobAbility(promise, base_player_unit_id, job_ability_id, target_level, userErrorCallback)));
  }

  private static IEnumerator LoadUnitSaveJobAbility(
    Promise<WebAPI.Response.UnitSaveJobAbility> promise,
    int base_player_unit_id,
    int job_ability_id,
    int target_level,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalUnitSaveJobAbility(base_player_unit_id, job_ability_id, target_level, (Action<WebAPI.Response.UnitSaveJobAbility>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalUnitSaveJobAbility(
    int base_player_unit_id,
    int job_ability_id,
    int target_level,
    Action<WebAPI.Response.UnitSaveJobAbility> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/unit/save_job_ability", new Dictionary<string, object>()
    {
      [nameof (base_player_unit_id)] = (object) base_player_unit_id,
      [nameof (job_ability_id)] = (object) job_ability_id,
      [nameof (target_level)] = (object) target_level
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.UnitSaveJobAbility) null);
      }
      else
        callback(new WebAPI.Response.UnitSaveJobAbility(json.Json));
    }));
  }

  public static Future<WebAPI.Response.UnitSaveOverKillers> UnitSaveOverKillers(
    int base_player_unit_id,
    int number,
    int over_killers_player_unit_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.UnitSaveOverKillers>((Func<Promise<WebAPI.Response.UnitSaveOverKillers>, IEnumerator>) (promise => WebAPI.LoadUnitSaveOverKillers(promise, base_player_unit_id, number, over_killers_player_unit_id, userErrorCallback)));
  }

  private static IEnumerator LoadUnitSaveOverKillers(
    Promise<WebAPI.Response.UnitSaveOverKillers> promise,
    int base_player_unit_id,
    int number,
    int over_killers_player_unit_id,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalUnitSaveOverKillers(base_player_unit_id, number, over_killers_player_unit_id, (Action<WebAPI.Response.UnitSaveOverKillers>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalUnitSaveOverKillers(
    int base_player_unit_id,
    int number,
    int over_killers_player_unit_id,
    Action<WebAPI.Response.UnitSaveOverKillers> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/unit/save_over_killers", new Dictionary<string, object>()
    {
      [nameof (base_player_unit_id)] = (object) base_player_unit_id,
      [nameof (number)] = (object) number,
      [nameof (over_killers_player_unit_id)] = (object) over_killers_player_unit_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.UnitSaveOverKillers) null);
      }
      else
        callback(new WebAPI.Response.UnitSaveOverKillers(json.Json));
    }));
  }

  public static Future<WebAPI.Response.UnitSaveTransmigrateMemory> UnitSaveTransmigrateMemory(
    int number,
    int player_unit_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.UnitSaveTransmigrateMemory>((Func<Promise<WebAPI.Response.UnitSaveTransmigrateMemory>, IEnumerator>) (promise => WebAPI.LoadUnitSaveTransmigrateMemory(promise, number, player_unit_id, userErrorCallback)));
  }

  private static IEnumerator LoadUnitSaveTransmigrateMemory(
    Promise<WebAPI.Response.UnitSaveTransmigrateMemory> promise,
    int number,
    int player_unit_id,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalUnitSaveTransmigrateMemory(number, player_unit_id, (Action<WebAPI.Response.UnitSaveTransmigrateMemory>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalUnitSaveTransmigrateMemory(
    int number,
    int player_unit_id,
    Action<WebAPI.Response.UnitSaveTransmigrateMemory> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/unit/save_transmigrate_memory", new Dictionary<string, object>()
    {
      [nameof (number)] = (object) number,
      [nameof (player_unit_id)] = (object) player_unit_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.UnitSaveTransmigrateMemory) null);
      }
      else
        callback(new WebAPI.Response.UnitSaveTransmigrateMemory(json.Json));
    }));
  }

  public static Future<WebAPI.Response.UnitSell> UnitSell(
    int[] player_material_unit_ids,
    int[] player_unit_ids,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.UnitSell>((Func<Promise<WebAPI.Response.UnitSell>, IEnumerator>) (promise => WebAPI.LoadUnitSell(promise, player_material_unit_ids, player_unit_ids, userErrorCallback)));
  }

  private static IEnumerator LoadUnitSell(
    Promise<WebAPI.Response.UnitSell> promise,
    int[] player_material_unit_ids,
    int[] player_unit_ids,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalUnitSell(player_material_unit_ids, player_unit_ids, (Action<WebAPI.Response.UnitSell>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalUnitSell(
    int[] player_material_unit_ids,
    int[] player_unit_ids,
    Action<WebAPI.Response.UnitSell> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/unit/sell", new Dictionary<string, object>()
    {
      [nameof (player_material_unit_ids)] = (object) player_material_unit_ids,
      [nameof (player_unit_ids)] = (object) player_unit_ids
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.UnitSell) null);
      }
      else
        callback(new WebAPI.Response.UnitSell(json.Json));
    }));
  }

  public static Future<WebAPI.Response.UnitTransmigrate> UnitTransmigrate(
    int base_player_unit_id,
    bool is_use_transmigrate_memory,
    int[] material_player_material_unit_ids,
    int[] material_player_unit_ids,
    int pattern_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.UnitTransmigrate>((Func<Promise<WebAPI.Response.UnitTransmigrate>, IEnumerator>) (promise => WebAPI.LoadUnitTransmigrate(promise, base_player_unit_id, is_use_transmigrate_memory, material_player_material_unit_ids, material_player_unit_ids, pattern_id, userErrorCallback)));
  }

  private static IEnumerator LoadUnitTransmigrate(
    Promise<WebAPI.Response.UnitTransmigrate> promise,
    int base_player_unit_id,
    bool is_use_transmigrate_memory,
    int[] material_player_material_unit_ids,
    int[] material_player_unit_ids,
    int pattern_id,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalUnitTransmigrate(base_player_unit_id, is_use_transmigrate_memory, material_player_material_unit_ids, material_player_unit_ids, pattern_id, (Action<WebAPI.Response.UnitTransmigrate>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalUnitTransmigrate(
    int base_player_unit_id,
    bool is_use_transmigrate_memory,
    int[] material_player_material_unit_ids,
    int[] material_player_unit_ids,
    int pattern_id,
    Action<WebAPI.Response.UnitTransmigrate> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/unit/transmigrate", new Dictionary<string, object>()
    {
      [nameof (base_player_unit_id)] = (object) base_player_unit_id,
      [nameof (is_use_transmigrate_memory)] = (object) is_use_transmigrate_memory,
      [nameof (material_player_material_unit_ids)] = (object) material_player_material_unit_ids,
      [nameof (material_player_unit_ids)] = (object) material_player_unit_ids,
      [nameof (pattern_id)] = (object) pattern_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.UnitTransmigrate) null);
      }
      else
        callback(new WebAPI.Response.UnitTransmigrate(json.Json));
    }));
  }

  public static Future<WebAPI.Response.UnitTransmigrateParameter> UnitTransmigrateParameter(
    int base_player_unit_id,
    int pattern_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.UnitTransmigrateParameter>((Func<Promise<WebAPI.Response.UnitTransmigrateParameter>, IEnumerator>) (promise => WebAPI.LoadUnitTransmigrateParameter(promise, base_player_unit_id, pattern_id, userErrorCallback)));
  }

  private static IEnumerator LoadUnitTransmigrateParameter(
    Promise<WebAPI.Response.UnitTransmigrateParameter> promise,
    int base_player_unit_id,
    int pattern_id,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalUnitTransmigrateParameter(base_player_unit_id, pattern_id, (Action<WebAPI.Response.UnitTransmigrateParameter>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalUnitTransmigrateParameter(
    int base_player_unit_id,
    int pattern_id,
    Action<WebAPI.Response.UnitTransmigrateParameter> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/unit/transmigrate-parameter", new Dictionary<string, object>()
    {
      [nameof (base_player_unit_id)] = (object) base_player_unit_id,
      [nameof (pattern_id)] = (object) pattern_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.UnitTransmigrateParameter) null);
      }
      else
        callback(new WebAPI.Response.UnitTransmigrateParameter(json.Json));
    }));
  }

  public static Future<WebAPI.Response.UnittypeticketIndex> UnittypeticketIndex(
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.UnittypeticketIndex>((Func<Promise<WebAPI.Response.UnittypeticketIndex>, IEnumerator>) (promise => WebAPI.LoadUnittypeticketIndex(promise, userErrorCallback)));
  }

  private static IEnumerator LoadUnittypeticketIndex(
    Promise<WebAPI.Response.UnittypeticketIndex> promise,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalUnittypeticketIndex((Action<WebAPI.Response.UnittypeticketIndex>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalUnittypeticketIndex(
    Action<WebAPI.Response.UnittypeticketIndex> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Get("/unittypeticket/index", (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.UnittypeticketIndex) null);
      }
      else
        callback(new WebAPI.Response.UnittypeticketIndex(json.Json));
    }));
  }

  public static Future<WebAPI.Response.UnittypeticketParameter> UnittypeticketParameter(
    int player_unit_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.UnittypeticketParameter>((Func<Promise<WebAPI.Response.UnittypeticketParameter>, IEnumerator>) (promise => WebAPI.LoadUnittypeticketParameter(promise, player_unit_id, userErrorCallback)));
  }

  private static IEnumerator LoadUnittypeticketParameter(
    Promise<WebAPI.Response.UnittypeticketParameter> promise,
    int player_unit_id,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalUnittypeticketParameter(player_unit_id, (Action<WebAPI.Response.UnittypeticketParameter>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalUnittypeticketParameter(
    int player_unit_id,
    Action<WebAPI.Response.UnittypeticketParameter> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/unittypeticket/parameter", new Dictionary<string, object>()
    {
      [nameof (player_unit_id)] = (object) player_unit_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.UnittypeticketParameter) null);
      }
      else
        callback(new WebAPI.Response.UnittypeticketParameter(json.Json));
    }));
  }

  public static Future<WebAPI.Response.UnittypeticketSpend> UnittypeticketSpend(
    int player_unit_id,
    int ticket_id,
    int unit_type_category,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.UnittypeticketSpend>((Func<Promise<WebAPI.Response.UnittypeticketSpend>, IEnumerator>) (promise => WebAPI.LoadUnittypeticketSpend(promise, player_unit_id, ticket_id, unit_type_category, userErrorCallback)));
  }

  private static IEnumerator LoadUnittypeticketSpend(
    Promise<WebAPI.Response.UnittypeticketSpend> promise,
    int player_unit_id,
    int ticket_id,
    int unit_type_category,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalUnittypeticketSpend(player_unit_id, ticket_id, unit_type_category, (Action<WebAPI.Response.UnittypeticketSpend>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalUnittypeticketSpend(
    int player_unit_id,
    int ticket_id,
    int unit_type_category,
    Action<WebAPI.Response.UnittypeticketSpend> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/unittypeticket/spend", new Dictionary<string, object>()
    {
      [nameof (player_unit_id)] = (object) player_unit_id,
      [nameof (ticket_id)] = (object) ticket_id,
      [nameof (unit_type_category)] = (object) unit_type_category
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.UnittypeticketSpend) null);
      }
      else
        callback(new WebAPI.Response.UnittypeticketSpend(json.Json));
    }));
  }

  public static Future<WebAPI.Response.UnitXLevelUp> UnitXLevelUp(
    int base_player_unit_id,
    int[] material_player_material_unit_ids,
    int[] material_player_material_unit_nums,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.UnitXLevelUp>((Func<Promise<WebAPI.Response.UnitXLevelUp>, IEnumerator>) (promise => WebAPI.LoadUnitXLevelUp(promise, base_player_unit_id, material_player_material_unit_ids, material_player_material_unit_nums, userErrorCallback)));
  }

  private static IEnumerator LoadUnitXLevelUp(
    Promise<WebAPI.Response.UnitXLevelUp> promise,
    int base_player_unit_id,
    int[] material_player_material_unit_ids,
    int[] material_player_material_unit_nums,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalUnitXLevelUp(base_player_unit_id, material_player_material_unit_ids, material_player_material_unit_nums, (Action<WebAPI.Response.UnitXLevelUp>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalUnitXLevelUp(
    int base_player_unit_id,
    int[] material_player_material_unit_ids,
    int[] material_player_material_unit_nums,
    Action<WebAPI.Response.UnitXLevelUp> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/unit/x_level_up", new Dictionary<string, object>()
    {
      [nameof (base_player_unit_id)] = (object) base_player_unit_id,
      [nameof (material_player_material_unit_ids)] = (object) material_player_material_unit_ids,
      [nameof (material_player_material_unit_nums)] = (object) material_player_material_unit_nums
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.UnitXLevelUp) null);
      }
      else
        callback(new WebAPI.Response.UnitXLevelUp(json.Json));
    }));
  }

  public static Future<WebAPI.Response.ZeroLoad> ZeroLoad(
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.ZeroLoad>((Func<Promise<WebAPI.Response.ZeroLoad>, IEnumerator>) (promise => WebAPI.LoadZeroLoad(promise, userErrorCallback)));
  }

  private static IEnumerator LoadZeroLoad(
    Promise<WebAPI.Response.ZeroLoad> promise,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalZeroLoad((Action<WebAPI.Response.ZeroLoad>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalZeroLoad(
    Action<WebAPI.Response.ZeroLoad> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Get("/zero/load", (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.ZeroLoad) null);
      }
      else
        callback(new WebAPI.Response.ZeroLoad(json.Json));
    }));
  }

  public static Future<WebAPI.Response.ZeroReset> ZeroReset(
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.ZeroReset>((Func<Promise<WebAPI.Response.ZeroReset>, IEnumerator>) (promise => WebAPI.LoadZeroReset(promise, userErrorCallback)));
  }

  private static IEnumerator LoadZeroReset(
    Promise<WebAPI.Response.ZeroReset> promise,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalZeroReset((Action<WebAPI.Response.ZeroReset>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalZeroReset(
    Action<WebAPI.Response.ZeroReset> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Get("/zero/reset", (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.ZeroReset) null);
      }
      else
        callback(new WebAPI.Response.ZeroReset(json.Json));
    }));
  }

  public static Future<WebAPI.Response.ZeroSave> ZeroSave(
    string player_data,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.ZeroSave>((Func<Promise<WebAPI.Response.ZeroSave>, IEnumerator>) (promise => WebAPI.LoadZeroSave(promise, player_data, userErrorCallback)));
  }

  private static IEnumerator LoadZeroSave(
    Promise<WebAPI.Response.ZeroSave> promise,
    string player_data,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalZeroSave(player_data, (Action<WebAPI.Response.ZeroSave>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalZeroSave(
    string player_data,
    Action<WebAPI.Response.ZeroSave> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/zero/save", new Dictionary<string, object>()
    {
      [nameof (player_data)] = (object) player_data
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.ZeroSave) null);
      }
      else
        callback(new WebAPI.Response.ZeroSave(json.Json));
    }));
  }

  public static Future<WebAPI.Response.ZukanDefeatRewardEnemy> ZukanDefeatRewardEnemy(
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.ZukanDefeatRewardEnemy>((Func<Promise<WebAPI.Response.ZukanDefeatRewardEnemy>, IEnumerator>) (promise => WebAPI.LoadZukanDefeatRewardEnemy(promise, userErrorCallback)));
  }

  private static IEnumerator LoadZukanDefeatRewardEnemy(
    Promise<WebAPI.Response.ZukanDefeatRewardEnemy> promise,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalZukanDefeatRewardEnemy((Action<WebAPI.Response.ZukanDefeatRewardEnemy>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalZukanDefeatRewardEnemy(
    Action<WebAPI.Response.ZukanDefeatRewardEnemy> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Get("/zukan/defeat_reward/enemy", (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.ZukanDefeatRewardEnemy) null);
      }
      else
        callback(new WebAPI.Response.ZukanDefeatRewardEnemy(json.Json));
    }));
  }

  public static Future<WebAPI.Response.ZukanDefeatRewardReceive> ZukanDefeatRewardReceive(
    int defeat_reward_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.ZukanDefeatRewardReceive>((Func<Promise<WebAPI.Response.ZukanDefeatRewardReceive>, IEnumerator>) (promise => WebAPI.LoadZukanDefeatRewardReceive(promise, defeat_reward_id, userErrorCallback)));
  }

  private static IEnumerator LoadZukanDefeatRewardReceive(
    Promise<WebAPI.Response.ZukanDefeatRewardReceive> promise,
    int defeat_reward_id,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalZukanDefeatRewardReceive(defeat_reward_id, (Action<WebAPI.Response.ZukanDefeatRewardReceive>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalZukanDefeatRewardReceive(
    int defeat_reward_id,
    Action<WebAPI.Response.ZukanDefeatRewardReceive> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/zukan/defeat_reward/receive", new Dictionary<string, object>()
    {
      [nameof (defeat_reward_id)] = (object) defeat_reward_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.ZukanDefeatRewardReceive) null);
      }
      else
        callback(new WebAPI.Response.ZukanDefeatRewardReceive(json.Json));
    }));
  }

  public static Future<WebAPI.Response.ZukanEnemy> ZukanEnemy(
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.ZukanEnemy>((Func<Promise<WebAPI.Response.ZukanEnemy>, IEnumerator>) (promise => WebAPI.LoadZukanEnemy(promise, userErrorCallback)));
  }

  private static IEnumerator LoadZukanEnemy(
    Promise<WebAPI.Response.ZukanEnemy> promise,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalZukanEnemy((Action<WebAPI.Response.ZukanEnemy>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalZukanEnemy(
    Action<WebAPI.Response.ZukanEnemy> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Get("/zukan/enemy", (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.ZukanEnemy) null);
      }
      else
        callback(new WebAPI.Response.ZukanEnemy(json.Json));
    }));
  }

  public static Future<WebAPI.Response.ZukanGear> ZukanGear(
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.ZukanGear>((Func<Promise<WebAPI.Response.ZukanGear>, IEnumerator>) (promise => WebAPI.LoadZukanGear(promise, userErrorCallback)));
  }

  private static IEnumerator LoadZukanGear(
    Promise<WebAPI.Response.ZukanGear> promise,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalZukanGear((Action<WebAPI.Response.ZukanGear>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalZukanGear(
    Action<WebAPI.Response.ZukanGear> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Get("/zukan/gear", (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.ZukanGear) null);
      }
      else
        callback(new WebAPI.Response.ZukanGear(json.Json));
    }));
  }

  public static Future<WebAPI.Response.ZukanUnit> ZukanUnit(
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.ZukanUnit>((Func<Promise<WebAPI.Response.ZukanUnit>, IEnumerator>) (promise => WebAPI.LoadZukanUnit(promise, userErrorCallback)));
  }

  private static IEnumerator LoadZukanUnit(
    Promise<WebAPI.Response.ZukanUnit> promise,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalZukanUnit((Action<WebAPI.Response.ZukanUnit>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalZukanUnit(
    Action<WebAPI.Response.ZukanUnit> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Get("/zukan/unit", (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.ZukanUnit) null);
      }
      else
        callback(new WebAPI.Response.ZukanUnit(json.Json));
    }));
  }

  public static Future<WebAPI.Response.GuildlogAutoupdate> SilentGuildlogAutoupdate(
    string current_log_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.GuildlogAutoupdate>((Func<Promise<WebAPI.Response.GuildlogAutoupdate>, IEnumerator>) (promise => WebAPI.SilentLoadGuildlogAutoupdate(promise, current_log_id, userErrorCallback)));
  }

  private static IEnumerator SilentLoadGuildlogAutoupdate(
    Promise<WebAPI.Response.GuildlogAutoupdate> promise,
    string current_log_id,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.SilentInternalGuildlogAutoupdate(current_log_id, (Action<WebAPI.Response.GuildlogAutoupdate>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void SilentInternalGuildlogAutoupdate(
    string current_log_id,
    Action<WebAPI.Response.GuildlogAutoupdate> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.SilentPost("/guildlog/autoupdate", new Dictionary<string, object>()
    {
      [nameof (current_log_id)] = (object) current_log_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GuildlogAutoupdate) null);
      }
      else
        callback(new WebAPI.Response.GuildlogAutoupdate(json.Json));
    }));
  }

  public static Future<WebAPI.Response.GuildlogSendStamp> SilentGuildlogSendStamp(
    int stamp_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.GuildlogSendStamp>((Func<Promise<WebAPI.Response.GuildlogSendStamp>, IEnumerator>) (promise => WebAPI.SilentLoadGuildlogSendStamp(promise, stamp_id, userErrorCallback)));
  }

  private static IEnumerator SilentLoadGuildlogSendStamp(
    Promise<WebAPI.Response.GuildlogSendStamp> promise,
    int stamp_id,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.SilentInternalGuildlogSendStamp(stamp_id, (Action<WebAPI.Response.GuildlogSendStamp>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void SilentInternalGuildlogSendStamp(
    int stamp_id,
    Action<WebAPI.Response.GuildlogSendStamp> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.SilentPost("/guildlog/send/stamp", new Dictionary<string, object>()
    {
      [nameof (stamp_id)] = (object) stamp_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GuildlogSendStamp) null);
      }
      else
        callback(new WebAPI.Response.GuildlogSendStamp(json.Json));
    }));
  }

  public static Future<WebAPI.Response.GuildlogShowPast> SilentGuildlogShowPast(
    string oldest_log_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.GuildlogShowPast>((Func<Promise<WebAPI.Response.GuildlogShowPast>, IEnumerator>) (promise => WebAPI.SilentLoadGuildlogShowPast(promise, oldest_log_id, userErrorCallback)));
  }

  private static IEnumerator SilentLoadGuildlogShowPast(
    Promise<WebAPI.Response.GuildlogShowPast> promise,
    string oldest_log_id,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.SilentInternalGuildlogShowPast(oldest_log_id, (Action<WebAPI.Response.GuildlogShowPast>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void SilentInternalGuildlogShowPast(
    string oldest_log_id,
    Action<WebAPI.Response.GuildlogShowPast> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.SilentPost("/guildlog/show/past", new Dictionary<string, object>()
    {
      [nameof (oldest_log_id)] = (object) oldest_log_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GuildlogShowPast) null);
      }
      else
        callback(new WebAPI.Response.GuildlogShowPast(json.Json));
    }));
  }

  public static Future<WebAPI.Response.GuildlogWrite> SilentGuildlogWrite(
    string log_text,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.GuildlogWrite>((Func<Promise<WebAPI.Response.GuildlogWrite>, IEnumerator>) (promise => WebAPI.SilentLoadGuildlogWrite(promise, log_text, userErrorCallback)));
  }

  private static IEnumerator SilentLoadGuildlogWrite(
    Promise<WebAPI.Response.GuildlogWrite> promise,
    string log_text,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.SilentInternalGuildlogWrite(log_text, (Action<WebAPI.Response.GuildlogWrite>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void SilentInternalGuildlogWrite(
    string log_text,
    Action<WebAPI.Response.GuildlogWrite> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.SilentPost("/guildlog/write", new Dictionary<string, object>()
    {
      [nameof (log_text)] = (object) log_text
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GuildlogWrite) null);
      }
      else
        callback(new WebAPI.Response.GuildlogWrite(json.Json));
    }));
  }

  public static Future<WebAPI.Response.HomeStartUp2> HomeStartUp2Hotdeal(
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.HomeStartUp2>((Func<Promise<WebAPI.Response.HomeStartUp2>, IEnumerator>) (promise => WebAPI.LoadHomeStartUp2Hotdeal(promise, userErrorCallback)));
  }

  private static IEnumerator LoadHomeStartUp2Hotdeal(
    Promise<WebAPI.Response.HomeStartUp2> promise,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalHomeStartUp2Hotdeal((Action<WebAPI.Response.HomeStartUp2>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalHomeStartUp2Hotdeal(
    Action<WebAPI.Response.HomeStartUp2> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Get("/home/start_up2?hotdeal", (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.HomeStartUp2) null);
      }
      else
        callback(new WebAPI.Response.HomeStartUp2(json.Json));
    }));
  }

  public static bool IsResponsedAtContainsKey(string methodName)
  {
    return WebAPI.latestResponsedAt.ContainsKey(methodName);
  }

  public static bool IsResponsedAtRecent(string methodName, double thresholdSeconds = 60.0)
  {
    return WebAPI.latestResponsedAt.ContainsKey(methodName) && (DateTime.Now - WebAPI.latestResponsedAt[methodName]).TotalSeconds <= thresholdSeconds;
  }

  public static void SetLatestResponsedAt(string methodName)
  {
    WebAPI.latestResponsedAt[methodName] = DateTime.Now;
  }

  public static WebAPI.Response.PlayerBootRelease LastPlayerBoot { get; private set; }

  public static Future<WebAPI.Response.PlayerBootRelease> PlayerBoot(
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return WebAPI.PlayerBootRelease(Revision.ApplicationVersion, userErrorCallback).Then<WebAPI.Response.PlayerBootRelease>((Func<WebAPI.Response.PlayerBootRelease, WebAPI.Response.PlayerBootRelease>) (x =>
    {
      WebAPI.LastPlayerBoot = x;
      return x;
    }));
  }

  public static Future<T> PunitiveExpeditionEventTop<T>(
    string url,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<T>((Func<Promise<T>, IEnumerator>) (promise => WebAPI.LoadPunitiveExpeditionEventTop<T>(promise, url, userErrorCallback)));
  }

  private static IEnumerator LoadPunitiveExpeditionEventTop<T>(
    Promise<T> promise,
    string url,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebAPI.InternalPunitiveExpeditionEventTop<T>(url, (Action<T>) (result => promise.Result = result), userErrorCallback);
    while (!promise.HasResult)
      yield return (object) null;
  }

  private static void InternalPunitiveExpeditionEventTop<T>(
    string url,
    Action<T> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    Dictionary<string, object> post = new Dictionary<string, object>();
    WebQueue.Post(url, post, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        ((Action<T>) callback)((T) typeof (T).GetConstructor(new System.Type[1]
        {
          typeof (Dictionary<string, object>)
        }).Invoke(new object[1]));
      }
      else
        ((Action<T>) callback)((T) typeof (T).GetConstructor(new System.Type[1]
        {
          typeof (Dictionary<string, object>)
        }).Invoke(new object[1]{ (object) json.Json }));
    }));
  }

  private static void defaultUserErrorCallback(WebAPI.Response.UserError error)
  {
    throw new Exception(error.Reason);
  }

  public class Response
  {
    [Serializable]
    public class BattleWaveFinish : KeyCompare
    {
      public PlayerCharacterIntimate[] player_character_intimates;
      public PlayerUnit[] player_units;
      public PlayerMaterialUnit[] player_material_units;
      public PlayerItem[] player_items;
      public PlayerMissionHistory[] player_mission_histories;
      public Player player;
      public QuestScoreBonusTimetable[] questscore_bonus_timetable;
      public BattleEnd battle_finish;
      public PlayerPresent[] player_presents;

      public BattleWaveFinish()
      {
      }

      public BattleWaveFinish(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerCharacterIntimate> characterIntimateList = new List<PlayerCharacterIntimate>();
        foreach (object json1 in (List<object>) json[nameof (player_character_intimates)])
          characterIntimateList.Add(json1 == null ? (PlayerCharacterIntimate) null : new PlayerCharacterIntimate((Dictionary<string, object>) json1));
        this.player_character_intimates = characterIntimateList.ToArray();
        SMManager.UpdateList<PlayerCharacterIntimate>(this.player_character_intimates);
        List<PlayerUnit> playerUnitList = new List<PlayerUnit>();
        foreach (object json2 in (List<object>) json[nameof (player_units)])
          playerUnitList.Add(json2 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json2));
        this.player_units = playerUnitList.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_units);
        List<PlayerMaterialUnit> playerMaterialUnitList = new List<PlayerMaterialUnit>();
        foreach (object json3 in (List<object>) json[nameof (player_material_units)])
          playerMaterialUnitList.Add(json3 == null ? (PlayerMaterialUnit) null : new PlayerMaterialUnit((Dictionary<string, object>) json3));
        this.player_material_units = playerMaterialUnitList.ToArray();
        SMManager.UpdateList<PlayerMaterialUnit>(this.player_material_units);
        List<PlayerItem> playerItemList = new List<PlayerItem>();
        foreach (object json4 in (List<object>) json[nameof (player_items)])
          playerItemList.Add(json4 == null ? (PlayerItem) null : new PlayerItem((Dictionary<string, object>) json4));
        this.player_items = playerItemList.ToArray();
        SMManager.UpdateList<PlayerItem>(this.player_items);
        List<PlayerMissionHistory> playerMissionHistoryList = new List<PlayerMissionHistory>();
        foreach (object json5 in (List<object>) json[nameof (player_mission_histories)])
          playerMissionHistoryList.Add(json5 == null ? (PlayerMissionHistory) null : new PlayerMissionHistory((Dictionary<string, object>) json5));
        this.player_mission_histories = playerMissionHistoryList.ToArray();
        SMManager.UpdateList<PlayerMissionHistory>(this.player_mission_histories);
        this.player = json[nameof (player)] == null ? (Player) null : new Player((Dictionary<string, object>) json[nameof (player)]);
        SMManager.Change<Player>(this.player);
        List<QuestScoreBonusTimetable> scoreBonusTimetableList = new List<QuestScoreBonusTimetable>();
        foreach (object json6 in (List<object>) json[nameof (questscore_bonus_timetable)])
          scoreBonusTimetableList.Add(json6 == null ? (QuestScoreBonusTimetable) null : new QuestScoreBonusTimetable((Dictionary<string, object>) json6));
        this.questscore_bonus_timetable = scoreBonusTimetableList.ToArray();
        SMManager.UpdateList<QuestScoreBonusTimetable>(this.questscore_bonus_timetable);
        this.battle_finish = json[nameof (battle_finish)] == null ? (BattleEnd) null : new BattleEnd((Dictionary<string, object>) json[nameof (battle_finish)]);
        SMManager.Change<BattleEnd>(this.battle_finish);
        List<PlayerPresent> playerPresentList = new List<PlayerPresent>();
        foreach (object json7 in (List<object>) json[nameof (player_presents)])
          playerPresentList.Add(json7 == null ? (PlayerPresent) null : new PlayerPresent((Dictionary<string, object>) json7));
        this.player_presents = playerPresentList.ToArray();
        SMManager.UpdateList<PlayerPresent>(this.player_presents);
        if (json.ContainsKey("player_presents:delete"))
          SMManager.DeleteList<PlayerPresent>(((IEnumerable<object>) json["player_presents:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
        if (!json.ContainsKey("player_items:delete"))
          return;
        SMManager.DeleteList<PlayerItem>(((IEnumerable<object>) json["player_items:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class AchievementApiAuth : KeyCompare
    {
      public string auth_url;
      public int auth_status;

      public AchievementApiAuth()
      {
      }

      public AchievementApiAuth(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.auth_url = (string) json[nameof (auth_url)];
        this.auth_status = (int) (long) json[nameof (auth_status)];
      }
    }

    [Serializable]
    public class Agreement : KeyCompare
    {
      public string agreement_title;
      public string not_agreement_title;
      public string agreement_header;
      public string agreement;
      public string not_agreement;

      public Agreement()
      {
      }

      public Agreement(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.agreement_title = (string) json[nameof (agreement_title)];
        this.not_agreement_title = (string) json[nameof (not_agreement_title)];
        this.agreement_header = (string) json[nameof (agreement_header)];
        this.agreement = (string) json[nameof (agreement)];
        this.not_agreement = (string) json[nameof (not_agreement)];
      }
    }

    [Serializable]
    public class AwakeSkillEquip : KeyCompare
    {
      public PlayerUnit[] player_units;

      public AwakeSkillEquip()
      {
      }

      public AwakeSkillEquip(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerUnit> playerUnitList = new List<PlayerUnit>();
        foreach (object json1 in (List<object>) json[nameof (player_units)])
          playerUnitList.Add(json1 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json1));
        this.player_units = playerUnitList.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_units);
      }
    }

    [Serializable]
    public class AwakeSkillFavorite : KeyCompare
    {
      public PlayerAwakeSkill[] player_awake_skills;

      public AwakeSkillFavorite()
      {
      }

      public AwakeSkillFavorite(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerAwakeSkill> playerAwakeSkillList = new List<PlayerAwakeSkill>();
        foreach (object json1 in (List<object>) json[nameof (player_awake_skills)])
          playerAwakeSkillList.Add(json1 == null ? (PlayerAwakeSkill) null : new PlayerAwakeSkill((Dictionary<string, object>) json1));
        this.player_awake_skills = playerAwakeSkillList.ToArray();
        SMManager.UpdateList<PlayerAwakeSkill>(this.player_awake_skills);
      }
    }

    [Serializable]
    public class BattleCharacterFinish : KeyCompare
    {
      public PlayerMaterialGear[] player_material_gears;
      public PlayerCharacterIntimate[] player_character_intimates;
      public PlayerUnit[] player_units;
      public PlayerUnitTypeTicket[] player_unit_type_tickets;
      public PlayerItem[] player_items;
      public PlayerMissionHistory[] player_mission_histories;
      public Player player;
      public QuestScoreBonusTimetable[] questscore_bonus_timetable;
      public BattleEnd battle_finish;
      public PlayerAwakeSkill[] player_awake_skills;
      public PlayerMaterialUnit[] player_material_units;
      public PlayerPresent[] player_presents;
      public PlayerQuestKey[] player_quest_keys;

      public BattleCharacterFinish()
      {
      }

      public BattleCharacterFinish(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerMaterialGear> playerMaterialGearList = new List<PlayerMaterialGear>();
        foreach (object json1 in (List<object>) json[nameof (player_material_gears)])
          playerMaterialGearList.Add(json1 == null ? (PlayerMaterialGear) null : new PlayerMaterialGear((Dictionary<string, object>) json1));
        this.player_material_gears = playerMaterialGearList.ToArray();
        SMManager.UpdateList<PlayerMaterialGear>(this.player_material_gears);
        List<PlayerCharacterIntimate> characterIntimateList = new List<PlayerCharacterIntimate>();
        foreach (object json2 in (List<object>) json[nameof (player_character_intimates)])
          characterIntimateList.Add(json2 == null ? (PlayerCharacterIntimate) null : new PlayerCharacterIntimate((Dictionary<string, object>) json2));
        this.player_character_intimates = characterIntimateList.ToArray();
        SMManager.UpdateList<PlayerCharacterIntimate>(this.player_character_intimates);
        List<PlayerUnit> playerUnitList = new List<PlayerUnit>();
        foreach (object json3 in (List<object>) json[nameof (player_units)])
          playerUnitList.Add(json3 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json3));
        this.player_units = playerUnitList.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_units);
        List<PlayerUnitTypeTicket> playerUnitTypeTicketList = new List<PlayerUnitTypeTicket>();
        foreach (object json4 in (List<object>) json[nameof (player_unit_type_tickets)])
          playerUnitTypeTicketList.Add(json4 == null ? (PlayerUnitTypeTicket) null : new PlayerUnitTypeTicket((Dictionary<string, object>) json4));
        this.player_unit_type_tickets = playerUnitTypeTicketList.ToArray();
        SMManager.UpdateList<PlayerUnitTypeTicket>(this.player_unit_type_tickets);
        List<PlayerItem> playerItemList = new List<PlayerItem>();
        foreach (object json5 in (List<object>) json[nameof (player_items)])
          playerItemList.Add(json5 == null ? (PlayerItem) null : new PlayerItem((Dictionary<string, object>) json5));
        this.player_items = playerItemList.ToArray();
        SMManager.UpdateList<PlayerItem>(this.player_items);
        List<PlayerMissionHistory> playerMissionHistoryList = new List<PlayerMissionHistory>();
        foreach (object json6 in (List<object>) json[nameof (player_mission_histories)])
          playerMissionHistoryList.Add(json6 == null ? (PlayerMissionHistory) null : new PlayerMissionHistory((Dictionary<string, object>) json6));
        this.player_mission_histories = playerMissionHistoryList.ToArray();
        SMManager.UpdateList<PlayerMissionHistory>(this.player_mission_histories);
        this.player = json[nameof (player)] == null ? (Player) null : new Player((Dictionary<string, object>) json[nameof (player)]);
        SMManager.Change<Player>(this.player);
        List<QuestScoreBonusTimetable> scoreBonusTimetableList = new List<QuestScoreBonusTimetable>();
        foreach (object json7 in (List<object>) json[nameof (questscore_bonus_timetable)])
          scoreBonusTimetableList.Add(json7 == null ? (QuestScoreBonusTimetable) null : new QuestScoreBonusTimetable((Dictionary<string, object>) json7));
        this.questscore_bonus_timetable = scoreBonusTimetableList.ToArray();
        SMManager.UpdateList<QuestScoreBonusTimetable>(this.questscore_bonus_timetable);
        this.battle_finish = json[nameof (battle_finish)] == null ? (BattleEnd) null : new BattleEnd((Dictionary<string, object>) json[nameof (battle_finish)]);
        SMManager.Change<BattleEnd>(this.battle_finish);
        List<PlayerAwakeSkill> playerAwakeSkillList = new List<PlayerAwakeSkill>();
        foreach (object json8 in (List<object>) json[nameof (player_awake_skills)])
          playerAwakeSkillList.Add(json8 == null ? (PlayerAwakeSkill) null : new PlayerAwakeSkill((Dictionary<string, object>) json8));
        this.player_awake_skills = playerAwakeSkillList.ToArray();
        SMManager.UpdateList<PlayerAwakeSkill>(this.player_awake_skills);
        List<PlayerMaterialUnit> playerMaterialUnitList = new List<PlayerMaterialUnit>();
        foreach (object json9 in (List<object>) json[nameof (player_material_units)])
          playerMaterialUnitList.Add(json9 == null ? (PlayerMaterialUnit) null : new PlayerMaterialUnit((Dictionary<string, object>) json9));
        this.player_material_units = playerMaterialUnitList.ToArray();
        SMManager.UpdateList<PlayerMaterialUnit>(this.player_material_units);
        List<PlayerPresent> playerPresentList = new List<PlayerPresent>();
        foreach (object json10 in (List<object>) json[nameof (player_presents)])
          playerPresentList.Add(json10 == null ? (PlayerPresent) null : new PlayerPresent((Dictionary<string, object>) json10));
        this.player_presents = playerPresentList.ToArray();
        SMManager.UpdateList<PlayerPresent>(this.player_presents);
        List<PlayerQuestKey> playerQuestKeyList = new List<PlayerQuestKey>();
        foreach (object json11 in (List<object>) json[nameof (player_quest_keys)])
          playerQuestKeyList.Add(json11 == null ? (PlayerQuestKey) null : new PlayerQuestKey((Dictionary<string, object>) json11));
        this.player_quest_keys = playerQuestKeyList.ToArray();
        SMManager.UpdateList<PlayerQuestKey>(this.player_quest_keys);
        if (json.ContainsKey("player_material_gears:delete"))
          SMManager.DeleteList<PlayerMaterialGear>(((IEnumerable<object>) json["player_material_gears:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
        if (json.ContainsKey("player_presents:delete"))
          SMManager.DeleteList<PlayerPresent>(((IEnumerable<object>) json["player_presents:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
        if (!json.ContainsKey("player_items:delete"))
          return;
        SMManager.DeleteList<PlayerItem>(((IEnumerable<object>) json["player_items:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class BattleCharacterQuestDetail : KeyCompare
    {
      public WebAPI.Response.BattleCharacterQuestDetailDrop_items[] drop_items;
      public bool drop_info_display_flag;
      public WebAPI.Response.BattleCharacterQuestDetailEnemy_info_list enemy_info_list;
      public string quest_name;
      public string recommend_strength;

      public BattleCharacterQuestDetail()
      {
      }

      public BattleCharacterQuestDetail(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<WebAPI.Response.BattleCharacterQuestDetailDrop_items> questDetailDropItemsList = new List<WebAPI.Response.BattleCharacterQuestDetailDrop_items>();
        foreach (object json1 in (List<object>) json[nameof (drop_items)])
          questDetailDropItemsList.Add(json1 == null ? (WebAPI.Response.BattleCharacterQuestDetailDrop_items) null : new WebAPI.Response.BattleCharacterQuestDetailDrop_items((Dictionary<string, object>) json1));
        this.drop_items = questDetailDropItemsList.ToArray();
        this.drop_info_display_flag = (bool) json[nameof (drop_info_display_flag)];
        this.enemy_info_list = json[nameof (enemy_info_list)] == null ? (WebAPI.Response.BattleCharacterQuestDetailEnemy_info_list) null : new WebAPI.Response.BattleCharacterQuestDetailEnemy_info_list((Dictionary<string, object>) json[nameof (enemy_info_list)]);
        this.quest_name = (string) json[nameof (quest_name)];
        this.recommend_strength = (string) json[nameof (recommend_strength)];
      }
    }

    [Serializable]
    public class BattleCharacterQuestDetailEnemy_info_list : KeyCompare
    {
      public WebAPI.Response.BattleCharacterQuestDetailEnemy_info_listUnit_list[] unit_list;
      public int[] kind_ids;

      public BattleCharacterQuestDetailEnemy_info_list()
      {
      }

      public BattleCharacterQuestDetailEnemy_info_list(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<WebAPI.Response.BattleCharacterQuestDetailEnemy_info_listUnit_list> infoListUnitListList = new List<WebAPI.Response.BattleCharacterQuestDetailEnemy_info_listUnit_list>();
        foreach (object json1 in (List<object>) json[nameof (unit_list)])
          infoListUnitListList.Add(json1 == null ? (WebAPI.Response.BattleCharacterQuestDetailEnemy_info_listUnit_list) null : new WebAPI.Response.BattleCharacterQuestDetailEnemy_info_listUnit_list((Dictionary<string, object>) json1));
        this.unit_list = infoListUnitListList.ToArray();
        this.kind_ids = ((IEnumerable<object>) json[nameof (kind_ids)]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).ToArray<int>();
      }
    }

    [Serializable]
    public class BattleCharacterQuestDetailEnemy_info_listUnit_list : KeyCompare
    {
      public int[] skill_ids;
      public WebAPI.Response.BattleCharacterQuestDetailEnemy_info_listUnit_listGear gear;
      public int unit_id;

      public BattleCharacterQuestDetailEnemy_info_listUnit_list()
      {
      }

      public BattleCharacterQuestDetailEnemy_info_listUnit_list(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.skill_ids = ((IEnumerable<object>) json[nameof (skill_ids)]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).ToArray<int>();
        this.gear = json[nameof (gear)] == null ? (WebAPI.Response.BattleCharacterQuestDetailEnemy_info_listUnit_listGear) null : new WebAPI.Response.BattleCharacterQuestDetailEnemy_info_listUnit_listGear((Dictionary<string, object>) json[nameof (gear)]);
        this.unit_id = (int) (long) json[nameof (unit_id)];
      }
    }

    [Serializable]
    public class BattleCharacterQuestDetailEnemy_info_listUnit_listGear : KeyCompare
    {
      public int gear_id;
      public int rank;

      public BattleCharacterQuestDetailEnemy_info_listUnit_listGear()
      {
      }

      public BattleCharacterQuestDetailEnemy_info_listUnit_listGear(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.gear_id = (int) (long) json[nameof (gear_id)];
        this.rank = (int) (long) json[nameof (rank)];
      }
    }

    [Serializable]
    public class BattleCharacterQuestDetailDrop_items : KeyCompare
    {
      public int reward_quantity;
      public int id;
      public int reward_id;
      public int reward_type_id;

      public BattleCharacterQuestDetailDrop_items()
      {
      }

      public BattleCharacterQuestDetailDrop_items(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_quantity = (int) (long) json[nameof (reward_quantity)];
        this.id = (int) (long) json[nameof (id)];
        this.reward_id = (int) (long) json[nameof (reward_id)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
      }
    }

    [Serializable]
    public class BattleCharacterStart : KeyCompare
    {
      public WebAPI.Response.BattleCharacterStartPanel_item[] panel_item;
      public Player player;
      public int quest_type;
      public WebAPI.Response.BattleCharacterStartUser_deck_enemy_item[] user_deck_enemy_item;
      public PlayerItem[] helper_player_gears;
      public PlayerUnit[] helper_player_unit_over_killers;
      public PlayerUnit[] helper_player_units;
      public string support_player_id;
      public int quest_loop_count;
      public PlayerItem[] user_deck_gears;
      public WebAPI.Response.BattleCharacterStartEnemy_item[] enemy_item;
      public int player_unit_id;
      public int deck_type_id;
      public bool battle_start;
      public string battle_uuid;
      public PlayerAwakeSkill[] helper_player_awake_skills;
      public int support_player_unit_id;
      public int[] user_deck_enemy;
      public PlayerUnit[] user_deck_units;
      public int[] panel;
      public int[] enemy;
      public PlayerGearReisouSchema[] helper_player_reisou_gears;
      public int[] guest_ids;
      public PlayerHelper[] helpers;
      public int deck_number;
      public int quest_s_id;

      public BattleCharacterStart()
      {
      }

      public BattleCharacterStart(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<WebAPI.Response.BattleCharacterStartPanel_item> characterStartPanelItemList = new List<WebAPI.Response.BattleCharacterStartPanel_item>();
        foreach (object json1 in (List<object>) json[nameof (panel_item)])
          characterStartPanelItemList.Add(json1 == null ? (WebAPI.Response.BattleCharacterStartPanel_item) null : new WebAPI.Response.BattleCharacterStartPanel_item((Dictionary<string, object>) json1));
        this.panel_item = characterStartPanelItemList.ToArray();
        this.player = json[nameof (player)] == null ? (Player) null : new Player((Dictionary<string, object>) json[nameof (player)]);
        SMManager.Change<Player>(this.player);
        this.quest_type = (int) (long) json[nameof (quest_type)];
        List<WebAPI.Response.BattleCharacterStartUser_deck_enemy_item> userDeckEnemyItemList = new List<WebAPI.Response.BattleCharacterStartUser_deck_enemy_item>();
        foreach (object json2 in (List<object>) json[nameof (user_deck_enemy_item)])
          userDeckEnemyItemList.Add(json2 == null ? (WebAPI.Response.BattleCharacterStartUser_deck_enemy_item) null : new WebAPI.Response.BattleCharacterStartUser_deck_enemy_item((Dictionary<string, object>) json2));
        this.user_deck_enemy_item = userDeckEnemyItemList.ToArray();
        List<PlayerItem> playerItemList1 = new List<PlayerItem>();
        foreach (object json3 in (List<object>) json[nameof (helper_player_gears)])
          playerItemList1.Add(json3 == null ? (PlayerItem) null : new PlayerItem((Dictionary<string, object>) json3));
        this.helper_player_gears = playerItemList1.ToArray();
        List<PlayerUnit> playerUnitList1 = new List<PlayerUnit>();
        foreach (object json4 in (List<object>) json[nameof (helper_player_unit_over_killers)])
          playerUnitList1.Add(json4 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json4));
        this.helper_player_unit_over_killers = playerUnitList1.ToArray();
        List<PlayerUnit> playerUnitList2 = new List<PlayerUnit>();
        foreach (object json5 in (List<object>) json[nameof (helper_player_units)])
          playerUnitList2.Add(json5 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json5));
        this.helper_player_units = playerUnitList2.ToArray();
        this.support_player_id = json[nameof (support_player_id)] == null ? (string) null : (string) json[nameof (support_player_id)];
        this.quest_loop_count = (int) (long) json[nameof (quest_loop_count)];
        List<PlayerItem> playerItemList2 = new List<PlayerItem>();
        foreach (object json6 in (List<object>) json[nameof (user_deck_gears)])
          playerItemList2.Add(json6 == null ? (PlayerItem) null : new PlayerItem((Dictionary<string, object>) json6));
        this.user_deck_gears = playerItemList2.ToArray();
        List<WebAPI.Response.BattleCharacterStartEnemy_item> characterStartEnemyItemList = new List<WebAPI.Response.BattleCharacterStartEnemy_item>();
        foreach (object json7 in (List<object>) json[nameof (enemy_item)])
          characterStartEnemyItemList.Add(json7 == null ? (WebAPI.Response.BattleCharacterStartEnemy_item) null : new WebAPI.Response.BattleCharacterStartEnemy_item((Dictionary<string, object>) json7));
        this.enemy_item = characterStartEnemyItemList.ToArray();
        this.player_unit_id = (int) (long) json[nameof (player_unit_id)];
        this.deck_type_id = (int) (long) json[nameof (deck_type_id)];
        this.battle_start = (bool) json[nameof (battle_start)];
        this.battle_uuid = (string) json[nameof (battle_uuid)];
        List<PlayerAwakeSkill> playerAwakeSkillList = new List<PlayerAwakeSkill>();
        foreach (object json8 in (List<object>) json[nameof (helper_player_awake_skills)])
          playerAwakeSkillList.Add(json8 == null ? (PlayerAwakeSkill) null : new PlayerAwakeSkill((Dictionary<string, object>) json8));
        this.helper_player_awake_skills = playerAwakeSkillList.ToArray();
        this.support_player_unit_id = (int) (long) json[nameof (support_player_unit_id)];
        this.user_deck_enemy = ((IEnumerable<object>) json[nameof (user_deck_enemy)]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).ToArray<int>();
        List<PlayerUnit> playerUnitList3 = new List<PlayerUnit>();
        foreach (object json9 in (List<object>) json[nameof (user_deck_units)])
          playerUnitList3.Add(json9 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json9));
        this.user_deck_units = playerUnitList3.ToArray();
        this.panel = ((IEnumerable<object>) json[nameof (panel)]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).ToArray<int>();
        this.enemy = ((IEnumerable<object>) json[nameof (enemy)]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).ToArray<int>();
        List<PlayerGearReisouSchema> gearReisouSchemaList = new List<PlayerGearReisouSchema>();
        foreach (object json10 in (List<object>) json[nameof (helper_player_reisou_gears)])
          gearReisouSchemaList.Add(json10 == null ? (PlayerGearReisouSchema) null : new PlayerGearReisouSchema((Dictionary<string, object>) json10));
        this.helper_player_reisou_gears = gearReisouSchemaList.ToArray();
        this.guest_ids = ((IEnumerable<object>) json[nameof (guest_ids)]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).ToArray<int>();
        List<PlayerHelper> playerHelperList = new List<PlayerHelper>();
        foreach (object json11 in (List<object>) json[nameof (helpers)])
          playerHelperList.Add(json11 == null ? (PlayerHelper) null : new PlayerHelper((Dictionary<string, object>) json11));
        this.helpers = playerHelperList.ToArray();
        this.deck_number = (int) (long) json[nameof (deck_number)];
        this.quest_s_id = (int) (long) json[nameof (quest_s_id)];
      }
    }

    [Serializable]
    public class BattleCharacterStartEnemy_item : KeyCompare
    {
      public int reward_quantity;
      public int id;
      public int reward_id;
      public int reward_type_id;

      public BattleCharacterStartEnemy_item()
      {
      }

      public BattleCharacterStartEnemy_item(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_quantity = (int) (long) json[nameof (reward_quantity)];
        this.id = (int) (long) json[nameof (id)];
        this.reward_id = (int) (long) json[nameof (reward_id)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
      }
    }

    [Serializable]
    public class BattleCharacterStartUser_deck_enemy_item : KeyCompare
    {
      public int reward_quantity;
      public int id;
      public int reward_id;
      public int reward_type_id;

      public BattleCharacterStartUser_deck_enemy_item()
      {
      }

      public BattleCharacterStartUser_deck_enemy_item(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_quantity = (int) (long) json[nameof (reward_quantity)];
        this.id = (int) (long) json[nameof (id)];
        this.reward_id = (int) (long) json[nameof (reward_id)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
      }
    }

    [Serializable]
    public class BattleCharacterStartPanel_item : KeyCompare
    {
      public int reward_quantity;
      public int id;
      public int reward_id;
      public int reward_type_id;

      public BattleCharacterStartPanel_item()
      {
      }

      public BattleCharacterStartPanel_item(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_quantity = (int) (long) json[nameof (reward_quantity)];
        this.id = (int) (long) json[nameof (id)];
        this.reward_id = (int) (long) json[nameof (reward_id)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
      }
    }

    [Serializable]
    public class BattleContinueCount : KeyCompare
    {
      public bool is_success;

      public BattleContinueCount()
      {
      }

      public BattleContinueCount(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.is_success = (bool) json[nameof (is_success)];
      }
    }

    [Serializable]
    public class BattleExtraFinish : KeyCompare
    {
      public PlayerMaterialGear[] player_material_gears;
      public PlayerCharacterIntimate[] player_character_intimates;
      public bool unread_talk_messages;
      public PlayerUnit[] player_units;
      public PlayerUnitTypeTicket[] player_unit_type_tickets;
      public PlayerItem[] player_items;
      public PlayerMissionHistory[] player_mission_histories;
      public Player player;
      public QuestScoreBonusTimetable[] questscore_bonus_timetable;
      public BattleEnd battle_finish;
      public PlayerAwakeSkill[] player_awake_skills;
      public PlayerMaterialUnit[] player_material_units;
      public PlayerPresent[] player_presents;
      public PlayerQuestKey[] player_quest_keys;

      public BattleExtraFinish()
      {
      }

      public BattleExtraFinish(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerMaterialGear> playerMaterialGearList = new List<PlayerMaterialGear>();
        foreach (object json1 in (List<object>) json[nameof (player_material_gears)])
          playerMaterialGearList.Add(json1 == null ? (PlayerMaterialGear) null : new PlayerMaterialGear((Dictionary<string, object>) json1));
        this.player_material_gears = playerMaterialGearList.ToArray();
        SMManager.UpdateList<PlayerMaterialGear>(this.player_material_gears);
        List<PlayerCharacterIntimate> characterIntimateList = new List<PlayerCharacterIntimate>();
        foreach (object json2 in (List<object>) json[nameof (player_character_intimates)])
          characterIntimateList.Add(json2 == null ? (PlayerCharacterIntimate) null : new PlayerCharacterIntimate((Dictionary<string, object>) json2));
        this.player_character_intimates = characterIntimateList.ToArray();
        SMManager.UpdateList<PlayerCharacterIntimate>(this.player_character_intimates);
        this.unread_talk_messages = (bool) json[nameof (unread_talk_messages)];
        List<PlayerUnit> playerUnitList = new List<PlayerUnit>();
        foreach (object json3 in (List<object>) json[nameof (player_units)])
          playerUnitList.Add(json3 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json3));
        this.player_units = playerUnitList.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_units);
        List<PlayerUnitTypeTicket> playerUnitTypeTicketList = new List<PlayerUnitTypeTicket>();
        foreach (object json4 in (List<object>) json[nameof (player_unit_type_tickets)])
          playerUnitTypeTicketList.Add(json4 == null ? (PlayerUnitTypeTicket) null : new PlayerUnitTypeTicket((Dictionary<string, object>) json4));
        this.player_unit_type_tickets = playerUnitTypeTicketList.ToArray();
        SMManager.UpdateList<PlayerUnitTypeTicket>(this.player_unit_type_tickets);
        List<PlayerItem> playerItemList = new List<PlayerItem>();
        foreach (object json5 in (List<object>) json[nameof (player_items)])
          playerItemList.Add(json5 == null ? (PlayerItem) null : new PlayerItem((Dictionary<string, object>) json5));
        this.player_items = playerItemList.ToArray();
        SMManager.UpdateList<PlayerItem>(this.player_items);
        List<PlayerMissionHistory> playerMissionHistoryList = new List<PlayerMissionHistory>();
        foreach (object json6 in (List<object>) json[nameof (player_mission_histories)])
          playerMissionHistoryList.Add(json6 == null ? (PlayerMissionHistory) null : new PlayerMissionHistory((Dictionary<string, object>) json6));
        this.player_mission_histories = playerMissionHistoryList.ToArray();
        SMManager.UpdateList<PlayerMissionHistory>(this.player_mission_histories);
        this.player = json[nameof (player)] == null ? (Player) null : new Player((Dictionary<string, object>) json[nameof (player)]);
        SMManager.Change<Player>(this.player);
        List<QuestScoreBonusTimetable> scoreBonusTimetableList = new List<QuestScoreBonusTimetable>();
        foreach (object json7 in (List<object>) json[nameof (questscore_bonus_timetable)])
          scoreBonusTimetableList.Add(json7 == null ? (QuestScoreBonusTimetable) null : new QuestScoreBonusTimetable((Dictionary<string, object>) json7));
        this.questscore_bonus_timetable = scoreBonusTimetableList.ToArray();
        SMManager.UpdateList<QuestScoreBonusTimetable>(this.questscore_bonus_timetable);
        this.battle_finish = json[nameof (battle_finish)] == null ? (BattleEnd) null : new BattleEnd((Dictionary<string, object>) json[nameof (battle_finish)]);
        SMManager.Change<BattleEnd>(this.battle_finish);
        List<PlayerAwakeSkill> playerAwakeSkillList = new List<PlayerAwakeSkill>();
        foreach (object json8 in (List<object>) json[nameof (player_awake_skills)])
          playerAwakeSkillList.Add(json8 == null ? (PlayerAwakeSkill) null : new PlayerAwakeSkill((Dictionary<string, object>) json8));
        this.player_awake_skills = playerAwakeSkillList.ToArray();
        SMManager.UpdateList<PlayerAwakeSkill>(this.player_awake_skills);
        List<PlayerMaterialUnit> playerMaterialUnitList = new List<PlayerMaterialUnit>();
        foreach (object json9 in (List<object>) json[nameof (player_material_units)])
          playerMaterialUnitList.Add(json9 == null ? (PlayerMaterialUnit) null : new PlayerMaterialUnit((Dictionary<string, object>) json9));
        this.player_material_units = playerMaterialUnitList.ToArray();
        SMManager.UpdateList<PlayerMaterialUnit>(this.player_material_units);
        List<PlayerPresent> playerPresentList = new List<PlayerPresent>();
        foreach (object json10 in (List<object>) json[nameof (player_presents)])
          playerPresentList.Add(json10 == null ? (PlayerPresent) null : new PlayerPresent((Dictionary<string, object>) json10));
        this.player_presents = playerPresentList.ToArray();
        SMManager.UpdateList<PlayerPresent>(this.player_presents);
        List<PlayerQuestKey> playerQuestKeyList = new List<PlayerQuestKey>();
        foreach (object json11 in (List<object>) json[nameof (player_quest_keys)])
          playerQuestKeyList.Add(json11 == null ? (PlayerQuestKey) null : new PlayerQuestKey((Dictionary<string, object>) json11));
        this.player_quest_keys = playerQuestKeyList.ToArray();
        SMManager.UpdateList<PlayerQuestKey>(this.player_quest_keys);
        if (json.ContainsKey("player_material_gears:delete"))
          SMManager.DeleteList<PlayerMaterialGear>(((IEnumerable<object>) json["player_material_gears:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
        if (json.ContainsKey("player_presents:delete"))
          SMManager.DeleteList<PlayerPresent>(((IEnumerable<object>) json["player_presents:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
        if (!json.ContainsKey("player_items:delete"))
          return;
        SMManager.DeleteList<PlayerItem>(((IEnumerable<object>) json["player_items:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class BattleExtraQuestDetail : KeyCompare
    {
      public WebAPI.Response.BattleExtraQuestDetailDrop_items[] drop_items;
      public bool drop_info_display_flag;
      public WebAPI.Response.BattleExtraQuestDetailEnemy_info_list enemy_info_list;
      public string quest_name;
      public string recommend_strength;

      public BattleExtraQuestDetail()
      {
      }

      public BattleExtraQuestDetail(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<WebAPI.Response.BattleExtraQuestDetailDrop_items> questDetailDropItemsList = new List<WebAPI.Response.BattleExtraQuestDetailDrop_items>();
        foreach (object json1 in (List<object>) json[nameof (drop_items)])
          questDetailDropItemsList.Add(json1 == null ? (WebAPI.Response.BattleExtraQuestDetailDrop_items) null : new WebAPI.Response.BattleExtraQuestDetailDrop_items((Dictionary<string, object>) json1));
        this.drop_items = questDetailDropItemsList.ToArray();
        this.drop_info_display_flag = (bool) json[nameof (drop_info_display_flag)];
        this.enemy_info_list = json[nameof (enemy_info_list)] == null ? (WebAPI.Response.BattleExtraQuestDetailEnemy_info_list) null : new WebAPI.Response.BattleExtraQuestDetailEnemy_info_list((Dictionary<string, object>) json[nameof (enemy_info_list)]);
        this.quest_name = (string) json[nameof (quest_name)];
        this.recommend_strength = (string) json[nameof (recommend_strength)];
      }
    }

    [Serializable]
    public class BattleExtraQuestDetailEnemy_info_list : KeyCompare
    {
      public WebAPI.Response.BattleExtraQuestDetailEnemy_info_listUnit_list[] unit_list;
      public int[] kind_ids;

      public BattleExtraQuestDetailEnemy_info_list()
      {
      }

      public BattleExtraQuestDetailEnemy_info_list(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<WebAPI.Response.BattleExtraQuestDetailEnemy_info_listUnit_list> infoListUnitListList = new List<WebAPI.Response.BattleExtraQuestDetailEnemy_info_listUnit_list>();
        foreach (object json1 in (List<object>) json[nameof (unit_list)])
          infoListUnitListList.Add(json1 == null ? (WebAPI.Response.BattleExtraQuestDetailEnemy_info_listUnit_list) null : new WebAPI.Response.BattleExtraQuestDetailEnemy_info_listUnit_list((Dictionary<string, object>) json1));
        this.unit_list = infoListUnitListList.ToArray();
        this.kind_ids = ((IEnumerable<object>) json[nameof (kind_ids)]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).ToArray<int>();
      }
    }

    [Serializable]
    public class BattleExtraQuestDetailEnemy_info_listUnit_list : KeyCompare
    {
      public int[] skill_ids;
      public WebAPI.Response.BattleExtraQuestDetailEnemy_info_listUnit_listGear gear;
      public int unit_id;

      public BattleExtraQuestDetailEnemy_info_listUnit_list()
      {
      }

      public BattleExtraQuestDetailEnemy_info_listUnit_list(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.skill_ids = ((IEnumerable<object>) json[nameof (skill_ids)]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).ToArray<int>();
        this.gear = json[nameof (gear)] == null ? (WebAPI.Response.BattleExtraQuestDetailEnemy_info_listUnit_listGear) null : new WebAPI.Response.BattleExtraQuestDetailEnemy_info_listUnit_listGear((Dictionary<string, object>) json[nameof (gear)]);
        this.unit_id = (int) (long) json[nameof (unit_id)];
      }
    }

    [Serializable]
    public class BattleExtraQuestDetailEnemy_info_listUnit_listGear : KeyCompare
    {
      public int gear_id;
      public int rank;

      public BattleExtraQuestDetailEnemy_info_listUnit_listGear()
      {
      }

      public BattleExtraQuestDetailEnemy_info_listUnit_listGear(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.gear_id = (int) (long) json[nameof (gear_id)];
        this.rank = (int) (long) json[nameof (rank)];
      }
    }

    [Serializable]
    public class BattleExtraQuestDetailDrop_items : KeyCompare
    {
      public int reward_quantity;
      public int id;
      public int reward_id;
      public int reward_type_id;

      public BattleExtraQuestDetailDrop_items()
      {
      }

      public BattleExtraQuestDetailDrop_items(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_quantity = (int) (long) json[nameof (reward_quantity)];
        this.id = (int) (long) json[nameof (id)];
        this.reward_id = (int) (long) json[nameof (reward_id)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
      }
    }

    [Serializable]
    public class BattleExtraStart : KeyCompare
    {
      public WebAPI.Response.BattleExtraStartPanel_item[] panel_item;
      public Player player;
      public int quest_type;
      public WebAPI.Response.BattleExtraStartUser_deck_enemy_item[] user_deck_enemy_item;
      public PlayerItem[] helper_player_gears;
      public PlayerUnit[] helper_player_unit_over_killers;
      public PlayerUnit[] helper_player_units;
      public string support_player_id;
      public int quest_loop_count;
      public PlayerItem[] user_deck_gears;
      public WebAPI.Response.BattleExtraStartEnemy_item[] enemy_item;
      public int player_unit_id;
      public int deck_type_id;
      public bool battle_start;
      public string battle_uuid;
      public PlayerAwakeSkill[] helper_player_awake_skills;
      public int support_player_unit_id;
      public int[] user_deck_enemy;
      public PlayerUnit[] user_deck_units;
      public int[] panel;
      public int[] enemy;
      public PlayerGearReisouSchema[] helper_player_reisou_gears;
      public int[] guest_ids;
      public PlayerHelper[] helpers;
      public int deck_number;
      public int quest_s_id;

      public BattleExtraStart()
      {
      }

      public BattleExtraStart(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<WebAPI.Response.BattleExtraStartPanel_item> extraStartPanelItemList = new List<WebAPI.Response.BattleExtraStartPanel_item>();
        foreach (object json1 in (List<object>) json[nameof (panel_item)])
          extraStartPanelItemList.Add(json1 == null ? (WebAPI.Response.BattleExtraStartPanel_item) null : new WebAPI.Response.BattleExtraStartPanel_item((Dictionary<string, object>) json1));
        this.panel_item = extraStartPanelItemList.ToArray();
        this.player = json[nameof (player)] == null ? (Player) null : new Player((Dictionary<string, object>) json[nameof (player)]);
        SMManager.Change<Player>(this.player);
        this.quest_type = (int) (long) json[nameof (quest_type)];
        List<WebAPI.Response.BattleExtraStartUser_deck_enemy_item> userDeckEnemyItemList = new List<WebAPI.Response.BattleExtraStartUser_deck_enemy_item>();
        foreach (object json2 in (List<object>) json[nameof (user_deck_enemy_item)])
          userDeckEnemyItemList.Add(json2 == null ? (WebAPI.Response.BattleExtraStartUser_deck_enemy_item) null : new WebAPI.Response.BattleExtraStartUser_deck_enemy_item((Dictionary<string, object>) json2));
        this.user_deck_enemy_item = userDeckEnemyItemList.ToArray();
        List<PlayerItem> playerItemList1 = new List<PlayerItem>();
        foreach (object json3 in (List<object>) json[nameof (helper_player_gears)])
          playerItemList1.Add(json3 == null ? (PlayerItem) null : new PlayerItem((Dictionary<string, object>) json3));
        this.helper_player_gears = playerItemList1.ToArray();
        List<PlayerUnit> playerUnitList1 = new List<PlayerUnit>();
        foreach (object json4 in (List<object>) json[nameof (helper_player_unit_over_killers)])
          playerUnitList1.Add(json4 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json4));
        this.helper_player_unit_over_killers = playerUnitList1.ToArray();
        List<PlayerUnit> playerUnitList2 = new List<PlayerUnit>();
        foreach (object json5 in (List<object>) json[nameof (helper_player_units)])
          playerUnitList2.Add(json5 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json5));
        this.helper_player_units = playerUnitList2.ToArray();
        this.support_player_id = json[nameof (support_player_id)] == null ? (string) null : (string) json[nameof (support_player_id)];
        this.quest_loop_count = (int) (long) json[nameof (quest_loop_count)];
        List<PlayerItem> playerItemList2 = new List<PlayerItem>();
        foreach (object json6 in (List<object>) json[nameof (user_deck_gears)])
          playerItemList2.Add(json6 == null ? (PlayerItem) null : new PlayerItem((Dictionary<string, object>) json6));
        this.user_deck_gears = playerItemList2.ToArray();
        List<WebAPI.Response.BattleExtraStartEnemy_item> extraStartEnemyItemList = new List<WebAPI.Response.BattleExtraStartEnemy_item>();
        foreach (object json7 in (List<object>) json[nameof (enemy_item)])
          extraStartEnemyItemList.Add(json7 == null ? (WebAPI.Response.BattleExtraStartEnemy_item) null : new WebAPI.Response.BattleExtraStartEnemy_item((Dictionary<string, object>) json7));
        this.enemy_item = extraStartEnemyItemList.ToArray();
        this.player_unit_id = (int) (long) json[nameof (player_unit_id)];
        this.deck_type_id = (int) (long) json[nameof (deck_type_id)];
        this.battle_start = (bool) json[nameof (battle_start)];
        this.battle_uuid = (string) json[nameof (battle_uuid)];
        List<PlayerAwakeSkill> playerAwakeSkillList = new List<PlayerAwakeSkill>();
        foreach (object json8 in (List<object>) json[nameof (helper_player_awake_skills)])
          playerAwakeSkillList.Add(json8 == null ? (PlayerAwakeSkill) null : new PlayerAwakeSkill((Dictionary<string, object>) json8));
        this.helper_player_awake_skills = playerAwakeSkillList.ToArray();
        this.support_player_unit_id = (int) (long) json[nameof (support_player_unit_id)];
        this.user_deck_enemy = ((IEnumerable<object>) json[nameof (user_deck_enemy)]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).ToArray<int>();
        List<PlayerUnit> playerUnitList3 = new List<PlayerUnit>();
        foreach (object json9 in (List<object>) json[nameof (user_deck_units)])
          playerUnitList3.Add(json9 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json9));
        this.user_deck_units = playerUnitList3.ToArray();
        this.panel = ((IEnumerable<object>) json[nameof (panel)]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).ToArray<int>();
        this.enemy = ((IEnumerable<object>) json[nameof (enemy)]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).ToArray<int>();
        List<PlayerGearReisouSchema> gearReisouSchemaList = new List<PlayerGearReisouSchema>();
        foreach (object json10 in (List<object>) json[nameof (helper_player_reisou_gears)])
          gearReisouSchemaList.Add(json10 == null ? (PlayerGearReisouSchema) null : new PlayerGearReisouSchema((Dictionary<string, object>) json10));
        this.helper_player_reisou_gears = gearReisouSchemaList.ToArray();
        this.guest_ids = ((IEnumerable<object>) json[nameof (guest_ids)]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).ToArray<int>();
        List<PlayerHelper> playerHelperList = new List<PlayerHelper>();
        foreach (object json11 in (List<object>) json[nameof (helpers)])
          playerHelperList.Add(json11 == null ? (PlayerHelper) null : new PlayerHelper((Dictionary<string, object>) json11));
        this.helpers = playerHelperList.ToArray();
        this.deck_number = (int) (long) json[nameof (deck_number)];
        this.quest_s_id = (int) (long) json[nameof (quest_s_id)];
      }
    }

    [Serializable]
    public class BattleExtraStartEnemy_item : KeyCompare
    {
      public int reward_quantity;
      public int id;
      public int reward_id;
      public int reward_type_id;

      public BattleExtraStartEnemy_item()
      {
      }

      public BattleExtraStartEnemy_item(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_quantity = (int) (long) json[nameof (reward_quantity)];
        this.id = (int) (long) json[nameof (id)];
        this.reward_id = (int) (long) json[nameof (reward_id)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
      }
    }

    [Serializable]
    public class BattleExtraStartUser_deck_enemy_item : KeyCompare
    {
      public int reward_quantity;
      public int id;
      public int reward_id;
      public int reward_type_id;

      public BattleExtraStartUser_deck_enemy_item()
      {
      }

      public BattleExtraStartUser_deck_enemy_item(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_quantity = (int) (long) json[nameof (reward_quantity)];
        this.id = (int) (long) json[nameof (id)];
        this.reward_id = (int) (long) json[nameof (reward_id)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
      }
    }

    [Serializable]
    public class BattleExtraStartPanel_item : KeyCompare
    {
      public int reward_quantity;
      public int id;
      public int reward_id;
      public int reward_type_id;

      public BattleExtraStartPanel_item()
      {
      }

      public BattleExtraStartPanel_item(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_quantity = (int) (long) json[nameof (reward_quantity)];
        this.id = (int) (long) json[nameof (id)];
        this.reward_id = (int) (long) json[nameof (reward_id)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
      }
    }

    [Serializable]
    public class BattleForceClose : KeyCompare
    {
      public BattleForceClose()
      {
      }

      public BattleForceClose(Dictionary<string, object> json) => this._hasKey = false;
    }

    [Serializable]
    public class BattleHarmonyFinish : KeyCompare
    {
      public PlayerMaterialGear[] player_material_gears;
      public PlayerCharacterIntimate[] player_character_intimates;
      public PlayerUnit[] player_units;
      public PlayerUnitTypeTicket[] player_unit_type_tickets;
      public PlayerItem[] player_items;
      public PlayerMissionHistory[] player_mission_histories;
      public Player player;
      public QuestScoreBonusTimetable[] questscore_bonus_timetable;
      public BattleEnd battle_finish;
      public PlayerAwakeSkill[] player_awake_skills;
      public PlayerMaterialUnit[] player_material_units;
      public PlayerPresent[] player_presents;
      public PlayerQuestKey[] player_quest_keys;

      public BattleHarmonyFinish()
      {
      }

      public BattleHarmonyFinish(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerMaterialGear> playerMaterialGearList = new List<PlayerMaterialGear>();
        foreach (object json1 in (List<object>) json[nameof (player_material_gears)])
          playerMaterialGearList.Add(json1 == null ? (PlayerMaterialGear) null : new PlayerMaterialGear((Dictionary<string, object>) json1));
        this.player_material_gears = playerMaterialGearList.ToArray();
        SMManager.UpdateList<PlayerMaterialGear>(this.player_material_gears);
        List<PlayerCharacterIntimate> characterIntimateList = new List<PlayerCharacterIntimate>();
        foreach (object json2 in (List<object>) json[nameof (player_character_intimates)])
          characterIntimateList.Add(json2 == null ? (PlayerCharacterIntimate) null : new PlayerCharacterIntimate((Dictionary<string, object>) json2));
        this.player_character_intimates = characterIntimateList.ToArray();
        SMManager.UpdateList<PlayerCharacterIntimate>(this.player_character_intimates);
        List<PlayerUnit> playerUnitList = new List<PlayerUnit>();
        foreach (object json3 in (List<object>) json[nameof (player_units)])
          playerUnitList.Add(json3 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json3));
        this.player_units = playerUnitList.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_units);
        List<PlayerUnitTypeTicket> playerUnitTypeTicketList = new List<PlayerUnitTypeTicket>();
        foreach (object json4 in (List<object>) json[nameof (player_unit_type_tickets)])
          playerUnitTypeTicketList.Add(json4 == null ? (PlayerUnitTypeTicket) null : new PlayerUnitTypeTicket((Dictionary<string, object>) json4));
        this.player_unit_type_tickets = playerUnitTypeTicketList.ToArray();
        SMManager.UpdateList<PlayerUnitTypeTicket>(this.player_unit_type_tickets);
        List<PlayerItem> playerItemList = new List<PlayerItem>();
        foreach (object json5 in (List<object>) json[nameof (player_items)])
          playerItemList.Add(json5 == null ? (PlayerItem) null : new PlayerItem((Dictionary<string, object>) json5));
        this.player_items = playerItemList.ToArray();
        SMManager.UpdateList<PlayerItem>(this.player_items);
        List<PlayerMissionHistory> playerMissionHistoryList = new List<PlayerMissionHistory>();
        foreach (object json6 in (List<object>) json[nameof (player_mission_histories)])
          playerMissionHistoryList.Add(json6 == null ? (PlayerMissionHistory) null : new PlayerMissionHistory((Dictionary<string, object>) json6));
        this.player_mission_histories = playerMissionHistoryList.ToArray();
        SMManager.UpdateList<PlayerMissionHistory>(this.player_mission_histories);
        this.player = json[nameof (player)] == null ? (Player) null : new Player((Dictionary<string, object>) json[nameof (player)]);
        SMManager.Change<Player>(this.player);
        List<QuestScoreBonusTimetable> scoreBonusTimetableList = new List<QuestScoreBonusTimetable>();
        foreach (object json7 in (List<object>) json[nameof (questscore_bonus_timetable)])
          scoreBonusTimetableList.Add(json7 == null ? (QuestScoreBonusTimetable) null : new QuestScoreBonusTimetable((Dictionary<string, object>) json7));
        this.questscore_bonus_timetable = scoreBonusTimetableList.ToArray();
        SMManager.UpdateList<QuestScoreBonusTimetable>(this.questscore_bonus_timetable);
        this.battle_finish = json[nameof (battle_finish)] == null ? (BattleEnd) null : new BattleEnd((Dictionary<string, object>) json[nameof (battle_finish)]);
        SMManager.Change<BattleEnd>(this.battle_finish);
        List<PlayerAwakeSkill> playerAwakeSkillList = new List<PlayerAwakeSkill>();
        foreach (object json8 in (List<object>) json[nameof (player_awake_skills)])
          playerAwakeSkillList.Add(json8 == null ? (PlayerAwakeSkill) null : new PlayerAwakeSkill((Dictionary<string, object>) json8));
        this.player_awake_skills = playerAwakeSkillList.ToArray();
        SMManager.UpdateList<PlayerAwakeSkill>(this.player_awake_skills);
        List<PlayerMaterialUnit> playerMaterialUnitList = new List<PlayerMaterialUnit>();
        foreach (object json9 in (List<object>) json[nameof (player_material_units)])
          playerMaterialUnitList.Add(json9 == null ? (PlayerMaterialUnit) null : new PlayerMaterialUnit((Dictionary<string, object>) json9));
        this.player_material_units = playerMaterialUnitList.ToArray();
        SMManager.UpdateList<PlayerMaterialUnit>(this.player_material_units);
        List<PlayerPresent> playerPresentList = new List<PlayerPresent>();
        foreach (object json10 in (List<object>) json[nameof (player_presents)])
          playerPresentList.Add(json10 == null ? (PlayerPresent) null : new PlayerPresent((Dictionary<string, object>) json10));
        this.player_presents = playerPresentList.ToArray();
        SMManager.UpdateList<PlayerPresent>(this.player_presents);
        List<PlayerQuestKey> playerQuestKeyList = new List<PlayerQuestKey>();
        foreach (object json11 in (List<object>) json[nameof (player_quest_keys)])
          playerQuestKeyList.Add(json11 == null ? (PlayerQuestKey) null : new PlayerQuestKey((Dictionary<string, object>) json11));
        this.player_quest_keys = playerQuestKeyList.ToArray();
        SMManager.UpdateList<PlayerQuestKey>(this.player_quest_keys);
        if (json.ContainsKey("player_material_gears:delete"))
          SMManager.DeleteList<PlayerMaterialGear>(((IEnumerable<object>) json["player_material_gears:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
        if (json.ContainsKey("player_presents:delete"))
          SMManager.DeleteList<PlayerPresent>(((IEnumerable<object>) json["player_presents:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
        if (!json.ContainsKey("player_items:delete"))
          return;
        SMManager.DeleteList<PlayerItem>(((IEnumerable<object>) json["player_items:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class BattleHarmonyQuestDetail : KeyCompare
    {
      public WebAPI.Response.BattleHarmonyQuestDetailDrop_items[] drop_items;
      public bool drop_info_display_flag;
      public WebAPI.Response.BattleHarmonyQuestDetailEnemy_info_list enemy_info_list;
      public string quest_name;
      public string recommend_strength;

      public BattleHarmonyQuestDetail()
      {
      }

      public BattleHarmonyQuestDetail(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<WebAPI.Response.BattleHarmonyQuestDetailDrop_items> questDetailDropItemsList = new List<WebAPI.Response.BattleHarmonyQuestDetailDrop_items>();
        foreach (object json1 in (List<object>) json[nameof (drop_items)])
          questDetailDropItemsList.Add(json1 == null ? (WebAPI.Response.BattleHarmonyQuestDetailDrop_items) null : new WebAPI.Response.BattleHarmonyQuestDetailDrop_items((Dictionary<string, object>) json1));
        this.drop_items = questDetailDropItemsList.ToArray();
        this.drop_info_display_flag = (bool) json[nameof (drop_info_display_flag)];
        this.enemy_info_list = json[nameof (enemy_info_list)] == null ? (WebAPI.Response.BattleHarmonyQuestDetailEnemy_info_list) null : new WebAPI.Response.BattleHarmonyQuestDetailEnemy_info_list((Dictionary<string, object>) json[nameof (enemy_info_list)]);
        this.quest_name = (string) json[nameof (quest_name)];
        this.recommend_strength = (string) json[nameof (recommend_strength)];
      }
    }

    [Serializable]
    public class BattleHarmonyQuestDetailEnemy_info_list : KeyCompare
    {
      public WebAPI.Response.BattleHarmonyQuestDetailEnemy_info_listUnit_list[] unit_list;
      public int[] kind_ids;

      public BattleHarmonyQuestDetailEnemy_info_list()
      {
      }

      public BattleHarmonyQuestDetailEnemy_info_list(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<WebAPI.Response.BattleHarmonyQuestDetailEnemy_info_listUnit_list> infoListUnitListList = new List<WebAPI.Response.BattleHarmonyQuestDetailEnemy_info_listUnit_list>();
        foreach (object json1 in (List<object>) json[nameof (unit_list)])
          infoListUnitListList.Add(json1 == null ? (WebAPI.Response.BattleHarmonyQuestDetailEnemy_info_listUnit_list) null : new WebAPI.Response.BattleHarmonyQuestDetailEnemy_info_listUnit_list((Dictionary<string, object>) json1));
        this.unit_list = infoListUnitListList.ToArray();
        this.kind_ids = ((IEnumerable<object>) json[nameof (kind_ids)]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).ToArray<int>();
      }
    }

    [Serializable]
    public class BattleHarmonyQuestDetailEnemy_info_listUnit_list : KeyCompare
    {
      public int[] skill_ids;
      public WebAPI.Response.BattleHarmonyQuestDetailEnemy_info_listUnit_listGear gear;
      public int unit_id;

      public BattleHarmonyQuestDetailEnemy_info_listUnit_list()
      {
      }

      public BattleHarmonyQuestDetailEnemy_info_listUnit_list(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.skill_ids = ((IEnumerable<object>) json[nameof (skill_ids)]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).ToArray<int>();
        this.gear = json[nameof (gear)] == null ? (WebAPI.Response.BattleHarmonyQuestDetailEnemy_info_listUnit_listGear) null : new WebAPI.Response.BattleHarmonyQuestDetailEnemy_info_listUnit_listGear((Dictionary<string, object>) json[nameof (gear)]);
        this.unit_id = (int) (long) json[nameof (unit_id)];
      }
    }

    [Serializable]
    public class BattleHarmonyQuestDetailEnemy_info_listUnit_listGear : KeyCompare
    {
      public int gear_id;
      public int rank;

      public BattleHarmonyQuestDetailEnemy_info_listUnit_listGear()
      {
      }

      public BattleHarmonyQuestDetailEnemy_info_listUnit_listGear(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.gear_id = (int) (long) json[nameof (gear_id)];
        this.rank = (int) (long) json[nameof (rank)];
      }
    }

    [Serializable]
    public class BattleHarmonyQuestDetailDrop_items : KeyCompare
    {
      public int reward_quantity;
      public int id;
      public int reward_id;
      public int reward_type_id;

      public BattleHarmonyQuestDetailDrop_items()
      {
      }

      public BattleHarmonyQuestDetailDrop_items(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_quantity = (int) (long) json[nameof (reward_quantity)];
        this.id = (int) (long) json[nameof (id)];
        this.reward_id = (int) (long) json[nameof (reward_id)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
      }
    }

    [Serializable]
    public class BattleHarmonyStart : KeyCompare
    {
      public WebAPI.Response.BattleHarmonyStartPanel_item[] panel_item;
      public Player player;
      public int quest_type;
      public WebAPI.Response.BattleHarmonyStartUser_deck_enemy_item[] user_deck_enemy_item;
      public PlayerItem[] helper_player_gears;
      public PlayerUnit[] helper_player_unit_over_killers;
      public PlayerUnit[] helper_player_units;
      public string support_player_id;
      public int quest_loop_count;
      public PlayerItem[] user_deck_gears;
      public WebAPI.Response.BattleHarmonyStartEnemy_item[] enemy_item;
      public int player_unit_id;
      public int deck_type_id;
      public bool battle_start;
      public string battle_uuid;
      public PlayerAwakeSkill[] helper_player_awake_skills;
      public int support_player_unit_id;
      public int[] user_deck_enemy;
      public PlayerUnit[] user_deck_units;
      public int[] panel;
      public int[] enemy;
      public PlayerGearReisouSchema[] helper_player_reisou_gears;
      public int[] guest_ids;
      public PlayerHelper[] helpers;
      public int deck_number;
      public int quest_s_id;

      public BattleHarmonyStart()
      {
      }

      public BattleHarmonyStart(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<WebAPI.Response.BattleHarmonyStartPanel_item> harmonyStartPanelItemList = new List<WebAPI.Response.BattleHarmonyStartPanel_item>();
        foreach (object json1 in (List<object>) json[nameof (panel_item)])
          harmonyStartPanelItemList.Add(json1 == null ? (WebAPI.Response.BattleHarmonyStartPanel_item) null : new WebAPI.Response.BattleHarmonyStartPanel_item((Dictionary<string, object>) json1));
        this.panel_item = harmonyStartPanelItemList.ToArray();
        this.player = json[nameof (player)] == null ? (Player) null : new Player((Dictionary<string, object>) json[nameof (player)]);
        SMManager.Change<Player>(this.player);
        this.quest_type = (int) (long) json[nameof (quest_type)];
        List<WebAPI.Response.BattleHarmonyStartUser_deck_enemy_item> userDeckEnemyItemList = new List<WebAPI.Response.BattleHarmonyStartUser_deck_enemy_item>();
        foreach (object json2 in (List<object>) json[nameof (user_deck_enemy_item)])
          userDeckEnemyItemList.Add(json2 == null ? (WebAPI.Response.BattleHarmonyStartUser_deck_enemy_item) null : new WebAPI.Response.BattleHarmonyStartUser_deck_enemy_item((Dictionary<string, object>) json2));
        this.user_deck_enemy_item = userDeckEnemyItemList.ToArray();
        List<PlayerItem> playerItemList1 = new List<PlayerItem>();
        foreach (object json3 in (List<object>) json[nameof (helper_player_gears)])
          playerItemList1.Add(json3 == null ? (PlayerItem) null : new PlayerItem((Dictionary<string, object>) json3));
        this.helper_player_gears = playerItemList1.ToArray();
        List<PlayerUnit> playerUnitList1 = new List<PlayerUnit>();
        foreach (object json4 in (List<object>) json[nameof (helper_player_unit_over_killers)])
          playerUnitList1.Add(json4 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json4));
        this.helper_player_unit_over_killers = playerUnitList1.ToArray();
        List<PlayerUnit> playerUnitList2 = new List<PlayerUnit>();
        foreach (object json5 in (List<object>) json[nameof (helper_player_units)])
          playerUnitList2.Add(json5 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json5));
        this.helper_player_units = playerUnitList2.ToArray();
        this.support_player_id = json[nameof (support_player_id)] == null ? (string) null : (string) json[nameof (support_player_id)];
        this.quest_loop_count = (int) (long) json[nameof (quest_loop_count)];
        List<PlayerItem> playerItemList2 = new List<PlayerItem>();
        foreach (object json6 in (List<object>) json[nameof (user_deck_gears)])
          playerItemList2.Add(json6 == null ? (PlayerItem) null : new PlayerItem((Dictionary<string, object>) json6));
        this.user_deck_gears = playerItemList2.ToArray();
        List<WebAPI.Response.BattleHarmonyStartEnemy_item> harmonyStartEnemyItemList = new List<WebAPI.Response.BattleHarmonyStartEnemy_item>();
        foreach (object json7 in (List<object>) json[nameof (enemy_item)])
          harmonyStartEnemyItemList.Add(json7 == null ? (WebAPI.Response.BattleHarmonyStartEnemy_item) null : new WebAPI.Response.BattleHarmonyStartEnemy_item((Dictionary<string, object>) json7));
        this.enemy_item = harmonyStartEnemyItemList.ToArray();
        this.player_unit_id = (int) (long) json[nameof (player_unit_id)];
        this.deck_type_id = (int) (long) json[nameof (deck_type_id)];
        this.battle_start = (bool) json[nameof (battle_start)];
        this.battle_uuid = (string) json[nameof (battle_uuid)];
        List<PlayerAwakeSkill> playerAwakeSkillList = new List<PlayerAwakeSkill>();
        foreach (object json8 in (List<object>) json[nameof (helper_player_awake_skills)])
          playerAwakeSkillList.Add(json8 == null ? (PlayerAwakeSkill) null : new PlayerAwakeSkill((Dictionary<string, object>) json8));
        this.helper_player_awake_skills = playerAwakeSkillList.ToArray();
        this.support_player_unit_id = (int) (long) json[nameof (support_player_unit_id)];
        this.user_deck_enemy = ((IEnumerable<object>) json[nameof (user_deck_enemy)]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).ToArray<int>();
        List<PlayerUnit> playerUnitList3 = new List<PlayerUnit>();
        foreach (object json9 in (List<object>) json[nameof (user_deck_units)])
          playerUnitList3.Add(json9 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json9));
        this.user_deck_units = playerUnitList3.ToArray();
        this.panel = ((IEnumerable<object>) json[nameof (panel)]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).ToArray<int>();
        this.enemy = ((IEnumerable<object>) json[nameof (enemy)]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).ToArray<int>();
        List<PlayerGearReisouSchema> gearReisouSchemaList = new List<PlayerGearReisouSchema>();
        foreach (object json10 in (List<object>) json[nameof (helper_player_reisou_gears)])
          gearReisouSchemaList.Add(json10 == null ? (PlayerGearReisouSchema) null : new PlayerGearReisouSchema((Dictionary<string, object>) json10));
        this.helper_player_reisou_gears = gearReisouSchemaList.ToArray();
        this.guest_ids = ((IEnumerable<object>) json[nameof (guest_ids)]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).ToArray<int>();
        List<PlayerHelper> playerHelperList = new List<PlayerHelper>();
        foreach (object json11 in (List<object>) json[nameof (helpers)])
          playerHelperList.Add(json11 == null ? (PlayerHelper) null : new PlayerHelper((Dictionary<string, object>) json11));
        this.helpers = playerHelperList.ToArray();
        this.deck_number = (int) (long) json[nameof (deck_number)];
        this.quest_s_id = (int) (long) json[nameof (quest_s_id)];
      }
    }

    [Serializable]
    public class BattleHarmonyStartEnemy_item : KeyCompare
    {
      public int reward_quantity;
      public int id;
      public int reward_id;
      public int reward_type_id;

      public BattleHarmonyStartEnemy_item()
      {
      }

      public BattleHarmonyStartEnemy_item(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_quantity = (int) (long) json[nameof (reward_quantity)];
        this.id = (int) (long) json[nameof (id)];
        this.reward_id = (int) (long) json[nameof (reward_id)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
      }
    }

    [Serializable]
    public class BattleHarmonyStartUser_deck_enemy_item : KeyCompare
    {
      public int reward_quantity;
      public int id;
      public int reward_id;
      public int reward_type_id;

      public BattleHarmonyStartUser_deck_enemy_item()
      {
      }

      public BattleHarmonyStartUser_deck_enemy_item(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_quantity = (int) (long) json[nameof (reward_quantity)];
        this.id = (int) (long) json[nameof (id)];
        this.reward_id = (int) (long) json[nameof (reward_id)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
      }
    }

    [Serializable]
    public class BattleHarmonyStartPanel_item : KeyCompare
    {
      public int reward_quantity;
      public int id;
      public int reward_id;
      public int reward_type_id;

      public BattleHarmonyStartPanel_item()
      {
      }

      public BattleHarmonyStartPanel_item(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_quantity = (int) (long) json[nameof (reward_quantity)];
        this.id = (int) (long) json[nameof (id)];
        this.reward_id = (int) (long) json[nameof (reward_id)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
      }
    }

    [Serializable]
    public class BattleResume : KeyCompare
    {
      public WebAPI.Response.BattleResumePanel_item[] panel_item;
      public Player player;
      public int quest_type;
      public WebAPI.Response.BattleResumeUser_deck_enemy_item[] user_deck_enemy_item;
      public PlayerItem[] helper_player_gears;
      public PlayerUnit[] helper_player_unit_over_killers;
      public BattleWaveStageInfo[] wave_stage;
      public PlayerUnit[] helper_player_units;
      public PlayerCharacterQuestS[] player_character_quests;
      public PlayerExtraQuestS[] player_extra_quests;
      public int quest_loop_count;
      public PlayerItem[] user_deck_gears;
      public WebAPI.Response.BattleResumeEnemy_item[] enemy_item;
      public int player_unit_id;
      public int deck_type_id;
      public bool battle_start;
      public string battle_uuid;
      public PlayerAwakeSkill[] helper_player_awake_skills;
      public int support_player_unit_id;
      public int[] user_deck_enemy;
      public PlayerHarmonyQuestS[] player_harmony_quests;
      public PlayerUnit[] user_deck_units;
      public int[] panel;
      public int[] enemy;
      public PlayerGearReisouSchema[] helper_player_reisou_gears;
      public string support_player_id;
      public int[] guest_ids;
      public PlayerHelper[] helpers;
      public int deck_number;
      public int quest_s_id;

      public BattleResume()
      {
      }

      public BattleResume(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<WebAPI.Response.BattleResumePanel_item> battleResumePanelItemList = new List<WebAPI.Response.BattleResumePanel_item>();
        foreach (object json1 in (List<object>) json[nameof (panel_item)])
          battleResumePanelItemList.Add(json1 == null ? (WebAPI.Response.BattleResumePanel_item) null : new WebAPI.Response.BattleResumePanel_item((Dictionary<string, object>) json1));
        this.panel_item = battleResumePanelItemList.ToArray();
        this.player = json[nameof (player)] == null ? (Player) null : new Player((Dictionary<string, object>) json[nameof (player)]);
        SMManager.Change<Player>(this.player);
        this.quest_type = (int) (long) json[nameof (quest_type)];
        List<WebAPI.Response.BattleResumeUser_deck_enemy_item> userDeckEnemyItemList = new List<WebAPI.Response.BattleResumeUser_deck_enemy_item>();
        foreach (object json2 in (List<object>) json[nameof (user_deck_enemy_item)])
          userDeckEnemyItemList.Add(json2 == null ? (WebAPI.Response.BattleResumeUser_deck_enemy_item) null : new WebAPI.Response.BattleResumeUser_deck_enemy_item((Dictionary<string, object>) json2));
        this.user_deck_enemy_item = userDeckEnemyItemList.ToArray();
        List<PlayerItem> playerItemList1 = new List<PlayerItem>();
        foreach (object json3 in (List<object>) json[nameof (helper_player_gears)])
          playerItemList1.Add(json3 == null ? (PlayerItem) null : new PlayerItem((Dictionary<string, object>) json3));
        this.helper_player_gears = playerItemList1.ToArray();
        List<PlayerUnit> playerUnitList1 = new List<PlayerUnit>();
        foreach (object json4 in (List<object>) json[nameof (helper_player_unit_over_killers)])
          playerUnitList1.Add(json4 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json4));
        this.helper_player_unit_over_killers = playerUnitList1.ToArray();
        List<BattleWaveStageInfo> battleWaveStageInfoList = new List<BattleWaveStageInfo>();
        foreach (object json5 in (List<object>) json[nameof (wave_stage)])
          battleWaveStageInfoList.Add(json5 == null ? (BattleWaveStageInfo) null : new BattleWaveStageInfo((Dictionary<string, object>) json5));
        this.wave_stage = battleWaveStageInfoList.ToArray();
        List<PlayerUnit> playerUnitList2 = new List<PlayerUnit>();
        foreach (object json6 in (List<object>) json[nameof (helper_player_units)])
          playerUnitList2.Add(json6 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json6));
        this.helper_player_units = playerUnitList2.ToArray();
        List<PlayerCharacterQuestS> playerCharacterQuestSList = new List<PlayerCharacterQuestS>();
        foreach (object json7 in (List<object>) json[nameof (player_character_quests)])
          playerCharacterQuestSList.Add(json7 == null ? (PlayerCharacterQuestS) null : new PlayerCharacterQuestS((Dictionary<string, object>) json7));
        this.player_character_quests = playerCharacterQuestSList.ToArray();
        SMManager.UpdateList<PlayerCharacterQuestS>(this.player_character_quests);
        List<PlayerExtraQuestS> playerExtraQuestSList = new List<PlayerExtraQuestS>();
        foreach (object json8 in (List<object>) json[nameof (player_extra_quests)])
          playerExtraQuestSList.Add(json8 == null ? (PlayerExtraQuestS) null : new PlayerExtraQuestS((Dictionary<string, object>) json8));
        this.player_extra_quests = playerExtraQuestSList.ToArray();
        SMManager.UpdateList<PlayerExtraQuestS>(this.player_extra_quests);
        this.quest_loop_count = (int) (long) json[nameof (quest_loop_count)];
        List<PlayerItem> playerItemList2 = new List<PlayerItem>();
        foreach (object json9 in (List<object>) json[nameof (user_deck_gears)])
          playerItemList2.Add(json9 == null ? (PlayerItem) null : new PlayerItem((Dictionary<string, object>) json9));
        this.user_deck_gears = playerItemList2.ToArray();
        List<WebAPI.Response.BattleResumeEnemy_item> battleResumeEnemyItemList = new List<WebAPI.Response.BattleResumeEnemy_item>();
        foreach (object json10 in (List<object>) json[nameof (enemy_item)])
          battleResumeEnemyItemList.Add(json10 == null ? (WebAPI.Response.BattleResumeEnemy_item) null : new WebAPI.Response.BattleResumeEnemy_item((Dictionary<string, object>) json10));
        this.enemy_item = battleResumeEnemyItemList.ToArray();
        this.player_unit_id = (int) (long) json[nameof (player_unit_id)];
        this.deck_type_id = (int) (long) json[nameof (deck_type_id)];
        this.battle_start = (bool) json[nameof (battle_start)];
        this.battle_uuid = (string) json[nameof (battle_uuid)];
        List<PlayerAwakeSkill> playerAwakeSkillList = new List<PlayerAwakeSkill>();
        foreach (object json11 in (List<object>) json[nameof (helper_player_awake_skills)])
          playerAwakeSkillList.Add(json11 == null ? (PlayerAwakeSkill) null : new PlayerAwakeSkill((Dictionary<string, object>) json11));
        this.helper_player_awake_skills = playerAwakeSkillList.ToArray();
        this.support_player_unit_id = (int) (long) json[nameof (support_player_unit_id)];
        this.user_deck_enemy = ((IEnumerable<object>) json[nameof (user_deck_enemy)]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).ToArray<int>();
        List<PlayerHarmonyQuestS> playerHarmonyQuestSList = new List<PlayerHarmonyQuestS>();
        foreach (object json12 in (List<object>) json[nameof (player_harmony_quests)])
          playerHarmonyQuestSList.Add(json12 == null ? (PlayerHarmonyQuestS) null : new PlayerHarmonyQuestS((Dictionary<string, object>) json12));
        this.player_harmony_quests = playerHarmonyQuestSList.ToArray();
        SMManager.UpdateList<PlayerHarmonyQuestS>(this.player_harmony_quests);
        List<PlayerUnit> playerUnitList3 = new List<PlayerUnit>();
        foreach (object json13 in (List<object>) json[nameof (user_deck_units)])
          playerUnitList3.Add(json13 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json13));
        this.user_deck_units = playerUnitList3.ToArray();
        this.panel = ((IEnumerable<object>) json[nameof (panel)]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).ToArray<int>();
        this.enemy = ((IEnumerable<object>) json[nameof (enemy)]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).ToArray<int>();
        List<PlayerGearReisouSchema> gearReisouSchemaList = new List<PlayerGearReisouSchema>();
        foreach (object json14 in (List<object>) json[nameof (helper_player_reisou_gears)])
          gearReisouSchemaList.Add(json14 == null ? (PlayerGearReisouSchema) null : new PlayerGearReisouSchema((Dictionary<string, object>) json14));
        this.helper_player_reisou_gears = gearReisouSchemaList.ToArray();
        this.support_player_id = json[nameof (support_player_id)] == null ? (string) null : (string) json[nameof (support_player_id)];
        this.guest_ids = ((IEnumerable<object>) json[nameof (guest_ids)]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).ToArray<int>();
        List<PlayerHelper> playerHelperList = new List<PlayerHelper>();
        foreach (object json15 in (List<object>) json[nameof (helpers)])
          playerHelperList.Add(json15 == null ? (PlayerHelper) null : new PlayerHelper((Dictionary<string, object>) json15));
        this.helpers = playerHelperList.ToArray();
        this.deck_number = (int) (long) json[nameof (deck_number)];
        this.quest_s_id = (int) (long) json[nameof (quest_s_id)];
      }
    }

    [Serializable]
    public class BattleResumeEnemy_item : KeyCompare
    {
      public int reward_quantity;
      public int id;
      public int reward_id;
      public int reward_type_id;

      public BattleResumeEnemy_item()
      {
      }

      public BattleResumeEnemy_item(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_quantity = (int) (long) json[nameof (reward_quantity)];
        this.id = (int) (long) json[nameof (id)];
        this.reward_id = (int) (long) json[nameof (reward_id)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
      }
    }

    [Serializable]
    public class BattleResumeUser_deck_enemy_item : KeyCompare
    {
      public int reward_quantity;
      public int id;
      public int reward_id;
      public int reward_type_id;

      public BattleResumeUser_deck_enemy_item()
      {
      }

      public BattleResumeUser_deck_enemy_item(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_quantity = (int) (long) json[nameof (reward_quantity)];
        this.id = (int) (long) json[nameof (id)];
        this.reward_id = (int) (long) json[nameof (reward_id)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
      }
    }

    [Serializable]
    public class BattleResumePanel_item : KeyCompare
    {
      public int reward_quantity;
      public int id;
      public int reward_id;
      public int reward_type_id;

      public BattleResumePanel_item()
      {
      }

      public BattleResumePanel_item(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_quantity = (int) (long) json[nameof (reward_quantity)];
        this.id = (int) (long) json[nameof (id)];
        this.reward_id = (int) (long) json[nameof (reward_id)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
      }
    }

    [Serializable]
    public class BattleRetire : KeyCompare
    {
      public BattleRetire()
      {
      }

      public BattleRetire(Dictionary<string, object> json) => this._hasKey = false;
    }

    [Serializable]
    public class BattleStoryFinish : KeyCompare
    {
      public PlayerMaterialGear[] player_material_gears;
      public PlayerCharacterIntimate[] player_character_intimates;
      public bool unread_talk_messages;
      public LastPlayPlayerStoryQuestSIds last_play_story_quest_s_ids;
      public PlayerUnit[] player_units;
      public PlayerStoryQuestS[] player_story_quests;
      public PlayerItem[] player_items;
      public PlayerMissionHistory[] player_mission_histories;
      public Player player;
      public PlayerUnitTypeTicket[] player_unit_type_tickets;
      public QuestScoreBonusTimetable[] questscore_bonus_timetable;
      public BattleEnd battle_finish;
      public PlayerAwakeSkill[] player_awake_skills;
      public PlayerMaterialUnit[] player_material_units;
      public PlayerPresent[] player_presents;
      public PlayerQuestKey[] player_quest_keys;

      public BattleStoryFinish()
      {
      }

      public BattleStoryFinish(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerMaterialGear> playerMaterialGearList = new List<PlayerMaterialGear>();
        foreach (object json1 in (List<object>) json[nameof (player_material_gears)])
          playerMaterialGearList.Add(json1 == null ? (PlayerMaterialGear) null : new PlayerMaterialGear((Dictionary<string, object>) json1));
        this.player_material_gears = playerMaterialGearList.ToArray();
        SMManager.UpdateList<PlayerMaterialGear>(this.player_material_gears);
        List<PlayerCharacterIntimate> characterIntimateList = new List<PlayerCharacterIntimate>();
        foreach (object json2 in (List<object>) json[nameof (player_character_intimates)])
          characterIntimateList.Add(json2 == null ? (PlayerCharacterIntimate) null : new PlayerCharacterIntimate((Dictionary<string, object>) json2));
        this.player_character_intimates = characterIntimateList.ToArray();
        SMManager.UpdateList<PlayerCharacterIntimate>(this.player_character_intimates);
        this.unread_talk_messages = (bool) json[nameof (unread_talk_messages)];
        this.last_play_story_quest_s_ids = json[nameof (last_play_story_quest_s_ids)] == null ? (LastPlayPlayerStoryQuestSIds) null : new LastPlayPlayerStoryQuestSIds((Dictionary<string, object>) json[nameof (last_play_story_quest_s_ids)]);
        SMManager.Change<LastPlayPlayerStoryQuestSIds>(this.last_play_story_quest_s_ids);
        List<PlayerUnit> playerUnitList = new List<PlayerUnit>();
        foreach (object json3 in (List<object>) json[nameof (player_units)])
          playerUnitList.Add(json3 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json3));
        this.player_units = playerUnitList.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_units);
        List<PlayerStoryQuestS> playerStoryQuestSList = new List<PlayerStoryQuestS>();
        foreach (object json4 in (List<object>) json[nameof (player_story_quests)])
          playerStoryQuestSList.Add(json4 == null ? (PlayerStoryQuestS) null : new PlayerStoryQuestS((Dictionary<string, object>) json4));
        this.player_story_quests = playerStoryQuestSList.ToArray();
        SMManager.UpdateList<PlayerStoryQuestS>(this.player_story_quests);
        List<PlayerItem> playerItemList = new List<PlayerItem>();
        foreach (object json5 in (List<object>) json[nameof (player_items)])
          playerItemList.Add(json5 == null ? (PlayerItem) null : new PlayerItem((Dictionary<string, object>) json5));
        this.player_items = playerItemList.ToArray();
        SMManager.UpdateList<PlayerItem>(this.player_items);
        List<PlayerMissionHistory> playerMissionHistoryList = new List<PlayerMissionHistory>();
        foreach (object json6 in (List<object>) json[nameof (player_mission_histories)])
          playerMissionHistoryList.Add(json6 == null ? (PlayerMissionHistory) null : new PlayerMissionHistory((Dictionary<string, object>) json6));
        this.player_mission_histories = playerMissionHistoryList.ToArray();
        SMManager.UpdateList<PlayerMissionHistory>(this.player_mission_histories);
        this.player = json[nameof (player)] == null ? (Player) null : new Player((Dictionary<string, object>) json[nameof (player)]);
        SMManager.Change<Player>(this.player);
        List<PlayerUnitTypeTicket> playerUnitTypeTicketList = new List<PlayerUnitTypeTicket>();
        foreach (object json7 in (List<object>) json[nameof (player_unit_type_tickets)])
          playerUnitTypeTicketList.Add(json7 == null ? (PlayerUnitTypeTicket) null : new PlayerUnitTypeTicket((Dictionary<string, object>) json7));
        this.player_unit_type_tickets = playerUnitTypeTicketList.ToArray();
        SMManager.UpdateList<PlayerUnitTypeTicket>(this.player_unit_type_tickets);
        List<QuestScoreBonusTimetable> scoreBonusTimetableList = new List<QuestScoreBonusTimetable>();
        foreach (object json8 in (List<object>) json[nameof (questscore_bonus_timetable)])
          scoreBonusTimetableList.Add(json8 == null ? (QuestScoreBonusTimetable) null : new QuestScoreBonusTimetable((Dictionary<string, object>) json8));
        this.questscore_bonus_timetable = scoreBonusTimetableList.ToArray();
        SMManager.UpdateList<QuestScoreBonusTimetable>(this.questscore_bonus_timetable);
        this.battle_finish = json[nameof (battle_finish)] == null ? (BattleEnd) null : new BattleEnd((Dictionary<string, object>) json[nameof (battle_finish)]);
        SMManager.Change<BattleEnd>(this.battle_finish);
        List<PlayerAwakeSkill> playerAwakeSkillList = new List<PlayerAwakeSkill>();
        foreach (object json9 in (List<object>) json[nameof (player_awake_skills)])
          playerAwakeSkillList.Add(json9 == null ? (PlayerAwakeSkill) null : new PlayerAwakeSkill((Dictionary<string, object>) json9));
        this.player_awake_skills = playerAwakeSkillList.ToArray();
        SMManager.UpdateList<PlayerAwakeSkill>(this.player_awake_skills);
        List<PlayerMaterialUnit> playerMaterialUnitList = new List<PlayerMaterialUnit>();
        foreach (object json10 in (List<object>) json[nameof (player_material_units)])
          playerMaterialUnitList.Add(json10 == null ? (PlayerMaterialUnit) null : new PlayerMaterialUnit((Dictionary<string, object>) json10));
        this.player_material_units = playerMaterialUnitList.ToArray();
        SMManager.UpdateList<PlayerMaterialUnit>(this.player_material_units);
        List<PlayerPresent> playerPresentList = new List<PlayerPresent>();
        foreach (object json11 in (List<object>) json[nameof (player_presents)])
          playerPresentList.Add(json11 == null ? (PlayerPresent) null : new PlayerPresent((Dictionary<string, object>) json11));
        this.player_presents = playerPresentList.ToArray();
        SMManager.UpdateList<PlayerPresent>(this.player_presents);
        List<PlayerQuestKey> playerQuestKeyList = new List<PlayerQuestKey>();
        foreach (object json12 in (List<object>) json[nameof (player_quest_keys)])
          playerQuestKeyList.Add(json12 == null ? (PlayerQuestKey) null : new PlayerQuestKey((Dictionary<string, object>) json12));
        this.player_quest_keys = playerQuestKeyList.ToArray();
        SMManager.UpdateList<PlayerQuestKey>(this.player_quest_keys);
        if (json.ContainsKey("player_material_gears:delete"))
          SMManager.DeleteList<PlayerMaterialGear>(((IEnumerable<object>) json["player_material_gears:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
        if (json.ContainsKey("player_presents:delete"))
          SMManager.DeleteList<PlayerPresent>(((IEnumerable<object>) json["player_presents:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
        if (!json.ContainsKey("player_items:delete"))
          return;
        SMManager.DeleteList<PlayerItem>(((IEnumerable<object>) json["player_items:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class BattleStoryQuestDetail : KeyCompare
    {
      public WebAPI.Response.BattleStoryQuestDetailDrop_items[] drop_items;
      public bool drop_info_display_flag;
      public WebAPI.Response.BattleStoryQuestDetailEnemy_info_list enemy_info_list;
      public string quest_name;
      public string recommend_strength;

      public BattleStoryQuestDetail()
      {
      }

      public BattleStoryQuestDetail(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<WebAPI.Response.BattleStoryQuestDetailDrop_items> questDetailDropItemsList = new List<WebAPI.Response.BattleStoryQuestDetailDrop_items>();
        foreach (object json1 in (List<object>) json[nameof (drop_items)])
          questDetailDropItemsList.Add(json1 == null ? (WebAPI.Response.BattleStoryQuestDetailDrop_items) null : new WebAPI.Response.BattleStoryQuestDetailDrop_items((Dictionary<string, object>) json1));
        this.drop_items = questDetailDropItemsList.ToArray();
        this.drop_info_display_flag = (bool) json[nameof (drop_info_display_flag)];
        this.enemy_info_list = json[nameof (enemy_info_list)] == null ? (WebAPI.Response.BattleStoryQuestDetailEnemy_info_list) null : new WebAPI.Response.BattleStoryQuestDetailEnemy_info_list((Dictionary<string, object>) json[nameof (enemy_info_list)]);
        this.quest_name = (string) json[nameof (quest_name)];
        this.recommend_strength = (string) json[nameof (recommend_strength)];
      }
    }

    [Serializable]
    public class BattleStoryQuestDetailEnemy_info_list : KeyCompare
    {
      public WebAPI.Response.BattleStoryQuestDetailEnemy_info_listUnit_list[] unit_list;
      public int[] kind_ids;

      public BattleStoryQuestDetailEnemy_info_list()
      {
      }

      public BattleStoryQuestDetailEnemy_info_list(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<WebAPI.Response.BattleStoryQuestDetailEnemy_info_listUnit_list> infoListUnitListList = new List<WebAPI.Response.BattleStoryQuestDetailEnemy_info_listUnit_list>();
        foreach (object json1 in (List<object>) json[nameof (unit_list)])
          infoListUnitListList.Add(json1 == null ? (WebAPI.Response.BattleStoryQuestDetailEnemy_info_listUnit_list) null : new WebAPI.Response.BattleStoryQuestDetailEnemy_info_listUnit_list((Dictionary<string, object>) json1));
        this.unit_list = infoListUnitListList.ToArray();
        this.kind_ids = ((IEnumerable<object>) json[nameof (kind_ids)]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).ToArray<int>();
      }
    }

    [Serializable]
    public class BattleStoryQuestDetailEnemy_info_listUnit_list : KeyCompare
    {
      public int[] skill_ids;
      public WebAPI.Response.BattleStoryQuestDetailEnemy_info_listUnit_listGear gear;
      public int unit_id;

      public BattleStoryQuestDetailEnemy_info_listUnit_list()
      {
      }

      public BattleStoryQuestDetailEnemy_info_listUnit_list(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.skill_ids = ((IEnumerable<object>) json[nameof (skill_ids)]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).ToArray<int>();
        this.gear = json[nameof (gear)] == null ? (WebAPI.Response.BattleStoryQuestDetailEnemy_info_listUnit_listGear) null : new WebAPI.Response.BattleStoryQuestDetailEnemy_info_listUnit_listGear((Dictionary<string, object>) json[nameof (gear)]);
        this.unit_id = (int) (long) json[nameof (unit_id)];
      }
    }

    [Serializable]
    public class BattleStoryQuestDetailEnemy_info_listUnit_listGear : KeyCompare
    {
      public int gear_id;
      public int rank;

      public BattleStoryQuestDetailEnemy_info_listUnit_listGear()
      {
      }

      public BattleStoryQuestDetailEnemy_info_listUnit_listGear(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.gear_id = (int) (long) json[nameof (gear_id)];
        this.rank = (int) (long) json[nameof (rank)];
      }
    }

    [Serializable]
    public class BattleStoryQuestDetailDrop_items : KeyCompare
    {
      public int reward_quantity;
      public int id;
      public int reward_id;
      public int reward_type_id;

      public BattleStoryQuestDetailDrop_items()
      {
      }

      public BattleStoryQuestDetailDrop_items(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_quantity = (int) (long) json[nameof (reward_quantity)];
        this.id = (int) (long) json[nameof (id)];
        this.reward_id = (int) (long) json[nameof (reward_id)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
      }
    }

    [Serializable]
    public class BattleStoryStart : KeyCompare
    {
      public WebAPI.Response.BattleStoryStartPanel_item[] panel_item;
      public Player player;
      public int quest_type;
      public WebAPI.Response.BattleStoryStartUser_deck_enemy_item[] user_deck_enemy_item;
      public PlayerItem[] helper_player_gears;
      public PlayerUnit[] helper_player_unit_over_killers;
      public PlayerUnit[] helper_player_units;
      public string support_player_id;
      public int quest_loop_count;
      public PlayerItem[] user_deck_gears;
      public WebAPI.Response.BattleStoryStartEnemy_item[] enemy_item;
      public int player_unit_id;
      public int deck_type_id;
      public bool battle_start;
      public string battle_uuid;
      public PlayerAwakeSkill[] helper_player_awake_skills;
      public int support_player_unit_id;
      public int[] user_deck_enemy;
      public PlayerUnit[] user_deck_units;
      public int[] panel;
      public int[] enemy;
      public PlayerGearReisouSchema[] helper_player_reisou_gears;
      public int[] guest_ids;
      public PlayerHelper[] helpers;
      public int deck_number;
      public int quest_s_id;

      public BattleStoryStart()
      {
      }

      public BattleStoryStart(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<WebAPI.Response.BattleStoryStartPanel_item> storyStartPanelItemList = new List<WebAPI.Response.BattleStoryStartPanel_item>();
        foreach (object json1 in (List<object>) json[nameof (panel_item)])
          storyStartPanelItemList.Add(json1 == null ? (WebAPI.Response.BattleStoryStartPanel_item) null : new WebAPI.Response.BattleStoryStartPanel_item((Dictionary<string, object>) json1));
        this.panel_item = storyStartPanelItemList.ToArray();
        this.player = json[nameof (player)] == null ? (Player) null : new Player((Dictionary<string, object>) json[nameof (player)]);
        SMManager.Change<Player>(this.player);
        this.quest_type = (int) (long) json[nameof (quest_type)];
        List<WebAPI.Response.BattleStoryStartUser_deck_enemy_item> userDeckEnemyItemList = new List<WebAPI.Response.BattleStoryStartUser_deck_enemy_item>();
        foreach (object json2 in (List<object>) json[nameof (user_deck_enemy_item)])
          userDeckEnemyItemList.Add(json2 == null ? (WebAPI.Response.BattleStoryStartUser_deck_enemy_item) null : new WebAPI.Response.BattleStoryStartUser_deck_enemy_item((Dictionary<string, object>) json2));
        this.user_deck_enemy_item = userDeckEnemyItemList.ToArray();
        List<PlayerItem> playerItemList1 = new List<PlayerItem>();
        foreach (object json3 in (List<object>) json[nameof (helper_player_gears)])
          playerItemList1.Add(json3 == null ? (PlayerItem) null : new PlayerItem((Dictionary<string, object>) json3));
        this.helper_player_gears = playerItemList1.ToArray();
        List<PlayerUnit> playerUnitList1 = new List<PlayerUnit>();
        foreach (object json4 in (List<object>) json[nameof (helper_player_unit_over_killers)])
          playerUnitList1.Add(json4 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json4));
        this.helper_player_unit_over_killers = playerUnitList1.ToArray();
        List<PlayerUnit> playerUnitList2 = new List<PlayerUnit>();
        foreach (object json5 in (List<object>) json[nameof (helper_player_units)])
          playerUnitList2.Add(json5 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json5));
        this.helper_player_units = playerUnitList2.ToArray();
        this.support_player_id = json[nameof (support_player_id)] == null ? (string) null : (string) json[nameof (support_player_id)];
        this.quest_loop_count = (int) (long) json[nameof (quest_loop_count)];
        List<PlayerItem> playerItemList2 = new List<PlayerItem>();
        foreach (object json6 in (List<object>) json[nameof (user_deck_gears)])
          playerItemList2.Add(json6 == null ? (PlayerItem) null : new PlayerItem((Dictionary<string, object>) json6));
        this.user_deck_gears = playerItemList2.ToArray();
        List<WebAPI.Response.BattleStoryStartEnemy_item> storyStartEnemyItemList = new List<WebAPI.Response.BattleStoryStartEnemy_item>();
        foreach (object json7 in (List<object>) json[nameof (enemy_item)])
          storyStartEnemyItemList.Add(json7 == null ? (WebAPI.Response.BattleStoryStartEnemy_item) null : new WebAPI.Response.BattleStoryStartEnemy_item((Dictionary<string, object>) json7));
        this.enemy_item = storyStartEnemyItemList.ToArray();
        this.player_unit_id = (int) (long) json[nameof (player_unit_id)];
        this.deck_type_id = (int) (long) json[nameof (deck_type_id)];
        this.battle_start = (bool) json[nameof (battle_start)];
        this.battle_uuid = (string) json[nameof (battle_uuid)];
        List<PlayerAwakeSkill> playerAwakeSkillList = new List<PlayerAwakeSkill>();
        foreach (object json8 in (List<object>) json[nameof (helper_player_awake_skills)])
          playerAwakeSkillList.Add(json8 == null ? (PlayerAwakeSkill) null : new PlayerAwakeSkill((Dictionary<string, object>) json8));
        this.helper_player_awake_skills = playerAwakeSkillList.ToArray();
        this.support_player_unit_id = (int) (long) json[nameof (support_player_unit_id)];
        this.user_deck_enemy = ((IEnumerable<object>) json[nameof (user_deck_enemy)]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).ToArray<int>();
        List<PlayerUnit> playerUnitList3 = new List<PlayerUnit>();
        foreach (object json9 in (List<object>) json[nameof (user_deck_units)])
          playerUnitList3.Add(json9 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json9));
        this.user_deck_units = playerUnitList3.ToArray();
        this.panel = ((IEnumerable<object>) json[nameof (panel)]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).ToArray<int>();
        this.enemy = ((IEnumerable<object>) json[nameof (enemy)]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).ToArray<int>();
        List<PlayerGearReisouSchema> gearReisouSchemaList = new List<PlayerGearReisouSchema>();
        foreach (object json10 in (List<object>) json[nameof (helper_player_reisou_gears)])
          gearReisouSchemaList.Add(json10 == null ? (PlayerGearReisouSchema) null : new PlayerGearReisouSchema((Dictionary<string, object>) json10));
        this.helper_player_reisou_gears = gearReisouSchemaList.ToArray();
        this.guest_ids = ((IEnumerable<object>) json[nameof (guest_ids)]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).ToArray<int>();
        List<PlayerHelper> playerHelperList = new List<PlayerHelper>();
        foreach (object json11 in (List<object>) json[nameof (helpers)])
          playerHelperList.Add(json11 == null ? (PlayerHelper) null : new PlayerHelper((Dictionary<string, object>) json11));
        this.helpers = playerHelperList.ToArray();
        this.deck_number = (int) (long) json[nameof (deck_number)];
        this.quest_s_id = (int) (long) json[nameof (quest_s_id)];
      }
    }

    [Serializable]
    public class BattleStoryStartEnemy_item : KeyCompare
    {
      public int reward_quantity;
      public int id;
      public int reward_id;
      public int reward_type_id;

      public BattleStoryStartEnemy_item()
      {
      }

      public BattleStoryStartEnemy_item(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_quantity = (int) (long) json[nameof (reward_quantity)];
        this.id = (int) (long) json[nameof (id)];
        this.reward_id = (int) (long) json[nameof (reward_id)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
      }
    }

    [Serializable]
    public class BattleStoryStartUser_deck_enemy_item : KeyCompare
    {
      public int reward_quantity;
      public int id;
      public int reward_id;
      public int reward_type_id;

      public BattleStoryStartUser_deck_enemy_item()
      {
      }

      public BattleStoryStartUser_deck_enemy_item(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_quantity = (int) (long) json[nameof (reward_quantity)];
        this.id = (int) (long) json[nameof (id)];
        this.reward_id = (int) (long) json[nameof (reward_id)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
      }
    }

    [Serializable]
    public class BattleStoryStartPanel_item : KeyCompare
    {
      public int reward_quantity;
      public int id;
      public int reward_id;
      public int reward_type_id;

      public BattleStoryStartPanel_item()
      {
      }

      public BattleStoryStartPanel_item(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_quantity = (int) (long) json[nameof (reward_quantity)];
        this.id = (int) (long) json[nameof (id)];
        this.reward_id = (int) (long) json[nameof (reward_id)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
      }
    }

    [Serializable]
    public class BattleWaveQuestDetail : KeyCompare
    {
      public WebAPI.Response.BattleWaveQuestDetailDrop_items[] drop_items;
      public bool drop_info_display_flag;
      public WebAPI.Response.BattleWaveQuestDetailEnemy_info_list enemy_info_list;
      public string quest_name;
      public string recommend_strength;

      public BattleWaveQuestDetail()
      {
      }

      public BattleWaveQuestDetail(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<WebAPI.Response.BattleWaveQuestDetailDrop_items> questDetailDropItemsList = new List<WebAPI.Response.BattleWaveQuestDetailDrop_items>();
        foreach (object json1 in (List<object>) json[nameof (drop_items)])
          questDetailDropItemsList.Add(json1 == null ? (WebAPI.Response.BattleWaveQuestDetailDrop_items) null : new WebAPI.Response.BattleWaveQuestDetailDrop_items((Dictionary<string, object>) json1));
        this.drop_items = questDetailDropItemsList.ToArray();
        this.drop_info_display_flag = (bool) json[nameof (drop_info_display_flag)];
        this.enemy_info_list = json[nameof (enemy_info_list)] == null ? (WebAPI.Response.BattleWaveQuestDetailEnemy_info_list) null : new WebAPI.Response.BattleWaveQuestDetailEnemy_info_list((Dictionary<string, object>) json[nameof (enemy_info_list)]);
        this.quest_name = (string) json[nameof (quest_name)];
        this.recommend_strength = (string) json[nameof (recommend_strength)];
      }
    }

    [Serializable]
    public class BattleWaveQuestDetailEnemy_info_list : KeyCompare
    {
      public WebAPI.Response.BattleWaveQuestDetailEnemy_info_listUnit_list[] unit_list;
      public int[] kind_ids;

      public BattleWaveQuestDetailEnemy_info_list()
      {
      }

      public BattleWaveQuestDetailEnemy_info_list(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<WebAPI.Response.BattleWaveQuestDetailEnemy_info_listUnit_list> infoListUnitListList = new List<WebAPI.Response.BattleWaveQuestDetailEnemy_info_listUnit_list>();
        foreach (object json1 in (List<object>) json[nameof (unit_list)])
          infoListUnitListList.Add(json1 == null ? (WebAPI.Response.BattleWaveQuestDetailEnemy_info_listUnit_list) null : new WebAPI.Response.BattleWaveQuestDetailEnemy_info_listUnit_list((Dictionary<string, object>) json1));
        this.unit_list = infoListUnitListList.ToArray();
        this.kind_ids = ((IEnumerable<object>) json[nameof (kind_ids)]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).ToArray<int>();
      }
    }

    [Serializable]
    public class BattleWaveQuestDetailEnemy_info_listUnit_list : KeyCompare
    {
      public int[] skill_ids;
      public WebAPI.Response.BattleWaveQuestDetailEnemy_info_listUnit_listGear gear;
      public int unit_id;

      public BattleWaveQuestDetailEnemy_info_listUnit_list()
      {
      }

      public BattleWaveQuestDetailEnemy_info_listUnit_list(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.skill_ids = ((IEnumerable<object>) json[nameof (skill_ids)]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).ToArray<int>();
        this.gear = json[nameof (gear)] == null ? (WebAPI.Response.BattleWaveQuestDetailEnemy_info_listUnit_listGear) null : new WebAPI.Response.BattleWaveQuestDetailEnemy_info_listUnit_listGear((Dictionary<string, object>) json[nameof (gear)]);
        this.unit_id = (int) (long) json[nameof (unit_id)];
      }
    }

    [Serializable]
    public class BattleWaveQuestDetailEnemy_info_listUnit_listGear : KeyCompare
    {
      public int gear_id;
      public int rank;

      public BattleWaveQuestDetailEnemy_info_listUnit_listGear()
      {
      }

      public BattleWaveQuestDetailEnemy_info_listUnit_listGear(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.gear_id = (int) (long) json[nameof (gear_id)];
        this.rank = (int) (long) json[nameof (rank)];
      }
    }

    [Serializable]
    public class BattleWaveQuestDetailDrop_items : KeyCompare
    {
      public int reward_quantity;
      public int id;
      public int reward_id;
      public int reward_type_id;

      public BattleWaveQuestDetailDrop_items()
      {
      }

      public BattleWaveQuestDetailDrop_items(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_quantity = (int) (long) json[nameof (reward_quantity)];
        this.id = (int) (long) json[nameof (id)];
        this.reward_id = (int) (long) json[nameof (reward_id)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
      }
    }

    [Serializable]
    public class BattleWaveStart : KeyCompare
    {
      public PlayerUnit[] helper_player_unit_over_killers;
      public int deck_type_id;
      public bool battle_start;
      public BattleWaveStageInfo[] wave_stage;
      public int quest_s_id;
      public string battle_uuid;
      public string support_player_id;
      public PlayerAwakeSkill[] helper_player_awake_skills;
      public PlayerUnit[] helper_player_units;
      public int support_player_unit_id;
      public PlayerGearReisouSchema[] helper_player_reisou_gears;
      public Player player;
      public int[] guest_ids;
      public PlayerHelper[] helpers;
      public PlayerItem[] helper_player_gears;
      public int player_unit_id;
      public int quest_loop_count;
      public int quest_type;
      public int deck_number;

      public BattleWaveStart()
      {
      }

      public BattleWaveStart(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerUnit> playerUnitList1 = new List<PlayerUnit>();
        foreach (object json1 in (List<object>) json[nameof (helper_player_unit_over_killers)])
          playerUnitList1.Add(json1 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json1));
        this.helper_player_unit_over_killers = playerUnitList1.ToArray();
        this.deck_type_id = (int) (long) json[nameof (deck_type_id)];
        this.battle_start = (bool) json[nameof (battle_start)];
        List<BattleWaveStageInfo> battleWaveStageInfoList = new List<BattleWaveStageInfo>();
        foreach (object json2 in (List<object>) json[nameof (wave_stage)])
          battleWaveStageInfoList.Add(json2 == null ? (BattleWaveStageInfo) null : new BattleWaveStageInfo((Dictionary<string, object>) json2));
        this.wave_stage = battleWaveStageInfoList.ToArray();
        this.quest_s_id = (int) (long) json[nameof (quest_s_id)];
        this.battle_uuid = (string) json[nameof (battle_uuid)];
        this.support_player_id = json[nameof (support_player_id)] == null ? (string) null : (string) json[nameof (support_player_id)];
        List<PlayerAwakeSkill> playerAwakeSkillList = new List<PlayerAwakeSkill>();
        foreach (object json3 in (List<object>) json[nameof (helper_player_awake_skills)])
          playerAwakeSkillList.Add(json3 == null ? (PlayerAwakeSkill) null : new PlayerAwakeSkill((Dictionary<string, object>) json3));
        this.helper_player_awake_skills = playerAwakeSkillList.ToArray();
        List<PlayerUnit> playerUnitList2 = new List<PlayerUnit>();
        foreach (object json4 in (List<object>) json[nameof (helper_player_units)])
          playerUnitList2.Add(json4 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json4));
        this.helper_player_units = playerUnitList2.ToArray();
        this.support_player_unit_id = (int) (long) json[nameof (support_player_unit_id)];
        List<PlayerGearReisouSchema> gearReisouSchemaList = new List<PlayerGearReisouSchema>();
        foreach (object json5 in (List<object>) json[nameof (helper_player_reisou_gears)])
          gearReisouSchemaList.Add(json5 == null ? (PlayerGearReisouSchema) null : new PlayerGearReisouSchema((Dictionary<string, object>) json5));
        this.helper_player_reisou_gears = gearReisouSchemaList.ToArray();
        this.player = json[nameof (player)] == null ? (Player) null : new Player((Dictionary<string, object>) json[nameof (player)]);
        SMManager.Change<Player>(this.player);
        this.guest_ids = ((IEnumerable<object>) json[nameof (guest_ids)]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).ToArray<int>();
        List<PlayerHelper> playerHelperList = new List<PlayerHelper>();
        foreach (object json6 in (List<object>) json[nameof (helpers)])
          playerHelperList.Add(json6 == null ? (PlayerHelper) null : new PlayerHelper((Dictionary<string, object>) json6));
        this.helpers = playerHelperList.ToArray();
        List<PlayerItem> playerItemList = new List<PlayerItem>();
        foreach (object json7 in (List<object>) json[nameof (helper_player_gears)])
          playerItemList.Add(json7 == null ? (PlayerItem) null : new PlayerItem((Dictionary<string, object>) json7));
        this.helper_player_gears = playerItemList.ToArray();
        this.player_unit_id = (int) (long) json[nameof (player_unit_id)];
        this.quest_loop_count = (int) (long) json[nameof (quest_loop_count)];
        this.quest_type = (int) (long) json[nameof (quest_type)];
        this.deck_number = (int) (long) json[nameof (deck_number)];
      }
    }

    [Serializable]
    public class BingoIndex : KeyCompare
    {
      public Player player;
      public PlayerBingo[] player_bingo;

      public BingoIndex()
      {
      }

      public BingoIndex(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.player = json[nameof (player)] == null ? (Player) null : new Player((Dictionary<string, object>) json[nameof (player)]);
        SMManager.Change<Player>(this.player);
        List<PlayerBingo> playerBingoList = new List<PlayerBingo>();
        foreach (object json1 in (List<object>) json[nameof (player_bingo)])
          playerBingoList.Add(json1 == null ? (PlayerBingo) null : new PlayerBingo((Dictionary<string, object>) json1));
        this.player_bingo = playerBingoList.ToArray();
        SMManager.UpdateList<PlayerBingo>(this.player_bingo);
      }
    }

    [Serializable]
    public class BingoOpenCheck : KeyCompare
    {
      public PlayerBingo[] player_bingo;

      public BingoOpenCheck()
      {
      }

      public BingoOpenCheck(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerBingo> playerBingoList = new List<PlayerBingo>();
        foreach (object json1 in (List<object>) json[nameof (player_bingo)])
          playerBingoList.Add(json1 == null ? (PlayerBingo) null : new PlayerBingo((Dictionary<string, object>) json1));
        this.player_bingo = playerBingoList.ToArray();
        SMManager.UpdateList<PlayerBingo>(this.player_bingo);
      }
    }

    [Serializable]
    public class BingoReceiveReward : KeyCompare
    {
      public bool is_complete_receive;
      public bool is_receive;
      public Player player;
      public PlayerBingo[] player_bingo;
      public PlayerPresent[] player_presents;

      public BingoReceiveReward()
      {
      }

      public BingoReceiveReward(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.is_complete_receive = (bool) json[nameof (is_complete_receive)];
        this.is_receive = (bool) json[nameof (is_receive)];
        this.player = json[nameof (player)] == null ? (Player) null : new Player((Dictionary<string, object>) json[nameof (player)]);
        SMManager.Change<Player>(this.player);
        List<PlayerBingo> playerBingoList = new List<PlayerBingo>();
        foreach (object json1 in (List<object>) json[nameof (player_bingo)])
          playerBingoList.Add(json1 == null ? (PlayerBingo) null : new PlayerBingo((Dictionary<string, object>) json1));
        this.player_bingo = playerBingoList.ToArray();
        SMManager.UpdateList<PlayerBingo>(this.player_bingo);
        List<PlayerPresent> playerPresentList = new List<PlayerPresent>();
        foreach (object json2 in (List<object>) json[nameof (player_presents)])
          playerPresentList.Add(json2 == null ? (PlayerPresent) null : new PlayerPresent((Dictionary<string, object>) json2));
        this.player_presents = playerPresentList.ToArray();
        SMManager.UpdateList<PlayerPresent>(this.player_presents);
        if (!json.ContainsKey("player_presents:delete"))
          return;
        SMManager.DeleteList<PlayerPresent>(((IEnumerable<object>) json["player_presents:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class BingoReview : KeyCompare
    {
      public Player player;
      public PlayerBingo[] player_bingo;

      public BingoReview()
      {
      }

      public BingoReview(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.player = json[nameof (player)] == null ? (Player) null : new Player((Dictionary<string, object>) json[nameof (player)]);
        SMManager.Change<Player>(this.player);
        List<PlayerBingo> playerBingoList = new List<PlayerBingo>();
        foreach (object json1 in (List<object>) json[nameof (player_bingo)])
          playerBingoList.Add(json1 == null ? (PlayerBingo) null : new PlayerBingo((Dictionary<string, object>) json1));
        this.player_bingo = playerBingoList.ToArray();
        SMManager.UpdateList<PlayerBingo>(this.player_bingo);
      }
    }

    [Serializable]
    public class BingoSelectComplete : KeyCompare
    {
      public PlayerBingo[] player_bingo;

      public BingoSelectComplete()
      {
      }

      public BingoSelectComplete(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerBingo> playerBingoList = new List<PlayerBingo>();
        foreach (object json1 in (List<object>) json[nameof (player_bingo)])
          playerBingoList.Add(json1 == null ? (PlayerBingo) null : new PlayerBingo((Dictionary<string, object>) json1));
        this.player_bingo = playerBingoList.ToArray();
        SMManager.UpdateList<PlayerBingo>(this.player_bingo);
      }
    }

    [Serializable]
    public class CoinbonusHistory : KeyCompare
    {
      public CoinGroup[] coin_groups;
      public WebAPI.Response.CoinbonusHistoryCoin_bonus_details[] coin_bonus_details;
      public SimplePackInfo[] simple_packs;
      public BeginnerPackInfo[] beginner_packs;
      public CoinBonus[] coin_bonuses;
      public StepupPackInfo[] stepup_packs;
      public Player player;
      public MonthlyPackInfo[] monthly_packs;
      public WeeklyPackInfo[] weekly_packs;
      public PlayerCoinBonusInfo[] player_coin_bonus_infos;
      public CoinBonusReward[] coin_bonus_rewards;
      public PlayerCoinBonusHistory[] player_coin_bonus_history;

      public CoinbonusHistory()
      {
      }

      public CoinbonusHistory(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<CoinGroup> coinGroupList = new List<CoinGroup>();
        foreach (object json1 in (List<object>) json[nameof (coin_groups)])
          coinGroupList.Add(json1 == null ? (CoinGroup) null : new CoinGroup((Dictionary<string, object>) json1));
        this.coin_groups = coinGroupList.ToArray();
        SMManager.UpdateList<CoinGroup>(this.coin_groups);
        List<WebAPI.Response.CoinbonusHistoryCoin_bonus_details> coinBonusDetailsList = new List<WebAPI.Response.CoinbonusHistoryCoin_bonus_details>();
        foreach (object json2 in (List<object>) json[nameof (coin_bonus_details)])
          coinBonusDetailsList.Add(json2 == null ? (WebAPI.Response.CoinbonusHistoryCoin_bonus_details) null : new WebAPI.Response.CoinbonusHistoryCoin_bonus_details((Dictionary<string, object>) json2));
        this.coin_bonus_details = coinBonusDetailsList.ToArray();
        SMManager.UpdateList<WebAPI.Response.CoinbonusHistoryCoin_bonus_details>(this.coin_bonus_details);
        List<SimplePackInfo> simplePackInfoList = new List<SimplePackInfo>();
        foreach (object json3 in (List<object>) json[nameof (simple_packs)])
          simplePackInfoList.Add(json3 == null ? (SimplePackInfo) null : new SimplePackInfo((Dictionary<string, object>) json3));
        this.simple_packs = simplePackInfoList.ToArray();
        SMManager.UpdateList<SimplePackInfo>(this.simple_packs);
        List<BeginnerPackInfo> beginnerPackInfoList = new List<BeginnerPackInfo>();
        foreach (object json4 in (List<object>) json[nameof (beginner_packs)])
          beginnerPackInfoList.Add(json4 == null ? (BeginnerPackInfo) null : new BeginnerPackInfo((Dictionary<string, object>) json4));
        this.beginner_packs = beginnerPackInfoList.ToArray();
        SMManager.UpdateList<BeginnerPackInfo>(this.beginner_packs);
        List<CoinBonus> coinBonusList = new List<CoinBonus>();
        foreach (object json5 in (List<object>) json[nameof (coin_bonuses)])
          coinBonusList.Add(json5 == null ? (CoinBonus) null : new CoinBonus((Dictionary<string, object>) json5));
        this.coin_bonuses = coinBonusList.ToArray();
        List<StepupPackInfo> stepupPackInfoList = new List<StepupPackInfo>();
        foreach (object json6 in (List<object>) json[nameof (stepup_packs)])
          stepupPackInfoList.Add(json6 == null ? (StepupPackInfo) null : new StepupPackInfo((Dictionary<string, object>) json6));
        this.stepup_packs = stepupPackInfoList.ToArray();
        SMManager.UpdateList<StepupPackInfo>(this.stepup_packs);
        this.player = json[nameof (player)] == null ? (Player) null : new Player((Dictionary<string, object>) json[nameof (player)]);
        SMManager.Change<Player>(this.player);
        List<MonthlyPackInfo> monthlyPackInfoList = new List<MonthlyPackInfo>();
        foreach (object json7 in (List<object>) json[nameof (monthly_packs)])
          monthlyPackInfoList.Add(json7 == null ? (MonthlyPackInfo) null : new MonthlyPackInfo((Dictionary<string, object>) json7));
        this.monthly_packs = monthlyPackInfoList.ToArray();
        SMManager.UpdateList<MonthlyPackInfo>(this.monthly_packs);
        List<WeeklyPackInfo> weeklyPackInfoList = new List<WeeklyPackInfo>();
        foreach (object json8 in (List<object>) json[nameof (weekly_packs)])
          weeklyPackInfoList.Add(json8 == null ? (WeeklyPackInfo) null : new WeeklyPackInfo((Dictionary<string, object>) json8));
        this.weekly_packs = weeklyPackInfoList.ToArray();
        SMManager.UpdateList<WeeklyPackInfo>(this.weekly_packs);
        List<PlayerCoinBonusInfo> playerCoinBonusInfoList = new List<PlayerCoinBonusInfo>();
        foreach (object json9 in (List<object>) json[nameof (player_coin_bonus_infos)])
          playerCoinBonusInfoList.Add(json9 == null ? (PlayerCoinBonusInfo) null : new PlayerCoinBonusInfo((Dictionary<string, object>) json9));
        this.player_coin_bonus_infos = playerCoinBonusInfoList.ToArray();
        SMManager.UpdateList<PlayerCoinBonusInfo>(this.player_coin_bonus_infos);
        List<CoinBonusReward> coinBonusRewardList = new List<CoinBonusReward>();
        foreach (object json10 in (List<object>) json[nameof (coin_bonus_rewards)])
          coinBonusRewardList.Add(json10 == null ? (CoinBonusReward) null : new CoinBonusReward((Dictionary<string, object>) json10));
        this.coin_bonus_rewards = coinBonusRewardList.ToArray();
        SMManager.UpdateList<CoinBonusReward>(this.coin_bonus_rewards);
        List<PlayerCoinBonusHistory> coinBonusHistoryList = new List<PlayerCoinBonusHistory>();
        foreach (object json11 in (List<object>) json[nameof (player_coin_bonus_history)])
          coinBonusHistoryList.Add(json11 == null ? (PlayerCoinBonusHistory) null : new PlayerCoinBonusHistory((Dictionary<string, object>) json11));
        this.player_coin_bonus_history = coinBonusHistoryList.ToArray();
        SMManager.UpdateList<PlayerCoinBonusHistory>(this.player_coin_bonus_history);
      }
    }

    [Serializable]
    public class CoinbonusHistoryCoin_bonus_details : KeyCompare
    {
      public int coin_group_id;
      public CoinBonusDetail[] details;

      public CoinbonusHistoryCoin_bonus_details()
      {
      }

      public CoinbonusHistoryCoin_bonus_details(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.coin_group_id = (int) (long) json[nameof (coin_group_id)];
        List<CoinBonusDetail> coinBonusDetailList = new List<CoinBonusDetail>();
        foreach (object json1 in (List<object>) json[nameof (details)])
          coinBonusDetailList.Add(json1 == null ? (CoinBonusDetail) null : new CoinBonusDetail((Dictionary<string, object>) json1));
        this.details = coinBonusDetailList.ToArray();
      }
    }

    [Serializable]
    public class CoinbonusPackVerifyCheck : KeyCompare
    {
      public CoinbonusPackVerifyCheck()
      {
      }

      public CoinbonusPackVerifyCheck(Dictionary<string, object> json) => this._hasKey = false;
    }

    [Serializable]
    public class CoinbonusPresent : KeyCompare
    {
      public PlayerCoinBonusHistory[] player_coin_bonus_history;
      public CoinBonus[] coin_bonuses;
      public Player player;
      public CoinBonusReward[] coin_bonus_rewards;
      public PlayerPresent[] player_presents;

      public CoinbonusPresent()
      {
      }

      public CoinbonusPresent(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerCoinBonusHistory> coinBonusHistoryList = new List<PlayerCoinBonusHistory>();
        foreach (object json1 in (List<object>) json[nameof (player_coin_bonus_history)])
          coinBonusHistoryList.Add(json1 == null ? (PlayerCoinBonusHistory) null : new PlayerCoinBonusHistory((Dictionary<string, object>) json1));
        this.player_coin_bonus_history = coinBonusHistoryList.ToArray();
        SMManager.UpdateList<PlayerCoinBonusHistory>(this.player_coin_bonus_history);
        List<CoinBonus> coinBonusList = new List<CoinBonus>();
        foreach (object json2 in (List<object>) json[nameof (coin_bonuses)])
          coinBonusList.Add(json2 == null ? (CoinBonus) null : new CoinBonus((Dictionary<string, object>) json2));
        this.coin_bonuses = coinBonusList.ToArray();
        SMManager.UpdateList<CoinBonus>(this.coin_bonuses);
        this.player = json[nameof (player)] == null ? (Player) null : new Player((Dictionary<string, object>) json[nameof (player)]);
        SMManager.Change<Player>(this.player);
        List<CoinBonusReward> coinBonusRewardList = new List<CoinBonusReward>();
        foreach (object json3 in (List<object>) json[nameof (coin_bonus_rewards)])
          coinBonusRewardList.Add(json3 == null ? (CoinBonusReward) null : new CoinBonusReward((Dictionary<string, object>) json3));
        this.coin_bonus_rewards = coinBonusRewardList.ToArray();
        SMManager.UpdateList<CoinBonusReward>(this.coin_bonus_rewards);
        List<PlayerPresent> playerPresentList = new List<PlayerPresent>();
        foreach (object json4 in (List<object>) json[nameof (player_presents)])
          playerPresentList.Add(json4 == null ? (PlayerPresent) null : new PlayerPresent((Dictionary<string, object>) json4));
        this.player_presents = playerPresentList.ToArray();
        SMManager.UpdateList<PlayerPresent>(this.player_presents);
        if (!json.ContainsKey("player_presents:delete"))
          return;
        SMManager.DeleteList<PlayerPresent>(((IEnumerable<object>) json["player_presents:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class CoinbonusPresentPack : KeyCompare
    {
      public PlayerMaterialGear[] player_material_gears;
      public PlayerItem[] player_items;
      public WebAPI.Response.CoinbonusPresentPackRewards[] rewards;
      public PlayerUnit[] player_units;
      public PlayerUnitTypeTicket[] player_unit_type_tickets;
      public PlayerSeasonTicket[] player_season_tickets;
      public PlayerRecoveryItem[] player_recovery_items;
      public Player player;
      public PlayerAwakeSkill[] player_awake_skills;
      public PlayerSelectTicketSummary[] select_tickets;
      public UnlockQuest[] unlock_quests;
      public PlayerMaterialUnit[] player_material_units;
      public PlayerPresent[] player_presents;
      public PlayerQuestKey[] player_quest_keys;

      public CoinbonusPresentPack()
      {
      }

      public CoinbonusPresentPack(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerMaterialGear> playerMaterialGearList = new List<PlayerMaterialGear>();
        foreach (object json1 in (List<object>) json[nameof (player_material_gears)])
          playerMaterialGearList.Add(json1 == null ? (PlayerMaterialGear) null : new PlayerMaterialGear((Dictionary<string, object>) json1));
        this.player_material_gears = playerMaterialGearList.ToArray();
        SMManager.UpdateList<PlayerMaterialGear>(this.player_material_gears);
        List<PlayerItem> playerItemList = new List<PlayerItem>();
        foreach (object json2 in (List<object>) json[nameof (player_items)])
          playerItemList.Add(json2 == null ? (PlayerItem) null : new PlayerItem((Dictionary<string, object>) json2));
        this.player_items = playerItemList.ToArray();
        SMManager.UpdateList<PlayerItem>(this.player_items);
        List<WebAPI.Response.CoinbonusPresentPackRewards> presentPackRewardsList = new List<WebAPI.Response.CoinbonusPresentPackRewards>();
        foreach (object json3 in (List<object>) json[nameof (rewards)])
          presentPackRewardsList.Add(json3 == null ? (WebAPI.Response.CoinbonusPresentPackRewards) null : new WebAPI.Response.CoinbonusPresentPackRewards((Dictionary<string, object>) json3));
        this.rewards = presentPackRewardsList.ToArray();
        List<PlayerUnit> playerUnitList = new List<PlayerUnit>();
        foreach (object json4 in (List<object>) json[nameof (player_units)])
          playerUnitList.Add(json4 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json4));
        this.player_units = playerUnitList.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_units);
        List<PlayerUnitTypeTicket> playerUnitTypeTicketList = new List<PlayerUnitTypeTicket>();
        bool flag1 = (List<object>) json[nameof (player_unit_type_tickets)] == null;
        if (!flag1)
        {
          foreach (object json5 in (List<object>) json[nameof (player_unit_type_tickets)])
            playerUnitTypeTicketList.Add(json5 == null ? (PlayerUnitTypeTicket) null : new PlayerUnitTypeTicket((Dictionary<string, object>) json5));
        }
        this.player_unit_type_tickets = playerUnitTypeTicketList.ToArray();
        if (!flag1)
          SMManager.UpdateList<PlayerUnitTypeTicket>(this.player_unit_type_tickets);
        List<PlayerSeasonTicket> playerSeasonTicketList = new List<PlayerSeasonTicket>();
        bool flag2 = (List<object>) json[nameof (player_season_tickets)] == null;
        if (!flag2)
        {
          foreach (object json6 in (List<object>) json[nameof (player_season_tickets)])
            playerSeasonTicketList.Add(json6 == null ? (PlayerSeasonTicket) null : new PlayerSeasonTicket((Dictionary<string, object>) json6));
        }
        this.player_season_tickets = playerSeasonTicketList.ToArray();
        if (!flag2)
          SMManager.UpdateList<PlayerSeasonTicket>(this.player_season_tickets);
        List<PlayerRecoveryItem> playerRecoveryItemList = new List<PlayerRecoveryItem>();
        foreach (object json7 in (List<object>) json[nameof (player_recovery_items)])
          playerRecoveryItemList.Add(json7 == null ? (PlayerRecoveryItem) null : new PlayerRecoveryItem((Dictionary<string, object>) json7));
        this.player_recovery_items = playerRecoveryItemList.ToArray();
        SMManager.UpdateList<PlayerRecoveryItem>(this.player_recovery_items);
        this.player = json[nameof (player)] == null ? (Player) null : new Player((Dictionary<string, object>) json[nameof (player)]);
        SMManager.Change<Player>(this.player);
        List<PlayerAwakeSkill> playerAwakeSkillList = new List<PlayerAwakeSkill>();
        foreach (object json8 in (List<object>) json[nameof (player_awake_skills)])
          playerAwakeSkillList.Add(json8 == null ? (PlayerAwakeSkill) null : new PlayerAwakeSkill((Dictionary<string, object>) json8));
        this.player_awake_skills = playerAwakeSkillList.ToArray();
        SMManager.UpdateList<PlayerAwakeSkill>(this.player_awake_skills);
        List<PlayerSelectTicketSummary> selectTicketSummaryList = new List<PlayerSelectTicketSummary>();
        bool flag3 = (List<object>) json[nameof (select_tickets)] == null;
        if (!flag3)
        {
          foreach (object json9 in (List<object>) json[nameof (select_tickets)])
            selectTicketSummaryList.Add(json9 == null ? (PlayerSelectTicketSummary) null : new PlayerSelectTicketSummary((Dictionary<string, object>) json9));
        }
        this.select_tickets = selectTicketSummaryList.ToArray();
        if (!flag3)
          SMManager.UpdateList<PlayerSelectTicketSummary>(this.select_tickets);
        List<UnlockQuest> unlockQuestList = new List<UnlockQuest>();
        foreach (object json10 in (List<object>) json[nameof (unlock_quests)])
          unlockQuestList.Add(json10 == null ? (UnlockQuest) null : new UnlockQuest((Dictionary<string, object>) json10));
        this.unlock_quests = unlockQuestList.ToArray();
        List<PlayerMaterialUnit> playerMaterialUnitList = new List<PlayerMaterialUnit>();
        foreach (object json11 in (List<object>) json[nameof (player_material_units)])
          playerMaterialUnitList.Add(json11 == null ? (PlayerMaterialUnit) null : new PlayerMaterialUnit((Dictionary<string, object>) json11));
        this.player_material_units = playerMaterialUnitList.ToArray();
        SMManager.UpdateList<PlayerMaterialUnit>(this.player_material_units);
        List<PlayerPresent> playerPresentList = new List<PlayerPresent>();
        foreach (object json12 in (List<object>) json[nameof (player_presents)])
          playerPresentList.Add(json12 == null ? (PlayerPresent) null : new PlayerPresent((Dictionary<string, object>) json12));
        this.player_presents = playerPresentList.ToArray();
        SMManager.UpdateList<PlayerPresent>(this.player_presents);
        List<PlayerQuestKey> playerQuestKeyList = new List<PlayerQuestKey>();
        foreach (object json13 in (List<object>) json[nameof (player_quest_keys)])
          playerQuestKeyList.Add(json13 == null ? (PlayerQuestKey) null : new PlayerQuestKey((Dictionary<string, object>) json13));
        this.player_quest_keys = playerQuestKeyList.ToArray();
        SMManager.UpdateList<PlayerQuestKey>(this.player_quest_keys);
      }
    }

    [Serializable]
    public class CoinbonusPresentPackRewards : KeyCompare
    {
      public int reward_quantity;
      public string reward_title;
      public int reward_id;
      public int reward_type_id;

      public CoinbonusPresentPackRewards()
      {
      }

      public CoinbonusPresentPackRewards(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_quantity = (int) (long) json[nameof (reward_quantity)];
        this.reward_title = (string) json[nameof (reward_title)];
        this.reward_id = (int) (long) json[nameof (reward_id)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
      }
    }

    [Serializable]
    public class CoinbonusReceiveGiftReward : KeyCompare
    {
      public Player player;
      public PlayerGiftHistory[] receivable_monthly_gift;
      public PlayerPresent[] player_presents;
      public PlayerGiftHistory[] receivable_weekly_gift;

      public CoinbonusReceiveGiftReward()
      {
      }

      public CoinbonusReceiveGiftReward(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.player = json[nameof (player)] == null ? (Player) null : new Player((Dictionary<string, object>) json[nameof (player)]);
        SMManager.Change<Player>(this.player);
        List<PlayerGiftHistory> playerGiftHistoryList1 = new List<PlayerGiftHistory>();
        foreach (object json1 in (List<object>) json[nameof (receivable_monthly_gift)])
          playerGiftHistoryList1.Add(json1 == null ? (PlayerGiftHistory) null : new PlayerGiftHistory((Dictionary<string, object>) json1));
        this.receivable_monthly_gift = playerGiftHistoryList1.ToArray();
        SMManager.UpdateList<PlayerGiftHistory>(this.receivable_monthly_gift);
        List<PlayerPresent> playerPresentList = new List<PlayerPresent>();
        foreach (object json2 in (List<object>) json[nameof (player_presents)])
          playerPresentList.Add(json2 == null ? (PlayerPresent) null : new PlayerPresent((Dictionary<string, object>) json2));
        this.player_presents = playerPresentList.ToArray();
        SMManager.UpdateList<PlayerPresent>(this.player_presents);
        List<PlayerGiftHistory> playerGiftHistoryList2 = new List<PlayerGiftHistory>();
        foreach (object json3 in (List<object>) json[nameof (receivable_weekly_gift)])
          playerGiftHistoryList2.Add(json3 == null ? (PlayerGiftHistory) null : new PlayerGiftHistory((Dictionary<string, object>) json3));
        this.receivable_weekly_gift = playerGiftHistoryList2.ToArray();
        SMManager.UpdateList<PlayerGiftHistory>(this.receivable_weekly_gift);
      }
    }

    [Serializable]
    public class CoinbonusReceivePackReward : KeyCompare
    {
      public PlayerMaterialGear[] player_material_gears;
      public PlayerItem[] player_items;
      public WebAPI.Response.CoinbonusReceivePackRewardRewards[] rewards;
      public PlayerUnit[] player_units;
      public PlayerUnitTypeTicket[] player_unit_type_tickets;
      public PlayerSeasonTicket[] player_season_tickets;
      public PlayerRecoveryItem[] player_recovery_items;
      public Player player;
      public PlayerAwakeSkill[] player_awake_skills;
      public PlayerSelectTicketSummary[] select_tickets;
      public UnlockQuest[] unlock_quests;
      public PlayerMaterialUnit[] player_material_units;
      public PlayerPresent[] player_presents;
      public PlayerQuestKey[] player_quest_keys;

      public CoinbonusReceivePackReward()
      {
      }

      public CoinbonusReceivePackReward(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerMaterialGear> playerMaterialGearList = new List<PlayerMaterialGear>();
        foreach (object json1 in (List<object>) json[nameof (player_material_gears)])
          playerMaterialGearList.Add(json1 == null ? (PlayerMaterialGear) null : new PlayerMaterialGear((Dictionary<string, object>) json1));
        this.player_material_gears = playerMaterialGearList.ToArray();
        SMManager.UpdateList<PlayerMaterialGear>(this.player_material_gears);
        List<PlayerItem> playerItemList = new List<PlayerItem>();
        foreach (object json2 in (List<object>) json[nameof (player_items)])
          playerItemList.Add(json2 == null ? (PlayerItem) null : new PlayerItem((Dictionary<string, object>) json2));
        this.player_items = playerItemList.ToArray();
        SMManager.UpdateList<PlayerItem>(this.player_items);
        List<WebAPI.Response.CoinbonusReceivePackRewardRewards> packRewardRewardsList = new List<WebAPI.Response.CoinbonusReceivePackRewardRewards>();
        foreach (object json3 in (List<object>) json[nameof (rewards)])
          packRewardRewardsList.Add(json3 == null ? (WebAPI.Response.CoinbonusReceivePackRewardRewards) null : new WebAPI.Response.CoinbonusReceivePackRewardRewards((Dictionary<string, object>) json3));
        this.rewards = packRewardRewardsList.ToArray();
        List<PlayerUnit> playerUnitList = new List<PlayerUnit>();
        foreach (object json4 in (List<object>) json[nameof (player_units)])
          playerUnitList.Add(json4 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json4));
        this.player_units = playerUnitList.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_units);
        List<PlayerUnitTypeTicket> playerUnitTypeTicketList = new List<PlayerUnitTypeTicket>();
        bool flag1 = (List<object>) json[nameof (player_unit_type_tickets)] == null;
        if (!flag1)
        {
          foreach (object json5 in (List<object>) json[nameof (player_unit_type_tickets)])
            playerUnitTypeTicketList.Add(json5 == null ? (PlayerUnitTypeTicket) null : new PlayerUnitTypeTicket((Dictionary<string, object>) json5));
        }
        this.player_unit_type_tickets = playerUnitTypeTicketList.ToArray();
        if (!flag1)
          SMManager.UpdateList<PlayerUnitTypeTicket>(this.player_unit_type_tickets);
        List<PlayerSeasonTicket> playerSeasonTicketList = new List<PlayerSeasonTicket>();
        bool flag2 = (List<object>) json[nameof (player_season_tickets)] == null;
        if (!flag2)
        {
          foreach (object json6 in (List<object>) json[nameof (player_season_tickets)])
            playerSeasonTicketList.Add(json6 == null ? (PlayerSeasonTicket) null : new PlayerSeasonTicket((Dictionary<string, object>) json6));
        }
        this.player_season_tickets = playerSeasonTicketList.ToArray();
        if (!flag2)
          SMManager.UpdateList<PlayerSeasonTicket>(this.player_season_tickets);
        List<PlayerRecoveryItem> playerRecoveryItemList = new List<PlayerRecoveryItem>();
        foreach (object json7 in (List<object>) json[nameof (player_recovery_items)])
          playerRecoveryItemList.Add(json7 == null ? (PlayerRecoveryItem) null : new PlayerRecoveryItem((Dictionary<string, object>) json7));
        this.player_recovery_items = playerRecoveryItemList.ToArray();
        SMManager.UpdateList<PlayerRecoveryItem>(this.player_recovery_items);
        this.player = json[nameof (player)] == null ? (Player) null : new Player((Dictionary<string, object>) json[nameof (player)]);
        SMManager.Change<Player>(this.player);
        List<PlayerAwakeSkill> playerAwakeSkillList = new List<PlayerAwakeSkill>();
        foreach (object json8 in (List<object>) json[nameof (player_awake_skills)])
          playerAwakeSkillList.Add(json8 == null ? (PlayerAwakeSkill) null : new PlayerAwakeSkill((Dictionary<string, object>) json8));
        this.player_awake_skills = playerAwakeSkillList.ToArray();
        SMManager.UpdateList<PlayerAwakeSkill>(this.player_awake_skills);
        List<PlayerSelectTicketSummary> selectTicketSummaryList = new List<PlayerSelectTicketSummary>();
        bool flag3 = (List<object>) json[nameof (select_tickets)] == null;
        if (!flag3)
        {
          foreach (object json9 in (List<object>) json[nameof (select_tickets)])
            selectTicketSummaryList.Add(json9 == null ? (PlayerSelectTicketSummary) null : new PlayerSelectTicketSummary((Dictionary<string, object>) json9));
        }
        this.select_tickets = selectTicketSummaryList.ToArray();
        if (!flag3)
          SMManager.UpdateList<PlayerSelectTicketSummary>(this.select_tickets);
        List<UnlockQuest> unlockQuestList = new List<UnlockQuest>();
        foreach (object json10 in (List<object>) json[nameof (unlock_quests)])
          unlockQuestList.Add(json10 == null ? (UnlockQuest) null : new UnlockQuest((Dictionary<string, object>) json10));
        this.unlock_quests = unlockQuestList.ToArray();
        List<PlayerMaterialUnit> playerMaterialUnitList = new List<PlayerMaterialUnit>();
        foreach (object json11 in (List<object>) json[nameof (player_material_units)])
          playerMaterialUnitList.Add(json11 == null ? (PlayerMaterialUnit) null : new PlayerMaterialUnit((Dictionary<string, object>) json11));
        this.player_material_units = playerMaterialUnitList.ToArray();
        SMManager.UpdateList<PlayerMaterialUnit>(this.player_material_units);
        List<PlayerPresent> playerPresentList = new List<PlayerPresent>();
        foreach (object json12 in (List<object>) json[nameof (player_presents)])
          playerPresentList.Add(json12 == null ? (PlayerPresent) null : new PlayerPresent((Dictionary<string, object>) json12));
        this.player_presents = playerPresentList.ToArray();
        SMManager.UpdateList<PlayerPresent>(this.player_presents);
        List<PlayerQuestKey> playerQuestKeyList = new List<PlayerQuestKey>();
        foreach (object json13 in (List<object>) json[nameof (player_quest_keys)])
          playerQuestKeyList.Add(json13 == null ? (PlayerQuestKey) null : new PlayerQuestKey((Dictionary<string, object>) json13));
        this.player_quest_keys = playerQuestKeyList.ToArray();
        SMManager.UpdateList<PlayerQuestKey>(this.player_quest_keys);
      }
    }

    [Serializable]
    public class CoinbonusReceivePackRewardRewards : KeyCompare
    {
      public int reward_quantity;
      public string reward_title;
      public int reward_id;
      public int reward_type_id;

      public CoinbonusReceivePackRewardRewards()
      {
      }

      public CoinbonusReceivePackRewardRewards(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_quantity = (int) (long) json[nameof (reward_quantity)];
        this.reward_title = (string) json[nameof (reward_title)];
        this.reward_id = (int) (long) json[nameof (reward_id)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
      }
    }

    [Serializable]
    public class ColosseumBoot : KeyCompare
    {
      public Bonus[] bonus;
      public Campaign[] campaigns;
      public ColosseumRecord colosseum_record;
      public Gladiator[] gladiators;
      public bool is_battle;
      public bool is_tutorial;
      public int next_battle_type;
      public Player player;
      public bool resume_able;

      public ColosseumBoot()
      {
      }

      public ColosseumBoot(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<Bonus> bonusList = new List<Bonus>();
        foreach (object json1 in (List<object>) json[nameof (bonus)])
          bonusList.Add(json1 == null ? (Bonus) null : new Bonus((Dictionary<string, object>) json1));
        this.bonus = bonusList.ToArray();
        List<Campaign> campaignList = new List<Campaign>();
        foreach (object json2 in (List<object>) json[nameof (campaigns)])
          campaignList.Add(json2 == null ? (Campaign) null : new Campaign((Dictionary<string, object>) json2));
        this.campaigns = campaignList.ToArray();
        this.colosseum_record = json[nameof (colosseum_record)] == null ? (ColosseumRecord) null : new ColosseumRecord((Dictionary<string, object>) json[nameof (colosseum_record)]);
        List<Gladiator> gladiatorList = new List<Gladiator>();
        foreach (object json3 in (List<object>) json[nameof (gladiators)])
          gladiatorList.Add(json3 == null ? (Gladiator) null : new Gladiator((Dictionary<string, object>) json3));
        this.gladiators = gladiatorList.ToArray();
        this.is_battle = (bool) json[nameof (is_battle)];
        this.is_tutorial = (bool) json[nameof (is_tutorial)];
        this.next_battle_type = (int) (long) json[nameof (next_battle_type)];
        this.player = json[nameof (player)] == null ? (Player) null : new Player((Dictionary<string, object>) json[nameof (player)]);
        SMManager.Change<Player>(this.player);
        this.resume_able = (bool) json[nameof (resume_able)];
      }
    }

    [Serializable]
    public class ColosseumFinish : KeyCompare
    {
      public bool is_battle;
      public int next_battle_type;
      public bool is_tutorial;
      public Player player;
      public ColosseumEnd colosseum_finish;
      public WebAPI.Response.ColosseumFinishCampaign_next_rewards[] campaign_next_rewards;
      public ColosseumRecord colosseum_record;
      public bool target_player_is_friend;
      public RankUpInfo colosseum_result_rank_up;
      public WebAPI.Response.ColosseumFinishBonus_rewards[] bonus_rewards;
      public PlayerUnit[] player_units;
      public Bonus[] bonus;
      public PlayerItem[] player_items;
      public Campaign[] campaigns;
      public int battle_type;
      public WebAPI.Response.ColosseumFinishCampaign_rewards[] campaign_rewards;
      public PlayerMaterialUnit[] player_material_units;
      public PlayerPresent[] player_presents;
      public PlayerMaterialGear[] player_material_gears;
      public PlayerCharacterIntimate[] player_character_intimates;
      public Gladiator[] gladiators;

      public ColosseumFinish()
      {
      }

      public ColosseumFinish(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.is_battle = (bool) json[nameof (is_battle)];
        this.next_battle_type = (int) (long) json[nameof (next_battle_type)];
        this.is_tutorial = (bool) json[nameof (is_tutorial)];
        this.player = json[nameof (player)] == null ? (Player) null : new Player((Dictionary<string, object>) json[nameof (player)]);
        SMManager.Change<Player>(this.player);
        this.colosseum_finish = json[nameof (colosseum_finish)] == null ? (ColosseumEnd) null : new ColosseumEnd((Dictionary<string, object>) json[nameof (colosseum_finish)]);
        List<WebAPI.Response.ColosseumFinishCampaign_next_rewards> campaignNextRewardsList = new List<WebAPI.Response.ColosseumFinishCampaign_next_rewards>();
        foreach (object json1 in (List<object>) json[nameof (campaign_next_rewards)])
          campaignNextRewardsList.Add(json1 == null ? (WebAPI.Response.ColosseumFinishCampaign_next_rewards) null : new WebAPI.Response.ColosseumFinishCampaign_next_rewards((Dictionary<string, object>) json1));
        this.campaign_next_rewards = campaignNextRewardsList.ToArray();
        this.colosseum_record = json[nameof (colosseum_record)] == null ? (ColosseumRecord) null : new ColosseumRecord((Dictionary<string, object>) json[nameof (colosseum_record)]);
        this.target_player_is_friend = (bool) json[nameof (target_player_is_friend)];
        this.colosseum_result_rank_up = json[nameof (colosseum_result_rank_up)] == null ? (RankUpInfo) null : new RankUpInfo((Dictionary<string, object>) json[nameof (colosseum_result_rank_up)]);
        List<WebAPI.Response.ColosseumFinishBonus_rewards> finishBonusRewardsList = new List<WebAPI.Response.ColosseumFinishBonus_rewards>();
        foreach (object json2 in (List<object>) json[nameof (bonus_rewards)])
          finishBonusRewardsList.Add(json2 == null ? (WebAPI.Response.ColosseumFinishBonus_rewards) null : new WebAPI.Response.ColosseumFinishBonus_rewards((Dictionary<string, object>) json2));
        this.bonus_rewards = finishBonusRewardsList.ToArray();
        List<PlayerUnit> playerUnitList = new List<PlayerUnit>();
        foreach (object json3 in (List<object>) json[nameof (player_units)])
          playerUnitList.Add(json3 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json3));
        this.player_units = playerUnitList.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_units);
        List<Bonus> bonusList = new List<Bonus>();
        foreach (object json4 in (List<object>) json[nameof (bonus)])
          bonusList.Add(json4 == null ? (Bonus) null : new Bonus((Dictionary<string, object>) json4));
        this.bonus = bonusList.ToArray();
        List<PlayerItem> playerItemList = new List<PlayerItem>();
        foreach (object json5 in (List<object>) json[nameof (player_items)])
          playerItemList.Add(json5 == null ? (PlayerItem) null : new PlayerItem((Dictionary<string, object>) json5));
        this.player_items = playerItemList.ToArray();
        SMManager.UpdateList<PlayerItem>(this.player_items);
        List<Campaign> campaignList = new List<Campaign>();
        foreach (object json6 in (List<object>) json[nameof (campaigns)])
          campaignList.Add(json6 == null ? (Campaign) null : new Campaign((Dictionary<string, object>) json6));
        this.campaigns = campaignList.ToArray();
        this.battle_type = (int) (long) json[nameof (battle_type)];
        List<WebAPI.Response.ColosseumFinishCampaign_rewards> finishCampaignRewardsList = new List<WebAPI.Response.ColosseumFinishCampaign_rewards>();
        foreach (object json7 in (List<object>) json[nameof (campaign_rewards)])
          finishCampaignRewardsList.Add(json7 == null ? (WebAPI.Response.ColosseumFinishCampaign_rewards) null : new WebAPI.Response.ColosseumFinishCampaign_rewards((Dictionary<string, object>) json7));
        this.campaign_rewards = finishCampaignRewardsList.ToArray();
        List<PlayerMaterialUnit> playerMaterialUnitList = new List<PlayerMaterialUnit>();
        foreach (object json8 in (List<object>) json[nameof (player_material_units)])
          playerMaterialUnitList.Add(json8 == null ? (PlayerMaterialUnit) null : new PlayerMaterialUnit((Dictionary<string, object>) json8));
        this.player_material_units = playerMaterialUnitList.ToArray();
        SMManager.UpdateList<PlayerMaterialUnit>(this.player_material_units);
        List<PlayerPresent> playerPresentList = new List<PlayerPresent>();
        foreach (object json9 in (List<object>) json[nameof (player_presents)])
          playerPresentList.Add(json9 == null ? (PlayerPresent) null : new PlayerPresent((Dictionary<string, object>) json9));
        this.player_presents = playerPresentList.ToArray();
        SMManager.UpdateList<PlayerPresent>(this.player_presents);
        List<PlayerMaterialGear> playerMaterialGearList = new List<PlayerMaterialGear>();
        foreach (object json10 in (List<object>) json[nameof (player_material_gears)])
          playerMaterialGearList.Add(json10 == null ? (PlayerMaterialGear) null : new PlayerMaterialGear((Dictionary<string, object>) json10));
        this.player_material_gears = playerMaterialGearList.ToArray();
        SMManager.UpdateList<PlayerMaterialGear>(this.player_material_gears);
        List<PlayerCharacterIntimate> characterIntimateList = new List<PlayerCharacterIntimate>();
        foreach (object json11 in (List<object>) json[nameof (player_character_intimates)])
          characterIntimateList.Add(json11 == null ? (PlayerCharacterIntimate) null : new PlayerCharacterIntimate((Dictionary<string, object>) json11));
        this.player_character_intimates = characterIntimateList.ToArray();
        SMManager.UpdateList<PlayerCharacterIntimate>(this.player_character_intimates);
        List<Gladiator> gladiatorList = new List<Gladiator>();
        foreach (object json12 in (List<object>) json[nameof (gladiators)])
          gladiatorList.Add(json12 == null ? (Gladiator) null : new Gladiator((Dictionary<string, object>) json12));
        this.gladiators = gladiatorList.ToArray();
        if (json.ContainsKey("player_material_gears:delete"))
          SMManager.DeleteList<PlayerMaterialGear>(((IEnumerable<object>) json["player_material_gears:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
        if (json.ContainsKey("player_items:delete"))
          SMManager.DeleteList<PlayerItem>(((IEnumerable<object>) json["player_items:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
        if (!json.ContainsKey("player_presents:delete"))
          return;
        SMManager.DeleteList<PlayerPresent>(((IEnumerable<object>) json["player_presents:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class ColosseumFinishCampaign_rewards : KeyCompare
    {
      public int reward_quantity;
      public string show_text2;
      public int reward_type_id;
      public int campaign_id;
      public string show_title;
      public string show_text;
      public int reward_id;

      public ColosseumFinishCampaign_rewards()
      {
      }

      public ColosseumFinishCampaign_rewards(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_quantity = (int) (long) json[nameof (reward_quantity)];
        this.show_text2 = (string) json[nameof (show_text2)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
        this.campaign_id = (int) (long) json[nameof (campaign_id)];
        this.show_title = (string) json[nameof (show_title)];
        this.show_text = (string) json[nameof (show_text)];
        this.reward_id = (int) (long) json[nameof (reward_id)];
      }
    }

    [Serializable]
    public class ColosseumFinishBonus_rewards : KeyCompare
    {
      public int reward_quantity;
      public int reward_type_id;
      public int reward_id;

      public ColosseumFinishBonus_rewards()
      {
      }

      public ColosseumFinishBonus_rewards(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_quantity = (int) (long) json[nameof (reward_quantity)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
        this.reward_id = (int) (long) json[nameof (reward_id)];
      }
    }

    [Serializable]
    public class ColosseumFinishCampaign_next_rewards : KeyCompare
    {
      public string next_reward_title;
      public int campaign_id;
      public string next_reward_text;

      public ColosseumFinishCampaign_next_rewards()
      {
      }

      public ColosseumFinishCampaign_next_rewards(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.next_reward_title = (string) json[nameof (next_reward_title)];
        this.campaign_id = (int) (long) json[nameof (campaign_id)];
        this.next_reward_text = (string) json[nameof (next_reward_text)];
      }
    }

    [Serializable]
    public class ColosseumForceClose : KeyCompare
    {
      public bool result;

      public ColosseumForceClose()
      {
      }

      public ColosseumForceClose(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.result = (bool) json[nameof (result)];
      }
    }

    [Serializable]
    public class ColosseumRanking : KeyCompare
    {
      public RankingPlayer my_ranking;
      public RankingPlayer[] colosseum_ranking;
      public RankingPlayer[] colosseum_friend_ranking;

      public ColosseumRanking()
      {
      }

      public ColosseumRanking(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.my_ranking = json[nameof (my_ranking)] == null ? (RankingPlayer) null : new RankingPlayer((Dictionary<string, object>) json[nameof (my_ranking)]);
        List<RankingPlayer> rankingPlayerList1 = new List<RankingPlayer>();
        foreach (object json1 in (List<object>) json[nameof (colosseum_ranking)])
          rankingPlayerList1.Add(json1 == null ? (RankingPlayer) null : new RankingPlayer((Dictionary<string, object>) json1));
        this.colosseum_ranking = rankingPlayerList1.ToArray();
        List<RankingPlayer> rankingPlayerList2 = new List<RankingPlayer>();
        foreach (object json2 in (List<object>) json[nameof (colosseum_friend_ranking)])
          rankingPlayerList2.Add(json2 == null ? (RankingPlayer) null : new RankingPlayer((Dictionary<string, object>) json2));
        this.colosseum_friend_ranking = rankingPlayerList2.ToArray();
      }
    }

    [Serializable]
    public class ColosseumResume : KeyCompare
    {
      public DateTime now;
      public PlayerGearReisouSchema[] colosseum_target_player_reisou_items;
      public Player player;
      public Bonus[] bonus;
      public PlayerGearReisouSchema[] colosseum_player_reisou_items;
      public PlayerUnit[] colosseum_player_over_killers;
      public PlayerUnit[] colosseum_target_player_over_killers;
      public PlayerItem[] colosseum_target_player_items;
      public PlayerUnit[] colosseum_player_units;
      public PlayerUnit[] colosseum_target_player_units;
      public string arena_transaction_id;
      public int battle_type;
      public PlayerAwakeSkill[] colosseum_player_awake_skills;
      public PlayerAwakeSkill[] colosseum_target_player_awake_skills;
      public PlayerItem[] colosseum_player_items;
      public Gladiator gladiator;

      public ColosseumResume()
      {
      }

      public ColosseumResume(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.now = DateTime.Parse((string) json[nameof (now)]);
        List<PlayerGearReisouSchema> gearReisouSchemaList1 = new List<PlayerGearReisouSchema>();
        foreach (object json1 in (List<object>) json[nameof (colosseum_target_player_reisou_items)])
          gearReisouSchemaList1.Add(json1 == null ? (PlayerGearReisouSchema) null : new PlayerGearReisouSchema((Dictionary<string, object>) json1));
        this.colosseum_target_player_reisou_items = gearReisouSchemaList1.ToArray();
        this.player = json[nameof (player)] == null ? (Player) null : new Player((Dictionary<string, object>) json[nameof (player)]);
        List<Bonus> bonusList = new List<Bonus>();
        foreach (object json2 in (List<object>) json[nameof (bonus)])
          bonusList.Add(json2 == null ? (Bonus) null : new Bonus((Dictionary<string, object>) json2));
        this.bonus = bonusList.ToArray();
        List<PlayerGearReisouSchema> gearReisouSchemaList2 = new List<PlayerGearReisouSchema>();
        foreach (object json3 in (List<object>) json[nameof (colosseum_player_reisou_items)])
          gearReisouSchemaList2.Add(json3 == null ? (PlayerGearReisouSchema) null : new PlayerGearReisouSchema((Dictionary<string, object>) json3));
        this.colosseum_player_reisou_items = gearReisouSchemaList2.ToArray();
        List<PlayerUnit> playerUnitList1 = new List<PlayerUnit>();
        foreach (object json4 in (List<object>) json[nameof (colosseum_player_over_killers)])
          playerUnitList1.Add(json4 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json4));
        this.colosseum_player_over_killers = playerUnitList1.ToArray();
        List<PlayerUnit> playerUnitList2 = new List<PlayerUnit>();
        foreach (object json5 in (List<object>) json[nameof (colosseum_target_player_over_killers)])
          playerUnitList2.Add(json5 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json5));
        this.colosseum_target_player_over_killers = playerUnitList2.ToArray();
        List<PlayerItem> playerItemList1 = new List<PlayerItem>();
        foreach (object json6 in (List<object>) json[nameof (colosseum_target_player_items)])
          playerItemList1.Add(json6 == null ? (PlayerItem) null : new PlayerItem((Dictionary<string, object>) json6));
        this.colosseum_target_player_items = playerItemList1.ToArray();
        List<PlayerUnit> playerUnitList3 = new List<PlayerUnit>();
        foreach (object json7 in (List<object>) json[nameof (colosseum_player_units)])
          playerUnitList3.Add(json7 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json7));
        this.colosseum_player_units = playerUnitList3.ToArray();
        List<PlayerUnit> playerUnitList4 = new List<PlayerUnit>();
        foreach (object json8 in (List<object>) json[nameof (colosseum_target_player_units)])
          playerUnitList4.Add(json8 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json8));
        this.colosseum_target_player_units = playerUnitList4.ToArray();
        this.arena_transaction_id = (string) json[nameof (arena_transaction_id)];
        this.battle_type = (int) (long) json[nameof (battle_type)];
        List<PlayerAwakeSkill> playerAwakeSkillList1 = new List<PlayerAwakeSkill>();
        foreach (object json9 in (List<object>) json[nameof (colosseum_player_awake_skills)])
          playerAwakeSkillList1.Add(json9 == null ? (PlayerAwakeSkill) null : new PlayerAwakeSkill((Dictionary<string, object>) json9));
        this.colosseum_player_awake_skills = playerAwakeSkillList1.ToArray();
        List<PlayerAwakeSkill> playerAwakeSkillList2 = new List<PlayerAwakeSkill>();
        foreach (object json10 in (List<object>) json[nameof (colosseum_target_player_awake_skills)])
          playerAwakeSkillList2.Add(json10 == null ? (PlayerAwakeSkill) null : new PlayerAwakeSkill((Dictionary<string, object>) json10));
        this.colosseum_target_player_awake_skills = playerAwakeSkillList2.ToArray();
        List<PlayerItem> playerItemList2 = new List<PlayerItem>();
        foreach (object json11 in (List<object>) json[nameof (colosseum_player_items)])
          playerItemList2.Add(json11 == null ? (PlayerItem) null : new PlayerItem((Dictionary<string, object>) json11));
        this.colosseum_player_items = playerItemList2.ToArray();
        this.gladiator = json[nameof (gladiator)] == null ? (Gladiator) null : new Gladiator((Dictionary<string, object>) json[nameof (gladiator)]);
      }
    }

    [Serializable]
    public class ColosseumStart : KeyCompare
    {
      public DateTime now;
      public PlayerGearReisouSchema[] colosseum_target_player_reisou_items;
      public Player player;
      public Bonus[] bonus;
      public PlayerGearReisouSchema[] colosseum_player_reisou_items;
      public PlayerUnit[] colosseum_player_over_killers;
      public PlayerUnit[] colosseum_target_player_over_killers;
      public PlayerItem[] colosseum_target_player_items;
      public PlayerUnit[] colosseum_player_units;
      public PlayerUnit[] colosseum_target_player_units;
      public string arena_transaction_id;
      public int battle_type;
      public PlayerAwakeSkill[] colosseum_player_awake_skills;
      public PlayerAwakeSkill[] colosseum_target_player_awake_skills;
      public PlayerItem[] colosseum_player_items;
      public Gladiator gladiator;

      public ColosseumStart()
      {
      }

      public ColosseumStart(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.now = DateTime.Parse((string) json[nameof (now)]);
        List<PlayerGearReisouSchema> gearReisouSchemaList1 = new List<PlayerGearReisouSchema>();
        foreach (object json1 in (List<object>) json[nameof (colosseum_target_player_reisou_items)])
          gearReisouSchemaList1.Add(json1 == null ? (PlayerGearReisouSchema) null : new PlayerGearReisouSchema((Dictionary<string, object>) json1));
        this.colosseum_target_player_reisou_items = gearReisouSchemaList1.ToArray();
        this.player = json[nameof (player)] == null ? (Player) null : new Player((Dictionary<string, object>) json[nameof (player)]);
        SMManager.Change<Player>(this.player);
        List<Bonus> bonusList = new List<Bonus>();
        foreach (object json2 in (List<object>) json[nameof (bonus)])
          bonusList.Add(json2 == null ? (Bonus) null : new Bonus((Dictionary<string, object>) json2));
        this.bonus = bonusList.ToArray();
        List<PlayerGearReisouSchema> gearReisouSchemaList2 = new List<PlayerGearReisouSchema>();
        foreach (object json3 in (List<object>) json[nameof (colosseum_player_reisou_items)])
          gearReisouSchemaList2.Add(json3 == null ? (PlayerGearReisouSchema) null : new PlayerGearReisouSchema((Dictionary<string, object>) json3));
        this.colosseum_player_reisou_items = gearReisouSchemaList2.ToArray();
        List<PlayerUnit> playerUnitList1 = new List<PlayerUnit>();
        foreach (object json4 in (List<object>) json[nameof (colosseum_player_over_killers)])
          playerUnitList1.Add(json4 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json4));
        this.colosseum_player_over_killers = playerUnitList1.ToArray();
        List<PlayerUnit> playerUnitList2 = new List<PlayerUnit>();
        foreach (object json5 in (List<object>) json[nameof (colosseum_target_player_over_killers)])
          playerUnitList2.Add(json5 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json5));
        this.colosseum_target_player_over_killers = playerUnitList2.ToArray();
        List<PlayerItem> playerItemList1 = new List<PlayerItem>();
        foreach (object json6 in (List<object>) json[nameof (colosseum_target_player_items)])
          playerItemList1.Add(json6 == null ? (PlayerItem) null : new PlayerItem((Dictionary<string, object>) json6));
        this.colosseum_target_player_items = playerItemList1.ToArray();
        List<PlayerUnit> playerUnitList3 = new List<PlayerUnit>();
        foreach (object json7 in (List<object>) json[nameof (colosseum_player_units)])
          playerUnitList3.Add(json7 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json7));
        this.colosseum_player_units = playerUnitList3.ToArray();
        List<PlayerUnit> playerUnitList4 = new List<PlayerUnit>();
        foreach (object json8 in (List<object>) json[nameof (colosseum_target_player_units)])
          playerUnitList4.Add(json8 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json8));
        this.colosseum_target_player_units = playerUnitList4.ToArray();
        this.arena_transaction_id = (string) json[nameof (arena_transaction_id)];
        this.battle_type = (int) (long) json[nameof (battle_type)];
        List<PlayerAwakeSkill> playerAwakeSkillList1 = new List<PlayerAwakeSkill>();
        foreach (object json9 in (List<object>) json[nameof (colosseum_player_awake_skills)])
          playerAwakeSkillList1.Add(json9 == null ? (PlayerAwakeSkill) null : new PlayerAwakeSkill((Dictionary<string, object>) json9));
        this.colosseum_player_awake_skills = playerAwakeSkillList1.ToArray();
        List<PlayerAwakeSkill> playerAwakeSkillList2 = new List<PlayerAwakeSkill>();
        foreach (object json10 in (List<object>) json[nameof (colosseum_target_player_awake_skills)])
          playerAwakeSkillList2.Add(json10 == null ? (PlayerAwakeSkill) null : new PlayerAwakeSkill((Dictionary<string, object>) json10));
        this.colosseum_target_player_awake_skills = playerAwakeSkillList2.ToArray();
        List<PlayerItem> playerItemList2 = new List<PlayerItem>();
        foreach (object json11 in (List<object>) json[nameof (colosseum_player_items)])
          playerItemList2.Add(json11 == null ? (PlayerItem) null : new PlayerItem((Dictionary<string, object>) json11));
        this.colosseum_player_items = playerItemList2.ToArray();
        this.gladiator = json[nameof (gladiator)] == null ? (Gladiator) null : new Gladiator((Dictionary<string, object>) json[nameof (gladiator)]);
      }
    }

    [Serializable]
    public class ColosseumTutorialBoot : KeyCompare
    {
      public Bonus[] bonus;
      public Campaign[] campaigns;
      public ColosseumRecord colosseum_record;
      public Gladiator[] gladiators;
      public bool is_battle;
      public bool is_tutorial;
      public int next_battle_type;
      public Player player;
      public bool resume_able;

      public ColosseumTutorialBoot()
      {
      }

      public ColosseumTutorialBoot(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<Bonus> bonusList = new List<Bonus>();
        foreach (object json1 in (List<object>) json[nameof (bonus)])
          bonusList.Add(json1 == null ? (Bonus) null : new Bonus((Dictionary<string, object>) json1));
        this.bonus = bonusList.ToArray();
        List<Campaign> campaignList = new List<Campaign>();
        foreach (object json2 in (List<object>) json[nameof (campaigns)])
          campaignList.Add(json2 == null ? (Campaign) null : new Campaign((Dictionary<string, object>) json2));
        this.campaigns = campaignList.ToArray();
        this.colosseum_record = json[nameof (colosseum_record)] == null ? (ColosseumRecord) null : new ColosseumRecord((Dictionary<string, object>) json[nameof (colosseum_record)]);
        List<Gladiator> gladiatorList = new List<Gladiator>();
        foreach (object json3 in (List<object>) json[nameof (gladiators)])
          gladiatorList.Add(json3 == null ? (Gladiator) null : new Gladiator((Dictionary<string, object>) json3));
        this.gladiators = gladiatorList.ToArray();
        this.is_battle = (bool) json[nameof (is_battle)];
        this.is_tutorial = (bool) json[nameof (is_tutorial)];
        this.next_battle_type = (int) (long) json[nameof (next_battle_type)];
        this.player = json[nameof (player)] == null ? (Player) null : new Player((Dictionary<string, object>) json[nameof (player)]);
        SMManager.Change<Player>(this.player);
        this.resume_able = (bool) json[nameof (resume_able)];
      }
    }

    [Serializable]
    public class ColosseumTutorialFinish : KeyCompare
    {
      public bool is_battle;
      public int next_battle_type;
      public bool is_tutorial;
      public Player player;
      public bool result;
      public ColosseumEnd colosseum_finish;
      public WebAPI.Response.ColosseumTutorialFinishCampaign_next_rewards[] campaign_next_rewards;
      public ColosseumRecord colosseum_record;
      public bool target_player_is_friend;
      public RankUpInfo colosseum_result_rank_up;
      public WebAPI.Response.ColosseumTutorialFinishBonus_rewards[] bonus_rewards;
      public PlayerUnit[] player_units;
      public Bonus[] bonus;
      public PlayerItem[] player_items;
      public Campaign[] campaigns;
      public int battle_type;
      public WebAPI.Response.ColosseumTutorialFinishCampaign_rewards[] campaign_rewards;
      public PlayerMaterialUnit[] player_material_units;
      public PlayerPresent[] player_presents;
      public PlayerMaterialGear[] player_material_gears;
      public PlayerCharacterIntimate[] player_character_intimates;
      public Gladiator[] gladiators;

      public ColosseumTutorialFinish()
      {
      }

      public ColosseumTutorialFinish(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.is_battle = (bool) json[nameof (is_battle)];
        this.next_battle_type = (int) (long) json[nameof (next_battle_type)];
        this.is_tutorial = (bool) json[nameof (is_tutorial)];
        this.player = json[nameof (player)] == null ? (Player) null : new Player((Dictionary<string, object>) json[nameof (player)]);
        SMManager.Change<Player>(this.player);
        this.result = (bool) json[nameof (result)];
        this.colosseum_finish = json[nameof (colosseum_finish)] == null ? (ColosseumEnd) null : new ColosseumEnd((Dictionary<string, object>) json[nameof (colosseum_finish)]);
        List<WebAPI.Response.ColosseumTutorialFinishCampaign_next_rewards> campaignNextRewardsList = new List<WebAPI.Response.ColosseumTutorialFinishCampaign_next_rewards>();
        foreach (object json1 in (List<object>) json[nameof (campaign_next_rewards)])
          campaignNextRewardsList.Add(json1 == null ? (WebAPI.Response.ColosseumTutorialFinishCampaign_next_rewards) null : new WebAPI.Response.ColosseumTutorialFinishCampaign_next_rewards((Dictionary<string, object>) json1));
        this.campaign_next_rewards = campaignNextRewardsList.ToArray();
        this.colosseum_record = json[nameof (colosseum_record)] == null ? (ColosseumRecord) null : new ColosseumRecord((Dictionary<string, object>) json[nameof (colosseum_record)]);
        this.target_player_is_friend = (bool) json[nameof (target_player_is_friend)];
        this.colosseum_result_rank_up = json[nameof (colosseum_result_rank_up)] == null ? (RankUpInfo) null : new RankUpInfo((Dictionary<string, object>) json[nameof (colosseum_result_rank_up)]);
        List<WebAPI.Response.ColosseumTutorialFinishBonus_rewards> finishBonusRewardsList = new List<WebAPI.Response.ColosseumTutorialFinishBonus_rewards>();
        foreach (object json2 in (List<object>) json[nameof (bonus_rewards)])
          finishBonusRewardsList.Add(json2 == null ? (WebAPI.Response.ColosseumTutorialFinishBonus_rewards) null : new WebAPI.Response.ColosseumTutorialFinishBonus_rewards((Dictionary<string, object>) json2));
        this.bonus_rewards = finishBonusRewardsList.ToArray();
        List<PlayerUnit> playerUnitList = new List<PlayerUnit>();
        foreach (object json3 in (List<object>) json[nameof (player_units)])
          playerUnitList.Add(json3 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json3));
        this.player_units = playerUnitList.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_units);
        List<Bonus> bonusList = new List<Bonus>();
        foreach (object json4 in (List<object>) json[nameof (bonus)])
          bonusList.Add(json4 == null ? (Bonus) null : new Bonus((Dictionary<string, object>) json4));
        this.bonus = bonusList.ToArray();
        List<PlayerItem> playerItemList = new List<PlayerItem>();
        foreach (object json5 in (List<object>) json[nameof (player_items)])
          playerItemList.Add(json5 == null ? (PlayerItem) null : new PlayerItem((Dictionary<string, object>) json5));
        this.player_items = playerItemList.ToArray();
        SMManager.UpdateList<PlayerItem>(this.player_items);
        List<Campaign> campaignList = new List<Campaign>();
        foreach (object json6 in (List<object>) json[nameof (campaigns)])
          campaignList.Add(json6 == null ? (Campaign) null : new Campaign((Dictionary<string, object>) json6));
        this.campaigns = campaignList.ToArray();
        this.battle_type = (int) (long) json[nameof (battle_type)];
        List<WebAPI.Response.ColosseumTutorialFinishCampaign_rewards> finishCampaignRewardsList = new List<WebAPI.Response.ColosseumTutorialFinishCampaign_rewards>();
        foreach (object json7 in (List<object>) json[nameof (campaign_rewards)])
          finishCampaignRewardsList.Add(json7 == null ? (WebAPI.Response.ColosseumTutorialFinishCampaign_rewards) null : new WebAPI.Response.ColosseumTutorialFinishCampaign_rewards((Dictionary<string, object>) json7));
        this.campaign_rewards = finishCampaignRewardsList.ToArray();
        List<PlayerMaterialUnit> playerMaterialUnitList = new List<PlayerMaterialUnit>();
        foreach (object json8 in (List<object>) json[nameof (player_material_units)])
          playerMaterialUnitList.Add(json8 == null ? (PlayerMaterialUnit) null : new PlayerMaterialUnit((Dictionary<string, object>) json8));
        this.player_material_units = playerMaterialUnitList.ToArray();
        SMManager.UpdateList<PlayerMaterialUnit>(this.player_material_units);
        List<PlayerPresent> playerPresentList = new List<PlayerPresent>();
        foreach (object json9 in (List<object>) json[nameof (player_presents)])
          playerPresentList.Add(json9 == null ? (PlayerPresent) null : new PlayerPresent((Dictionary<string, object>) json9));
        this.player_presents = playerPresentList.ToArray();
        SMManager.UpdateList<PlayerPresent>(this.player_presents);
        List<PlayerMaterialGear> playerMaterialGearList = new List<PlayerMaterialGear>();
        foreach (object json10 in (List<object>) json[nameof (player_material_gears)])
          playerMaterialGearList.Add(json10 == null ? (PlayerMaterialGear) null : new PlayerMaterialGear((Dictionary<string, object>) json10));
        this.player_material_gears = playerMaterialGearList.ToArray();
        SMManager.UpdateList<PlayerMaterialGear>(this.player_material_gears);
        List<PlayerCharacterIntimate> characterIntimateList = new List<PlayerCharacterIntimate>();
        foreach (object json11 in (List<object>) json[nameof (player_character_intimates)])
          characterIntimateList.Add(json11 == null ? (PlayerCharacterIntimate) null : new PlayerCharacterIntimate((Dictionary<string, object>) json11));
        this.player_character_intimates = characterIntimateList.ToArray();
        SMManager.UpdateList<PlayerCharacterIntimate>(this.player_character_intimates);
        List<Gladiator> gladiatorList = new List<Gladiator>();
        foreach (object json12 in (List<object>) json[nameof (gladiators)])
          gladiatorList.Add(json12 == null ? (Gladiator) null : new Gladiator((Dictionary<string, object>) json12));
        this.gladiators = gladiatorList.ToArray();
        if (json.ContainsKey("player_material_gears:delete"))
          SMManager.DeleteList<PlayerMaterialGear>(((IEnumerable<object>) json["player_material_gears:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
        if (!json.ContainsKey("player_presents:delete"))
          return;
        SMManager.DeleteList<PlayerPresent>(((IEnumerable<object>) json["player_presents:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class ColosseumTutorialFinishCampaign_rewards : KeyCompare
    {
      public int reward_quantity;
      public string show_text2;
      public int reward_type_id;
      public int campaign_id;
      public string show_title;
      public string show_text;
      public int reward_id;

      public ColosseumTutorialFinishCampaign_rewards()
      {
      }

      public ColosseumTutorialFinishCampaign_rewards(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_quantity = (int) (long) json[nameof (reward_quantity)];
        this.show_text2 = (string) json[nameof (show_text2)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
        this.campaign_id = (int) (long) json[nameof (campaign_id)];
        this.show_title = (string) json[nameof (show_title)];
        this.show_text = (string) json[nameof (show_text)];
        this.reward_id = (int) (long) json[nameof (reward_id)];
      }
    }

    [Serializable]
    public class ColosseumTutorialFinishBonus_rewards : KeyCompare
    {
      public int reward_quantity;
      public int reward_type_id;
      public int reward_id;

      public ColosseumTutorialFinishBonus_rewards()
      {
      }

      public ColosseumTutorialFinishBonus_rewards(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_quantity = (int) (long) json[nameof (reward_quantity)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
        this.reward_id = (int) (long) json[nameof (reward_id)];
      }
    }

    [Serializable]
    public class ColosseumTutorialFinishCampaign_next_rewards : KeyCompare
    {
      public string next_reward_title;
      public int campaign_id;
      public string next_reward_text;

      public ColosseumTutorialFinishCampaign_next_rewards()
      {
      }

      public ColosseumTutorialFinishCampaign_next_rewards(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.next_reward_title = (string) json[nameof (next_reward_title)];
        this.campaign_id = (int) (long) json[nameof (campaign_id)];
        this.next_reward_text = (string) json[nameof (next_reward_text)];
      }
    }

    [Serializable]
    public class ColosseumTutorialForceClose : KeyCompare
    {
      public bool result;

      public ColosseumTutorialForceClose()
      {
      }

      public ColosseumTutorialForceClose(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.result = (bool) json[nameof (result)];
      }
    }

    [Serializable]
    public class ColosseumTutorialResume : KeyCompare
    {
      public DateTime now;
      public PlayerGearReisouSchema[] colosseum_target_player_reisou_items;
      public Player player;
      public Bonus[] bonus;
      public PlayerGearReisouSchema[] colosseum_player_reisou_items;
      public PlayerUnit[] colosseum_player_over_killers;
      public PlayerUnit[] colosseum_target_player_over_killers;
      public PlayerItem[] colosseum_target_player_items;
      public PlayerUnit[] colosseum_player_units;
      public PlayerUnit[] colosseum_target_player_units;
      public string arena_transaction_id;
      public int battle_type;
      public PlayerAwakeSkill[] colosseum_player_awake_skills;
      public PlayerAwakeSkill[] colosseum_target_player_awake_skills;
      public PlayerItem[] colosseum_player_items;
      public Gladiator gladiator;

      public ColosseumTutorialResume()
      {
      }

      public ColosseumTutorialResume(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.now = DateTime.Parse((string) json[nameof (now)]);
        List<PlayerGearReisouSchema> gearReisouSchemaList1 = new List<PlayerGearReisouSchema>();
        foreach (object json1 in (List<object>) json[nameof (colosseum_target_player_reisou_items)])
          gearReisouSchemaList1.Add(json1 == null ? (PlayerGearReisouSchema) null : new PlayerGearReisouSchema((Dictionary<string, object>) json1));
        this.colosseum_target_player_reisou_items = gearReisouSchemaList1.ToArray();
        this.player = json[nameof (player)] == null ? (Player) null : new Player((Dictionary<string, object>) json[nameof (player)]);
        List<Bonus> bonusList = new List<Bonus>();
        foreach (object json2 in (List<object>) json[nameof (bonus)])
          bonusList.Add(json2 == null ? (Bonus) null : new Bonus((Dictionary<string, object>) json2));
        this.bonus = bonusList.ToArray();
        List<PlayerGearReisouSchema> gearReisouSchemaList2 = new List<PlayerGearReisouSchema>();
        foreach (object json3 in (List<object>) json[nameof (colosseum_player_reisou_items)])
          gearReisouSchemaList2.Add(json3 == null ? (PlayerGearReisouSchema) null : new PlayerGearReisouSchema((Dictionary<string, object>) json3));
        this.colosseum_player_reisou_items = gearReisouSchemaList2.ToArray();
        List<PlayerUnit> playerUnitList1 = new List<PlayerUnit>();
        foreach (object json4 in (List<object>) json[nameof (colosseum_player_over_killers)])
          playerUnitList1.Add(json4 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json4));
        this.colosseum_player_over_killers = playerUnitList1.ToArray();
        List<PlayerUnit> playerUnitList2 = new List<PlayerUnit>();
        foreach (object json5 in (List<object>) json[nameof (colosseum_target_player_over_killers)])
          playerUnitList2.Add(json5 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json5));
        this.colosseum_target_player_over_killers = playerUnitList2.ToArray();
        List<PlayerItem> playerItemList1 = new List<PlayerItem>();
        foreach (object json6 in (List<object>) json[nameof (colosseum_target_player_items)])
          playerItemList1.Add(json6 == null ? (PlayerItem) null : new PlayerItem((Dictionary<string, object>) json6));
        this.colosseum_target_player_items = playerItemList1.ToArray();
        List<PlayerUnit> playerUnitList3 = new List<PlayerUnit>();
        foreach (object json7 in (List<object>) json[nameof (colosseum_player_units)])
          playerUnitList3.Add(json7 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json7));
        this.colosseum_player_units = playerUnitList3.ToArray();
        List<PlayerUnit> playerUnitList4 = new List<PlayerUnit>();
        foreach (object json8 in (List<object>) json[nameof (colosseum_target_player_units)])
          playerUnitList4.Add(json8 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json8));
        this.colosseum_target_player_units = playerUnitList4.ToArray();
        this.arena_transaction_id = (string) json[nameof (arena_transaction_id)];
        this.battle_type = (int) (long) json[nameof (battle_type)];
        List<PlayerAwakeSkill> playerAwakeSkillList1 = new List<PlayerAwakeSkill>();
        foreach (object json9 in (List<object>) json[nameof (colosseum_player_awake_skills)])
          playerAwakeSkillList1.Add(json9 == null ? (PlayerAwakeSkill) null : new PlayerAwakeSkill((Dictionary<string, object>) json9));
        this.colosseum_player_awake_skills = playerAwakeSkillList1.ToArray();
        List<PlayerAwakeSkill> playerAwakeSkillList2 = new List<PlayerAwakeSkill>();
        foreach (object json10 in (List<object>) json[nameof (colosseum_target_player_awake_skills)])
          playerAwakeSkillList2.Add(json10 == null ? (PlayerAwakeSkill) null : new PlayerAwakeSkill((Dictionary<string, object>) json10));
        this.colosseum_target_player_awake_skills = playerAwakeSkillList2.ToArray();
        List<PlayerItem> playerItemList2 = new List<PlayerItem>();
        foreach (object json11 in (List<object>) json[nameof (colosseum_player_items)])
          playerItemList2.Add(json11 == null ? (PlayerItem) null : new PlayerItem((Dictionary<string, object>) json11));
        this.colosseum_player_items = playerItemList2.ToArray();
        this.gladiator = json[nameof (gladiator)] == null ? (Gladiator) null : new Gladiator((Dictionary<string, object>) json[nameof (gladiator)]);
      }
    }

    [Serializable]
    public class ColosseumTutorialStart : KeyCompare
    {
      public DateTime now;
      public PlayerGearReisouSchema[] colosseum_target_player_reisou_items;
      public Player player;
      public Bonus[] bonus;
      public PlayerGearReisouSchema[] colosseum_player_reisou_items;
      public PlayerUnit[] colosseum_player_over_killers;
      public PlayerUnit[] colosseum_target_player_over_killers;
      public PlayerItem[] colosseum_target_player_items;
      public PlayerUnit[] colosseum_player_units;
      public PlayerUnit[] colosseum_target_player_units;
      public string arena_transaction_id;
      public int battle_type;
      public PlayerAwakeSkill[] colosseum_player_awake_skills;
      public PlayerAwakeSkill[] colosseum_target_player_awake_skills;
      public PlayerItem[] colosseum_player_items;
      public Gladiator gladiator;

      public ColosseumTutorialStart()
      {
      }

      public ColosseumTutorialStart(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.now = DateTime.Parse((string) json[nameof (now)]);
        List<PlayerGearReisouSchema> gearReisouSchemaList1 = new List<PlayerGearReisouSchema>();
        foreach (object json1 in (List<object>) json[nameof (colosseum_target_player_reisou_items)])
          gearReisouSchemaList1.Add(json1 == null ? (PlayerGearReisouSchema) null : new PlayerGearReisouSchema((Dictionary<string, object>) json1));
        this.colosseum_target_player_reisou_items = gearReisouSchemaList1.ToArray();
        this.player = json[nameof (player)] == null ? (Player) null : new Player((Dictionary<string, object>) json[nameof (player)]);
        SMManager.Change<Player>(this.player);
        List<Bonus> bonusList = new List<Bonus>();
        foreach (object json2 in (List<object>) json[nameof (bonus)])
          bonusList.Add(json2 == null ? (Bonus) null : new Bonus((Dictionary<string, object>) json2));
        this.bonus = bonusList.ToArray();
        List<PlayerGearReisouSchema> gearReisouSchemaList2 = new List<PlayerGearReisouSchema>();
        foreach (object json3 in (List<object>) json[nameof (colosseum_player_reisou_items)])
          gearReisouSchemaList2.Add(json3 == null ? (PlayerGearReisouSchema) null : new PlayerGearReisouSchema((Dictionary<string, object>) json3));
        this.colosseum_player_reisou_items = gearReisouSchemaList2.ToArray();
        List<PlayerUnit> playerUnitList1 = new List<PlayerUnit>();
        foreach (object json4 in (List<object>) json[nameof (colosseum_player_over_killers)])
          playerUnitList1.Add(json4 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json4));
        this.colosseum_player_over_killers = playerUnitList1.ToArray();
        List<PlayerUnit> playerUnitList2 = new List<PlayerUnit>();
        foreach (object json5 in (List<object>) json[nameof (colosseum_target_player_over_killers)])
          playerUnitList2.Add(json5 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json5));
        this.colosseum_target_player_over_killers = playerUnitList2.ToArray();
        List<PlayerItem> playerItemList1 = new List<PlayerItem>();
        foreach (object json6 in (List<object>) json[nameof (colosseum_target_player_items)])
          playerItemList1.Add(json6 == null ? (PlayerItem) null : new PlayerItem((Dictionary<string, object>) json6));
        this.colosseum_target_player_items = playerItemList1.ToArray();
        List<PlayerUnit> playerUnitList3 = new List<PlayerUnit>();
        foreach (object json7 in (List<object>) json[nameof (colosseum_player_units)])
          playerUnitList3.Add(json7 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json7));
        this.colosseum_player_units = playerUnitList3.ToArray();
        List<PlayerUnit> playerUnitList4 = new List<PlayerUnit>();
        foreach (object json8 in (List<object>) json[nameof (colosseum_target_player_units)])
          playerUnitList4.Add(json8 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json8));
        this.colosseum_target_player_units = playerUnitList4.ToArray();
        this.arena_transaction_id = (string) json[nameof (arena_transaction_id)];
        this.battle_type = (int) (long) json[nameof (battle_type)];
        List<PlayerAwakeSkill> playerAwakeSkillList1 = new List<PlayerAwakeSkill>();
        foreach (object json9 in (List<object>) json[nameof (colosseum_player_awake_skills)])
          playerAwakeSkillList1.Add(json9 == null ? (PlayerAwakeSkill) null : new PlayerAwakeSkill((Dictionary<string, object>) json9));
        this.colosseum_player_awake_skills = playerAwakeSkillList1.ToArray();
        List<PlayerAwakeSkill> playerAwakeSkillList2 = new List<PlayerAwakeSkill>();
        foreach (object json10 in (List<object>) json[nameof (colosseum_target_player_awake_skills)])
          playerAwakeSkillList2.Add(json10 == null ? (PlayerAwakeSkill) null : new PlayerAwakeSkill((Dictionary<string, object>) json10));
        this.colosseum_target_player_awake_skills = playerAwakeSkillList2.ToArray();
        List<PlayerItem> playerItemList2 = new List<PlayerItem>();
        foreach (object json11 in (List<object>) json[nameof (colosseum_player_items)])
          playerItemList2.Add(json11 == null ? (PlayerItem) null : new PlayerItem((Dictionary<string, object>) json11));
        this.colosseum_player_items = playerItemList2.ToArray();
        this.gladiator = json[nameof (gladiator)] == null ? (Gladiator) null : new Gladiator((Dictionary<string, object>) json[nameof (gladiator)]);
      }
    }

    [Serializable]
    public class DailymissionBulkReceive : KeyCompare
    {
      public PlayerUnit[] player_units;
      public SeaPlayer sea_player;
      public Player player;
      public PlayerDailyMissionPoint points;
      public int[] received_missions;
      public PlayerDailyMissionAchievement[] player_daily_missions;
      public PlayerPresent[] player_presents;

      public DailymissionBulkReceive()
      {
      }

      public DailymissionBulkReceive(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerUnit> playerUnitList = new List<PlayerUnit>();
        foreach (object json1 in (List<object>) json[nameof (player_units)])
          playerUnitList.Add(json1 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json1));
        this.player_units = playerUnitList.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_units);
        this.sea_player = json[nameof (sea_player)] == null ? (SeaPlayer) null : new SeaPlayer((Dictionary<string, object>) json[nameof (sea_player)]);
        if (this.sea_player != null)
          SMManager.Change<SeaPlayer>(this.sea_player);
        this.player = json[nameof (player)] == null ? (Player) null : new Player((Dictionary<string, object>) json[nameof (player)]);
        SMManager.Change<Player>(this.player);
        this.points = json[nameof (points)] == null ? (PlayerDailyMissionPoint) null : new PlayerDailyMissionPoint((Dictionary<string, object>) json[nameof (points)]);
        SMManager.Change<PlayerDailyMissionPoint>(this.points);
        this.received_missions = ((IEnumerable<object>) json[nameof (received_missions)]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).ToArray<int>();
        List<PlayerDailyMissionAchievement> missionAchievementList = new List<PlayerDailyMissionAchievement>();
        foreach (object json2 in (List<object>) json[nameof (player_daily_missions)])
          missionAchievementList.Add(json2 == null ? (PlayerDailyMissionAchievement) null : new PlayerDailyMissionAchievement((Dictionary<string, object>) json2));
        this.player_daily_missions = missionAchievementList.ToArray();
        SMManager.UpdateList<PlayerDailyMissionAchievement>(this.player_daily_missions);
        List<PlayerPresent> playerPresentList = new List<PlayerPresent>();
        foreach (object json3 in (List<object>) json[nameof (player_presents)])
          playerPresentList.Add(json3 == null ? (PlayerPresent) null : new PlayerPresent((Dictionary<string, object>) json3));
        this.player_presents = playerPresentList.ToArray();
        SMManager.UpdateList<PlayerPresent>(this.player_presents);
        if (!json.ContainsKey("player_presents:delete"))
          return;
        SMManager.DeleteList<PlayerPresent>(((IEnumerable<object>) json["player_presents:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class DailymissionExternalLink : KeyCompare
    {
      public Player player;

      public DailymissionExternalLink()
      {
      }

      public DailymissionExternalLink(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.player = json[nameof (player)] == null ? (Player) null : new Player((Dictionary<string, object>) json[nameof (player)]);
        SMManager.Change<Player>(this.player);
      }
    }

    [Serializable]
    public class DailymissionIndex : KeyCompare
    {
      public Player player;
      public GuildMissionInfo[] player_guild_missions;
      public PlayerDailyMissionPoint points;
      public PlayerDailyMissionAchievement[] player_daily_missions;

      public DailymissionIndex()
      {
      }

      public DailymissionIndex(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.player = json[nameof (player)] == null ? (Player) null : new Player((Dictionary<string, object>) json[nameof (player)]);
        SMManager.Change<Player>(this.player);
        List<GuildMissionInfo> guildMissionInfoList = new List<GuildMissionInfo>();
        foreach (object json1 in (List<object>) json[nameof (player_guild_missions)])
          guildMissionInfoList.Add(json1 == null ? (GuildMissionInfo) null : new GuildMissionInfo((Dictionary<string, object>) json1));
        this.player_guild_missions = guildMissionInfoList.ToArray();
        SMManager.UpdateList<GuildMissionInfo>(this.player_guild_missions);
        this.points = json[nameof (points)] == null ? (PlayerDailyMissionPoint) null : new PlayerDailyMissionPoint((Dictionary<string, object>) json[nameof (points)]);
        SMManager.Change<PlayerDailyMissionPoint>(this.points);
        List<PlayerDailyMissionAchievement> missionAchievementList = new List<PlayerDailyMissionAchievement>();
        foreach (object json2 in (List<object>) json[nameof (player_daily_missions)])
          missionAchievementList.Add(json2 == null ? (PlayerDailyMissionAchievement) null : new PlayerDailyMissionAchievement((Dictionary<string, object>) json2));
        this.player_daily_missions = missionAchievementList.ToArray();
        SMManager.UpdateList<PlayerDailyMissionAchievement>(this.player_daily_missions);
      }
    }

    [Serializable]
    public class DailymissionPointRewardReceive : KeyCompare
    {
      public Player player;
      public SeaPlayer sea_player;
      public PlayerPresent[] player_presents;
      public PlayerDailyMissionPoint points;

      public DailymissionPointRewardReceive()
      {
      }

      public DailymissionPointRewardReceive(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.player = json[nameof (player)] == null ? (Player) null : new Player((Dictionary<string, object>) json[nameof (player)]);
        SMManager.Change<Player>(this.player);
        this.sea_player = json[nameof (sea_player)] == null ? (SeaPlayer) null : new SeaPlayer((Dictionary<string, object>) json[nameof (sea_player)]);
        if (this.sea_player != null)
          SMManager.Change<SeaPlayer>(this.sea_player);
        List<PlayerPresent> playerPresentList = new List<PlayerPresent>();
        foreach (object json1 in (List<object>) json[nameof (player_presents)])
          playerPresentList.Add(json1 == null ? (PlayerPresent) null : new PlayerPresent((Dictionary<string, object>) json1));
        this.player_presents = playerPresentList.ToArray();
        SMManager.UpdateList<PlayerPresent>(this.player_presents);
        this.points = json[nameof (points)] == null ? (PlayerDailyMissionPoint) null : new PlayerDailyMissionPoint((Dictionary<string, object>) json[nameof (points)]);
        SMManager.Change<PlayerDailyMissionPoint>(this.points);
        if (!json.ContainsKey("player_presents:delete"))
          return;
        SMManager.DeleteList<PlayerPresent>(((IEnumerable<object>) json["player_presents:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class DailymissionReceive : KeyCompare
    {
      public PlayerUnit[] player_units;
      public SeaPlayer sea_player;
      public Player player;
      public PlayerDailyMissionPoint points;
      public PlayerDailyMissionAchievement[] player_daily_missions;
      public PlayerPresent[] player_presents;

      public DailymissionReceive()
      {
      }

      public DailymissionReceive(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerUnit> playerUnitList = new List<PlayerUnit>();
        foreach (object json1 in (List<object>) json[nameof (player_units)])
          playerUnitList.Add(json1 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json1));
        this.player_units = playerUnitList.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_units);
        this.sea_player = json[nameof (sea_player)] == null ? (SeaPlayer) null : new SeaPlayer((Dictionary<string, object>) json[nameof (sea_player)]);
        if (this.sea_player != null)
          SMManager.Change<SeaPlayer>(this.sea_player);
        this.player = json[nameof (player)] == null ? (Player) null : new Player((Dictionary<string, object>) json[nameof (player)]);
        SMManager.Change<Player>(this.player);
        this.points = json[nameof (points)] == null ? (PlayerDailyMissionPoint) null : new PlayerDailyMissionPoint((Dictionary<string, object>) json[nameof (points)]);
        SMManager.Change<PlayerDailyMissionPoint>(this.points);
        List<PlayerDailyMissionAchievement> missionAchievementList = new List<PlayerDailyMissionAchievement>();
        foreach (object json2 in (List<object>) json[nameof (player_daily_missions)])
          missionAchievementList.Add(json2 == null ? (PlayerDailyMissionAchievement) null : new PlayerDailyMissionAchievement((Dictionary<string, object>) json2));
        this.player_daily_missions = missionAchievementList.ToArray();
        SMManager.UpdateList<PlayerDailyMissionAchievement>(this.player_daily_missions);
        List<PlayerPresent> playerPresentList = new List<PlayerPresent>();
        foreach (object json3 in (List<object>) json[nameof (player_presents)])
          playerPresentList.Add(json3 == null ? (PlayerPresent) null : new PlayerPresent((Dictionary<string, object>) json3));
        this.player_presents = playerPresentList.ToArray();
        SMManager.UpdateList<PlayerPresent>(this.player_presents);
        if (!json.ContainsKey("player_presents:delete"))
          return;
        SMManager.DeleteList<PlayerPresent>(((IEnumerable<object>) json["player_presents:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class DailymissionReceiveDailyAll : KeyCompare
    {
      public Player player;
      public PlayerDailyMissionAchievement[] player_daily_missions;
      public PlayerPresent[] player_presents;
      public PlayerUnit[] player_units;
      public PlayerDailyMissionPoint points;
      public int[] received_missions;
      public int[] received_points;
      public SeaPlayer sea_player;

      public DailymissionReceiveDailyAll()
      {
      }

      public DailymissionReceiveDailyAll(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.player = json[nameof (player)] == null ? (Player) null : new Player((Dictionary<string, object>) json[nameof (player)]);
        SMManager.Change<Player>(this.player);
        List<PlayerDailyMissionAchievement> missionAchievementList = new List<PlayerDailyMissionAchievement>();
        foreach (object json1 in (List<object>) json[nameof (player_daily_missions)])
          missionAchievementList.Add(json1 == null ? (PlayerDailyMissionAchievement) null : new PlayerDailyMissionAchievement((Dictionary<string, object>) json1));
        this.player_daily_missions = missionAchievementList.ToArray();
        SMManager.UpdateList<PlayerDailyMissionAchievement>(this.player_daily_missions);
        List<PlayerPresent> playerPresentList = new List<PlayerPresent>();
        foreach (object json2 in (List<object>) json[nameof (player_presents)])
          playerPresentList.Add(json2 == null ? (PlayerPresent) null : new PlayerPresent((Dictionary<string, object>) json2));
        this.player_presents = playerPresentList.ToArray();
        SMManager.UpdateList<PlayerPresent>(this.player_presents);
        List<PlayerUnit> playerUnitList = new List<PlayerUnit>();
        foreach (object json3 in (List<object>) json[nameof (player_units)])
          playerUnitList.Add(json3 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json3));
        this.player_units = playerUnitList.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_units);
        this.points = json[nameof (points)] == null ? (PlayerDailyMissionPoint) null : new PlayerDailyMissionPoint((Dictionary<string, object>) json[nameof (points)]);
        SMManager.Change<PlayerDailyMissionPoint>(this.points);
        this.received_missions = ((IEnumerable<object>) json[nameof (received_missions)]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).ToArray<int>();
        this.received_points = ((IEnumerable<object>) json[nameof (received_points)]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).ToArray<int>();
        this.sea_player = json[nameof (sea_player)] == null ? (SeaPlayer) null : new SeaPlayer((Dictionary<string, object>) json[nameof (sea_player)]);
        if (this.sea_player != null)
          SMManager.Change<SeaPlayer>(this.sea_player);
        if (!json.ContainsKey("player_presents:delete"))
          return;
        SMManager.DeleteList<PlayerPresent>(((IEnumerable<object>) json["player_presents:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class DailymissionReview : KeyCompare
    {
      public Player player;

      public DailymissionReview()
      {
      }

      public DailymissionReview(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.player = json[nameof (player)] == null ? (Player) null : new Player((Dictionary<string, object>) json[nameof (player)]);
        SMManager.Change<Player>(this.player);
      }
    }

    [Serializable]
    public class DeckCustomDeck : KeyCompare
    {
      public PlayerCustomDeck[] player_custom_decks;

      public DeckCustomDeck()
      {
      }

      public DeckCustomDeck(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerCustomDeck> playerCustomDeckList = new List<PlayerCustomDeck>();
        foreach (object json1 in (List<object>) json[nameof (player_custom_decks)])
          playerCustomDeckList.Add(json1 == null ? (PlayerCustomDeck) null : new PlayerCustomDeck((Dictionary<string, object>) json1));
        this.player_custom_decks = playerCustomDeckList.ToArray();
      }
    }

    [Serializable]
    public class DeckEdit : KeyCompare
    {
      public PlayerDeck[] player_decks;

      public DeckEdit()
      {
      }

      public DeckEdit(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerDeck> playerDeckList = new List<PlayerDeck>();
        foreach (object json1 in (List<object>) json[nameof (player_decks)])
          playerDeckList.Add(json1 == null ? (PlayerDeck) null : new PlayerDeck((Dictionary<string, object>) json1));
        this.player_decks = playerDeckList.ToArray();
        SMManager.UpdateList<PlayerDeck>(this.player_decks);
      }
    }

    [Serializable]
    public class DeckEditCustomDeck : KeyCompare
    {
      public PlayerCustomDeck[] player_custom_decks;

      public DeckEditCustomDeck()
      {
      }

      public DeckEditCustomDeck(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerCustomDeck> playerCustomDeckList = new List<PlayerCustomDeck>();
        foreach (object json1 in (List<object>) json[nameof (player_custom_decks)])
          playerCustomDeckList.Add(json1 == null ? (PlayerCustomDeck) null : new PlayerCustomDeck((Dictionary<string, object>) json1));
        this.player_custom_decks = playerCustomDeckList.ToArray();
        SMManager.UpdateList<PlayerCustomDeck>(this.player_custom_decks);
      }
    }

    [Serializable]
    public class DeckEditCustomDeckName : KeyCompare
    {
      public PlayerCustomDeck[] player_custom_decks;

      public DeckEditCustomDeckName()
      {
      }

      public DeckEditCustomDeckName(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerCustomDeck> playerCustomDeckList = new List<PlayerCustomDeck>();
        foreach (object json1 in (List<object>) json[nameof (player_custom_decks)])
          playerCustomDeckList.Add(json1 == null ? (PlayerCustomDeck) null : new PlayerCustomDeck((Dictionary<string, object>) json1));
        this.player_custom_decks = playerCustomDeckList.ToArray();
        SMManager.UpdateList<PlayerCustomDeck>(this.player_custom_decks);
      }
    }

    [Serializable]
    public class DeleteAccount : KeyCompare
    {
      public DeleteAccount()
      {
      }

      public DeleteAccount(Dictionary<string, object> json) => this._hasKey = false;
    }

    [Serializable]
    public class EmblemOtherPlayerStatus : KeyCompare
    {
      public int current_emblem_id;
      public int[] display_emblem_ids;
      public PlayerEmblem[] emblems;

      public EmblemOtherPlayerStatus()
      {
      }

      public EmblemOtherPlayerStatus(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.current_emblem_id = (int) (long) json[nameof (current_emblem_id)];
        this.display_emblem_ids = ((IEnumerable<object>) json[nameof (display_emblem_ids)]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).ToArray<int>();
        List<PlayerEmblem> playerEmblemList = new List<PlayerEmblem>();
        foreach (object json1 in (List<object>) json[nameof (emblems)])
          playerEmblemList.Add(json1 == null ? (PlayerEmblem) null : new PlayerEmblem((Dictionary<string, object>) json1));
        this.emblems = playerEmblemList.ToArray();
        SMManager.UpdateList<PlayerEmblem>(this.emblems);
      }
    }

    [Serializable]
    public class EmblemSet : KeyCompare
    {
      public Player player;

      public EmblemSet()
      {
      }

      public EmblemSet(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.player = json[nameof (player)] == null ? (Player) null : new Player((Dictionary<string, object>) json[nameof (player)]);
        SMManager.Change<Player>(this.player);
      }
    }

    [Serializable]
    public class EmblemStatus : KeyCompare
    {
      public int current_emblem_id;
      public int[] display_emblem_ids;
      public PlayerEmblem[] emblems;

      public EmblemStatus()
      {
      }

      public EmblemStatus(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.current_emblem_id = (int) (long) json[nameof (current_emblem_id)];
        this.display_emblem_ids = ((IEnumerable<object>) json[nameof (display_emblem_ids)]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).ToArray<int>();
        List<PlayerEmblem> playerEmblemList = new List<PlayerEmblem>();
        foreach (object json1 in (List<object>) json[nameof (emblems)])
          playerEmblemList.Add(json1 == null ? (PlayerEmblem) null : new PlayerEmblem((Dictionary<string, object>) json1));
        this.emblems = playerEmblemList.ToArray();
        SMManager.UpdateList<PlayerEmblem>(this.emblems);
      }
    }

    [Serializable]
    public class EventDetail : KeyCompare
    {
      public EnemyDetailInfo enemy_detail_infos;

      public EventDetail()
      {
      }

      public EventDetail(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.enemy_detail_infos = json[nameof (enemy_detail_infos)] == null ? (EnemyDetailInfo) null : new EnemyDetailInfo((Dictionary<string, object>) json[nameof (enemy_detail_infos)]);
      }
    }

    [Serializable]
    public class EventTop : KeyCompare
    {
      public int[] get_guild_reward_ids;
      public DateTime start_at;
      public Description description;
      public string event_name;
      public EnemyTopInfo[] enemy_infos;
      public int all_player_point;
      public DateTime end_at;
      public DateTime final_at;
      public string top_image_url;
      public bool is_bonus_term;
      public int guild_point;
      public int[] reward_history_ids;
      public int period_id;
      public int[] get_reward_ids;
      public int player_point;
      public PlayerPresent[] player_presents;
      public int[] guild_reward_history_ids;
      public int period_type;

      public EventTop()
      {
      }

      public EventTop(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.get_guild_reward_ids = ((IEnumerable<object>) json[nameof (get_guild_reward_ids)]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).ToArray<int>();
        this.start_at = DateTime.Parse((string) json[nameof (start_at)]);
        this.description = json[nameof (description)] == null ? (Description) null : new Description((Dictionary<string, object>) json[nameof (description)]);
        this.event_name = (string) json[nameof (event_name)];
        List<EnemyTopInfo> enemyTopInfoList = new List<EnemyTopInfo>();
        foreach (object json1 in (List<object>) json[nameof (enemy_infos)])
          enemyTopInfoList.Add(json1 == null ? (EnemyTopInfo) null : new EnemyTopInfo((Dictionary<string, object>) json1));
        this.enemy_infos = enemyTopInfoList.ToArray();
        this.all_player_point = (int) (long) json[nameof (all_player_point)];
        this.end_at = DateTime.Parse((string) json[nameof (end_at)]);
        this.final_at = DateTime.Parse((string) json[nameof (final_at)]);
        this.top_image_url = (string) json[nameof (top_image_url)];
        this.is_bonus_term = (bool) json[nameof (is_bonus_term)];
        this.guild_point = (int) (long) json[nameof (guild_point)];
        this.reward_history_ids = ((IEnumerable<object>) json[nameof (reward_history_ids)]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).ToArray<int>();
        this.period_id = (int) (long) json[nameof (period_id)];
        this.get_reward_ids = ((IEnumerable<object>) json[nameof (get_reward_ids)]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).ToArray<int>();
        this.player_point = (int) (long) json[nameof (player_point)];
        List<PlayerPresent> playerPresentList = new List<PlayerPresent>();
        foreach (object json2 in (List<object>) json[nameof (player_presents)])
          playerPresentList.Add(json2 == null ? (PlayerPresent) null : new PlayerPresent((Dictionary<string, object>) json2));
        this.player_presents = playerPresentList.ToArray();
        SMManager.UpdateList<PlayerPresent>(this.player_presents);
        this.guild_reward_history_ids = ((IEnumerable<object>) json[nameof (guild_reward_history_ids)]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).ToArray<int>();
        this.period_type = (int) (long) json[nameof (period_type)];
        if (!json.ContainsKey("player_presents:delete"))
          return;
        SMManager.DeleteList<PlayerPresent>(((IEnumerable<object>) json["player_presents:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class ExploreChallengeBoot : KeyCompare
    {
      public bool is_battle;
      public ChallengeNpc[] gladiators;

      public ExploreChallengeBoot()
      {
      }

      public ExploreChallengeBoot(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.is_battle = (bool) json[nameof (is_battle)];
        List<ChallengeNpc> challengeNpcList = new List<ChallengeNpc>();
        foreach (object json1 in (List<object>) json[nameof (gladiators)])
          challengeNpcList.Add(json1 == null ? (ChallengeNpc) null : new ChallengeNpc((Dictionary<string, object>) json1));
        this.gladiators = challengeNpcList.ToArray();
      }
    }

    [Serializable]
    public class ExploreChallengeFinish : KeyCompare
    {
      public ExploreProgress explore_progress;
      public PlayerCharacterIntimate[] player_character_intimates;
      public int challenge_point;
      public bool is_battle;
      public PlayerMaterialGear[] player_material_gears;
      public PlayerUnit[] player_units;
      public PlayerItem[] player_items;
      public PlayerPresent[] player_presents;
      public Player player;
      public bool target_player_is_friend;
      public PlayerMaterialUnit[] player_material_units;
      public PlayerChallenge challenge_record;
      public ChallengeEnd challenge_finish;

      public ExploreChallengeFinish()
      {
      }

      public ExploreChallengeFinish(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.explore_progress = json[nameof (explore_progress)] == null ? (ExploreProgress) null : new ExploreProgress((Dictionary<string, object>) json[nameof (explore_progress)]);
        SMManager.Change<ExploreProgress>(this.explore_progress);
        List<PlayerCharacterIntimate> characterIntimateList = new List<PlayerCharacterIntimate>();
        foreach (object json1 in (List<object>) json[nameof (player_character_intimates)])
          characterIntimateList.Add(json1 == null ? (PlayerCharacterIntimate) null : new PlayerCharacterIntimate((Dictionary<string, object>) json1));
        this.player_character_intimates = characterIntimateList.ToArray();
        SMManager.UpdateList<PlayerCharacterIntimate>(this.player_character_intimates);
        this.challenge_point = (int) (long) json[nameof (challenge_point)];
        this.is_battle = (bool) json[nameof (is_battle)];
        List<PlayerMaterialGear> playerMaterialGearList = new List<PlayerMaterialGear>();
        foreach (object json2 in (List<object>) json[nameof (player_material_gears)])
          playerMaterialGearList.Add(json2 == null ? (PlayerMaterialGear) null : new PlayerMaterialGear((Dictionary<string, object>) json2));
        this.player_material_gears = playerMaterialGearList.ToArray();
        SMManager.UpdateList<PlayerMaterialGear>(this.player_material_gears);
        List<PlayerUnit> playerUnitList = new List<PlayerUnit>();
        foreach (object json3 in (List<object>) json[nameof (player_units)])
          playerUnitList.Add(json3 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json3));
        this.player_units = playerUnitList.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_units);
        List<PlayerItem> playerItemList = new List<PlayerItem>();
        foreach (object json4 in (List<object>) json[nameof (player_items)])
          playerItemList.Add(json4 == null ? (PlayerItem) null : new PlayerItem((Dictionary<string, object>) json4));
        this.player_items = playerItemList.ToArray();
        SMManager.UpdateList<PlayerItem>(this.player_items);
        List<PlayerPresent> playerPresentList = new List<PlayerPresent>();
        foreach (object json5 in (List<object>) json[nameof (player_presents)])
          playerPresentList.Add(json5 == null ? (PlayerPresent) null : new PlayerPresent((Dictionary<string, object>) json5));
        this.player_presents = playerPresentList.ToArray();
        SMManager.UpdateList<PlayerPresent>(this.player_presents);
        this.player = json[nameof (player)] == null ? (Player) null : new Player((Dictionary<string, object>) json[nameof (player)]);
        SMManager.Change<Player>(this.player);
        this.target_player_is_friend = (bool) json[nameof (target_player_is_friend)];
        List<PlayerMaterialUnit> playerMaterialUnitList = new List<PlayerMaterialUnit>();
        foreach (object json6 in (List<object>) json[nameof (player_material_units)])
          playerMaterialUnitList.Add(json6 == null ? (PlayerMaterialUnit) null : new PlayerMaterialUnit((Dictionary<string, object>) json6));
        this.player_material_units = playerMaterialUnitList.ToArray();
        SMManager.UpdateList<PlayerMaterialUnit>(this.player_material_units);
        this.challenge_record = json[nameof (challenge_record)] == null ? (PlayerChallenge) null : new PlayerChallenge((Dictionary<string, object>) json[nameof (challenge_record)]);
        SMManager.Change<PlayerChallenge>(this.challenge_record);
        this.challenge_finish = json[nameof (challenge_finish)] == null ? (ChallengeEnd) null : new ChallengeEnd((Dictionary<string, object>) json[nameof (challenge_finish)]);
        if (json.ContainsKey("player_material_gears:delete"))
          SMManager.DeleteList<PlayerMaterialGear>(((IEnumerable<object>) json["player_material_gears:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
        if (json.ContainsKey("player_items:delete"))
          SMManager.DeleteList<PlayerItem>(((IEnumerable<object>) json["player_items:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
        if (!json.ContainsKey("player_presents:delete"))
          return;
        SMManager.DeleteList<PlayerPresent>(((IEnumerable<object>) json["player_presents:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class ExploreChallengeStart : KeyCompare
    {
      public DateTime now;
      public PlayerItem[] challenge_player_items;
      public PlayerUnit[] challenge_player_units;
      public PlayerGearReisouSchema[] colosseum_player_reisou_items;
      public PlayerAwakeSkill[] challenge_player_awake_skills;
      public PlayerAwakeSkill[] challenge_target_player_awake_skills;
      public Player player;
      public string arena_transaction_id;
      public PlayerItem[] challenge_target_player_items;
      public PlayerUnit[] challenge_target_player_units;
      public PlayerGearReisouSchema[] colosseum_target_player_reisou_items;
      public ChallengeNpc gladiator;

      public ExploreChallengeStart()
      {
      }

      public ExploreChallengeStart(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.now = DateTime.Parse((string) json[nameof (now)]);
        List<PlayerItem> playerItemList1 = new List<PlayerItem>();
        foreach (object json1 in (List<object>) json[nameof (challenge_player_items)])
          playerItemList1.Add(json1 == null ? (PlayerItem) null : new PlayerItem((Dictionary<string, object>) json1));
        this.challenge_player_items = playerItemList1.ToArray();
        List<PlayerUnit> playerUnitList1 = new List<PlayerUnit>();
        foreach (object json2 in (List<object>) json[nameof (challenge_player_units)])
          playerUnitList1.Add(json2 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json2));
        this.challenge_player_units = playerUnitList1.ToArray();
        List<PlayerGearReisouSchema> gearReisouSchemaList1 = new List<PlayerGearReisouSchema>();
        foreach (object json3 in (List<object>) json[nameof (colosseum_player_reisou_items)])
          gearReisouSchemaList1.Add(json3 == null ? (PlayerGearReisouSchema) null : new PlayerGearReisouSchema((Dictionary<string, object>) json3));
        this.colosseum_player_reisou_items = gearReisouSchemaList1.ToArray();
        List<PlayerAwakeSkill> playerAwakeSkillList1 = new List<PlayerAwakeSkill>();
        foreach (object json4 in (List<object>) json[nameof (challenge_player_awake_skills)])
          playerAwakeSkillList1.Add(json4 == null ? (PlayerAwakeSkill) null : new PlayerAwakeSkill((Dictionary<string, object>) json4));
        this.challenge_player_awake_skills = playerAwakeSkillList1.ToArray();
        List<PlayerAwakeSkill> playerAwakeSkillList2 = new List<PlayerAwakeSkill>();
        foreach (object json5 in (List<object>) json[nameof (challenge_target_player_awake_skills)])
          playerAwakeSkillList2.Add(json5 == null ? (PlayerAwakeSkill) null : new PlayerAwakeSkill((Dictionary<string, object>) json5));
        this.challenge_target_player_awake_skills = playerAwakeSkillList2.ToArray();
        this.player = json[nameof (player)] == null ? (Player) null : new Player((Dictionary<string, object>) json[nameof (player)]);
        SMManager.Change<Player>(this.player);
        this.arena_transaction_id = (string) json[nameof (arena_transaction_id)];
        List<PlayerItem> playerItemList2 = new List<PlayerItem>();
        foreach (object json6 in (List<object>) json[nameof (challenge_target_player_items)])
          playerItemList2.Add(json6 == null ? (PlayerItem) null : new PlayerItem((Dictionary<string, object>) json6));
        this.challenge_target_player_items = playerItemList2.ToArray();
        List<PlayerUnit> playerUnitList2 = new List<PlayerUnit>();
        foreach (object json7 in (List<object>) json[nameof (challenge_target_player_units)])
          playerUnitList2.Add(json7 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json7));
        this.challenge_target_player_units = playerUnitList2.ToArray();
        List<PlayerGearReisouSchema> gearReisouSchemaList2 = new List<PlayerGearReisouSchema>();
        foreach (object json8 in (List<object>) json[nameof (colosseum_target_player_reisou_items)])
          gearReisouSchemaList2.Add(json8 == null ? (PlayerGearReisouSchema) null : new PlayerGearReisouSchema((Dictionary<string, object>) json8));
        this.colosseum_target_player_reisou_items = gearReisouSchemaList2.ToArray();
        this.gladiator = json[nameof (gladiator)] == null ? (ChallengeNpc) null : new ChallengeNpc((Dictionary<string, object>) json[nameof (gladiator)]);
      }
    }

    [Serializable]
    public class ExploreDeckEdit : KeyCompare
    {
      public ExploreProgress explore_progress;
      public PlayerCharacterIntimate[] player_character_intimates;
      public PlayerMaterialGear[] player_material_gears;
      public PlayerUnit[] player_units;
      public ExploreDeck[] explore_decks;
      public PlayerItem[] player_items;
      public Player player;
      public PlayerAwakeSkill[] player_awake_skills;
      public PlayerMaterialUnit[] player_material_units;

      public ExploreDeckEdit()
      {
      }

      public ExploreDeckEdit(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.explore_progress = json[nameof (explore_progress)] == null ? (ExploreProgress) null : new ExploreProgress((Dictionary<string, object>) json[nameof (explore_progress)]);
        SMManager.Change<ExploreProgress>(this.explore_progress);
        List<PlayerCharacterIntimate> characterIntimateList = new List<PlayerCharacterIntimate>();
        foreach (object json1 in (List<object>) json[nameof (player_character_intimates)])
          characterIntimateList.Add(json1 == null ? (PlayerCharacterIntimate) null : new PlayerCharacterIntimate((Dictionary<string, object>) json1));
        this.player_character_intimates = characterIntimateList.ToArray();
        SMManager.UpdateList<PlayerCharacterIntimate>(this.player_character_intimates);
        List<PlayerMaterialGear> playerMaterialGearList = new List<PlayerMaterialGear>();
        foreach (object json2 in (List<object>) json[nameof (player_material_gears)])
          playerMaterialGearList.Add(json2 == null ? (PlayerMaterialGear) null : new PlayerMaterialGear((Dictionary<string, object>) json2));
        this.player_material_gears = playerMaterialGearList.ToArray();
        SMManager.UpdateList<PlayerMaterialGear>(this.player_material_gears);
        List<PlayerUnit> playerUnitList = new List<PlayerUnit>();
        foreach (object json3 in (List<object>) json[nameof (player_units)])
          playerUnitList.Add(json3 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json3));
        this.player_units = playerUnitList.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_units);
        List<ExploreDeck> exploreDeckList = new List<ExploreDeck>();
        foreach (object json4 in (List<object>) json[nameof (explore_decks)])
          exploreDeckList.Add(json4 == null ? (ExploreDeck) null : new ExploreDeck((Dictionary<string, object>) json4));
        this.explore_decks = exploreDeckList.ToArray();
        SMManager.UpdateList<ExploreDeck>(this.explore_decks);
        List<PlayerItem> playerItemList = new List<PlayerItem>();
        foreach (object json5 in (List<object>) json[nameof (player_items)])
          playerItemList.Add(json5 == null ? (PlayerItem) null : new PlayerItem((Dictionary<string, object>) json5));
        this.player_items = playerItemList.ToArray();
        SMManager.UpdateList<PlayerItem>(this.player_items);
        this.player = json[nameof (player)] == null ? (Player) null : new Player((Dictionary<string, object>) json[nameof (player)]);
        SMManager.Change<Player>(this.player);
        List<PlayerAwakeSkill> playerAwakeSkillList = new List<PlayerAwakeSkill>();
        foreach (object json6 in (List<object>) json[nameof (player_awake_skills)])
          playerAwakeSkillList.Add(json6 == null ? (PlayerAwakeSkill) null : new PlayerAwakeSkill((Dictionary<string, object>) json6));
        this.player_awake_skills = playerAwakeSkillList.ToArray();
        SMManager.UpdateList<PlayerAwakeSkill>(this.player_awake_skills);
        List<PlayerMaterialUnit> playerMaterialUnitList = new List<PlayerMaterialUnit>();
        foreach (object json7 in (List<object>) json[nameof (player_material_units)])
          playerMaterialUnitList.Add(json7 == null ? (PlayerMaterialUnit) null : new PlayerMaterialUnit((Dictionary<string, object>) json7));
        this.player_material_units = playerMaterialUnitList.ToArray();
        SMManager.UpdateList<PlayerMaterialUnit>(this.player_material_units);
      }
    }

    [Serializable]
    public class ExploreExploreGet : KeyCompare
    {
      public ExploreProgress explore_progress;

      public ExploreExploreGet()
      {
      }

      public ExploreExploreGet(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.explore_progress = json[nameof (explore_progress)] == null ? (ExploreProgress) null : new ExploreProgress((Dictionary<string, object>) json[nameof (explore_progress)]);
        SMManager.Change<ExploreProgress>(this.explore_progress);
      }
    }

    [Serializable]
    public class ExploreExploreMoveFloor : KeyCompare
    {
      public ExploreProgress explore_progress;
      public PlayerCharacterIntimate[] player_character_intimates;
      public PlayerMaterialGear[] player_material_gears;
      public PlayerUnit[] player_units;
      public PlayerItem[] player_items;
      public Player player;
      public PlayerAwakeSkill[] player_awake_skills;
      public PlayerMaterialUnit[] player_material_units;

      public ExploreExploreMoveFloor()
      {
      }

      public ExploreExploreMoveFloor(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.explore_progress = json[nameof (explore_progress)] == null ? (ExploreProgress) null : new ExploreProgress((Dictionary<string, object>) json[nameof (explore_progress)]);
        SMManager.Change<ExploreProgress>(this.explore_progress);
        List<PlayerCharacterIntimate> characterIntimateList = new List<PlayerCharacterIntimate>();
        foreach (object json1 in (List<object>) json[nameof (player_character_intimates)])
          characterIntimateList.Add(json1 == null ? (PlayerCharacterIntimate) null : new PlayerCharacterIntimate((Dictionary<string, object>) json1));
        this.player_character_intimates = characterIntimateList.ToArray();
        SMManager.UpdateList<PlayerCharacterIntimate>(this.player_character_intimates);
        List<PlayerMaterialGear> playerMaterialGearList = new List<PlayerMaterialGear>();
        foreach (object json2 in (List<object>) json[nameof (player_material_gears)])
          playerMaterialGearList.Add(json2 == null ? (PlayerMaterialGear) null : new PlayerMaterialGear((Dictionary<string, object>) json2));
        this.player_material_gears = playerMaterialGearList.ToArray();
        SMManager.UpdateList<PlayerMaterialGear>(this.player_material_gears);
        List<PlayerUnit> playerUnitList = new List<PlayerUnit>();
        foreach (object json3 in (List<object>) json[nameof (player_units)])
          playerUnitList.Add(json3 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json3));
        this.player_units = playerUnitList.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_units);
        List<PlayerItem> playerItemList = new List<PlayerItem>();
        foreach (object json4 in (List<object>) json[nameof (player_items)])
          playerItemList.Add(json4 == null ? (PlayerItem) null : new PlayerItem((Dictionary<string, object>) json4));
        this.player_items = playerItemList.ToArray();
        SMManager.UpdateList<PlayerItem>(this.player_items);
        this.player = json[nameof (player)] == null ? (Player) null : new Player((Dictionary<string, object>) json[nameof (player)]);
        SMManager.Change<Player>(this.player);
        List<PlayerAwakeSkill> playerAwakeSkillList = new List<PlayerAwakeSkill>();
        foreach (object json5 in (List<object>) json[nameof (player_awake_skills)])
          playerAwakeSkillList.Add(json5 == null ? (PlayerAwakeSkill) null : new PlayerAwakeSkill((Dictionary<string, object>) json5));
        this.player_awake_skills = playerAwakeSkillList.ToArray();
        SMManager.UpdateList<PlayerAwakeSkill>(this.player_awake_skills);
        List<PlayerMaterialUnit> playerMaterialUnitList = new List<PlayerMaterialUnit>();
        foreach (object json6 in (List<object>) json[nameof (player_material_units)])
          playerMaterialUnitList.Add(json6 == null ? (PlayerMaterialUnit) null : new PlayerMaterialUnit((Dictionary<string, object>) json6));
        this.player_material_units = playerMaterialUnitList.ToArray();
        SMManager.UpdateList<PlayerMaterialUnit>(this.player_material_units);
      }
    }

    [Serializable]
    public class ExploreExploreReward : KeyCompare
    {
      public ExploreProgress explore_progress;
      public PlayerCommonTicket[] player_common_tickets;
      public bool is_limit;
      public PlayerMaterialGear[] player_material_gears;
      public PlayerUnit[] player_units;
      public PlayerItem[] player_items;
      public Player player;
      public PlayerAwakeSkill[] player_awake_skills;
      public PlayerMaterialUnit[] player_material_units;
      public PlayerPresent[] player_presents;
      public PlayerQuestKey[] player_quest_keys;

      public ExploreExploreReward()
      {
      }

      public ExploreExploreReward(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.explore_progress = json[nameof (explore_progress)] == null ? (ExploreProgress) null : new ExploreProgress((Dictionary<string, object>) json[nameof (explore_progress)]);
        SMManager.Change<ExploreProgress>(this.explore_progress);
        List<PlayerCommonTicket> playerCommonTicketList = new List<PlayerCommonTicket>();
        foreach (object json1 in (List<object>) json[nameof (player_common_tickets)])
          playerCommonTicketList.Add(json1 == null ? (PlayerCommonTicket) null : new PlayerCommonTicket((Dictionary<string, object>) json1));
        this.player_common_tickets = playerCommonTicketList.ToArray();
        SMManager.UpdateList<PlayerCommonTicket>(this.player_common_tickets);
        this.is_limit = (bool) json[nameof (is_limit)];
        List<PlayerMaterialGear> playerMaterialGearList = new List<PlayerMaterialGear>();
        foreach (object json2 in (List<object>) json[nameof (player_material_gears)])
          playerMaterialGearList.Add(json2 == null ? (PlayerMaterialGear) null : new PlayerMaterialGear((Dictionary<string, object>) json2));
        this.player_material_gears = playerMaterialGearList.ToArray();
        SMManager.UpdateList<PlayerMaterialGear>(this.player_material_gears);
        List<PlayerUnit> playerUnitList = new List<PlayerUnit>();
        foreach (object json3 in (List<object>) json[nameof (player_units)])
          playerUnitList.Add(json3 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json3));
        this.player_units = playerUnitList.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_units);
        List<PlayerItem> playerItemList = new List<PlayerItem>();
        foreach (object json4 in (List<object>) json[nameof (player_items)])
          playerItemList.Add(json4 == null ? (PlayerItem) null : new PlayerItem((Dictionary<string, object>) json4));
        this.player_items = playerItemList.ToArray();
        SMManager.UpdateList<PlayerItem>(this.player_items);
        this.player = json[nameof (player)] == null ? (Player) null : new Player((Dictionary<string, object>) json[nameof (player)]);
        SMManager.Change<Player>(this.player);
        List<PlayerAwakeSkill> playerAwakeSkillList = new List<PlayerAwakeSkill>();
        foreach (object json5 in (List<object>) json[nameof (player_awake_skills)])
          playerAwakeSkillList.Add(json5 == null ? (PlayerAwakeSkill) null : new PlayerAwakeSkill((Dictionary<string, object>) json5));
        this.player_awake_skills = playerAwakeSkillList.ToArray();
        SMManager.UpdateList<PlayerAwakeSkill>(this.player_awake_skills);
        List<PlayerMaterialUnit> playerMaterialUnitList = new List<PlayerMaterialUnit>();
        foreach (object json6 in (List<object>) json[nameof (player_material_units)])
          playerMaterialUnitList.Add(json6 == null ? (PlayerMaterialUnit) null : new PlayerMaterialUnit((Dictionary<string, object>) json6));
        this.player_material_units = playerMaterialUnitList.ToArray();
        SMManager.UpdateList<PlayerMaterialUnit>(this.player_material_units);
        List<PlayerPresent> playerPresentList = new List<PlayerPresent>();
        foreach (object json7 in (List<object>) json[nameof (player_presents)])
          playerPresentList.Add(json7 == null ? (PlayerPresent) null : new PlayerPresent((Dictionary<string, object>) json7));
        this.player_presents = playerPresentList.ToArray();
        SMManager.UpdateList<PlayerPresent>(this.player_presents);
        List<PlayerQuestKey> playerQuestKeyList = new List<PlayerQuestKey>();
        foreach (object json8 in (List<object>) json[nameof (player_quest_keys)])
          playerQuestKeyList.Add(json8 == null ? (PlayerQuestKey) null : new PlayerQuestKey((Dictionary<string, object>) json8));
        this.player_quest_keys = playerQuestKeyList.ToArray();
        SMManager.UpdateList<PlayerQuestKey>(this.player_quest_keys);
      }
    }

    [Serializable]
    public class ExploreExploreUpdate : KeyCompare
    {
      public ExploreProgress explore_progress;
      public PlayerCharacterIntimate[] player_character_intimates;
      public int challenge_point;
      public PlayerMaterialGear[] player_material_gears;
      public PlayerUnit[] player_units;
      public PlayerItem[] player_items;
      public Player player;
      public PlayerAwakeSkill[] player_awake_skills;
      public PlayerMaterialUnit[] player_material_units;
      public PlayerChallenge challenge_record;

      public ExploreExploreUpdate()
      {
      }

      public ExploreExploreUpdate(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.explore_progress = json[nameof (explore_progress)] == null ? (ExploreProgress) null : new ExploreProgress((Dictionary<string, object>) json[nameof (explore_progress)]);
        SMManager.Change<ExploreProgress>(this.explore_progress);
        List<PlayerCharacterIntimate> characterIntimateList = new List<PlayerCharacterIntimate>();
        foreach (object json1 in (List<object>) json[nameof (player_character_intimates)])
          characterIntimateList.Add(json1 == null ? (PlayerCharacterIntimate) null : new PlayerCharacterIntimate((Dictionary<string, object>) json1));
        this.player_character_intimates = characterIntimateList.ToArray();
        SMManager.UpdateList<PlayerCharacterIntimate>(this.player_character_intimates);
        this.challenge_point = (int) (long) json[nameof (challenge_point)];
        List<PlayerMaterialGear> playerMaterialGearList = new List<PlayerMaterialGear>();
        foreach (object json2 in (List<object>) json[nameof (player_material_gears)])
          playerMaterialGearList.Add(json2 == null ? (PlayerMaterialGear) null : new PlayerMaterialGear((Dictionary<string, object>) json2));
        this.player_material_gears = playerMaterialGearList.ToArray();
        SMManager.UpdateList<PlayerMaterialGear>(this.player_material_gears);
        List<PlayerUnit> playerUnitList = new List<PlayerUnit>();
        foreach (object json3 in (List<object>) json[nameof (player_units)])
          playerUnitList.Add(json3 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json3));
        this.player_units = playerUnitList.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_units);
        List<PlayerItem> playerItemList = new List<PlayerItem>();
        foreach (object json4 in (List<object>) json[nameof (player_items)])
          playerItemList.Add(json4 == null ? (PlayerItem) null : new PlayerItem((Dictionary<string, object>) json4));
        this.player_items = playerItemList.ToArray();
        SMManager.UpdateList<PlayerItem>(this.player_items);
        this.player = json[nameof (player)] == null ? (Player) null : new Player((Dictionary<string, object>) json[nameof (player)]);
        SMManager.Change<Player>(this.player);
        List<PlayerAwakeSkill> playerAwakeSkillList = new List<PlayerAwakeSkill>();
        foreach (object json5 in (List<object>) json[nameof (player_awake_skills)])
          playerAwakeSkillList.Add(json5 == null ? (PlayerAwakeSkill) null : new PlayerAwakeSkill((Dictionary<string, object>) json5));
        this.player_awake_skills = playerAwakeSkillList.ToArray();
        SMManager.UpdateList<PlayerAwakeSkill>(this.player_awake_skills);
        List<PlayerMaterialUnit> playerMaterialUnitList = new List<PlayerMaterialUnit>();
        foreach (object json6 in (List<object>) json[nameof (player_material_units)])
          playerMaterialUnitList.Add(json6 == null ? (PlayerMaterialUnit) null : new PlayerMaterialUnit((Dictionary<string, object>) json6));
        this.player_material_units = playerMaterialUnitList.ToArray();
        SMManager.UpdateList<PlayerMaterialUnit>(this.player_material_units);
        this.challenge_record = json[nameof (challenge_record)] == null ? (PlayerChallenge) null : new PlayerChallenge((Dictionary<string, object>) json[nameof (challenge_record)]);
        SMManager.Change<PlayerChallenge>(this.challenge_record);
      }
    }

    [Serializable]
    public class ExploreRankingRanking : KeyCompare
    {
      public bool rank_aggregate;
      public DateTime? finish_time;
      public WebAPI.Response.ExploreRankingRankingRankings[] rankings;
      public DateTime? start_time;
      public WebAPI.Response.ExploreRankingRankingMy_ranking my_ranking;
      public int period_id;

      public ExploreRankingRanking()
      {
      }

      public ExploreRankingRanking(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.rank_aggregate = (bool) json[nameof (rank_aggregate)];
        this.finish_time = json[nameof (finish_time)] == null ? new DateTime?() : new DateTime?(DateTime.Parse((string) json[nameof (finish_time)]));
        List<WebAPI.Response.ExploreRankingRankingRankings> rankingRankingRankingsList = new List<WebAPI.Response.ExploreRankingRankingRankings>();
        foreach (object json1 in (List<object>) json[nameof (rankings)])
          rankingRankingRankingsList.Add(json1 == null ? (WebAPI.Response.ExploreRankingRankingRankings) null : new WebAPI.Response.ExploreRankingRankingRankings((Dictionary<string, object>) json1));
        this.rankings = rankingRankingRankingsList.ToArray();
        this.start_time = json[nameof (start_time)] == null ? new DateTime?() : new DateTime?(DateTime.Parse((string) json[nameof (start_time)]));
        this.my_ranking = json[nameof (my_ranking)] == null ? (WebAPI.Response.ExploreRankingRankingMy_ranking) null : new WebAPI.Response.ExploreRankingRankingMy_ranking((Dictionary<string, object>) json[nameof (my_ranking)]);
        this.period_id = (int) (long) json[nameof (period_id)];
      }
    }

    [Serializable]
    public class ExploreRankingRankingMy_ranking : KeyCompare
    {
      public string player_id;
      public int ranking;
      public int current_floor;
      public string name;
      public int defeat_count;

      public ExploreRankingRankingMy_ranking()
      {
      }

      public ExploreRankingRankingMy_ranking(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.player_id = (string) json[nameof (player_id)];
        this.ranking = (int) (long) json[nameof (ranking)];
        this.current_floor = (int) (long) json[nameof (current_floor)];
        this.name = (string) json[nameof (name)];
        this.defeat_count = (int) (long) json[nameof (defeat_count)];
      }
    }

    [Serializable]
    public class ExploreRankingRankingRankings : KeyCompare
    {
      public string player_id;
      public int ranking;
      public int current_floor;
      public string name;
      public int defeat_count;

      public ExploreRankingRankingRankings()
      {
      }

      public ExploreRankingRankingRankings(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.player_id = (string) json[nameof (player_id)];
        this.ranking = (int) (long) json[nameof (ranking)];
        this.current_floor = (int) (long) json[nameof (current_floor)];
        this.name = (string) json[nameof (name)];
        this.defeat_count = (int) (long) json[nameof (defeat_count)];
      }
    }

    [Serializable]
    public class ExploreRankingResult : KeyCompare
    {
      public int defeat_count;
      public int floor_id;
      public int rank;
      public int? current_period_id;
      public int? aggregate_period_id;
      public WebAPI.Response.ExploreRankingResultRanking_rewards[] ranking_rewards;
      public PlayerPresent[] player_presents;

      public ExploreRankingResult()
      {
      }

      public ExploreRankingResult(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.defeat_count = (int) (long) json[nameof (defeat_count)];
        this.floor_id = (int) (long) json[nameof (floor_id)];
        this.rank = (int) (long) json[nameof (rank)];
        long? nullable1;
        int? nullable2;
        if (json[nameof (current_period_id)] != null)
        {
          nullable1 = (long?) json[nameof (current_period_id)];
          nullable2 = nullable1.HasValue ? new int?((int) nullable1.GetValueOrDefault()) : new int?();
        }
        else
          nullable2 = new int?();
        this.current_period_id = nullable2;
        int? nullable3;
        if (json[nameof (aggregate_period_id)] != null)
        {
          nullable1 = (long?) json[nameof (aggregate_period_id)];
          nullable3 = nullable1.HasValue ? new int?((int) nullable1.GetValueOrDefault()) : new int?();
        }
        else
          nullable3 = new int?();
        this.aggregate_period_id = nullable3;
        List<WebAPI.Response.ExploreRankingResultRanking_rewards> resultRankingRewardsList = new List<WebAPI.Response.ExploreRankingResultRanking_rewards>();
        foreach (object json1 in (List<object>) json[nameof (ranking_rewards)])
          resultRankingRewardsList.Add(json1 == null ? (WebAPI.Response.ExploreRankingResultRanking_rewards) null : new WebAPI.Response.ExploreRankingResultRanking_rewards((Dictionary<string, object>) json1));
        this.ranking_rewards = resultRankingRewardsList.ToArray();
        List<PlayerPresent> playerPresentList = new List<PlayerPresent>();
        foreach (object json2 in (List<object>) json[nameof (player_presents)])
          playerPresentList.Add(json2 == null ? (PlayerPresent) null : new PlayerPresent((Dictionary<string, object>) json2));
        this.player_presents = playerPresentList.ToArray();
        SMManager.UpdateList<PlayerPresent>(this.player_presents);
      }
    }

    [Serializable]
    public class ExploreRankingResultRanking_rewards : KeyCompare
    {
      public WebAPI.Response.ExploreRankingResultRanking_rewardsRewards[] rewards;
      public int condition_id;

      public ExploreRankingResultRanking_rewards()
      {
      }

      public ExploreRankingResultRanking_rewards(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<WebAPI.Response.ExploreRankingResultRanking_rewardsRewards> rankingRewardsRewardsList = new List<WebAPI.Response.ExploreRankingResultRanking_rewardsRewards>();
        foreach (object json1 in (List<object>) json[nameof (rewards)])
          rankingRewardsRewardsList.Add(json1 == null ? (WebAPI.Response.ExploreRankingResultRanking_rewardsRewards) null : new WebAPI.Response.ExploreRankingResultRanking_rewardsRewards((Dictionary<string, object>) json1));
        this.rewards = rankingRewardsRewardsList.ToArray();
        this.condition_id = (int) (long) json[nameof (condition_id)];
      }
    }

    [Serializable]
    public class ExploreRankingResultRanking_rewardsRewards : KeyCompare
    {
      public int reward_quantity;
      public int reward_type_id;
      public int reward_id;

      public ExploreRankingResultRanking_rewardsRewards()
      {
      }

      public ExploreRankingResultRanking_rewardsRewards(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_quantity = (int) (long) json[nameof (reward_quantity)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
        this.reward_id = (int) (long) json[nameof (reward_id)];
      }
    }

    [Serializable]
    public class FriendAccept : KeyCompare
    {
      public PlayerFriend[] player_friends;

      public FriendAccept()
      {
      }

      public FriendAccept(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerFriend> playerFriendList = new List<PlayerFriend>();
        foreach (object json1 in (List<object>) json[nameof (player_friends)])
          playerFriendList.Add(json1 == null ? (PlayerFriend) null : new PlayerFriend((Dictionary<string, object>) json1));
        this.player_friends = playerFriendList.ToArray();
        SMManager.UpdateList<PlayerFriend>(this.player_friends);
      }
    }

    [Serializable]
    public class FriendApply : KeyCompare
    {
      public PlayerFriend[] player_friends;

      public FriendApply()
      {
      }

      public FriendApply(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerFriend> playerFriendList = new List<PlayerFriend>();
        foreach (object json1 in (List<object>) json[nameof (player_friends)])
          playerFriendList.Add(json1 == null ? (PlayerFriend) null : new PlayerFriend((Dictionary<string, object>) json1));
        this.player_friends = playerFriendList.ToArray();
        SMManager.UpdateList<PlayerFriend>(this.player_friends);
      }
    }

    [Serializable]
    public class FriendCancel : KeyCompare
    {
      public PlayerFriend[] player_friends;

      public FriendCancel()
      {
      }

      public FriendCancel(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerFriend> playerFriendList = new List<PlayerFriend>();
        foreach (object json1 in (List<object>) json[nameof (player_friends)])
          playerFriendList.Add(json1 == null ? (PlayerFriend) null : new PlayerFriend((Dictionary<string, object>) json1));
        this.player_friends = playerFriendList.ToArray();
        SMManager.UpdateList<PlayerFriend>(this.player_friends);
      }
    }

    [Serializable]
    public class FriendDetail : KeyCompare
    {
      public int friend_status;
      public SM.FriendDetail friend_detail;
      public bool is_favorite;

      public FriendDetail()
      {
      }

      public FriendDetail(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.friend_status = (int) (long) json[nameof (friend_status)];
        this.friend_detail = json[nameof (friend_detail)] == null ? (SM.FriendDetail) null : new SM.FriendDetail((Dictionary<string, object>) json[nameof (friend_detail)]);
        this.is_favorite = (bool) json[nameof (is_favorite)];
      }
    }

    [Serializable]
    public class FriendFavorite : KeyCompare
    {
      public string[] favorite_friend_list;
      public PlayerFriend[] player_friends;

      public FriendFavorite()
      {
      }

      public FriendFavorite(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.favorite_friend_list = ((IEnumerable<object>) json[nameof (favorite_friend_list)]).Select<object, string>((Func<object, string>) (s => (string) s)).ToArray<string>();
        List<PlayerFriend> playerFriendList = new List<PlayerFriend>();
        foreach (object json1 in (List<object>) json[nameof (player_friends)])
          playerFriendList.Add(json1 == null ? (PlayerFriend) null : new PlayerFriend((Dictionary<string, object>) json1));
        this.player_friends = playerFriendList.ToArray();
        SMManager.UpdateList<PlayerFriend>(this.player_friends);
      }
    }

    [Serializable]
    public class FriendFriends : KeyCompare
    {
      public PlayerFriend[] player_friends;

      public FriendFriends()
      {
      }

      public FriendFriends(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerFriend> playerFriendList = new List<PlayerFriend>();
        foreach (object json1 in (List<object>) json[nameof (player_friends)])
          playerFriendList.Add(json1 == null ? (PlayerFriend) null : new PlayerFriend((Dictionary<string, object>) json1));
        this.player_friends = playerFriendList.ToArray();
        SMManager.UpdateList<PlayerFriend>(this.player_friends, true);
      }
    }

    [Serializable]
    public class FriendPvpClassMatchHistory : KeyCompare
    {
      public PvPClassRecord pvp_class_record;
      public Player target_player;
      public int best_class;

      public FriendPvpClassMatchHistory()
      {
      }

      public FriendPvpClassMatchHistory(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.pvp_class_record = json[nameof (pvp_class_record)] == null ? (PvPClassRecord) null : new PvPClassRecord((Dictionary<string, object>) json[nameof (pvp_class_record)]);
        this.target_player = json[nameof (target_player)] == null ? (Player) null : new Player((Dictionary<string, object>) json[nameof (target_player)]);
        this.best_class = (int) (long) json[nameof (best_class)];
      }
    }

    [Serializable]
    public class FriendReject : KeyCompare
    {
      public PlayerFriend[] player_friends;

      public FriendReject()
      {
      }

      public FriendReject(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerFriend> playerFriendList = new List<PlayerFriend>();
        foreach (object json1 in (List<object>) json[nameof (player_friends)])
          playerFriendList.Add(json1 == null ? (PlayerFriend) null : new PlayerFriend((Dictionary<string, object>) json1));
        this.player_friends = playerFriendList.ToArray();
        SMManager.UpdateList<PlayerFriend>(this.player_friends);
      }
    }

    [Serializable]
    public class FriendRemove : KeyCompare
    {
      public PlayerFriend[] player_friends;

      public FriendRemove()
      {
      }

      public FriendRemove(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerFriend> playerFriendList = new List<PlayerFriend>();
        foreach (object json1 in (List<object>) json[nameof (player_friends)])
          playerFriendList.Add(json1 == null ? (PlayerFriend) null : new PlayerFriend((Dictionary<string, object>) json1));
        this.player_friends = playerFriendList.ToArray();
        SMManager.UpdateList<PlayerFriend>(this.player_friends);
      }
    }

    [Serializable]
    public class FriendStatus : KeyCompare
    {
      public PlayerUnit target_leader_unit;
      public PlayerGearReisouSchema[] target_player_reisou_items;
      public PlayerItem[] target_player_items;
      public PlayerAwakeSkill[] target_player_awake_skills;
      public PlayerUnit[] target_leader_unit_over_killers;

      public FriendStatus()
      {
      }

      public FriendStatus(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.target_leader_unit = json[nameof (target_leader_unit)] == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json[nameof (target_leader_unit)]);
        List<PlayerGearReisouSchema> gearReisouSchemaList = new List<PlayerGearReisouSchema>();
        foreach (object json1 in (List<object>) json[nameof (target_player_reisou_items)])
          gearReisouSchemaList.Add(json1 == null ? (PlayerGearReisouSchema) null : new PlayerGearReisouSchema((Dictionary<string, object>) json1));
        this.target_player_reisou_items = gearReisouSchemaList.ToArray();
        List<PlayerItem> playerItemList = new List<PlayerItem>();
        foreach (object json2 in (List<object>) json[nameof (target_player_items)])
          playerItemList.Add(json2 == null ? (PlayerItem) null : new PlayerItem((Dictionary<string, object>) json2));
        this.target_player_items = playerItemList.ToArray();
        List<PlayerAwakeSkill> playerAwakeSkillList = new List<PlayerAwakeSkill>();
        foreach (object json3 in (List<object>) json[nameof (target_player_awake_skills)])
          playerAwakeSkillList.Add(json3 == null ? (PlayerAwakeSkill) null : new PlayerAwakeSkill((Dictionary<string, object>) json3));
        this.target_player_awake_skills = playerAwakeSkillList.ToArray();
        List<PlayerUnit> playerUnitList = new List<PlayerUnit>();
        foreach (object json4 in (List<object>) json[nameof (target_leader_unit_over_killers)])
          playerUnitList.Add(json4 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json4));
        this.target_leader_unit_over_killers = playerUnitList.ToArray();
      }
    }

    [Serializable]
    public class Gacha : KeyCompare
    {
      public bool during_retry_gacha;
      public CoinBonus[] coin_bonuses;
      public FixedEntity[] g004_fix_info;
      public GachaModule[] gacha_modules;
      public TicketBanner[] g004_banner_info;

      public Gacha()
      {
      }

      public Gacha(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.during_retry_gacha = (bool) json[nameof (during_retry_gacha)];
        List<CoinBonus> coinBonusList = new List<CoinBonus>();
        foreach (object json1 in (List<object>) json[nameof (coin_bonuses)])
          coinBonusList.Add(json1 == null ? (CoinBonus) null : new CoinBonus((Dictionary<string, object>) json1));
        this.coin_bonuses = coinBonusList.ToArray();
        SMManager.UpdateList<CoinBonus>(this.coin_bonuses);
        List<FixedEntity> fixedEntityList = new List<FixedEntity>();
        foreach (object json2 in (List<object>) json[nameof (g004_fix_info)])
          fixedEntityList.Add(json2 == null ? (FixedEntity) null : new FixedEntity((Dictionary<string, object>) json2));
        this.g004_fix_info = fixedEntityList.ToArray();
        SMManager.UpdateList<FixedEntity>(this.g004_fix_info);
        List<GachaModule> gachaModuleList = new List<GachaModule>();
        foreach (object json3 in (List<object>) json[nameof (gacha_modules)])
          gachaModuleList.Add(json3 == null ? (GachaModule) null : new GachaModule((Dictionary<string, object>) json3));
        this.gacha_modules = gachaModuleList.ToArray();
        SMManager.UpdateList<GachaModule>(this.gacha_modules);
        List<TicketBanner> ticketBannerList = new List<TicketBanner>();
        foreach (object json4 in (List<object>) json[nameof (g004_banner_info)])
          ticketBannerList.Add(json4 == null ? (TicketBanner) null : new TicketBanner((Dictionary<string, object>) json4));
        this.g004_banner_info = ticketBannerList.ToArray();
        SMManager.UpdateList<TicketBanner>(this.g004_banner_info);
      }
    }

    [Serializable]
    public class GachaDecide : KeyCompare
    {
      public PlayerMaterialGear[] player_material_gears;
      public PlayerCommonTicket[] player_common_tickets;
      public WebAPI.Response.GachaDecideAdditional_items[] additional_items;
      public Player player;
      public PlayerUnit[] player_units;
      public PlayerUnit[] player_unit_reserves;
      public PlayerItem[] player_items;
      public UnlockQuest[] unlock_quests;
      public TicketBanner[] g004_banner_info;
      public GachaModule[] gacha_modules;
      public PlayerUnitReservesCount player_unit_reserves_count;
      public PlayerMaterialUnit[] player_material_units;
      public PlayerPresent[] player_presents;
      public WebAPI.Response.GachaDecideResult[] result;

      public GachaDecide()
      {
      }

      public GachaDecide(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerMaterialGear> playerMaterialGearList = new List<PlayerMaterialGear>();
        foreach (object json1 in (List<object>) json[nameof (player_material_gears)])
          playerMaterialGearList.Add(json1 == null ? (PlayerMaterialGear) null : new PlayerMaterialGear((Dictionary<string, object>) json1));
        this.player_material_gears = playerMaterialGearList.ToArray();
        SMManager.UpdateList<PlayerMaterialGear>(this.player_material_gears);
        List<PlayerCommonTicket> playerCommonTicketList = new List<PlayerCommonTicket>();
        foreach (object json2 in (List<object>) json[nameof (player_common_tickets)])
          playerCommonTicketList.Add(json2 == null ? (PlayerCommonTicket) null : new PlayerCommonTicket((Dictionary<string, object>) json2));
        this.player_common_tickets = playerCommonTicketList.ToArray();
        SMManager.UpdateList<PlayerCommonTicket>(this.player_common_tickets);
        List<WebAPI.Response.GachaDecideAdditional_items> decideAdditionalItemsList = new List<WebAPI.Response.GachaDecideAdditional_items>();
        foreach (object json3 in (List<object>) json[nameof (additional_items)])
          decideAdditionalItemsList.Add(json3 == null ? (WebAPI.Response.GachaDecideAdditional_items) null : new WebAPI.Response.GachaDecideAdditional_items((Dictionary<string, object>) json3));
        this.additional_items = decideAdditionalItemsList.ToArray();
        SMManager.UpdateList<WebAPI.Response.GachaDecideAdditional_items>(this.additional_items);
        this.player = json[nameof (player)] == null ? (Player) null : new Player((Dictionary<string, object>) json[nameof (player)]);
        SMManager.Change<Player>(this.player);
        List<PlayerUnit> playerUnitList1 = new List<PlayerUnit>();
        foreach (object json4 in (List<object>) json[nameof (player_units)])
          playerUnitList1.Add(json4 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json4));
        this.player_units = playerUnitList1.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_units);
        List<PlayerUnit> playerUnitList2 = new List<PlayerUnit>();
        foreach (object json5 in (List<object>) json[nameof (player_unit_reserves)])
          playerUnitList2.Add(json5 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json5));
        this.player_unit_reserves = playerUnitList2.ToArray();
        List<PlayerItem> playerItemList = new List<PlayerItem>();
        foreach (object json6 in (List<object>) json[nameof (player_items)])
          playerItemList.Add(json6 == null ? (PlayerItem) null : new PlayerItem((Dictionary<string, object>) json6));
        this.player_items = playerItemList.ToArray();
        SMManager.UpdateList<PlayerItem>(this.player_items);
        List<UnlockQuest> unlockQuestList = new List<UnlockQuest>();
        foreach (object json7 in (List<object>) json[nameof (unlock_quests)])
          unlockQuestList.Add(json7 == null ? (UnlockQuest) null : new UnlockQuest((Dictionary<string, object>) json7));
        this.unlock_quests = unlockQuestList.ToArray();
        List<TicketBanner> ticketBannerList = new List<TicketBanner>();
        foreach (object json8 in (List<object>) json[nameof (g004_banner_info)])
          ticketBannerList.Add(json8 == null ? (TicketBanner) null : new TicketBanner((Dictionary<string, object>) json8));
        this.g004_banner_info = ticketBannerList.ToArray();
        SMManager.UpdateList<TicketBanner>(this.g004_banner_info);
        List<GachaModule> gachaModuleList = new List<GachaModule>();
        foreach (object json9 in (List<object>) json[nameof (gacha_modules)])
          gachaModuleList.Add(json9 == null ? (GachaModule) null : new GachaModule((Dictionary<string, object>) json9));
        this.gacha_modules = gachaModuleList.ToArray();
        SMManager.UpdateList<GachaModule>(this.gacha_modules);
        this.player_unit_reserves_count = json[nameof (player_unit_reserves_count)] == null ? (PlayerUnitReservesCount) null : new PlayerUnitReservesCount((Dictionary<string, object>) json[nameof (player_unit_reserves_count)]);
        SMManager.Change<PlayerUnitReservesCount>(this.player_unit_reserves_count);
        List<PlayerMaterialUnit> playerMaterialUnitList = new List<PlayerMaterialUnit>();
        foreach (object json10 in (List<object>) json[nameof (player_material_units)])
          playerMaterialUnitList.Add(json10 == null ? (PlayerMaterialUnit) null : new PlayerMaterialUnit((Dictionary<string, object>) json10));
        this.player_material_units = playerMaterialUnitList.ToArray();
        SMManager.UpdateList<PlayerMaterialUnit>(this.player_material_units);
        List<PlayerPresent> playerPresentList = new List<PlayerPresent>();
        foreach (object json11 in (List<object>) json[nameof (player_presents)])
          playerPresentList.Add(json11 == null ? (PlayerPresent) null : new PlayerPresent((Dictionary<string, object>) json11));
        this.player_presents = playerPresentList.ToArray();
        SMManager.UpdateList<PlayerPresent>(this.player_presents);
        List<WebAPI.Response.GachaDecideResult> gachaDecideResultList = new List<WebAPI.Response.GachaDecideResult>();
        foreach (object json12 in (List<object>) json[nameof (result)])
          gachaDecideResultList.Add(json12 == null ? (WebAPI.Response.GachaDecideResult) null : new WebAPI.Response.GachaDecideResult((Dictionary<string, object>) json12));
        this.result = gachaDecideResultList.ToArray();
        if (!json.ContainsKey("player_presents:delete"))
          return;
        SMManager.DeleteList<PlayerPresent>(((IEnumerable<object>) json["player_presents:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class GachaDecideResult : KeyCompare
    {
      public int reward_type_id;
      public int reward_result_quantity;
      public bool is_new;
      public int reward_id;
      public int reward_result_id;

      public GachaDecideResult()
      {
      }

      public GachaDecideResult(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
        this.reward_result_quantity = (int) (long) json[nameof (reward_result_quantity)];
        this.is_new = (bool) json[nameof (is_new)];
        this.reward_id = (int) (long) json[nameof (reward_id)];
        this.reward_result_id = (int) (long) json[nameof (reward_result_id)];
      }
    }

    [Serializable]
    public class GachaDecideAdditional_items : KeyCompare
    {
      public int reward_quantity;
      public int reward_type_id;
      public int reward_id;

      public GachaDecideAdditional_items()
      {
      }

      public GachaDecideAdditional_items(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_quantity = (int) (long) json[nameof (reward_quantity)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
        this.reward_id = (int) (long) json[nameof (reward_id)];
      }
    }

    [Serializable]
    public class GachaG001ChargeMultiPay : KeyCompare
    {
      public PlayerMaterialGear[] player_material_gears;
      public PlayerItem[] player_items;
      public WebAPI.Response.GachaG001ChargeMultiPayAdditional_items[] additional_items;
      public Player player;
      public PlayerUnit[] player_units;
      public PlayerUnit[] player_unit_reserves;
      public UnlockQuest[] unlock_quests;
      public TicketBanner[] g004_banner_info;
      public GachaModule[] gacha_modules;
      public PlayerUnitReservesCount player_unit_reserves_count;
      public PlayerMaterialUnit[] player_material_units;
      public PlayerPresent[] player_presents;
      public WebAPI.Response.GachaG001ChargeMultiPayResult[] result;

      public GachaG001ChargeMultiPay()
      {
      }

      public GachaG001ChargeMultiPay(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerMaterialGear> playerMaterialGearList = new List<PlayerMaterialGear>();
        foreach (object json1 in (List<object>) json[nameof (player_material_gears)])
          playerMaterialGearList.Add(json1 == null ? (PlayerMaterialGear) null : new PlayerMaterialGear((Dictionary<string, object>) json1));
        this.player_material_gears = playerMaterialGearList.ToArray();
        SMManager.UpdateList<PlayerMaterialGear>(this.player_material_gears);
        List<PlayerItem> playerItemList = new List<PlayerItem>();
        foreach (object json2 in (List<object>) json[nameof (player_items)])
          playerItemList.Add(json2 == null ? (PlayerItem) null : new PlayerItem((Dictionary<string, object>) json2));
        this.player_items = playerItemList.ToArray();
        SMManager.UpdateList<PlayerItem>(this.player_items);
        List<WebAPI.Response.GachaG001ChargeMultiPayAdditional_items> payAdditionalItemsList = new List<WebAPI.Response.GachaG001ChargeMultiPayAdditional_items>();
        foreach (object json3 in (List<object>) json[nameof (additional_items)])
          payAdditionalItemsList.Add(json3 == null ? (WebAPI.Response.GachaG001ChargeMultiPayAdditional_items) null : new WebAPI.Response.GachaG001ChargeMultiPayAdditional_items((Dictionary<string, object>) json3));
        this.additional_items = payAdditionalItemsList.ToArray();
        SMManager.UpdateList<WebAPI.Response.GachaG001ChargeMultiPayAdditional_items>(this.additional_items);
        this.player = json[nameof (player)] == null ? (Player) null : new Player((Dictionary<string, object>) json[nameof (player)]);
        SMManager.Change<Player>(this.player);
        List<PlayerUnit> playerUnitList1 = new List<PlayerUnit>();
        foreach (object json4 in (List<object>) json[nameof (player_units)])
          playerUnitList1.Add(json4 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json4));
        this.player_units = playerUnitList1.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_units);
        List<PlayerUnit> playerUnitList2 = new List<PlayerUnit>();
        foreach (object json5 in (List<object>) json[nameof (player_unit_reserves)])
          playerUnitList2.Add(json5 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json5));
        this.player_unit_reserves = playerUnitList2.ToArray();
        List<UnlockQuest> unlockQuestList = new List<UnlockQuest>();
        foreach (object json6 in (List<object>) json[nameof (unlock_quests)])
          unlockQuestList.Add(json6 == null ? (UnlockQuest) null : new UnlockQuest((Dictionary<string, object>) json6));
        this.unlock_quests = unlockQuestList.ToArray();
        List<TicketBanner> ticketBannerList = new List<TicketBanner>();
        foreach (object json7 in (List<object>) json[nameof (g004_banner_info)])
          ticketBannerList.Add(json7 == null ? (TicketBanner) null : new TicketBanner((Dictionary<string, object>) json7));
        this.g004_banner_info = ticketBannerList.ToArray();
        SMManager.UpdateList<TicketBanner>(this.g004_banner_info);
        List<GachaModule> gachaModuleList = new List<GachaModule>();
        foreach (object json8 in (List<object>) json[nameof (gacha_modules)])
          gachaModuleList.Add(json8 == null ? (GachaModule) null : new GachaModule((Dictionary<string, object>) json8));
        this.gacha_modules = gachaModuleList.ToArray();
        SMManager.UpdateList<GachaModule>(this.gacha_modules);
        this.player_unit_reserves_count = json[nameof (player_unit_reserves_count)] == null ? (PlayerUnitReservesCount) null : new PlayerUnitReservesCount((Dictionary<string, object>) json[nameof (player_unit_reserves_count)]);
        SMManager.Change<PlayerUnitReservesCount>(this.player_unit_reserves_count);
        List<PlayerMaterialUnit> playerMaterialUnitList = new List<PlayerMaterialUnit>();
        foreach (object json9 in (List<object>) json[nameof (player_material_units)])
          playerMaterialUnitList.Add(json9 == null ? (PlayerMaterialUnit) null : new PlayerMaterialUnit((Dictionary<string, object>) json9));
        this.player_material_units = playerMaterialUnitList.ToArray();
        SMManager.UpdateList<PlayerMaterialUnit>(this.player_material_units);
        List<PlayerPresent> playerPresentList = new List<PlayerPresent>();
        foreach (object json10 in (List<object>) json[nameof (player_presents)])
          playerPresentList.Add(json10 == null ? (PlayerPresent) null : new PlayerPresent((Dictionary<string, object>) json10));
        this.player_presents = playerPresentList.ToArray();
        SMManager.UpdateList<PlayerPresent>(this.player_presents);
        List<WebAPI.Response.GachaG001ChargeMultiPayResult> chargeMultiPayResultList = new List<WebAPI.Response.GachaG001ChargeMultiPayResult>();
        foreach (object json11 in (List<object>) json[nameof (result)])
          chargeMultiPayResultList.Add(json11 == null ? (WebAPI.Response.GachaG001ChargeMultiPayResult) null : new WebAPI.Response.GachaG001ChargeMultiPayResult((Dictionary<string, object>) json11));
        this.result = chargeMultiPayResultList.ToArray();
        if (!json.ContainsKey("player_presents:delete"))
          return;
        SMManager.DeleteList<PlayerPresent>(((IEnumerable<object>) json["player_presents:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class GachaG001ChargeMultiPayResult : KeyCompare
    {
      public int reward_result_quantity;
      public int reward_result_id;
      public bool is_new;
      public int reward_type_id;
      public int direction_type_id;

      public GachaG001ChargeMultiPayResult()
      {
      }

      public GachaG001ChargeMultiPayResult(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_result_quantity = (int) (long) json[nameof (reward_result_quantity)];
        this.reward_result_id = (int) (long) json[nameof (reward_result_id)];
        this.is_new = (bool) json[nameof (is_new)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
        this.direction_type_id = (int) (long) json[nameof (direction_type_id)];
      }
    }

    [Serializable]
    public class GachaG001ChargeMultiPayAdditional_items : KeyCompare
    {
      public int reward_quantity;
      public int reward_type_id;
      public int reward_id;

      public GachaG001ChargeMultiPayAdditional_items()
      {
      }

      public GachaG001ChargeMultiPayAdditional_items(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_quantity = (int) (long) json[nameof (reward_quantity)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
        this.reward_id = (int) (long) json[nameof (reward_id)];
      }
    }

    [Serializable]
    public class GachaG001ChargePay : KeyCompare
    {
      public PlayerMaterialGear[] player_material_gears;
      public PlayerItem[] player_items;
      public WebAPI.Response.GachaG001ChargePayAdditional_items[] additional_items;
      public Player player;
      public PlayerUnit[] player_units;
      public PlayerUnit[] player_unit_reserves;
      public UnlockQuest[] unlock_quests;
      public TicketBanner[] g004_banner_info;
      public GachaModule[] gacha_modules;
      public PlayerUnitReservesCount player_unit_reserves_count;
      public PlayerMaterialUnit[] player_material_units;
      public PlayerPresent[] player_presents;
      public WebAPI.Response.GachaG001ChargePayResult[] result;

      public GachaG001ChargePay()
      {
      }

      public GachaG001ChargePay(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerMaterialGear> playerMaterialGearList = new List<PlayerMaterialGear>();
        foreach (object json1 in (List<object>) json[nameof (player_material_gears)])
          playerMaterialGearList.Add(json1 == null ? (PlayerMaterialGear) null : new PlayerMaterialGear((Dictionary<string, object>) json1));
        this.player_material_gears = playerMaterialGearList.ToArray();
        SMManager.UpdateList<PlayerMaterialGear>(this.player_material_gears);
        List<PlayerItem> playerItemList = new List<PlayerItem>();
        foreach (object json2 in (List<object>) json[nameof (player_items)])
          playerItemList.Add(json2 == null ? (PlayerItem) null : new PlayerItem((Dictionary<string, object>) json2));
        this.player_items = playerItemList.ToArray();
        SMManager.UpdateList<PlayerItem>(this.player_items);
        List<WebAPI.Response.GachaG001ChargePayAdditional_items> payAdditionalItemsList = new List<WebAPI.Response.GachaG001ChargePayAdditional_items>();
        foreach (object json3 in (List<object>) json[nameof (additional_items)])
          payAdditionalItemsList.Add(json3 == null ? (WebAPI.Response.GachaG001ChargePayAdditional_items) null : new WebAPI.Response.GachaG001ChargePayAdditional_items((Dictionary<string, object>) json3));
        this.additional_items = payAdditionalItemsList.ToArray();
        SMManager.UpdateList<WebAPI.Response.GachaG001ChargePayAdditional_items>(this.additional_items);
        this.player = json[nameof (player)] == null ? (Player) null : new Player((Dictionary<string, object>) json[nameof (player)]);
        SMManager.Change<Player>(this.player);
        List<PlayerUnit> playerUnitList1 = new List<PlayerUnit>();
        foreach (object json4 in (List<object>) json[nameof (player_units)])
          playerUnitList1.Add(json4 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json4));
        this.player_units = playerUnitList1.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_units);
        List<PlayerUnit> playerUnitList2 = new List<PlayerUnit>();
        foreach (object json5 in (List<object>) json[nameof (player_unit_reserves)])
          playerUnitList2.Add(json5 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json5));
        this.player_unit_reserves = playerUnitList2.ToArray();
        List<UnlockQuest> unlockQuestList = new List<UnlockQuest>();
        foreach (object json6 in (List<object>) json[nameof (unlock_quests)])
          unlockQuestList.Add(json6 == null ? (UnlockQuest) null : new UnlockQuest((Dictionary<string, object>) json6));
        this.unlock_quests = unlockQuestList.ToArray();
        List<TicketBanner> ticketBannerList = new List<TicketBanner>();
        foreach (object json7 in (List<object>) json[nameof (g004_banner_info)])
          ticketBannerList.Add(json7 == null ? (TicketBanner) null : new TicketBanner((Dictionary<string, object>) json7));
        this.g004_banner_info = ticketBannerList.ToArray();
        SMManager.UpdateList<TicketBanner>(this.g004_banner_info);
        List<GachaModule> gachaModuleList = new List<GachaModule>();
        foreach (object json8 in (List<object>) json[nameof (gacha_modules)])
          gachaModuleList.Add(json8 == null ? (GachaModule) null : new GachaModule((Dictionary<string, object>) json8));
        this.gacha_modules = gachaModuleList.ToArray();
        SMManager.UpdateList<GachaModule>(this.gacha_modules);
        this.player_unit_reserves_count = json[nameof (player_unit_reserves_count)] == null ? (PlayerUnitReservesCount) null : new PlayerUnitReservesCount((Dictionary<string, object>) json[nameof (player_unit_reserves_count)]);
        SMManager.Change<PlayerUnitReservesCount>(this.player_unit_reserves_count);
        List<PlayerMaterialUnit> playerMaterialUnitList = new List<PlayerMaterialUnit>();
        foreach (object json9 in (List<object>) json[nameof (player_material_units)])
          playerMaterialUnitList.Add(json9 == null ? (PlayerMaterialUnit) null : new PlayerMaterialUnit((Dictionary<string, object>) json9));
        this.player_material_units = playerMaterialUnitList.ToArray();
        SMManager.UpdateList<PlayerMaterialUnit>(this.player_material_units);
        List<PlayerPresent> playerPresentList = new List<PlayerPresent>();
        foreach (object json10 in (List<object>) json[nameof (player_presents)])
          playerPresentList.Add(json10 == null ? (PlayerPresent) null : new PlayerPresent((Dictionary<string, object>) json10));
        this.player_presents = playerPresentList.ToArray();
        SMManager.UpdateList<PlayerPresent>(this.player_presents);
        List<WebAPI.Response.GachaG001ChargePayResult> g001ChargePayResultList = new List<WebAPI.Response.GachaG001ChargePayResult>();
        foreach (object json11 in (List<object>) json[nameof (result)])
          g001ChargePayResultList.Add(json11 == null ? (WebAPI.Response.GachaG001ChargePayResult) null : new WebAPI.Response.GachaG001ChargePayResult((Dictionary<string, object>) json11));
        this.result = g001ChargePayResultList.ToArray();
        if (!json.ContainsKey("player_presents:delete"))
          return;
        SMManager.DeleteList<PlayerPresent>(((IEnumerable<object>) json["player_presents:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class GachaG001ChargePayResult : KeyCompare
    {
      public int reward_result_quantity;
      public int reward_result_id;
      public bool is_new;
      public int reward_type_id;
      public int direction_type_id;

      public GachaG001ChargePayResult()
      {
      }

      public GachaG001ChargePayResult(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_result_quantity = (int) (long) json[nameof (reward_result_quantity)];
        this.reward_result_id = (int) (long) json[nameof (reward_result_id)];
        this.is_new = (bool) json[nameof (is_new)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
        this.direction_type_id = (int) (long) json[nameof (direction_type_id)];
      }
    }

    [Serializable]
    public class GachaG001ChargePayAdditional_items : KeyCompare
    {
      public int reward_quantity;
      public int reward_type_id;
      public int reward_id;

      public GachaG001ChargePayAdditional_items()
      {
      }

      public GachaG001ChargePayAdditional_items(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_quantity = (int) (long) json[nameof (reward_quantity)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
        this.reward_id = (int) (long) json[nameof (reward_id)];
      }
    }

    [Serializable]
    public class GachaG002FriendpointPay : KeyCompare
    {
      public PlayerMaterialGear[] player_material_gears;
      public PlayerItem[] player_items;
      public WebAPI.Response.GachaG002FriendpointPayAdditional_items[] additional_items;
      public Player player;
      public PlayerUnit[] player_units;
      public TicketBanner[] g004_banner_info;
      public GachaModule[] gacha_modules;
      public PlayerMaterialUnit[] player_material_units;
      public PlayerPresent[] player_presents;
      public WebAPI.Response.GachaG002FriendpointPayResult[] result;

      public GachaG002FriendpointPay()
      {
      }

      public GachaG002FriendpointPay(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerMaterialGear> playerMaterialGearList = new List<PlayerMaterialGear>();
        foreach (object json1 in (List<object>) json[nameof (player_material_gears)])
          playerMaterialGearList.Add(json1 == null ? (PlayerMaterialGear) null : new PlayerMaterialGear((Dictionary<string, object>) json1));
        this.player_material_gears = playerMaterialGearList.ToArray();
        SMManager.UpdateList<PlayerMaterialGear>(this.player_material_gears);
        List<PlayerItem> playerItemList = new List<PlayerItem>();
        foreach (object json2 in (List<object>) json[nameof (player_items)])
          playerItemList.Add(json2 == null ? (PlayerItem) null : new PlayerItem((Dictionary<string, object>) json2));
        this.player_items = playerItemList.ToArray();
        SMManager.UpdateList<PlayerItem>(this.player_items);
        List<WebAPI.Response.GachaG002FriendpointPayAdditional_items> payAdditionalItemsList = new List<WebAPI.Response.GachaG002FriendpointPayAdditional_items>();
        foreach (object json3 in (List<object>) json[nameof (additional_items)])
          payAdditionalItemsList.Add(json3 == null ? (WebAPI.Response.GachaG002FriendpointPayAdditional_items) null : new WebAPI.Response.GachaG002FriendpointPayAdditional_items((Dictionary<string, object>) json3));
        this.additional_items = payAdditionalItemsList.ToArray();
        SMManager.UpdateList<WebAPI.Response.GachaG002FriendpointPayAdditional_items>(this.additional_items);
        this.player = json[nameof (player)] == null ? (Player) null : new Player((Dictionary<string, object>) json[nameof (player)]);
        SMManager.Change<Player>(this.player);
        List<PlayerUnit> playerUnitList = new List<PlayerUnit>();
        foreach (object json4 in (List<object>) json[nameof (player_units)])
          playerUnitList.Add(json4 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json4));
        this.player_units = playerUnitList.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_units);
        List<TicketBanner> ticketBannerList = new List<TicketBanner>();
        foreach (object json5 in (List<object>) json[nameof (g004_banner_info)])
          ticketBannerList.Add(json5 == null ? (TicketBanner) null : new TicketBanner((Dictionary<string, object>) json5));
        this.g004_banner_info = ticketBannerList.ToArray();
        SMManager.UpdateList<TicketBanner>(this.g004_banner_info);
        List<GachaModule> gachaModuleList = new List<GachaModule>();
        foreach (object json6 in (List<object>) json[nameof (gacha_modules)])
          gachaModuleList.Add(json6 == null ? (GachaModule) null : new GachaModule((Dictionary<string, object>) json6));
        this.gacha_modules = gachaModuleList.ToArray();
        SMManager.UpdateList<GachaModule>(this.gacha_modules);
        List<PlayerMaterialUnit> playerMaterialUnitList = new List<PlayerMaterialUnit>();
        foreach (object json7 in (List<object>) json[nameof (player_material_units)])
          playerMaterialUnitList.Add(json7 == null ? (PlayerMaterialUnit) null : new PlayerMaterialUnit((Dictionary<string, object>) json7));
        this.player_material_units = playerMaterialUnitList.ToArray();
        SMManager.UpdateList<PlayerMaterialUnit>(this.player_material_units);
        List<PlayerPresent> playerPresentList = new List<PlayerPresent>();
        foreach (object json8 in (List<object>) json[nameof (player_presents)])
          playerPresentList.Add(json8 == null ? (PlayerPresent) null : new PlayerPresent((Dictionary<string, object>) json8));
        this.player_presents = playerPresentList.ToArray();
        SMManager.UpdateList<PlayerPresent>(this.player_presents);
        List<WebAPI.Response.GachaG002FriendpointPayResult> friendpointPayResultList = new List<WebAPI.Response.GachaG002FriendpointPayResult>();
        foreach (object json9 in (List<object>) json[nameof (result)])
          friendpointPayResultList.Add(json9 == null ? (WebAPI.Response.GachaG002FriendpointPayResult) null : new WebAPI.Response.GachaG002FriendpointPayResult((Dictionary<string, object>) json9));
        this.result = friendpointPayResultList.ToArray();
        if (!json.ContainsKey("player_presents:delete"))
          return;
        SMManager.DeleteList<PlayerPresent>(((IEnumerable<object>) json["player_presents:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class GachaG002FriendpointPayResult : KeyCompare
    {
      public int reward_result_quantity;
      public int reward_result_id;
      public bool is_new;
      public int reward_type_id;
      public int direction_type_id;

      public GachaG002FriendpointPayResult()
      {
      }

      public GachaG002FriendpointPayResult(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_result_quantity = (int) (long) json[nameof (reward_result_quantity)];
        this.reward_result_id = (int) (long) json[nameof (reward_result_id)];
        this.is_new = (bool) json[nameof (is_new)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
        this.direction_type_id = (int) (long) json[nameof (direction_type_id)];
      }
    }

    [Serializable]
    public class GachaG002FriendpointPayAdditional_items : KeyCompare
    {
      public int reward_quantity;
      public int reward_type_id;
      public int reward_id;

      public GachaG002FriendpointPayAdditional_items()
      {
      }

      public GachaG002FriendpointPayAdditional_items(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_quantity = (int) (long) json[nameof (reward_quantity)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
        this.reward_id = (int) (long) json[nameof (reward_id)];
      }
    }

    [Serializable]
    public class GachaG004TicketPay : KeyCompare
    {
      public PlayerMaterialGear[] player_material_gears;
      public PlayerItem[] player_items;
      public WebAPI.Response.GachaG004TicketPayAdditional_items[] additional_items;
      public Player player;
      public PlayerUnit[] player_units;
      public UnlockQuest[] unlock_quests;
      public TicketBanner[] g004_banner_info;
      public GachaModule[] gacha_modules;
      public PlayerMaterialUnit[] player_material_units;
      public PlayerPresent[] player_presents;
      public WebAPI.Response.GachaG004TicketPayResult[] result;

      public GachaG004TicketPay()
      {
      }

      public GachaG004TicketPay(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerMaterialGear> playerMaterialGearList = new List<PlayerMaterialGear>();
        foreach (object json1 in (List<object>) json[nameof (player_material_gears)])
          playerMaterialGearList.Add(json1 == null ? (PlayerMaterialGear) null : new PlayerMaterialGear((Dictionary<string, object>) json1));
        this.player_material_gears = playerMaterialGearList.ToArray();
        SMManager.UpdateList<PlayerMaterialGear>(this.player_material_gears);
        List<PlayerItem> playerItemList = new List<PlayerItem>();
        foreach (object json2 in (List<object>) json[nameof (player_items)])
          playerItemList.Add(json2 == null ? (PlayerItem) null : new PlayerItem((Dictionary<string, object>) json2));
        this.player_items = playerItemList.ToArray();
        SMManager.UpdateList<PlayerItem>(this.player_items);
        List<WebAPI.Response.GachaG004TicketPayAdditional_items> payAdditionalItemsList = new List<WebAPI.Response.GachaG004TicketPayAdditional_items>();
        foreach (object json3 in (List<object>) json[nameof (additional_items)])
          payAdditionalItemsList.Add(json3 == null ? (WebAPI.Response.GachaG004TicketPayAdditional_items) null : new WebAPI.Response.GachaG004TicketPayAdditional_items((Dictionary<string, object>) json3));
        this.additional_items = payAdditionalItemsList.ToArray();
        SMManager.UpdateList<WebAPI.Response.GachaG004TicketPayAdditional_items>(this.additional_items);
        this.player = json[nameof (player)] == null ? (Player) null : new Player((Dictionary<string, object>) json[nameof (player)]);
        SMManager.Change<Player>(this.player);
        List<PlayerUnit> playerUnitList = new List<PlayerUnit>();
        foreach (object json4 in (List<object>) json[nameof (player_units)])
          playerUnitList.Add(json4 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json4));
        this.player_units = playerUnitList.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_units);
        List<UnlockQuest> unlockQuestList = new List<UnlockQuest>();
        foreach (object json5 in (List<object>) json[nameof (unlock_quests)])
          unlockQuestList.Add(json5 == null ? (UnlockQuest) null : new UnlockQuest((Dictionary<string, object>) json5));
        this.unlock_quests = unlockQuestList.ToArray();
        List<TicketBanner> ticketBannerList = new List<TicketBanner>();
        foreach (object json6 in (List<object>) json[nameof (g004_banner_info)])
          ticketBannerList.Add(json6 == null ? (TicketBanner) null : new TicketBanner((Dictionary<string, object>) json6));
        this.g004_banner_info = ticketBannerList.ToArray();
        SMManager.UpdateList<TicketBanner>(this.g004_banner_info);
        List<GachaModule> gachaModuleList = new List<GachaModule>();
        foreach (object json7 in (List<object>) json[nameof (gacha_modules)])
          gachaModuleList.Add(json7 == null ? (GachaModule) null : new GachaModule((Dictionary<string, object>) json7));
        this.gacha_modules = gachaModuleList.ToArray();
        SMManager.UpdateList<GachaModule>(this.gacha_modules);
        List<PlayerMaterialUnit> playerMaterialUnitList = new List<PlayerMaterialUnit>();
        foreach (object json8 in (List<object>) json[nameof (player_material_units)])
          playerMaterialUnitList.Add(json8 == null ? (PlayerMaterialUnit) null : new PlayerMaterialUnit((Dictionary<string, object>) json8));
        this.player_material_units = playerMaterialUnitList.ToArray();
        SMManager.UpdateList<PlayerMaterialUnit>(this.player_material_units);
        List<PlayerPresent> playerPresentList = new List<PlayerPresent>();
        foreach (object json9 in (List<object>) json[nameof (player_presents)])
          playerPresentList.Add(json9 == null ? (PlayerPresent) null : new PlayerPresent((Dictionary<string, object>) json9));
        this.player_presents = playerPresentList.ToArray();
        SMManager.UpdateList<PlayerPresent>(this.player_presents);
        List<WebAPI.Response.GachaG004TicketPayResult> g004TicketPayResultList = new List<WebAPI.Response.GachaG004TicketPayResult>();
        foreach (object json10 in (List<object>) json[nameof (result)])
          g004TicketPayResultList.Add(json10 == null ? (WebAPI.Response.GachaG004TicketPayResult) null : new WebAPI.Response.GachaG004TicketPayResult((Dictionary<string, object>) json10));
        this.result = g004TicketPayResultList.ToArray();
        if (!json.ContainsKey("player_presents:delete"))
          return;
        SMManager.DeleteList<PlayerPresent>(((IEnumerable<object>) json["player_presents:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class GachaG004TicketPayResult : KeyCompare
    {
      public int reward_result_quantity;
      public int reward_result_id;
      public bool is_new;
      public int reward_type_id;
      public int direction_type_id;

      public GachaG004TicketPayResult()
      {
      }

      public GachaG004TicketPayResult(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_result_quantity = (int) (long) json[nameof (reward_result_quantity)];
        this.reward_result_id = (int) (long) json[nameof (reward_result_id)];
        this.is_new = (bool) json[nameof (is_new)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
        this.direction_type_id = (int) (long) json[nameof (direction_type_id)];
      }
    }

    [Serializable]
    public class GachaG004TicketPayAdditional_items : KeyCompare
    {
      public int reward_quantity;
      public int reward_type_id;
      public int reward_id;

      public GachaG004TicketPayAdditional_items()
      {
      }

      public GachaG004TicketPayAdditional_items(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_quantity = (int) (long) json[nameof (reward_quantity)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
        this.reward_id = (int) (long) json[nameof (reward_id)];
      }
    }

    [Serializable]
    public class GachaG005NewbieMultiPay : KeyCompare
    {
      public PlayerMaterialGear[] player_material_gears;
      public PlayerItem[] player_items;
      public WebAPI.Response.GachaG005NewbieMultiPayAdditional_items[] additional_items;
      public Player player;
      public PlayerUnit[] player_units;
      public PlayerUnit[] player_unit_reserves;
      public UnlockQuest[] unlock_quests;
      public TicketBanner[] g004_banner_info;
      public GachaModule[] gacha_modules;
      public PlayerUnitReservesCount player_unit_reserves_count;
      public PlayerMaterialUnit[] player_material_units;
      public PlayerPresent[] player_presents;
      public WebAPI.Response.GachaG005NewbieMultiPayResult[] result;

      public GachaG005NewbieMultiPay()
      {
      }

      public GachaG005NewbieMultiPay(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerMaterialGear> playerMaterialGearList = new List<PlayerMaterialGear>();
        foreach (object json1 in (List<object>) json[nameof (player_material_gears)])
          playerMaterialGearList.Add(json1 == null ? (PlayerMaterialGear) null : new PlayerMaterialGear((Dictionary<string, object>) json1));
        this.player_material_gears = playerMaterialGearList.ToArray();
        SMManager.UpdateList<PlayerMaterialGear>(this.player_material_gears);
        List<PlayerItem> playerItemList = new List<PlayerItem>();
        foreach (object json2 in (List<object>) json[nameof (player_items)])
          playerItemList.Add(json2 == null ? (PlayerItem) null : new PlayerItem((Dictionary<string, object>) json2));
        this.player_items = playerItemList.ToArray();
        SMManager.UpdateList<PlayerItem>(this.player_items);
        List<WebAPI.Response.GachaG005NewbieMultiPayAdditional_items> payAdditionalItemsList = new List<WebAPI.Response.GachaG005NewbieMultiPayAdditional_items>();
        foreach (object json3 in (List<object>) json[nameof (additional_items)])
          payAdditionalItemsList.Add(json3 == null ? (WebAPI.Response.GachaG005NewbieMultiPayAdditional_items) null : new WebAPI.Response.GachaG005NewbieMultiPayAdditional_items((Dictionary<string, object>) json3));
        this.additional_items = payAdditionalItemsList.ToArray();
        SMManager.UpdateList<WebAPI.Response.GachaG005NewbieMultiPayAdditional_items>(this.additional_items);
        this.player = json[nameof (player)] == null ? (Player) null : new Player((Dictionary<string, object>) json[nameof (player)]);
        SMManager.Change<Player>(this.player);
        List<PlayerUnit> playerUnitList1 = new List<PlayerUnit>();
        foreach (object json4 in (List<object>) json[nameof (player_units)])
          playerUnitList1.Add(json4 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json4));
        this.player_units = playerUnitList1.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_units);
        List<PlayerUnit> playerUnitList2 = new List<PlayerUnit>();
        foreach (object json5 in (List<object>) json[nameof (player_unit_reserves)])
          playerUnitList2.Add(json5 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json5));
        this.player_unit_reserves = playerUnitList2.ToArray();
        List<UnlockQuest> unlockQuestList = new List<UnlockQuest>();
        foreach (object json6 in (List<object>) json[nameof (unlock_quests)])
          unlockQuestList.Add(json6 == null ? (UnlockQuest) null : new UnlockQuest((Dictionary<string, object>) json6));
        this.unlock_quests = unlockQuestList.ToArray();
        List<TicketBanner> ticketBannerList = new List<TicketBanner>();
        foreach (object json7 in (List<object>) json[nameof (g004_banner_info)])
          ticketBannerList.Add(json7 == null ? (TicketBanner) null : new TicketBanner((Dictionary<string, object>) json7));
        this.g004_banner_info = ticketBannerList.ToArray();
        SMManager.UpdateList<TicketBanner>(this.g004_banner_info);
        List<GachaModule> gachaModuleList = new List<GachaModule>();
        foreach (object json8 in (List<object>) json[nameof (gacha_modules)])
          gachaModuleList.Add(json8 == null ? (GachaModule) null : new GachaModule((Dictionary<string, object>) json8));
        this.gacha_modules = gachaModuleList.ToArray();
        SMManager.UpdateList<GachaModule>(this.gacha_modules);
        this.player_unit_reserves_count = json[nameof (player_unit_reserves_count)] == null ? (PlayerUnitReservesCount) null : new PlayerUnitReservesCount((Dictionary<string, object>) json[nameof (player_unit_reserves_count)]);
        SMManager.Change<PlayerUnitReservesCount>(this.player_unit_reserves_count);
        List<PlayerMaterialUnit> playerMaterialUnitList = new List<PlayerMaterialUnit>();
        foreach (object json9 in (List<object>) json[nameof (player_material_units)])
          playerMaterialUnitList.Add(json9 == null ? (PlayerMaterialUnit) null : new PlayerMaterialUnit((Dictionary<string, object>) json9));
        this.player_material_units = playerMaterialUnitList.ToArray();
        SMManager.UpdateList<PlayerMaterialUnit>(this.player_material_units);
        List<PlayerPresent> playerPresentList = new List<PlayerPresent>();
        foreach (object json10 in (List<object>) json[nameof (player_presents)])
          playerPresentList.Add(json10 == null ? (PlayerPresent) null : new PlayerPresent((Dictionary<string, object>) json10));
        this.player_presents = playerPresentList.ToArray();
        SMManager.UpdateList<PlayerPresent>(this.player_presents);
        List<WebAPI.Response.GachaG005NewbieMultiPayResult> newbieMultiPayResultList = new List<WebAPI.Response.GachaG005NewbieMultiPayResult>();
        foreach (object json11 in (List<object>) json[nameof (result)])
          newbieMultiPayResultList.Add(json11 == null ? (WebAPI.Response.GachaG005NewbieMultiPayResult) null : new WebAPI.Response.GachaG005NewbieMultiPayResult((Dictionary<string, object>) json11));
        this.result = newbieMultiPayResultList.ToArray();
        if (!json.ContainsKey("player_presents:delete"))
          return;
        SMManager.DeleteList<PlayerPresent>(((IEnumerable<object>) json["player_presents:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class GachaG005NewbieMultiPayResult : KeyCompare
    {
      public int reward_result_quantity;
      public int reward_result_id;
      public bool is_new;
      public int reward_type_id;
      public int direction_type_id;

      public GachaG005NewbieMultiPayResult()
      {
      }

      public GachaG005NewbieMultiPayResult(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_result_quantity = (int) (long) json[nameof (reward_result_quantity)];
        this.reward_result_id = (int) (long) json[nameof (reward_result_id)];
        this.is_new = (bool) json[nameof (is_new)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
        this.direction_type_id = (int) (long) json[nameof (direction_type_id)];
      }
    }

    [Serializable]
    public class GachaG005NewbieMultiPayAdditional_items : KeyCompare
    {
      public int reward_quantity;
      public int reward_type_id;
      public int reward_id;

      public GachaG005NewbieMultiPayAdditional_items()
      {
      }

      public GachaG005NewbieMultiPayAdditional_items(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_quantity = (int) (long) json[nameof (reward_quantity)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
        this.reward_id = (int) (long) json[nameof (reward_id)];
      }
    }

    [Serializable]
    public class GachaG005NewbiePay : KeyCompare
    {
      public PlayerMaterialGear[] player_material_gears;
      public PlayerItem[] player_items;
      public WebAPI.Response.GachaG005NewbiePayAdditional_items[] additional_items;
      public Player player;
      public PlayerUnit[] player_units;
      public PlayerUnit[] player_unit_reserves;
      public UnlockQuest[] unlock_quests;
      public TicketBanner[] g004_banner_info;
      public GachaModule[] gacha_modules;
      public PlayerUnitReservesCount player_unit_reserves_count;
      public PlayerMaterialUnit[] player_material_units;
      public PlayerPresent[] player_presents;
      public WebAPI.Response.GachaG005NewbiePayResult[] result;

      public GachaG005NewbiePay()
      {
      }

      public GachaG005NewbiePay(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerMaterialGear> playerMaterialGearList = new List<PlayerMaterialGear>();
        foreach (object json1 in (List<object>) json[nameof (player_material_gears)])
          playerMaterialGearList.Add(json1 == null ? (PlayerMaterialGear) null : new PlayerMaterialGear((Dictionary<string, object>) json1));
        this.player_material_gears = playerMaterialGearList.ToArray();
        SMManager.UpdateList<PlayerMaterialGear>(this.player_material_gears);
        List<PlayerItem> playerItemList = new List<PlayerItem>();
        foreach (object json2 in (List<object>) json[nameof (player_items)])
          playerItemList.Add(json2 == null ? (PlayerItem) null : new PlayerItem((Dictionary<string, object>) json2));
        this.player_items = playerItemList.ToArray();
        SMManager.UpdateList<PlayerItem>(this.player_items);
        List<WebAPI.Response.GachaG005NewbiePayAdditional_items> payAdditionalItemsList = new List<WebAPI.Response.GachaG005NewbiePayAdditional_items>();
        foreach (object json3 in (List<object>) json[nameof (additional_items)])
          payAdditionalItemsList.Add(json3 == null ? (WebAPI.Response.GachaG005NewbiePayAdditional_items) null : new WebAPI.Response.GachaG005NewbiePayAdditional_items((Dictionary<string, object>) json3));
        this.additional_items = payAdditionalItemsList.ToArray();
        SMManager.UpdateList<WebAPI.Response.GachaG005NewbiePayAdditional_items>(this.additional_items);
        this.player = json[nameof (player)] == null ? (Player) null : new Player((Dictionary<string, object>) json[nameof (player)]);
        SMManager.Change<Player>(this.player);
        List<PlayerUnit> playerUnitList1 = new List<PlayerUnit>();
        foreach (object json4 in (List<object>) json[nameof (player_units)])
          playerUnitList1.Add(json4 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json4));
        this.player_units = playerUnitList1.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_units);
        List<PlayerUnit> playerUnitList2 = new List<PlayerUnit>();
        foreach (object json5 in (List<object>) json[nameof (player_unit_reserves)])
          playerUnitList2.Add(json5 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json5));
        this.player_unit_reserves = playerUnitList2.ToArray();
        List<UnlockQuest> unlockQuestList = new List<UnlockQuest>();
        foreach (object json6 in (List<object>) json[nameof (unlock_quests)])
          unlockQuestList.Add(json6 == null ? (UnlockQuest) null : new UnlockQuest((Dictionary<string, object>) json6));
        this.unlock_quests = unlockQuestList.ToArray();
        List<TicketBanner> ticketBannerList = new List<TicketBanner>();
        foreach (object json7 in (List<object>) json[nameof (g004_banner_info)])
          ticketBannerList.Add(json7 == null ? (TicketBanner) null : new TicketBanner((Dictionary<string, object>) json7));
        this.g004_banner_info = ticketBannerList.ToArray();
        SMManager.UpdateList<TicketBanner>(this.g004_banner_info);
        List<GachaModule> gachaModuleList = new List<GachaModule>();
        foreach (object json8 in (List<object>) json[nameof (gacha_modules)])
          gachaModuleList.Add(json8 == null ? (GachaModule) null : new GachaModule((Dictionary<string, object>) json8));
        this.gacha_modules = gachaModuleList.ToArray();
        SMManager.UpdateList<GachaModule>(this.gacha_modules);
        this.player_unit_reserves_count = json[nameof (player_unit_reserves_count)] == null ? (PlayerUnitReservesCount) null : new PlayerUnitReservesCount((Dictionary<string, object>) json[nameof (player_unit_reserves_count)]);
        SMManager.Change<PlayerUnitReservesCount>(this.player_unit_reserves_count);
        List<PlayerMaterialUnit> playerMaterialUnitList = new List<PlayerMaterialUnit>();
        foreach (object json9 in (List<object>) json[nameof (player_material_units)])
          playerMaterialUnitList.Add(json9 == null ? (PlayerMaterialUnit) null : new PlayerMaterialUnit((Dictionary<string, object>) json9));
        this.player_material_units = playerMaterialUnitList.ToArray();
        SMManager.UpdateList<PlayerMaterialUnit>(this.player_material_units);
        List<PlayerPresent> playerPresentList = new List<PlayerPresent>();
        foreach (object json10 in (List<object>) json[nameof (player_presents)])
          playerPresentList.Add(json10 == null ? (PlayerPresent) null : new PlayerPresent((Dictionary<string, object>) json10));
        this.player_presents = playerPresentList.ToArray();
        SMManager.UpdateList<PlayerPresent>(this.player_presents);
        List<WebAPI.Response.GachaG005NewbiePayResult> g005NewbiePayResultList = new List<WebAPI.Response.GachaG005NewbiePayResult>();
        foreach (object json11 in (List<object>) json[nameof (result)])
          g005NewbiePayResultList.Add(json11 == null ? (WebAPI.Response.GachaG005NewbiePayResult) null : new WebAPI.Response.GachaG005NewbiePayResult((Dictionary<string, object>) json11));
        this.result = g005NewbiePayResultList.ToArray();
        if (!json.ContainsKey("player_presents:delete"))
          return;
        SMManager.DeleteList<PlayerPresent>(((IEnumerable<object>) json["player_presents:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class GachaG005NewbiePayResult : KeyCompare
    {
      public int reward_result_quantity;
      public int reward_result_id;
      public bool is_new;
      public int reward_type_id;
      public int direction_type_id;

      public GachaG005NewbiePayResult()
      {
      }

      public GachaG005NewbiePayResult(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_result_quantity = (int) (long) json[nameof (reward_result_quantity)];
        this.reward_result_id = (int) (long) json[nameof (reward_result_id)];
        this.is_new = (bool) json[nameof (is_new)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
        this.direction_type_id = (int) (long) json[nameof (direction_type_id)];
      }
    }

    [Serializable]
    public class GachaG005NewbiePayAdditional_items : KeyCompare
    {
      public int reward_quantity;
      public int reward_type_id;
      public int reward_id;

      public GachaG005NewbiePayAdditional_items()
      {
      }

      public GachaG005NewbiePayAdditional_items(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_quantity = (int) (long) json[nameof (reward_quantity)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
        this.reward_id = (int) (long) json[nameof (reward_id)];
      }
    }

    [Serializable]
    public class GachaG007PanelMultiPay : KeyCompare
    {
      public PlayerMaterialGear[] player_material_gears;
      public PlayerCommonTicket[] player_common_tickets;
      public WebAPI.Response.GachaG007PanelMultiPayAdditional_items[] additional_items;
      public Player player;
      public PlayerUnit[] player_unit_reserves;
      public GachaG007PlayerSheet[] player_sheets;
      public GachaG007OpenPanelResult open_panel_result;
      public PlayerItem[] player_items;
      public UnlockQuest[] unlock_quests;
      public TicketBanner[] g004_banner_info;
      public GachaModule[] gacha_modules;
      public PlayerUnitReservesCount player_unit_reserves_count;
      public PlayerUnit[] player_units;
      public PlayerMaterialUnit[] player_material_units;
      public PlayerPresent[] player_presents;
      public WebAPI.Response.GachaG007PanelMultiPayResult[] result;

      public GachaG007PanelMultiPay()
      {
      }

      public GachaG007PanelMultiPay(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerMaterialGear> playerMaterialGearList = new List<PlayerMaterialGear>();
        foreach (object json1 in (List<object>) json[nameof (player_material_gears)])
          playerMaterialGearList.Add(json1 == null ? (PlayerMaterialGear) null : new PlayerMaterialGear((Dictionary<string, object>) json1));
        this.player_material_gears = playerMaterialGearList.ToArray();
        SMManager.UpdateList<PlayerMaterialGear>(this.player_material_gears);
        List<PlayerCommonTicket> playerCommonTicketList = new List<PlayerCommonTicket>();
        foreach (object json2 in (List<object>) json[nameof (player_common_tickets)])
          playerCommonTicketList.Add(json2 == null ? (PlayerCommonTicket) null : new PlayerCommonTicket((Dictionary<string, object>) json2));
        this.player_common_tickets = playerCommonTicketList.ToArray();
        SMManager.UpdateList<PlayerCommonTicket>(this.player_common_tickets);
        List<WebAPI.Response.GachaG007PanelMultiPayAdditional_items> payAdditionalItemsList = new List<WebAPI.Response.GachaG007PanelMultiPayAdditional_items>();
        foreach (object json3 in (List<object>) json[nameof (additional_items)])
          payAdditionalItemsList.Add(json3 == null ? (WebAPI.Response.GachaG007PanelMultiPayAdditional_items) null : new WebAPI.Response.GachaG007PanelMultiPayAdditional_items((Dictionary<string, object>) json3));
        this.additional_items = payAdditionalItemsList.ToArray();
        SMManager.UpdateList<WebAPI.Response.GachaG007PanelMultiPayAdditional_items>(this.additional_items);
        this.player = json[nameof (player)] == null ? (Player) null : new Player((Dictionary<string, object>) json[nameof (player)]);
        SMManager.Change<Player>(this.player);
        List<PlayerUnit> playerUnitList1 = new List<PlayerUnit>();
        foreach (object json4 in (List<object>) json[nameof (player_unit_reserves)])
          playerUnitList1.Add(json4 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json4));
        this.player_unit_reserves = playerUnitList1.ToArray();
        List<GachaG007PlayerSheet> gachaG007PlayerSheetList = new List<GachaG007PlayerSheet>();
        foreach (object json5 in (List<object>) json[nameof (player_sheets)])
          gachaG007PlayerSheetList.Add(json5 == null ? (GachaG007PlayerSheet) null : new GachaG007PlayerSheet((Dictionary<string, object>) json5));
        this.player_sheets = gachaG007PlayerSheetList.ToArray();
        SMManager.UpdateList<GachaG007PlayerSheet>(this.player_sheets);
        this.open_panel_result = json[nameof (open_panel_result)] == null ? (GachaG007OpenPanelResult) null : new GachaG007OpenPanelResult((Dictionary<string, object>) json[nameof (open_panel_result)]);
        List<PlayerItem> playerItemList = new List<PlayerItem>();
        foreach (object json6 in (List<object>) json[nameof (player_items)])
          playerItemList.Add(json6 == null ? (PlayerItem) null : new PlayerItem((Dictionary<string, object>) json6));
        this.player_items = playerItemList.ToArray();
        SMManager.UpdateList<PlayerItem>(this.player_items);
        List<UnlockQuest> unlockQuestList = new List<UnlockQuest>();
        foreach (object json7 in (List<object>) json[nameof (unlock_quests)])
          unlockQuestList.Add(json7 == null ? (UnlockQuest) null : new UnlockQuest((Dictionary<string, object>) json7));
        this.unlock_quests = unlockQuestList.ToArray();
        List<TicketBanner> ticketBannerList = new List<TicketBanner>();
        foreach (object json8 in (List<object>) json[nameof (g004_banner_info)])
          ticketBannerList.Add(json8 == null ? (TicketBanner) null : new TicketBanner((Dictionary<string, object>) json8));
        this.g004_banner_info = ticketBannerList.ToArray();
        SMManager.UpdateList<TicketBanner>(this.g004_banner_info);
        List<GachaModule> gachaModuleList = new List<GachaModule>();
        foreach (object json9 in (List<object>) json[nameof (gacha_modules)])
          gachaModuleList.Add(json9 == null ? (GachaModule) null : new GachaModule((Dictionary<string, object>) json9));
        this.gacha_modules = gachaModuleList.ToArray();
        SMManager.UpdateList<GachaModule>(this.gacha_modules);
        this.player_unit_reserves_count = json[nameof (player_unit_reserves_count)] == null ? (PlayerUnitReservesCount) null : new PlayerUnitReservesCount((Dictionary<string, object>) json[nameof (player_unit_reserves_count)]);
        SMManager.Change<PlayerUnitReservesCount>(this.player_unit_reserves_count);
        List<PlayerUnit> playerUnitList2 = new List<PlayerUnit>();
        foreach (object json10 in (List<object>) json[nameof (player_units)])
          playerUnitList2.Add(json10 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json10));
        this.player_units = playerUnitList2.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_units);
        List<PlayerMaterialUnit> playerMaterialUnitList = new List<PlayerMaterialUnit>();
        foreach (object json11 in (List<object>) json[nameof (player_material_units)])
          playerMaterialUnitList.Add(json11 == null ? (PlayerMaterialUnit) null : new PlayerMaterialUnit((Dictionary<string, object>) json11));
        this.player_material_units = playerMaterialUnitList.ToArray();
        SMManager.UpdateList<PlayerMaterialUnit>(this.player_material_units);
        List<PlayerPresent> playerPresentList = new List<PlayerPresent>();
        foreach (object json12 in (List<object>) json[nameof (player_presents)])
          playerPresentList.Add(json12 == null ? (PlayerPresent) null : new PlayerPresent((Dictionary<string, object>) json12));
        this.player_presents = playerPresentList.ToArray();
        SMManager.UpdateList<PlayerPresent>(this.player_presents);
        List<WebAPI.Response.GachaG007PanelMultiPayResult> panelMultiPayResultList = new List<WebAPI.Response.GachaG007PanelMultiPayResult>();
        foreach (object json13 in (List<object>) json[nameof (result)])
          panelMultiPayResultList.Add(json13 == null ? (WebAPI.Response.GachaG007PanelMultiPayResult) null : new WebAPI.Response.GachaG007PanelMultiPayResult((Dictionary<string, object>) json13));
        this.result = panelMultiPayResultList.ToArray();
        if (!json.ContainsKey("player_presents:delete"))
          return;
        SMManager.DeleteList<PlayerPresent>(((IEnumerable<object>) json["player_presents:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class GachaG007PanelMultiPayResult : KeyCompare
    {
      public int reward_result_quantity;
      public int reward_result_id;
      public bool is_new;
      public int reward_type_id;
      public int direction_type_id;

      public GachaG007PanelMultiPayResult()
      {
      }

      public GachaG007PanelMultiPayResult(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_result_quantity = (int) (long) json[nameof (reward_result_quantity)];
        this.reward_result_id = (int) (long) json[nameof (reward_result_id)];
        this.is_new = (bool) json[nameof (is_new)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
        this.direction_type_id = (int) (long) json[nameof (direction_type_id)];
      }
    }

    [Serializable]
    public class GachaG007PanelMultiPayAdditional_items : KeyCompare
    {
      public int reward_quantity;
      public int reward_type_id;
      public int reward_id;

      public GachaG007PanelMultiPayAdditional_items()
      {
      }

      public GachaG007PanelMultiPayAdditional_items(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_quantity = (int) (long) json[nameof (reward_quantity)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
        this.reward_id = (int) (long) json[nameof (reward_id)];
      }
    }

    [Serializable]
    public class GachaG007PanelPanelInfo : KeyCompare
    {
      public GachaG007PlayerSheet[] player_sheets;

      public GachaG007PanelPanelInfo()
      {
      }

      public GachaG007PanelPanelInfo(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<GachaG007PlayerSheet> gachaG007PlayerSheetList = new List<GachaG007PlayerSheet>();
        foreach (object json1 in (List<object>) json[nameof (player_sheets)])
          gachaG007PlayerSheetList.Add(json1 == null ? (GachaG007PlayerSheet) null : new GachaG007PlayerSheet((Dictionary<string, object>) json1));
        this.player_sheets = gachaG007PlayerSheetList.ToArray();
        SMManager.UpdateList<GachaG007PlayerSheet>(this.player_sheets);
      }
    }

    [Serializable]
    public class GachaG007PanelPanelReset : KeyCompare
    {
      public GachaG007PlayerSheet[] player_sheets;

      public GachaG007PanelPanelReset()
      {
      }

      public GachaG007PanelPanelReset(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<GachaG007PlayerSheet> gachaG007PlayerSheetList = new List<GachaG007PlayerSheet>();
        foreach (object json1 in (List<object>) json[nameof (player_sheets)])
          gachaG007PlayerSheetList.Add(json1 == null ? (GachaG007PlayerSheet) null : new GachaG007PlayerSheet((Dictionary<string, object>) json1));
        this.player_sheets = gachaG007PlayerSheetList.ToArray();
        SMManager.UpdateList<GachaG007PlayerSheet>(this.player_sheets);
      }
    }

    [Serializable]
    public class GachaG007PanelPay : KeyCompare
    {
      public PlayerMaterialGear[] player_material_gears;
      public PlayerCommonTicket[] player_common_tickets;
      public WebAPI.Response.GachaG007PanelPayAdditional_items[] additional_items;
      public Player player;
      public PlayerUnit[] player_unit_reserves;
      public GachaG007PlayerSheet[] player_sheets;
      public GachaG007OpenPanelResult open_panel_result;
      public PlayerItem[] player_items;
      public UnlockQuest[] unlock_quests;
      public TicketBanner[] g004_banner_info;
      public GachaModule[] gacha_modules;
      public PlayerUnitReservesCount player_unit_reserves_count;
      public PlayerUnit[] player_units;
      public PlayerMaterialUnit[] player_material_units;
      public PlayerPresent[] player_presents;
      public WebAPI.Response.GachaG007PanelPayResult[] result;

      public GachaG007PanelPay()
      {
      }

      public GachaG007PanelPay(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerMaterialGear> playerMaterialGearList = new List<PlayerMaterialGear>();
        foreach (object json1 in (List<object>) json[nameof (player_material_gears)])
          playerMaterialGearList.Add(json1 == null ? (PlayerMaterialGear) null : new PlayerMaterialGear((Dictionary<string, object>) json1));
        this.player_material_gears = playerMaterialGearList.ToArray();
        SMManager.UpdateList<PlayerMaterialGear>(this.player_material_gears);
        List<PlayerCommonTicket> playerCommonTicketList = new List<PlayerCommonTicket>();
        foreach (object json2 in (List<object>) json[nameof (player_common_tickets)])
          playerCommonTicketList.Add(json2 == null ? (PlayerCommonTicket) null : new PlayerCommonTicket((Dictionary<string, object>) json2));
        this.player_common_tickets = playerCommonTicketList.ToArray();
        SMManager.UpdateList<PlayerCommonTicket>(this.player_common_tickets);
        List<WebAPI.Response.GachaG007PanelPayAdditional_items> payAdditionalItemsList = new List<WebAPI.Response.GachaG007PanelPayAdditional_items>();
        foreach (object json3 in (List<object>) json[nameof (additional_items)])
          payAdditionalItemsList.Add(json3 == null ? (WebAPI.Response.GachaG007PanelPayAdditional_items) null : new WebAPI.Response.GachaG007PanelPayAdditional_items((Dictionary<string, object>) json3));
        this.additional_items = payAdditionalItemsList.ToArray();
        SMManager.UpdateList<WebAPI.Response.GachaG007PanelPayAdditional_items>(this.additional_items);
        this.player = json[nameof (player)] == null ? (Player) null : new Player((Dictionary<string, object>) json[nameof (player)]);
        SMManager.Change<Player>(this.player);
        List<PlayerUnit> playerUnitList1 = new List<PlayerUnit>();
        foreach (object json4 in (List<object>) json[nameof (player_unit_reserves)])
          playerUnitList1.Add(json4 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json4));
        this.player_unit_reserves = playerUnitList1.ToArray();
        List<GachaG007PlayerSheet> gachaG007PlayerSheetList = new List<GachaG007PlayerSheet>();
        foreach (object json5 in (List<object>) json[nameof (player_sheets)])
          gachaG007PlayerSheetList.Add(json5 == null ? (GachaG007PlayerSheet) null : new GachaG007PlayerSheet((Dictionary<string, object>) json5));
        this.player_sheets = gachaG007PlayerSheetList.ToArray();
        SMManager.UpdateList<GachaG007PlayerSheet>(this.player_sheets);
        this.open_panel_result = json[nameof (open_panel_result)] == null ? (GachaG007OpenPanelResult) null : new GachaG007OpenPanelResult((Dictionary<string, object>) json[nameof (open_panel_result)]);
        List<PlayerItem> playerItemList = new List<PlayerItem>();
        foreach (object json6 in (List<object>) json[nameof (player_items)])
          playerItemList.Add(json6 == null ? (PlayerItem) null : new PlayerItem((Dictionary<string, object>) json6));
        this.player_items = playerItemList.ToArray();
        SMManager.UpdateList<PlayerItem>(this.player_items);
        List<UnlockQuest> unlockQuestList = new List<UnlockQuest>();
        foreach (object json7 in (List<object>) json[nameof (unlock_quests)])
          unlockQuestList.Add(json7 == null ? (UnlockQuest) null : new UnlockQuest((Dictionary<string, object>) json7));
        this.unlock_quests = unlockQuestList.ToArray();
        List<TicketBanner> ticketBannerList = new List<TicketBanner>();
        foreach (object json8 in (List<object>) json[nameof (g004_banner_info)])
          ticketBannerList.Add(json8 == null ? (TicketBanner) null : new TicketBanner((Dictionary<string, object>) json8));
        this.g004_banner_info = ticketBannerList.ToArray();
        SMManager.UpdateList<TicketBanner>(this.g004_banner_info);
        List<GachaModule> gachaModuleList = new List<GachaModule>();
        foreach (object json9 in (List<object>) json[nameof (gacha_modules)])
          gachaModuleList.Add(json9 == null ? (GachaModule) null : new GachaModule((Dictionary<string, object>) json9));
        this.gacha_modules = gachaModuleList.ToArray();
        SMManager.UpdateList<GachaModule>(this.gacha_modules);
        this.player_unit_reserves_count = json[nameof (player_unit_reserves_count)] == null ? (PlayerUnitReservesCount) null : new PlayerUnitReservesCount((Dictionary<string, object>) json[nameof (player_unit_reserves_count)]);
        SMManager.Change<PlayerUnitReservesCount>(this.player_unit_reserves_count);
        List<PlayerUnit> playerUnitList2 = new List<PlayerUnit>();
        foreach (object json10 in (List<object>) json[nameof (player_units)])
          playerUnitList2.Add(json10 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json10));
        this.player_units = playerUnitList2.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_units);
        List<PlayerMaterialUnit> playerMaterialUnitList = new List<PlayerMaterialUnit>();
        foreach (object json11 in (List<object>) json[nameof (player_material_units)])
          playerMaterialUnitList.Add(json11 == null ? (PlayerMaterialUnit) null : new PlayerMaterialUnit((Dictionary<string, object>) json11));
        this.player_material_units = playerMaterialUnitList.ToArray();
        SMManager.UpdateList<PlayerMaterialUnit>(this.player_material_units);
        List<PlayerPresent> playerPresentList = new List<PlayerPresent>();
        foreach (object json12 in (List<object>) json[nameof (player_presents)])
          playerPresentList.Add(json12 == null ? (PlayerPresent) null : new PlayerPresent((Dictionary<string, object>) json12));
        this.player_presents = playerPresentList.ToArray();
        SMManager.UpdateList<PlayerPresent>(this.player_presents);
        List<WebAPI.Response.GachaG007PanelPayResult> g007PanelPayResultList = new List<WebAPI.Response.GachaG007PanelPayResult>();
        foreach (object json13 in (List<object>) json[nameof (result)])
          g007PanelPayResultList.Add(json13 == null ? (WebAPI.Response.GachaG007PanelPayResult) null : new WebAPI.Response.GachaG007PanelPayResult((Dictionary<string, object>) json13));
        this.result = g007PanelPayResultList.ToArray();
        if (!json.ContainsKey("player_presents:delete"))
          return;
        SMManager.DeleteList<PlayerPresent>(((IEnumerable<object>) json["player_presents:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class GachaG007PanelPayResult : KeyCompare
    {
      public int reward_result_quantity;
      public int reward_result_id;
      public bool is_new;
      public int reward_type_id;
      public int direction_type_id;

      public GachaG007PanelPayResult()
      {
      }

      public GachaG007PanelPayResult(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_result_quantity = (int) (long) json[nameof (reward_result_quantity)];
        this.reward_result_id = (int) (long) json[nameof (reward_result_id)];
        this.is_new = (bool) json[nameof (is_new)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
        this.direction_type_id = (int) (long) json[nameof (direction_type_id)];
      }
    }

    [Serializable]
    public class GachaG007PanelPayAdditional_items : KeyCompare
    {
      public int reward_quantity;
      public int reward_type_id;
      public int reward_id;

      public GachaG007PanelPayAdditional_items()
      {
      }

      public GachaG007PanelPayAdditional_items(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_quantity = (int) (long) json[nameof (reward_quantity)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
        this.reward_id = (int) (long) json[nameof (reward_id)];
      }
    }

    [Serializable]
    public class GachaG008GiftMultiPay : KeyCompare
    {
      public PlayerMaterialGear[] player_material_gears;
      public PlayerItem[] player_items;
      public AnimationPatternMultiAfter[] animation_pattern_gems;
      public Player player;
      public PlayerUnit[] player_units;
      public PlayerUnit[] player_unit_reserves;
      public UnlockQuest[] unlock_quests;
      public TicketBanner[] g004_banner_info;
      public GachaModule[] gacha_modules;
      public PlayerUnitReservesCount player_unit_reserves_count;
      public string[] animation_pattern;
      public PlayerMaterialUnit[] player_material_units;
      public PlayerPresent[] player_presents;
      public WebAPI.Response.GachaG008GiftMultiPayResult[] result;

      public GachaG008GiftMultiPay()
      {
      }

      public GachaG008GiftMultiPay(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerMaterialGear> playerMaterialGearList = new List<PlayerMaterialGear>();
        foreach (object json1 in (List<object>) json[nameof (player_material_gears)])
          playerMaterialGearList.Add(json1 == null ? (PlayerMaterialGear) null : new PlayerMaterialGear((Dictionary<string, object>) json1));
        this.player_material_gears = playerMaterialGearList.ToArray();
        SMManager.UpdateList<PlayerMaterialGear>(this.player_material_gears);
        List<PlayerItem> playerItemList = new List<PlayerItem>();
        foreach (object json2 in (List<object>) json[nameof (player_items)])
          playerItemList.Add(json2 == null ? (PlayerItem) null : new PlayerItem((Dictionary<string, object>) json2));
        this.player_items = playerItemList.ToArray();
        SMManager.UpdateList<PlayerItem>(this.player_items);
        List<AnimationPatternMultiAfter> patternMultiAfterList = new List<AnimationPatternMultiAfter>();
        foreach (object json3 in (List<object>) json[nameof (animation_pattern_gems)])
          patternMultiAfterList.Add(json3 == null ? (AnimationPatternMultiAfter) null : new AnimationPatternMultiAfter((Dictionary<string, object>) json3));
        this.animation_pattern_gems = patternMultiAfterList.ToArray();
        this.player = json[nameof (player)] == null ? (Player) null : new Player((Dictionary<string, object>) json[nameof (player)]);
        SMManager.Change<Player>(this.player);
        List<PlayerUnit> playerUnitList1 = new List<PlayerUnit>();
        foreach (object json4 in (List<object>) json[nameof (player_units)])
          playerUnitList1.Add(json4 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json4));
        this.player_units = playerUnitList1.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_units);
        List<PlayerUnit> playerUnitList2 = new List<PlayerUnit>();
        foreach (object json5 in (List<object>) json[nameof (player_unit_reserves)])
          playerUnitList2.Add(json5 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json5));
        this.player_unit_reserves = playerUnitList2.ToArray();
        List<UnlockQuest> unlockQuestList = new List<UnlockQuest>();
        foreach (object json6 in (List<object>) json[nameof (unlock_quests)])
          unlockQuestList.Add(json6 == null ? (UnlockQuest) null : new UnlockQuest((Dictionary<string, object>) json6));
        this.unlock_quests = unlockQuestList.ToArray();
        List<TicketBanner> ticketBannerList = new List<TicketBanner>();
        foreach (object json7 in (List<object>) json[nameof (g004_banner_info)])
          ticketBannerList.Add(json7 == null ? (TicketBanner) null : new TicketBanner((Dictionary<string, object>) json7));
        this.g004_banner_info = ticketBannerList.ToArray();
        SMManager.UpdateList<TicketBanner>(this.g004_banner_info);
        List<GachaModule> gachaModuleList = new List<GachaModule>();
        foreach (object json8 in (List<object>) json[nameof (gacha_modules)])
          gachaModuleList.Add(json8 == null ? (GachaModule) null : new GachaModule((Dictionary<string, object>) json8));
        this.gacha_modules = gachaModuleList.ToArray();
        SMManager.UpdateList<GachaModule>(this.gacha_modules);
        this.player_unit_reserves_count = json[nameof (player_unit_reserves_count)] == null ? (PlayerUnitReservesCount) null : new PlayerUnitReservesCount((Dictionary<string, object>) json[nameof (player_unit_reserves_count)]);
        SMManager.Change<PlayerUnitReservesCount>(this.player_unit_reserves_count);
        this.animation_pattern = ((IEnumerable<object>) json[nameof (animation_pattern)]).Select<object, string>((Func<object, string>) (s => (string) s)).ToArray<string>();
        List<PlayerMaterialUnit> playerMaterialUnitList = new List<PlayerMaterialUnit>();
        foreach (object json9 in (List<object>) json[nameof (player_material_units)])
          playerMaterialUnitList.Add(json9 == null ? (PlayerMaterialUnit) null : new PlayerMaterialUnit((Dictionary<string, object>) json9));
        this.player_material_units = playerMaterialUnitList.ToArray();
        SMManager.UpdateList<PlayerMaterialUnit>(this.player_material_units);
        List<PlayerPresent> playerPresentList = new List<PlayerPresent>();
        foreach (object json10 in (List<object>) json[nameof (player_presents)])
          playerPresentList.Add(json10 == null ? (PlayerPresent) null : new PlayerPresent((Dictionary<string, object>) json10));
        this.player_presents = playerPresentList.ToArray();
        SMManager.UpdateList<PlayerPresent>(this.player_presents);
        List<WebAPI.Response.GachaG008GiftMultiPayResult> giftMultiPayResultList = new List<WebAPI.Response.GachaG008GiftMultiPayResult>();
        foreach (object json11 in (List<object>) json[nameof (result)])
          giftMultiPayResultList.Add(json11 == null ? (WebAPI.Response.GachaG008GiftMultiPayResult) null : new WebAPI.Response.GachaG008GiftMultiPayResult((Dictionary<string, object>) json11));
        this.result = giftMultiPayResultList.ToArray();
        if (!json.ContainsKey("player_presents:delete"))
          return;
        SMManager.DeleteList<PlayerPresent>(((IEnumerable<object>) json["player_presents:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class GachaG008GiftMultiPayResult : KeyCompare
    {
      public int reward_result_quantity;
      public bool is_new;
      public int reward_type_id;
      public int reward_result_id;

      public GachaG008GiftMultiPayResult()
      {
      }

      public GachaG008GiftMultiPayResult(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_result_quantity = (int) (long) json[nameof (reward_result_quantity)];
        this.is_new = (bool) json[nameof (is_new)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
        this.reward_result_id = (int) (long) json[nameof (reward_result_id)];
      }
    }

    [Serializable]
    public class GachaG008GiftPay : KeyCompare
    {
      public PlayerMaterialGear[] player_material_gears;
      public PlayerItem[] player_items;
      public Player player;
      public PlayerUnit[] player_units;
      public PlayerUnit[] player_unit_reserves;
      public UnlockQuest[] unlock_quests;
      public TicketBanner[] g004_banner_info;
      public GachaModule[] gacha_modules;
      public PlayerUnitReservesCount player_unit_reserves_count;
      public string[] animation_pattern;
      public PlayerMaterialUnit[] player_material_units;
      public PlayerPresent[] player_presents;
      public WebAPI.Response.GachaG008GiftPayResult[] result;

      public GachaG008GiftPay()
      {
      }

      public GachaG008GiftPay(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerMaterialGear> playerMaterialGearList = new List<PlayerMaterialGear>();
        foreach (object json1 in (List<object>) json[nameof (player_material_gears)])
          playerMaterialGearList.Add(json1 == null ? (PlayerMaterialGear) null : new PlayerMaterialGear((Dictionary<string, object>) json1));
        this.player_material_gears = playerMaterialGearList.ToArray();
        SMManager.UpdateList<PlayerMaterialGear>(this.player_material_gears);
        List<PlayerItem> playerItemList = new List<PlayerItem>();
        foreach (object json2 in (List<object>) json[nameof (player_items)])
          playerItemList.Add(json2 == null ? (PlayerItem) null : new PlayerItem((Dictionary<string, object>) json2));
        this.player_items = playerItemList.ToArray();
        SMManager.UpdateList<PlayerItem>(this.player_items);
        this.player = json[nameof (player)] == null ? (Player) null : new Player((Dictionary<string, object>) json[nameof (player)]);
        SMManager.Change<Player>(this.player);
        List<PlayerUnit> playerUnitList1 = new List<PlayerUnit>();
        foreach (object json3 in (List<object>) json[nameof (player_units)])
          playerUnitList1.Add(json3 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json3));
        this.player_units = playerUnitList1.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_units);
        List<PlayerUnit> playerUnitList2 = new List<PlayerUnit>();
        foreach (object json4 in (List<object>) json[nameof (player_unit_reserves)])
          playerUnitList2.Add(json4 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json4));
        this.player_unit_reserves = playerUnitList2.ToArray();
        List<UnlockQuest> unlockQuestList = new List<UnlockQuest>();
        foreach (object json5 in (List<object>) json[nameof (unlock_quests)])
          unlockQuestList.Add(json5 == null ? (UnlockQuest) null : new UnlockQuest((Dictionary<string, object>) json5));
        this.unlock_quests = unlockQuestList.ToArray();
        List<TicketBanner> ticketBannerList = new List<TicketBanner>();
        foreach (object json6 in (List<object>) json[nameof (g004_banner_info)])
          ticketBannerList.Add(json6 == null ? (TicketBanner) null : new TicketBanner((Dictionary<string, object>) json6));
        this.g004_banner_info = ticketBannerList.ToArray();
        SMManager.UpdateList<TicketBanner>(this.g004_banner_info);
        List<GachaModule> gachaModuleList = new List<GachaModule>();
        foreach (object json7 in (List<object>) json[nameof (gacha_modules)])
          gachaModuleList.Add(json7 == null ? (GachaModule) null : new GachaModule((Dictionary<string, object>) json7));
        this.gacha_modules = gachaModuleList.ToArray();
        SMManager.UpdateList<GachaModule>(this.gacha_modules);
        this.player_unit_reserves_count = json[nameof (player_unit_reserves_count)] == null ? (PlayerUnitReservesCount) null : new PlayerUnitReservesCount((Dictionary<string, object>) json[nameof (player_unit_reserves_count)]);
        SMManager.Change<PlayerUnitReservesCount>(this.player_unit_reserves_count);
        this.animation_pattern = ((IEnumerable<object>) json[nameof (animation_pattern)]).Select<object, string>((Func<object, string>) (s => (string) s)).ToArray<string>();
        List<PlayerMaterialUnit> playerMaterialUnitList = new List<PlayerMaterialUnit>();
        foreach (object json8 in (List<object>) json[nameof (player_material_units)])
          playerMaterialUnitList.Add(json8 == null ? (PlayerMaterialUnit) null : new PlayerMaterialUnit((Dictionary<string, object>) json8));
        this.player_material_units = playerMaterialUnitList.ToArray();
        SMManager.UpdateList<PlayerMaterialUnit>(this.player_material_units);
        List<PlayerPresent> playerPresentList = new List<PlayerPresent>();
        foreach (object json9 in (List<object>) json[nameof (player_presents)])
          playerPresentList.Add(json9 == null ? (PlayerPresent) null : new PlayerPresent((Dictionary<string, object>) json9));
        this.player_presents = playerPresentList.ToArray();
        SMManager.UpdateList<PlayerPresent>(this.player_presents);
        List<WebAPI.Response.GachaG008GiftPayResult> g008GiftPayResultList = new List<WebAPI.Response.GachaG008GiftPayResult>();
        foreach (object json10 in (List<object>) json[nameof (result)])
          g008GiftPayResultList.Add(json10 == null ? (WebAPI.Response.GachaG008GiftPayResult) null : new WebAPI.Response.GachaG008GiftPayResult((Dictionary<string, object>) json10));
        this.result = g008GiftPayResultList.ToArray();
        if (!json.ContainsKey("player_presents:delete"))
          return;
        SMManager.DeleteList<PlayerPresent>(((IEnumerable<object>) json["player_presents:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class GachaG008GiftPayResult : KeyCompare
    {
      public int reward_result_quantity;
      public bool is_new;
      public int reward_type_id;
      public int reward_result_id;

      public GachaG008GiftPayResult()
      {
      }

      public GachaG008GiftPayResult(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_result_quantity = (int) (long) json[nameof (reward_result_quantity)];
        this.is_new = (bool) json[nameof (is_new)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
        this.reward_result_id = (int) (long) json[nameof (reward_result_id)];
      }
    }

    [Serializable]
    public class GachaG009StatusupMultiPay : KeyCompare
    {
      public PlayerMaterialGear[] player_material_gears;
      public PlayerItem[] player_items;
      public AnimationPatternMultiAfter[] animation_pattern_gems;
      public Player player;
      public PlayerUnit[] player_units;
      public PlayerUnit[] player_unit_reserves;
      public UnlockQuest[] unlock_quests;
      public TicketBanner[] g004_banner_info;
      public GachaModule[] gacha_modules;
      public PlayerUnitReservesCount player_unit_reserves_count;
      public string[] animation_pattern;
      public PlayerMaterialUnit[] player_material_units;
      public PlayerPresent[] player_presents;
      public WebAPI.Response.GachaG009StatusupMultiPayResult[] result;

      public GachaG009StatusupMultiPay()
      {
      }

      public GachaG009StatusupMultiPay(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerMaterialGear> playerMaterialGearList = new List<PlayerMaterialGear>();
        foreach (object json1 in (List<object>) json[nameof (player_material_gears)])
          playerMaterialGearList.Add(json1 == null ? (PlayerMaterialGear) null : new PlayerMaterialGear((Dictionary<string, object>) json1));
        this.player_material_gears = playerMaterialGearList.ToArray();
        SMManager.UpdateList<PlayerMaterialGear>(this.player_material_gears);
        List<PlayerItem> playerItemList = new List<PlayerItem>();
        foreach (object json2 in (List<object>) json[nameof (player_items)])
          playerItemList.Add(json2 == null ? (PlayerItem) null : new PlayerItem((Dictionary<string, object>) json2));
        this.player_items = playerItemList.ToArray();
        SMManager.UpdateList<PlayerItem>(this.player_items);
        List<AnimationPatternMultiAfter> patternMultiAfterList = new List<AnimationPatternMultiAfter>();
        foreach (object json3 in (List<object>) json[nameof (animation_pattern_gems)])
          patternMultiAfterList.Add(json3 == null ? (AnimationPatternMultiAfter) null : new AnimationPatternMultiAfter((Dictionary<string, object>) json3));
        this.animation_pattern_gems = patternMultiAfterList.ToArray();
        this.player = json[nameof (player)] == null ? (Player) null : new Player((Dictionary<string, object>) json[nameof (player)]);
        SMManager.Change<Player>(this.player);
        List<PlayerUnit> playerUnitList1 = new List<PlayerUnit>();
        foreach (object json4 in (List<object>) json[nameof (player_units)])
          playerUnitList1.Add(json4 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json4));
        this.player_units = playerUnitList1.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_units);
        List<PlayerUnit> playerUnitList2 = new List<PlayerUnit>();
        foreach (object json5 in (List<object>) json[nameof (player_unit_reserves)])
          playerUnitList2.Add(json5 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json5));
        this.player_unit_reserves = playerUnitList2.ToArray();
        List<UnlockQuest> unlockQuestList = new List<UnlockQuest>();
        foreach (object json6 in (List<object>) json[nameof (unlock_quests)])
          unlockQuestList.Add(json6 == null ? (UnlockQuest) null : new UnlockQuest((Dictionary<string, object>) json6));
        this.unlock_quests = unlockQuestList.ToArray();
        List<TicketBanner> ticketBannerList = new List<TicketBanner>();
        foreach (object json7 in (List<object>) json[nameof (g004_banner_info)])
          ticketBannerList.Add(json7 == null ? (TicketBanner) null : new TicketBanner((Dictionary<string, object>) json7));
        this.g004_banner_info = ticketBannerList.ToArray();
        SMManager.UpdateList<TicketBanner>(this.g004_banner_info);
        List<GachaModule> gachaModuleList = new List<GachaModule>();
        foreach (object json8 in (List<object>) json[nameof (gacha_modules)])
          gachaModuleList.Add(json8 == null ? (GachaModule) null : new GachaModule((Dictionary<string, object>) json8));
        this.gacha_modules = gachaModuleList.ToArray();
        SMManager.UpdateList<GachaModule>(this.gacha_modules);
        this.player_unit_reserves_count = json[nameof (player_unit_reserves_count)] == null ? (PlayerUnitReservesCount) null : new PlayerUnitReservesCount((Dictionary<string, object>) json[nameof (player_unit_reserves_count)]);
        SMManager.Change<PlayerUnitReservesCount>(this.player_unit_reserves_count);
        this.animation_pattern = ((IEnumerable<object>) json[nameof (animation_pattern)]).Select<object, string>((Func<object, string>) (s => (string) s)).ToArray<string>();
        List<PlayerMaterialUnit> playerMaterialUnitList = new List<PlayerMaterialUnit>();
        foreach (object json9 in (List<object>) json[nameof (player_material_units)])
          playerMaterialUnitList.Add(json9 == null ? (PlayerMaterialUnit) null : new PlayerMaterialUnit((Dictionary<string, object>) json9));
        this.player_material_units = playerMaterialUnitList.ToArray();
        SMManager.UpdateList<PlayerMaterialUnit>(this.player_material_units);
        List<PlayerPresent> playerPresentList = new List<PlayerPresent>();
        foreach (object json10 in (List<object>) json[nameof (player_presents)])
          playerPresentList.Add(json10 == null ? (PlayerPresent) null : new PlayerPresent((Dictionary<string, object>) json10));
        this.player_presents = playerPresentList.ToArray();
        SMManager.UpdateList<PlayerPresent>(this.player_presents);
        List<WebAPI.Response.GachaG009StatusupMultiPayResult> statusupMultiPayResultList = new List<WebAPI.Response.GachaG009StatusupMultiPayResult>();
        foreach (object json11 in (List<object>) json[nameof (result)])
          statusupMultiPayResultList.Add(json11 == null ? (WebAPI.Response.GachaG009StatusupMultiPayResult) null : new WebAPI.Response.GachaG009StatusupMultiPayResult((Dictionary<string, object>) json11));
        this.result = statusupMultiPayResultList.ToArray();
        if (!json.ContainsKey("player_presents:delete"))
          return;
        SMManager.DeleteList<PlayerPresent>(((IEnumerable<object>) json["player_presents:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class GachaG009StatusupMultiPayResult : KeyCompare
    {
      public int reward_result_quantity;
      public bool is_new;
      public int reward_type_id;
      public int reward_result_id;

      public GachaG009StatusupMultiPayResult()
      {
      }

      public GachaG009StatusupMultiPayResult(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_result_quantity = (int) (long) json[nameof (reward_result_quantity)];
        this.is_new = (bool) json[nameof (is_new)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
        this.reward_result_id = (int) (long) json[nameof (reward_result_id)];
      }
    }

    [Serializable]
    public class GachaG009StatusupPay : KeyCompare
    {
      public PlayerMaterialGear[] player_material_gears;
      public PlayerItem[] player_items;
      public Player player;
      public PlayerUnit[] player_units;
      public PlayerUnit[] player_unit_reserves;
      public UnlockQuest[] unlock_quests;
      public TicketBanner[] g004_banner_info;
      public GachaModule[] gacha_modules;
      public PlayerUnitReservesCount player_unit_reserves_count;
      public string[] animation_pattern;
      public PlayerMaterialUnit[] player_material_units;
      public PlayerPresent[] player_presents;
      public WebAPI.Response.GachaG009StatusupPayResult[] result;

      public GachaG009StatusupPay()
      {
      }

      public GachaG009StatusupPay(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerMaterialGear> playerMaterialGearList = new List<PlayerMaterialGear>();
        foreach (object json1 in (List<object>) json[nameof (player_material_gears)])
          playerMaterialGearList.Add(json1 == null ? (PlayerMaterialGear) null : new PlayerMaterialGear((Dictionary<string, object>) json1));
        this.player_material_gears = playerMaterialGearList.ToArray();
        SMManager.UpdateList<PlayerMaterialGear>(this.player_material_gears);
        List<PlayerItem> playerItemList = new List<PlayerItem>();
        foreach (object json2 in (List<object>) json[nameof (player_items)])
          playerItemList.Add(json2 == null ? (PlayerItem) null : new PlayerItem((Dictionary<string, object>) json2));
        this.player_items = playerItemList.ToArray();
        SMManager.UpdateList<PlayerItem>(this.player_items);
        this.player = json[nameof (player)] == null ? (Player) null : new Player((Dictionary<string, object>) json[nameof (player)]);
        SMManager.Change<Player>(this.player);
        List<PlayerUnit> playerUnitList1 = new List<PlayerUnit>();
        foreach (object json3 in (List<object>) json[nameof (player_units)])
          playerUnitList1.Add(json3 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json3));
        this.player_units = playerUnitList1.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_units);
        List<PlayerUnit> playerUnitList2 = new List<PlayerUnit>();
        foreach (object json4 in (List<object>) json[nameof (player_unit_reserves)])
          playerUnitList2.Add(json4 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json4));
        this.player_unit_reserves = playerUnitList2.ToArray();
        List<UnlockQuest> unlockQuestList = new List<UnlockQuest>();
        foreach (object json5 in (List<object>) json[nameof (unlock_quests)])
          unlockQuestList.Add(json5 == null ? (UnlockQuest) null : new UnlockQuest((Dictionary<string, object>) json5));
        this.unlock_quests = unlockQuestList.ToArray();
        List<TicketBanner> ticketBannerList = new List<TicketBanner>();
        foreach (object json6 in (List<object>) json[nameof (g004_banner_info)])
          ticketBannerList.Add(json6 == null ? (TicketBanner) null : new TicketBanner((Dictionary<string, object>) json6));
        this.g004_banner_info = ticketBannerList.ToArray();
        SMManager.UpdateList<TicketBanner>(this.g004_banner_info);
        List<GachaModule> gachaModuleList = new List<GachaModule>();
        foreach (object json7 in (List<object>) json[nameof (gacha_modules)])
          gachaModuleList.Add(json7 == null ? (GachaModule) null : new GachaModule((Dictionary<string, object>) json7));
        this.gacha_modules = gachaModuleList.ToArray();
        SMManager.UpdateList<GachaModule>(this.gacha_modules);
        this.player_unit_reserves_count = json[nameof (player_unit_reserves_count)] == null ? (PlayerUnitReservesCount) null : new PlayerUnitReservesCount((Dictionary<string, object>) json[nameof (player_unit_reserves_count)]);
        SMManager.Change<PlayerUnitReservesCount>(this.player_unit_reserves_count);
        this.animation_pattern = ((IEnumerable<object>) json[nameof (animation_pattern)]).Select<object, string>((Func<object, string>) (s => (string) s)).ToArray<string>();
        List<PlayerMaterialUnit> playerMaterialUnitList = new List<PlayerMaterialUnit>();
        foreach (object json8 in (List<object>) json[nameof (player_material_units)])
          playerMaterialUnitList.Add(json8 == null ? (PlayerMaterialUnit) null : new PlayerMaterialUnit((Dictionary<string, object>) json8));
        this.player_material_units = playerMaterialUnitList.ToArray();
        SMManager.UpdateList<PlayerMaterialUnit>(this.player_material_units);
        List<PlayerPresent> playerPresentList = new List<PlayerPresent>();
        foreach (object json9 in (List<object>) json[nameof (player_presents)])
          playerPresentList.Add(json9 == null ? (PlayerPresent) null : new PlayerPresent((Dictionary<string, object>) json9));
        this.player_presents = playerPresentList.ToArray();
        SMManager.UpdateList<PlayerPresent>(this.player_presents);
        List<WebAPI.Response.GachaG009StatusupPayResult> statusupPayResultList = new List<WebAPI.Response.GachaG009StatusupPayResult>();
        foreach (object json10 in (List<object>) json[nameof (result)])
          statusupPayResultList.Add(json10 == null ? (WebAPI.Response.GachaG009StatusupPayResult) null : new WebAPI.Response.GachaG009StatusupPayResult((Dictionary<string, object>) json10));
        this.result = statusupPayResultList.ToArray();
        if (!json.ContainsKey("player_presents:delete"))
          return;
        SMManager.DeleteList<PlayerPresent>(((IEnumerable<object>) json["player_presents:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class GachaG009StatusupPayResult : KeyCompare
    {
      public int reward_result_quantity;
      public bool is_new;
      public int reward_type_id;
      public int reward_result_id;

      public GachaG009StatusupPayResult()
      {
      }

      public GachaG009StatusupPayResult(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_result_quantity = (int) (long) json[nameof (reward_result_quantity)];
        this.is_new = (bool) json[nameof (is_new)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
        this.reward_result_id = (int) (long) json[nameof (reward_result_id)];
      }
    }

    [Serializable]
    public class GachaG010ChargeMultiPay : KeyCompare
    {
      public PlayerMaterialGear[] player_material_gears;
      public PlayerItem[] player_items;
      public AnimationPatternMultiAfter[] animation_pattern_gems;
      public Player player;
      public PlayerUnit[] player_units;
      public PlayerUnit[] player_unit_reserves;
      public UnlockQuest[] unlock_quests;
      public TicketBanner[] g004_banner_info;
      public GachaModule[] gacha_modules;
      public PlayerUnitReservesCount player_unit_reserves_count;
      public string[] animation_pattern;
      public PlayerMaterialUnit[] player_material_units;
      public PlayerPresent[] player_presents;
      public WebAPI.Response.GachaG010ChargeMultiPayResult[] result;

      public GachaG010ChargeMultiPay()
      {
      }

      public GachaG010ChargeMultiPay(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerMaterialGear> playerMaterialGearList = new List<PlayerMaterialGear>();
        foreach (object json1 in (List<object>) json[nameof (player_material_gears)])
          playerMaterialGearList.Add(json1 == null ? (PlayerMaterialGear) null : new PlayerMaterialGear((Dictionary<string, object>) json1));
        this.player_material_gears = playerMaterialGearList.ToArray();
        SMManager.UpdateList<PlayerMaterialGear>(this.player_material_gears);
        List<PlayerItem> playerItemList = new List<PlayerItem>();
        foreach (object json2 in (List<object>) json[nameof (player_items)])
          playerItemList.Add(json2 == null ? (PlayerItem) null : new PlayerItem((Dictionary<string, object>) json2));
        this.player_items = playerItemList.ToArray();
        SMManager.UpdateList<PlayerItem>(this.player_items);
        List<AnimationPatternMultiAfter> patternMultiAfterList = new List<AnimationPatternMultiAfter>();
        foreach (object json3 in (List<object>) json[nameof (animation_pattern_gems)])
          patternMultiAfterList.Add(json3 == null ? (AnimationPatternMultiAfter) null : new AnimationPatternMultiAfter((Dictionary<string, object>) json3));
        this.animation_pattern_gems = patternMultiAfterList.ToArray();
        this.player = json[nameof (player)] == null ? (Player) null : new Player((Dictionary<string, object>) json[nameof (player)]);
        SMManager.Change<Player>(this.player);
        List<PlayerUnit> playerUnitList1 = new List<PlayerUnit>();
        foreach (object json4 in (List<object>) json[nameof (player_units)])
          playerUnitList1.Add(json4 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json4));
        this.player_units = playerUnitList1.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_units);
        List<PlayerUnit> playerUnitList2 = new List<PlayerUnit>();
        foreach (object json5 in (List<object>) json[nameof (player_unit_reserves)])
          playerUnitList2.Add(json5 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json5));
        this.player_unit_reserves = playerUnitList2.ToArray();
        List<UnlockQuest> unlockQuestList = new List<UnlockQuest>();
        foreach (object json6 in (List<object>) json[nameof (unlock_quests)])
          unlockQuestList.Add(json6 == null ? (UnlockQuest) null : new UnlockQuest((Dictionary<string, object>) json6));
        this.unlock_quests = unlockQuestList.ToArray();
        List<TicketBanner> ticketBannerList = new List<TicketBanner>();
        foreach (object json7 in (List<object>) json[nameof (g004_banner_info)])
          ticketBannerList.Add(json7 == null ? (TicketBanner) null : new TicketBanner((Dictionary<string, object>) json7));
        this.g004_banner_info = ticketBannerList.ToArray();
        SMManager.UpdateList<TicketBanner>(this.g004_banner_info);
        List<GachaModule> gachaModuleList = new List<GachaModule>();
        foreach (object json8 in (List<object>) json[nameof (gacha_modules)])
          gachaModuleList.Add(json8 == null ? (GachaModule) null : new GachaModule((Dictionary<string, object>) json8));
        this.gacha_modules = gachaModuleList.ToArray();
        SMManager.UpdateList<GachaModule>(this.gacha_modules);
        this.player_unit_reserves_count = json[nameof (player_unit_reserves_count)] == null ? (PlayerUnitReservesCount) null : new PlayerUnitReservesCount((Dictionary<string, object>) json[nameof (player_unit_reserves_count)]);
        SMManager.Change<PlayerUnitReservesCount>(this.player_unit_reserves_count);
        this.animation_pattern = ((IEnumerable<object>) json[nameof (animation_pattern)]).Select<object, string>((Func<object, string>) (s => (string) s)).ToArray<string>();
        List<PlayerMaterialUnit> playerMaterialUnitList = new List<PlayerMaterialUnit>();
        foreach (object json9 in (List<object>) json[nameof (player_material_units)])
          playerMaterialUnitList.Add(json9 == null ? (PlayerMaterialUnit) null : new PlayerMaterialUnit((Dictionary<string, object>) json9));
        this.player_material_units = playerMaterialUnitList.ToArray();
        SMManager.UpdateList<PlayerMaterialUnit>(this.player_material_units);
        List<PlayerPresent> playerPresentList = new List<PlayerPresent>();
        foreach (object json10 in (List<object>) json[nameof (player_presents)])
          playerPresentList.Add(json10 == null ? (PlayerPresent) null : new PlayerPresent((Dictionary<string, object>) json10));
        this.player_presents = playerPresentList.ToArray();
        SMManager.UpdateList<PlayerPresent>(this.player_presents);
        List<WebAPI.Response.GachaG010ChargeMultiPayResult> chargeMultiPayResultList = new List<WebAPI.Response.GachaG010ChargeMultiPayResult>();
        foreach (object json11 in (List<object>) json[nameof (result)])
          chargeMultiPayResultList.Add(json11 == null ? (WebAPI.Response.GachaG010ChargeMultiPayResult) null : new WebAPI.Response.GachaG010ChargeMultiPayResult((Dictionary<string, object>) json11));
        this.result = chargeMultiPayResultList.ToArray();
        if (!json.ContainsKey("player_presents:delete"))
          return;
        SMManager.DeleteList<PlayerPresent>(((IEnumerable<object>) json["player_presents:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class GachaG010ChargeMultiPayResult : KeyCompare
    {
      public int reward_result_quantity;
      public bool is_new;
      public int reward_type_id;
      public int reward_result_id;

      public GachaG010ChargeMultiPayResult()
      {
      }

      public GachaG010ChargeMultiPayResult(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_result_quantity = (int) (long) json[nameof (reward_result_quantity)];
        this.is_new = (bool) json[nameof (is_new)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
        this.reward_result_id = (int) (long) json[nameof (reward_result_id)];
      }
    }

    [Serializable]
    public class GachaG010ChargePay : KeyCompare
    {
      public PlayerMaterialGear[] player_material_gears;
      public PlayerItem[] player_items;
      public Player player;
      public PlayerUnit[] player_units;
      public PlayerUnit[] player_unit_reserves;
      public UnlockQuest[] unlock_quests;
      public TicketBanner[] g004_banner_info;
      public GachaModule[] gacha_modules;
      public PlayerUnitReservesCount player_unit_reserves_count;
      public string[] animation_pattern;
      public PlayerMaterialUnit[] player_material_units;
      public PlayerPresent[] player_presents;
      public WebAPI.Response.GachaG010ChargePayResult[] result;

      public GachaG010ChargePay()
      {
      }

      public GachaG010ChargePay(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerMaterialGear> playerMaterialGearList = new List<PlayerMaterialGear>();
        foreach (object json1 in (List<object>) json[nameof (player_material_gears)])
          playerMaterialGearList.Add(json1 == null ? (PlayerMaterialGear) null : new PlayerMaterialGear((Dictionary<string, object>) json1));
        this.player_material_gears = playerMaterialGearList.ToArray();
        SMManager.UpdateList<PlayerMaterialGear>(this.player_material_gears);
        List<PlayerItem> playerItemList = new List<PlayerItem>();
        foreach (object json2 in (List<object>) json[nameof (player_items)])
          playerItemList.Add(json2 == null ? (PlayerItem) null : new PlayerItem((Dictionary<string, object>) json2));
        this.player_items = playerItemList.ToArray();
        SMManager.UpdateList<PlayerItem>(this.player_items);
        this.player = json[nameof (player)] == null ? (Player) null : new Player((Dictionary<string, object>) json[nameof (player)]);
        SMManager.Change<Player>(this.player);
        List<PlayerUnit> playerUnitList1 = new List<PlayerUnit>();
        foreach (object json3 in (List<object>) json[nameof (player_units)])
          playerUnitList1.Add(json3 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json3));
        this.player_units = playerUnitList1.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_units);
        List<PlayerUnit> playerUnitList2 = new List<PlayerUnit>();
        foreach (object json4 in (List<object>) json[nameof (player_unit_reserves)])
          playerUnitList2.Add(json4 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json4));
        this.player_unit_reserves = playerUnitList2.ToArray();
        List<UnlockQuest> unlockQuestList = new List<UnlockQuest>();
        foreach (object json5 in (List<object>) json[nameof (unlock_quests)])
          unlockQuestList.Add(json5 == null ? (UnlockQuest) null : new UnlockQuest((Dictionary<string, object>) json5));
        this.unlock_quests = unlockQuestList.ToArray();
        List<TicketBanner> ticketBannerList = new List<TicketBanner>();
        foreach (object json6 in (List<object>) json[nameof (g004_banner_info)])
          ticketBannerList.Add(json6 == null ? (TicketBanner) null : new TicketBanner((Dictionary<string, object>) json6));
        this.g004_banner_info = ticketBannerList.ToArray();
        SMManager.UpdateList<TicketBanner>(this.g004_banner_info);
        List<GachaModule> gachaModuleList = new List<GachaModule>();
        foreach (object json7 in (List<object>) json[nameof (gacha_modules)])
          gachaModuleList.Add(json7 == null ? (GachaModule) null : new GachaModule((Dictionary<string, object>) json7));
        this.gacha_modules = gachaModuleList.ToArray();
        SMManager.UpdateList<GachaModule>(this.gacha_modules);
        this.player_unit_reserves_count = json[nameof (player_unit_reserves_count)] == null ? (PlayerUnitReservesCount) null : new PlayerUnitReservesCount((Dictionary<string, object>) json[nameof (player_unit_reserves_count)]);
        SMManager.Change<PlayerUnitReservesCount>(this.player_unit_reserves_count);
        this.animation_pattern = ((IEnumerable<object>) json[nameof (animation_pattern)]).Select<object, string>((Func<object, string>) (s => (string) s)).ToArray<string>();
        List<PlayerMaterialUnit> playerMaterialUnitList = new List<PlayerMaterialUnit>();
        foreach (object json8 in (List<object>) json[nameof (player_material_units)])
          playerMaterialUnitList.Add(json8 == null ? (PlayerMaterialUnit) null : new PlayerMaterialUnit((Dictionary<string, object>) json8));
        this.player_material_units = playerMaterialUnitList.ToArray();
        SMManager.UpdateList<PlayerMaterialUnit>(this.player_material_units);
        List<PlayerPresent> playerPresentList = new List<PlayerPresent>();
        foreach (object json9 in (List<object>) json[nameof (player_presents)])
          playerPresentList.Add(json9 == null ? (PlayerPresent) null : new PlayerPresent((Dictionary<string, object>) json9));
        this.player_presents = playerPresentList.ToArray();
        SMManager.UpdateList<PlayerPresent>(this.player_presents);
        List<WebAPI.Response.GachaG010ChargePayResult> g010ChargePayResultList = new List<WebAPI.Response.GachaG010ChargePayResult>();
        foreach (object json10 in (List<object>) json[nameof (result)])
          g010ChargePayResultList.Add(json10 == null ? (WebAPI.Response.GachaG010ChargePayResult) null : new WebAPI.Response.GachaG010ChargePayResult((Dictionary<string, object>) json10));
        this.result = g010ChargePayResultList.ToArray();
        if (!json.ContainsKey("player_presents:delete"))
          return;
        SMManager.DeleteList<PlayerPresent>(((IEnumerable<object>) json["player_presents:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class GachaG010ChargePayResult : KeyCompare
    {
      public int reward_result_quantity;
      public bool is_new;
      public int reward_type_id;
      public int reward_result_id;

      public GachaG010ChargePayResult()
      {
      }

      public GachaG010ChargePayResult(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_result_quantity = (int) (long) json[nameof (reward_result_quantity)];
        this.is_new = (bool) json[nameof (is_new)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
        this.reward_result_id = (int) (long) json[nameof (reward_result_id)];
      }
    }

    [Serializable]
    public class GachaG011GiftMultiPay : KeyCompare
    {
      public PlayerMaterialGear[] player_material_gears;
      public PlayerItem[] player_items;
      public AnimationPatternMultiAfter[] animation_pattern_gems;
      public Player player;
      public PlayerUnit[] player_units;
      public PlayerUnit[] player_unit_reserves;
      public UnlockQuest[] unlock_quests;
      public TicketBanner[] g004_banner_info;
      public GachaModule[] gacha_modules;
      public PlayerUnitReservesCount player_unit_reserves_count;
      public string[] animation_pattern;
      public PlayerMaterialUnit[] player_material_units;
      public PlayerPresent[] player_presents;
      public WebAPI.Response.GachaG011GiftMultiPayResult[] result;

      public GachaG011GiftMultiPay()
      {
      }

      public GachaG011GiftMultiPay(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerMaterialGear> playerMaterialGearList = new List<PlayerMaterialGear>();
        foreach (object json1 in (List<object>) json[nameof (player_material_gears)])
          playerMaterialGearList.Add(json1 == null ? (PlayerMaterialGear) null : new PlayerMaterialGear((Dictionary<string, object>) json1));
        this.player_material_gears = playerMaterialGearList.ToArray();
        SMManager.UpdateList<PlayerMaterialGear>(this.player_material_gears);
        List<PlayerItem> playerItemList = new List<PlayerItem>();
        foreach (object json2 in (List<object>) json[nameof (player_items)])
          playerItemList.Add(json2 == null ? (PlayerItem) null : new PlayerItem((Dictionary<string, object>) json2));
        this.player_items = playerItemList.ToArray();
        SMManager.UpdateList<PlayerItem>(this.player_items);
        List<AnimationPatternMultiAfter> patternMultiAfterList = new List<AnimationPatternMultiAfter>();
        foreach (object json3 in (List<object>) json[nameof (animation_pattern_gems)])
          patternMultiAfterList.Add(json3 == null ? (AnimationPatternMultiAfter) null : new AnimationPatternMultiAfter((Dictionary<string, object>) json3));
        this.animation_pattern_gems = patternMultiAfterList.ToArray();
        this.player = json[nameof (player)] == null ? (Player) null : new Player((Dictionary<string, object>) json[nameof (player)]);
        SMManager.Change<Player>(this.player);
        List<PlayerUnit> playerUnitList1 = new List<PlayerUnit>();
        foreach (object json4 in (List<object>) json[nameof (player_units)])
          playerUnitList1.Add(json4 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json4));
        this.player_units = playerUnitList1.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_units);
        List<PlayerUnit> playerUnitList2 = new List<PlayerUnit>();
        foreach (object json5 in (List<object>) json[nameof (player_unit_reserves)])
          playerUnitList2.Add(json5 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json5));
        this.player_unit_reserves = playerUnitList2.ToArray();
        List<UnlockQuest> unlockQuestList = new List<UnlockQuest>();
        foreach (object json6 in (List<object>) json[nameof (unlock_quests)])
          unlockQuestList.Add(json6 == null ? (UnlockQuest) null : new UnlockQuest((Dictionary<string, object>) json6));
        this.unlock_quests = unlockQuestList.ToArray();
        List<TicketBanner> ticketBannerList = new List<TicketBanner>();
        foreach (object json7 in (List<object>) json[nameof (g004_banner_info)])
          ticketBannerList.Add(json7 == null ? (TicketBanner) null : new TicketBanner((Dictionary<string, object>) json7));
        this.g004_banner_info = ticketBannerList.ToArray();
        SMManager.UpdateList<TicketBanner>(this.g004_banner_info);
        List<GachaModule> gachaModuleList = new List<GachaModule>();
        foreach (object json8 in (List<object>) json[nameof (gacha_modules)])
          gachaModuleList.Add(json8 == null ? (GachaModule) null : new GachaModule((Dictionary<string, object>) json8));
        this.gacha_modules = gachaModuleList.ToArray();
        SMManager.UpdateList<GachaModule>(this.gacha_modules);
        this.player_unit_reserves_count = json[nameof (player_unit_reserves_count)] == null ? (PlayerUnitReservesCount) null : new PlayerUnitReservesCount((Dictionary<string, object>) json[nameof (player_unit_reserves_count)]);
        SMManager.Change<PlayerUnitReservesCount>(this.player_unit_reserves_count);
        this.animation_pattern = ((IEnumerable<object>) json[nameof (animation_pattern)]).Select<object, string>((Func<object, string>) (s => (string) s)).ToArray<string>();
        List<PlayerMaterialUnit> playerMaterialUnitList = new List<PlayerMaterialUnit>();
        foreach (object json9 in (List<object>) json[nameof (player_material_units)])
          playerMaterialUnitList.Add(json9 == null ? (PlayerMaterialUnit) null : new PlayerMaterialUnit((Dictionary<string, object>) json9));
        this.player_material_units = playerMaterialUnitList.ToArray();
        SMManager.UpdateList<PlayerMaterialUnit>(this.player_material_units);
        List<PlayerPresent> playerPresentList = new List<PlayerPresent>();
        foreach (object json10 in (List<object>) json[nameof (player_presents)])
          playerPresentList.Add(json10 == null ? (PlayerPresent) null : new PlayerPresent((Dictionary<string, object>) json10));
        this.player_presents = playerPresentList.ToArray();
        SMManager.UpdateList<PlayerPresent>(this.player_presents);
        List<WebAPI.Response.GachaG011GiftMultiPayResult> giftMultiPayResultList = new List<WebAPI.Response.GachaG011GiftMultiPayResult>();
        foreach (object json11 in (List<object>) json[nameof (result)])
          giftMultiPayResultList.Add(json11 == null ? (WebAPI.Response.GachaG011GiftMultiPayResult) null : new WebAPI.Response.GachaG011GiftMultiPayResult((Dictionary<string, object>) json11));
        this.result = giftMultiPayResultList.ToArray();
        if (!json.ContainsKey("player_presents:delete"))
          return;
        SMManager.DeleteList<PlayerPresent>(((IEnumerable<object>) json["player_presents:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class GachaG011GiftMultiPayResult : KeyCompare
    {
      public int reward_result_quantity;
      public bool is_new;
      public int reward_type_id;
      public int reward_result_id;

      public GachaG011GiftMultiPayResult()
      {
      }

      public GachaG011GiftMultiPayResult(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_result_quantity = (int) (long) json[nameof (reward_result_quantity)];
        this.is_new = (bool) json[nameof (is_new)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
        this.reward_result_id = (int) (long) json[nameof (reward_result_id)];
      }
    }

    [Serializable]
    public class GachaG011GiftPay : KeyCompare
    {
      public PlayerMaterialGear[] player_material_gears;
      public PlayerItem[] player_items;
      public Player player;
      public PlayerUnit[] player_units;
      public PlayerUnit[] player_unit_reserves;
      public UnlockQuest[] unlock_quests;
      public TicketBanner[] g004_banner_info;
      public GachaModule[] gacha_modules;
      public PlayerUnitReservesCount player_unit_reserves_count;
      public string[] animation_pattern;
      public PlayerMaterialUnit[] player_material_units;
      public PlayerPresent[] player_presents;
      public WebAPI.Response.GachaG011GiftPayResult[] result;

      public GachaG011GiftPay()
      {
      }

      public GachaG011GiftPay(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerMaterialGear> playerMaterialGearList = new List<PlayerMaterialGear>();
        foreach (object json1 in (List<object>) json[nameof (player_material_gears)])
          playerMaterialGearList.Add(json1 == null ? (PlayerMaterialGear) null : new PlayerMaterialGear((Dictionary<string, object>) json1));
        this.player_material_gears = playerMaterialGearList.ToArray();
        SMManager.UpdateList<PlayerMaterialGear>(this.player_material_gears);
        List<PlayerItem> playerItemList = new List<PlayerItem>();
        foreach (object json2 in (List<object>) json[nameof (player_items)])
          playerItemList.Add(json2 == null ? (PlayerItem) null : new PlayerItem((Dictionary<string, object>) json2));
        this.player_items = playerItemList.ToArray();
        SMManager.UpdateList<PlayerItem>(this.player_items);
        this.player = json[nameof (player)] == null ? (Player) null : new Player((Dictionary<string, object>) json[nameof (player)]);
        SMManager.Change<Player>(this.player);
        List<PlayerUnit> playerUnitList1 = new List<PlayerUnit>();
        foreach (object json3 in (List<object>) json[nameof (player_units)])
          playerUnitList1.Add(json3 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json3));
        this.player_units = playerUnitList1.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_units);
        List<PlayerUnit> playerUnitList2 = new List<PlayerUnit>();
        foreach (object json4 in (List<object>) json[nameof (player_unit_reserves)])
          playerUnitList2.Add(json4 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json4));
        this.player_unit_reserves = playerUnitList2.ToArray();
        List<UnlockQuest> unlockQuestList = new List<UnlockQuest>();
        foreach (object json5 in (List<object>) json[nameof (unlock_quests)])
          unlockQuestList.Add(json5 == null ? (UnlockQuest) null : new UnlockQuest((Dictionary<string, object>) json5));
        this.unlock_quests = unlockQuestList.ToArray();
        List<TicketBanner> ticketBannerList = new List<TicketBanner>();
        foreach (object json6 in (List<object>) json[nameof (g004_banner_info)])
          ticketBannerList.Add(json6 == null ? (TicketBanner) null : new TicketBanner((Dictionary<string, object>) json6));
        this.g004_banner_info = ticketBannerList.ToArray();
        SMManager.UpdateList<TicketBanner>(this.g004_banner_info);
        List<GachaModule> gachaModuleList = new List<GachaModule>();
        foreach (object json7 in (List<object>) json[nameof (gacha_modules)])
          gachaModuleList.Add(json7 == null ? (GachaModule) null : new GachaModule((Dictionary<string, object>) json7));
        this.gacha_modules = gachaModuleList.ToArray();
        SMManager.UpdateList<GachaModule>(this.gacha_modules);
        this.player_unit_reserves_count = json[nameof (player_unit_reserves_count)] == null ? (PlayerUnitReservesCount) null : new PlayerUnitReservesCount((Dictionary<string, object>) json[nameof (player_unit_reserves_count)]);
        SMManager.Change<PlayerUnitReservesCount>(this.player_unit_reserves_count);
        this.animation_pattern = ((IEnumerable<object>) json[nameof (animation_pattern)]).Select<object, string>((Func<object, string>) (s => (string) s)).ToArray<string>();
        List<PlayerMaterialUnit> playerMaterialUnitList = new List<PlayerMaterialUnit>();
        foreach (object json8 in (List<object>) json[nameof (player_material_units)])
          playerMaterialUnitList.Add(json8 == null ? (PlayerMaterialUnit) null : new PlayerMaterialUnit((Dictionary<string, object>) json8));
        this.player_material_units = playerMaterialUnitList.ToArray();
        SMManager.UpdateList<PlayerMaterialUnit>(this.player_material_units);
        List<PlayerPresent> playerPresentList = new List<PlayerPresent>();
        foreach (object json9 in (List<object>) json[nameof (player_presents)])
          playerPresentList.Add(json9 == null ? (PlayerPresent) null : new PlayerPresent((Dictionary<string, object>) json9));
        this.player_presents = playerPresentList.ToArray();
        SMManager.UpdateList<PlayerPresent>(this.player_presents);
        List<WebAPI.Response.GachaG011GiftPayResult> g011GiftPayResultList = new List<WebAPI.Response.GachaG011GiftPayResult>();
        foreach (object json10 in (List<object>) json[nameof (result)])
          g011GiftPayResultList.Add(json10 == null ? (WebAPI.Response.GachaG011GiftPayResult) null : new WebAPI.Response.GachaG011GiftPayResult((Dictionary<string, object>) json10));
        this.result = g011GiftPayResultList.ToArray();
        if (!json.ContainsKey("player_presents:delete"))
          return;
        SMManager.DeleteList<PlayerPresent>(((IEnumerable<object>) json["player_presents:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class GachaG011GiftPayResult : KeyCompare
    {
      public int reward_result_quantity;
      public bool is_new;
      public int reward_type_id;
      public int reward_result_id;

      public GachaG011GiftPayResult()
      {
      }

      public GachaG011GiftPayResult(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_result_quantity = (int) (long) json[nameof (reward_result_quantity)];
        this.is_new = (bool) json[nameof (is_new)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
        this.reward_result_id = (int) (long) json[nameof (reward_result_id)];
      }
    }

    [Serializable]
    public class GachaG012FriendpointPay : KeyCompare
    {
      public PlayerMaterialGear[] player_material_gears;
      public PlayerItem[] player_items;
      public WebAPI.Response.GachaG012FriendpointPayAdditional_items[] additional_items;
      public Player player;
      public PlayerUnit[] player_units;
      public TicketBanner[] g004_banner_info;
      public GachaModule[] gacha_modules;
      public PlayerMaterialUnit[] player_material_units;
      public PlayerPresent[] player_presents;
      public WebAPI.Response.GachaG012FriendpointPayResult[] result;

      public GachaG012FriendpointPay()
      {
      }

      public GachaG012FriendpointPay(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerMaterialGear> playerMaterialGearList = new List<PlayerMaterialGear>();
        foreach (object json1 in (List<object>) json[nameof (player_material_gears)])
          playerMaterialGearList.Add(json1 == null ? (PlayerMaterialGear) null : new PlayerMaterialGear((Dictionary<string, object>) json1));
        this.player_material_gears = playerMaterialGearList.ToArray();
        SMManager.UpdateList<PlayerMaterialGear>(this.player_material_gears);
        List<PlayerItem> playerItemList = new List<PlayerItem>();
        foreach (object json2 in (List<object>) json[nameof (player_items)])
          playerItemList.Add(json2 == null ? (PlayerItem) null : new PlayerItem((Dictionary<string, object>) json2));
        this.player_items = playerItemList.ToArray();
        SMManager.UpdateList<PlayerItem>(this.player_items);
        List<WebAPI.Response.GachaG012FriendpointPayAdditional_items> payAdditionalItemsList = new List<WebAPI.Response.GachaG012FriendpointPayAdditional_items>();
        foreach (object json3 in (List<object>) json[nameof (additional_items)])
          payAdditionalItemsList.Add(json3 == null ? (WebAPI.Response.GachaG012FriendpointPayAdditional_items) null : new WebAPI.Response.GachaG012FriendpointPayAdditional_items((Dictionary<string, object>) json3));
        this.additional_items = payAdditionalItemsList.ToArray();
        SMManager.UpdateList<WebAPI.Response.GachaG012FriendpointPayAdditional_items>(this.additional_items);
        this.player = json[nameof (player)] == null ? (Player) null : new Player((Dictionary<string, object>) json[nameof (player)]);
        SMManager.Change<Player>(this.player);
        List<PlayerUnit> playerUnitList = new List<PlayerUnit>();
        foreach (object json4 in (List<object>) json[nameof (player_units)])
          playerUnitList.Add(json4 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json4));
        this.player_units = playerUnitList.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_units);
        List<TicketBanner> ticketBannerList = new List<TicketBanner>();
        foreach (object json5 in (List<object>) json[nameof (g004_banner_info)])
          ticketBannerList.Add(json5 == null ? (TicketBanner) null : new TicketBanner((Dictionary<string, object>) json5));
        this.g004_banner_info = ticketBannerList.ToArray();
        SMManager.UpdateList<TicketBanner>(this.g004_banner_info);
        List<GachaModule> gachaModuleList = new List<GachaModule>();
        foreach (object json6 in (List<object>) json[nameof (gacha_modules)])
          gachaModuleList.Add(json6 == null ? (GachaModule) null : new GachaModule((Dictionary<string, object>) json6));
        this.gacha_modules = gachaModuleList.ToArray();
        SMManager.UpdateList<GachaModule>(this.gacha_modules);
        List<PlayerMaterialUnit> playerMaterialUnitList = new List<PlayerMaterialUnit>();
        foreach (object json7 in (List<object>) json[nameof (player_material_units)])
          playerMaterialUnitList.Add(json7 == null ? (PlayerMaterialUnit) null : new PlayerMaterialUnit((Dictionary<string, object>) json7));
        this.player_material_units = playerMaterialUnitList.ToArray();
        SMManager.UpdateList<PlayerMaterialUnit>(this.player_material_units);
        List<PlayerPresent> playerPresentList = new List<PlayerPresent>();
        foreach (object json8 in (List<object>) json[nameof (player_presents)])
          playerPresentList.Add(json8 == null ? (PlayerPresent) null : new PlayerPresent((Dictionary<string, object>) json8));
        this.player_presents = playerPresentList.ToArray();
        SMManager.UpdateList<PlayerPresent>(this.player_presents);
        List<WebAPI.Response.GachaG012FriendpointPayResult> friendpointPayResultList = new List<WebAPI.Response.GachaG012FriendpointPayResult>();
        foreach (object json9 in (List<object>) json[nameof (result)])
          friendpointPayResultList.Add(json9 == null ? (WebAPI.Response.GachaG012FriendpointPayResult) null : new WebAPI.Response.GachaG012FriendpointPayResult((Dictionary<string, object>) json9));
        this.result = friendpointPayResultList.ToArray();
        if (!json.ContainsKey("player_presents:delete"))
          return;
        SMManager.DeleteList<PlayerPresent>(((IEnumerable<object>) json["player_presents:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class GachaG012FriendpointPayResult : KeyCompare
    {
      public int reward_result_quantity;
      public int reward_result_id;
      public bool is_new;
      public int reward_type_id;
      public int direction_type_id;

      public GachaG012FriendpointPayResult()
      {
      }

      public GachaG012FriendpointPayResult(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_result_quantity = (int) (long) json[nameof (reward_result_quantity)];
        this.reward_result_id = (int) (long) json[nameof (reward_result_id)];
        this.is_new = (bool) json[nameof (is_new)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
        this.direction_type_id = (int) (long) json[nameof (direction_type_id)];
      }
    }

    [Serializable]
    public class GachaG012FriendpointPayAdditional_items : KeyCompare
    {
      public int reward_quantity;
      public int reward_type_id;
      public int reward_id;

      public GachaG012FriendpointPayAdditional_items()
      {
      }

      public GachaG012FriendpointPayAdditional_items(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_quantity = (int) (long) json[nameof (reward_quantity)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
        this.reward_id = (int) (long) json[nameof (reward_id)];
      }
    }

    [Serializable]
    public class GachaG013FriendpointPay : KeyCompare
    {
      public PlayerMaterialGear[] player_material_gears;
      public PlayerItem[] player_items;
      public Player player;
      public PlayerUnit[] player_units;
      public UnlockQuest[] unlock_quests;
      public TicketBanner[] g004_banner_info;
      public GachaModule[] gacha_modules;
      public PlayerMaterialUnit[] player_material_units;
      public PlayerPresent[] player_presents;
      public WebAPI.Response.GachaG013FriendpointPayResult[] result;

      public GachaG013FriendpointPay()
      {
      }

      public GachaG013FriendpointPay(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerMaterialGear> playerMaterialGearList = new List<PlayerMaterialGear>();
        foreach (object json1 in (List<object>) json[nameof (player_material_gears)])
          playerMaterialGearList.Add(json1 == null ? (PlayerMaterialGear) null : new PlayerMaterialGear((Dictionary<string, object>) json1));
        this.player_material_gears = playerMaterialGearList.ToArray();
        SMManager.UpdateList<PlayerMaterialGear>(this.player_material_gears);
        List<PlayerItem> playerItemList = new List<PlayerItem>();
        foreach (object json2 in (List<object>) json[nameof (player_items)])
          playerItemList.Add(json2 == null ? (PlayerItem) null : new PlayerItem((Dictionary<string, object>) json2));
        this.player_items = playerItemList.ToArray();
        SMManager.UpdateList<PlayerItem>(this.player_items);
        this.player = json[nameof (player)] == null ? (Player) null : new Player((Dictionary<string, object>) json[nameof (player)]);
        SMManager.Change<Player>(this.player);
        List<PlayerUnit> playerUnitList = new List<PlayerUnit>();
        foreach (object json3 in (List<object>) json[nameof (player_units)])
          playerUnitList.Add(json3 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json3));
        this.player_units = playerUnitList.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_units);
        List<UnlockQuest> unlockQuestList = new List<UnlockQuest>();
        foreach (object json4 in (List<object>) json[nameof (unlock_quests)])
          unlockQuestList.Add(json4 == null ? (UnlockQuest) null : new UnlockQuest((Dictionary<string, object>) json4));
        this.unlock_quests = unlockQuestList.ToArray();
        List<TicketBanner> ticketBannerList = new List<TicketBanner>();
        foreach (object json5 in (List<object>) json[nameof (g004_banner_info)])
          ticketBannerList.Add(json5 == null ? (TicketBanner) null : new TicketBanner((Dictionary<string, object>) json5));
        this.g004_banner_info = ticketBannerList.ToArray();
        SMManager.UpdateList<TicketBanner>(this.g004_banner_info);
        List<GachaModule> gachaModuleList = new List<GachaModule>();
        foreach (object json6 in (List<object>) json[nameof (gacha_modules)])
          gachaModuleList.Add(json6 == null ? (GachaModule) null : new GachaModule((Dictionary<string, object>) json6));
        this.gacha_modules = gachaModuleList.ToArray();
        SMManager.UpdateList<GachaModule>(this.gacha_modules);
        List<PlayerMaterialUnit> playerMaterialUnitList = new List<PlayerMaterialUnit>();
        foreach (object json7 in (List<object>) json[nameof (player_material_units)])
          playerMaterialUnitList.Add(json7 == null ? (PlayerMaterialUnit) null : new PlayerMaterialUnit((Dictionary<string, object>) json7));
        this.player_material_units = playerMaterialUnitList.ToArray();
        SMManager.UpdateList<PlayerMaterialUnit>(this.player_material_units);
        List<PlayerPresent> playerPresentList = new List<PlayerPresent>();
        foreach (object json8 in (List<object>) json[nameof (player_presents)])
          playerPresentList.Add(json8 == null ? (PlayerPresent) null : new PlayerPresent((Dictionary<string, object>) json8));
        this.player_presents = playerPresentList.ToArray();
        SMManager.UpdateList<PlayerPresent>(this.player_presents);
        List<WebAPI.Response.GachaG013FriendpointPayResult> friendpointPayResultList = new List<WebAPI.Response.GachaG013FriendpointPayResult>();
        foreach (object json9 in (List<object>) json[nameof (result)])
          friendpointPayResultList.Add(json9 == null ? (WebAPI.Response.GachaG013FriendpointPayResult) null : new WebAPI.Response.GachaG013FriendpointPayResult((Dictionary<string, object>) json9));
        this.result = friendpointPayResultList.ToArray();
        if (!json.ContainsKey("player_presents:delete"))
          return;
        SMManager.DeleteList<PlayerPresent>(((IEnumerable<object>) json["player_presents:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class GachaG013FriendpointPayResult : KeyCompare
    {
      public int reward_result_quantity;
      public bool is_new;
      public int reward_type_id;
      public int reward_result_id;

      public GachaG013FriendpointPayResult()
      {
      }

      public GachaG013FriendpointPayResult(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_result_quantity = (int) (long) json[nameof (reward_result_quantity)];
        this.is_new = (bool) json[nameof (is_new)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
        this.reward_result_id = (int) (long) json[nameof (reward_result_id)];
      }
    }

    [Serializable]
    public class GachaG014ChargeMultiPay : KeyCompare
    {
      public PlayerMaterialGear[] player_material_gears;
      public PlayerItem[] player_items;
      public AnimationPatternMultiAfter[] animation_pattern_gems;
      public Player player;
      public PlayerUnit[] player_units;
      public PlayerUnit[] player_unit_reserves;
      public UnlockQuest[] unlock_quests;
      public TicketBanner[] g004_banner_info;
      public GachaModule[] gacha_modules;
      public PlayerUnitReservesCount player_unit_reserves_count;
      public string[] animation_pattern;
      public PlayerMaterialUnit[] player_material_units;
      public PlayerPresent[] player_presents;
      public WebAPI.Response.GachaG014ChargeMultiPayResult[] result;

      public GachaG014ChargeMultiPay()
      {
      }

      public GachaG014ChargeMultiPay(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerMaterialGear> playerMaterialGearList = new List<PlayerMaterialGear>();
        foreach (object json1 in (List<object>) json[nameof (player_material_gears)])
          playerMaterialGearList.Add(json1 == null ? (PlayerMaterialGear) null : new PlayerMaterialGear((Dictionary<string, object>) json1));
        this.player_material_gears = playerMaterialGearList.ToArray();
        SMManager.UpdateList<PlayerMaterialGear>(this.player_material_gears);
        List<PlayerItem> playerItemList = new List<PlayerItem>();
        foreach (object json2 in (List<object>) json[nameof (player_items)])
          playerItemList.Add(json2 == null ? (PlayerItem) null : new PlayerItem((Dictionary<string, object>) json2));
        this.player_items = playerItemList.ToArray();
        SMManager.UpdateList<PlayerItem>(this.player_items);
        List<AnimationPatternMultiAfter> patternMultiAfterList = new List<AnimationPatternMultiAfter>();
        foreach (object json3 in (List<object>) json[nameof (animation_pattern_gems)])
          patternMultiAfterList.Add(json3 == null ? (AnimationPatternMultiAfter) null : new AnimationPatternMultiAfter((Dictionary<string, object>) json3));
        this.animation_pattern_gems = patternMultiAfterList.ToArray();
        this.player = json[nameof (player)] == null ? (Player) null : new Player((Dictionary<string, object>) json[nameof (player)]);
        SMManager.Change<Player>(this.player);
        List<PlayerUnit> playerUnitList1 = new List<PlayerUnit>();
        foreach (object json4 in (List<object>) json[nameof (player_units)])
          playerUnitList1.Add(json4 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json4));
        this.player_units = playerUnitList1.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_units);
        List<PlayerUnit> playerUnitList2 = new List<PlayerUnit>();
        foreach (object json5 in (List<object>) json[nameof (player_unit_reserves)])
          playerUnitList2.Add(json5 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json5));
        this.player_unit_reserves = playerUnitList2.ToArray();
        List<UnlockQuest> unlockQuestList = new List<UnlockQuest>();
        foreach (object json6 in (List<object>) json[nameof (unlock_quests)])
          unlockQuestList.Add(json6 == null ? (UnlockQuest) null : new UnlockQuest((Dictionary<string, object>) json6));
        this.unlock_quests = unlockQuestList.ToArray();
        List<TicketBanner> ticketBannerList = new List<TicketBanner>();
        foreach (object json7 in (List<object>) json[nameof (g004_banner_info)])
          ticketBannerList.Add(json7 == null ? (TicketBanner) null : new TicketBanner((Dictionary<string, object>) json7));
        this.g004_banner_info = ticketBannerList.ToArray();
        SMManager.UpdateList<TicketBanner>(this.g004_banner_info);
        List<GachaModule> gachaModuleList = new List<GachaModule>();
        foreach (object json8 in (List<object>) json[nameof (gacha_modules)])
          gachaModuleList.Add(json8 == null ? (GachaModule) null : new GachaModule((Dictionary<string, object>) json8));
        this.gacha_modules = gachaModuleList.ToArray();
        SMManager.UpdateList<GachaModule>(this.gacha_modules);
        this.player_unit_reserves_count = json[nameof (player_unit_reserves_count)] == null ? (PlayerUnitReservesCount) null : new PlayerUnitReservesCount((Dictionary<string, object>) json[nameof (player_unit_reserves_count)]);
        SMManager.Change<PlayerUnitReservesCount>(this.player_unit_reserves_count);
        this.animation_pattern = ((IEnumerable<object>) json[nameof (animation_pattern)]).Select<object, string>((Func<object, string>) (s => (string) s)).ToArray<string>();
        List<PlayerMaterialUnit> playerMaterialUnitList = new List<PlayerMaterialUnit>();
        foreach (object json9 in (List<object>) json[nameof (player_material_units)])
          playerMaterialUnitList.Add(json9 == null ? (PlayerMaterialUnit) null : new PlayerMaterialUnit((Dictionary<string, object>) json9));
        this.player_material_units = playerMaterialUnitList.ToArray();
        SMManager.UpdateList<PlayerMaterialUnit>(this.player_material_units);
        List<PlayerPresent> playerPresentList = new List<PlayerPresent>();
        foreach (object json10 in (List<object>) json[nameof (player_presents)])
          playerPresentList.Add(json10 == null ? (PlayerPresent) null : new PlayerPresent((Dictionary<string, object>) json10));
        this.player_presents = playerPresentList.ToArray();
        SMManager.UpdateList<PlayerPresent>(this.player_presents);
        List<WebAPI.Response.GachaG014ChargeMultiPayResult> chargeMultiPayResultList = new List<WebAPI.Response.GachaG014ChargeMultiPayResult>();
        foreach (object json11 in (List<object>) json[nameof (result)])
          chargeMultiPayResultList.Add(json11 == null ? (WebAPI.Response.GachaG014ChargeMultiPayResult) null : new WebAPI.Response.GachaG014ChargeMultiPayResult((Dictionary<string, object>) json11));
        this.result = chargeMultiPayResultList.ToArray();
        if (!json.ContainsKey("player_presents:delete"))
          return;
        SMManager.DeleteList<PlayerPresent>(((IEnumerable<object>) json["player_presents:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class GachaG014ChargeMultiPayResult : KeyCompare
    {
      public int reward_result_quantity;
      public bool is_new;
      public int reward_type_id;
      public int reward_result_id;

      public GachaG014ChargeMultiPayResult()
      {
      }

      public GachaG014ChargeMultiPayResult(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_result_quantity = (int) (long) json[nameof (reward_result_quantity)];
        this.is_new = (bool) json[nameof (is_new)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
        this.reward_result_id = (int) (long) json[nameof (reward_result_id)];
      }
    }

    [Serializable]
    public class GachaG014ChargePay : KeyCompare
    {
      public PlayerMaterialGear[] player_material_gears;
      public PlayerItem[] player_items;
      public Player player;
      public PlayerUnit[] player_units;
      public PlayerUnit[] player_unit_reserves;
      public UnlockQuest[] unlock_quests;
      public TicketBanner[] g004_banner_info;
      public GachaModule[] gacha_modules;
      public PlayerUnitReservesCount player_unit_reserves_count;
      public string[] animation_pattern;
      public PlayerMaterialUnit[] player_material_units;
      public PlayerPresent[] player_presents;
      public WebAPI.Response.GachaG014ChargePayResult[] result;

      public GachaG014ChargePay()
      {
      }

      public GachaG014ChargePay(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerMaterialGear> playerMaterialGearList = new List<PlayerMaterialGear>();
        foreach (object json1 in (List<object>) json[nameof (player_material_gears)])
          playerMaterialGearList.Add(json1 == null ? (PlayerMaterialGear) null : new PlayerMaterialGear((Dictionary<string, object>) json1));
        this.player_material_gears = playerMaterialGearList.ToArray();
        SMManager.UpdateList<PlayerMaterialGear>(this.player_material_gears);
        List<PlayerItem> playerItemList = new List<PlayerItem>();
        foreach (object json2 in (List<object>) json[nameof (player_items)])
          playerItemList.Add(json2 == null ? (PlayerItem) null : new PlayerItem((Dictionary<string, object>) json2));
        this.player_items = playerItemList.ToArray();
        SMManager.UpdateList<PlayerItem>(this.player_items);
        this.player = json[nameof (player)] == null ? (Player) null : new Player((Dictionary<string, object>) json[nameof (player)]);
        SMManager.Change<Player>(this.player);
        List<PlayerUnit> playerUnitList1 = new List<PlayerUnit>();
        foreach (object json3 in (List<object>) json[nameof (player_units)])
          playerUnitList1.Add(json3 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json3));
        this.player_units = playerUnitList1.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_units);
        List<PlayerUnit> playerUnitList2 = new List<PlayerUnit>();
        foreach (object json4 in (List<object>) json[nameof (player_unit_reserves)])
          playerUnitList2.Add(json4 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json4));
        this.player_unit_reserves = playerUnitList2.ToArray();
        List<UnlockQuest> unlockQuestList = new List<UnlockQuest>();
        foreach (object json5 in (List<object>) json[nameof (unlock_quests)])
          unlockQuestList.Add(json5 == null ? (UnlockQuest) null : new UnlockQuest((Dictionary<string, object>) json5));
        this.unlock_quests = unlockQuestList.ToArray();
        List<TicketBanner> ticketBannerList = new List<TicketBanner>();
        foreach (object json6 in (List<object>) json[nameof (g004_banner_info)])
          ticketBannerList.Add(json6 == null ? (TicketBanner) null : new TicketBanner((Dictionary<string, object>) json6));
        this.g004_banner_info = ticketBannerList.ToArray();
        SMManager.UpdateList<TicketBanner>(this.g004_banner_info);
        List<GachaModule> gachaModuleList = new List<GachaModule>();
        foreach (object json7 in (List<object>) json[nameof (gacha_modules)])
          gachaModuleList.Add(json7 == null ? (GachaModule) null : new GachaModule((Dictionary<string, object>) json7));
        this.gacha_modules = gachaModuleList.ToArray();
        SMManager.UpdateList<GachaModule>(this.gacha_modules);
        this.player_unit_reserves_count = json[nameof (player_unit_reserves_count)] == null ? (PlayerUnitReservesCount) null : new PlayerUnitReservesCount((Dictionary<string, object>) json[nameof (player_unit_reserves_count)]);
        SMManager.Change<PlayerUnitReservesCount>(this.player_unit_reserves_count);
        this.animation_pattern = ((IEnumerable<object>) json[nameof (animation_pattern)]).Select<object, string>((Func<object, string>) (s => (string) s)).ToArray<string>();
        List<PlayerMaterialUnit> playerMaterialUnitList = new List<PlayerMaterialUnit>();
        foreach (object json8 in (List<object>) json[nameof (player_material_units)])
          playerMaterialUnitList.Add(json8 == null ? (PlayerMaterialUnit) null : new PlayerMaterialUnit((Dictionary<string, object>) json8));
        this.player_material_units = playerMaterialUnitList.ToArray();
        SMManager.UpdateList<PlayerMaterialUnit>(this.player_material_units);
        List<PlayerPresent> playerPresentList = new List<PlayerPresent>();
        foreach (object json9 in (List<object>) json[nameof (player_presents)])
          playerPresentList.Add(json9 == null ? (PlayerPresent) null : new PlayerPresent((Dictionary<string, object>) json9));
        this.player_presents = playerPresentList.ToArray();
        SMManager.UpdateList<PlayerPresent>(this.player_presents);
        List<WebAPI.Response.GachaG014ChargePayResult> g014ChargePayResultList = new List<WebAPI.Response.GachaG014ChargePayResult>();
        foreach (object json10 in (List<object>) json[nameof (result)])
          g014ChargePayResultList.Add(json10 == null ? (WebAPI.Response.GachaG014ChargePayResult) null : new WebAPI.Response.GachaG014ChargePayResult((Dictionary<string, object>) json10));
        this.result = g014ChargePayResultList.ToArray();
        if (!json.ContainsKey("player_presents:delete"))
          return;
        SMManager.DeleteList<PlayerPresent>(((IEnumerable<object>) json["player_presents:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class GachaG014ChargePayResult : KeyCompare
    {
      public int reward_result_quantity;
      public bool is_new;
      public int reward_type_id;
      public int reward_result_id;

      public GachaG014ChargePayResult()
      {
      }

      public GachaG014ChargePayResult(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_result_quantity = (int) (long) json[nameof (reward_result_quantity)];
        this.is_new = (bool) json[nameof (is_new)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
        this.reward_result_id = (int) (long) json[nameof (reward_result_id)];
      }
    }

    [Serializable]
    public class GachaG015ChargeMultiPay : KeyCompare
    {
      public PlayerMaterialGear[] player_material_gears;
      public PlayerItem[] player_items;
      public AnimationPatternMultiAfter[] animation_pattern_gems;
      public Player player;
      public PlayerUnit[] player_units;
      public PlayerUnit[] player_unit_reserves;
      public UnlockQuest[] unlock_quests;
      public TicketBanner[] g004_banner_info;
      public GachaModule[] gacha_modules;
      public int player_unit_reserves_count;
      public string[] animation_pattern;
      public PlayerMaterialUnit[] player_material_units;
      public PlayerPresent[] player_presents;
      public WebAPI.Response.GachaG015ChargeMultiPayResult[] result;

      public GachaG015ChargeMultiPay()
      {
      }

      public GachaG015ChargeMultiPay(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerMaterialGear> playerMaterialGearList = new List<PlayerMaterialGear>();
        foreach (object json1 in (List<object>) json[nameof (player_material_gears)])
          playerMaterialGearList.Add(json1 == null ? (PlayerMaterialGear) null : new PlayerMaterialGear((Dictionary<string, object>) json1));
        this.player_material_gears = playerMaterialGearList.ToArray();
        SMManager.UpdateList<PlayerMaterialGear>(this.player_material_gears);
        List<PlayerItem> playerItemList = new List<PlayerItem>();
        foreach (object json2 in (List<object>) json[nameof (player_items)])
          playerItemList.Add(json2 == null ? (PlayerItem) null : new PlayerItem((Dictionary<string, object>) json2));
        this.player_items = playerItemList.ToArray();
        SMManager.UpdateList<PlayerItem>(this.player_items);
        List<AnimationPatternMultiAfter> patternMultiAfterList = new List<AnimationPatternMultiAfter>();
        foreach (object json3 in (List<object>) json[nameof (animation_pattern_gems)])
          patternMultiAfterList.Add(json3 == null ? (AnimationPatternMultiAfter) null : new AnimationPatternMultiAfter((Dictionary<string, object>) json3));
        this.animation_pattern_gems = patternMultiAfterList.ToArray();
        this.player = json[nameof (player)] == null ? (Player) null : new Player((Dictionary<string, object>) json[nameof (player)]);
        SMManager.Change<Player>(this.player);
        List<PlayerUnit> playerUnitList1 = new List<PlayerUnit>();
        foreach (object json4 in (List<object>) json[nameof (player_units)])
          playerUnitList1.Add(json4 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json4));
        this.player_units = playerUnitList1.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_units);
        List<PlayerUnit> playerUnitList2 = new List<PlayerUnit>();
        foreach (object json5 in (List<object>) json[nameof (player_unit_reserves)])
          playerUnitList2.Add(json5 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json5));
        this.player_unit_reserves = playerUnitList2.ToArray();
        List<UnlockQuest> unlockQuestList = new List<UnlockQuest>();
        foreach (object json6 in (List<object>) json[nameof (unlock_quests)])
          unlockQuestList.Add(json6 == null ? (UnlockQuest) null : new UnlockQuest((Dictionary<string, object>) json6));
        this.unlock_quests = unlockQuestList.ToArray();
        List<TicketBanner> ticketBannerList = new List<TicketBanner>();
        foreach (object json7 in (List<object>) json[nameof (g004_banner_info)])
          ticketBannerList.Add(json7 == null ? (TicketBanner) null : new TicketBanner((Dictionary<string, object>) json7));
        this.g004_banner_info = ticketBannerList.ToArray();
        SMManager.UpdateList<TicketBanner>(this.g004_banner_info);
        List<GachaModule> gachaModuleList = new List<GachaModule>();
        foreach (object json8 in (List<object>) json[nameof (gacha_modules)])
          gachaModuleList.Add(json8 == null ? (GachaModule) null : new GachaModule((Dictionary<string, object>) json8));
        this.gacha_modules = gachaModuleList.ToArray();
        SMManager.UpdateList<GachaModule>(this.gacha_modules);
        this.player_unit_reserves_count = (int) (long) json[nameof (player_unit_reserves_count)];
        this.animation_pattern = ((IEnumerable<object>) json[nameof (animation_pattern)]).Select<object, string>((Func<object, string>) (s => (string) s)).ToArray<string>();
        List<PlayerMaterialUnit> playerMaterialUnitList = new List<PlayerMaterialUnit>();
        foreach (object json9 in (List<object>) json[nameof (player_material_units)])
          playerMaterialUnitList.Add(json9 == null ? (PlayerMaterialUnit) null : new PlayerMaterialUnit((Dictionary<string, object>) json9));
        this.player_material_units = playerMaterialUnitList.ToArray();
        SMManager.UpdateList<PlayerMaterialUnit>(this.player_material_units);
        List<PlayerPresent> playerPresentList = new List<PlayerPresent>();
        foreach (object json10 in (List<object>) json[nameof (player_presents)])
          playerPresentList.Add(json10 == null ? (PlayerPresent) null : new PlayerPresent((Dictionary<string, object>) json10));
        this.player_presents = playerPresentList.ToArray();
        SMManager.UpdateList<PlayerPresent>(this.player_presents);
        List<WebAPI.Response.GachaG015ChargeMultiPayResult> chargeMultiPayResultList = new List<WebAPI.Response.GachaG015ChargeMultiPayResult>();
        foreach (object json11 in (List<object>) json[nameof (result)])
          chargeMultiPayResultList.Add(json11 == null ? (WebAPI.Response.GachaG015ChargeMultiPayResult) null : new WebAPI.Response.GachaG015ChargeMultiPayResult((Dictionary<string, object>) json11));
        this.result = chargeMultiPayResultList.ToArray();
        if (!json.ContainsKey("player_presents:delete"))
          return;
        SMManager.DeleteList<PlayerPresent>(((IEnumerable<object>) json["player_presents:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class GachaG015ChargeMultiPayResult : KeyCompare
    {
      public int reward_result_quantity;
      public bool is_new;
      public int reward_type_id;
      public int reward_result_id;

      public GachaG015ChargeMultiPayResult()
      {
      }

      public GachaG015ChargeMultiPayResult(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_result_quantity = (int) (long) json[nameof (reward_result_quantity)];
        this.is_new = (bool) json[nameof (is_new)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
        this.reward_result_id = (int) (long) json[nameof (reward_result_id)];
      }
    }

    [Serializable]
    public class GachaG015ChargePay : KeyCompare
    {
      public PlayerMaterialGear[] player_material_gears;
      public PlayerItem[] player_items;
      public Player player;
      public PlayerUnit[] player_units;
      public PlayerUnit[] player_unit_reserves;
      public UnlockQuest[] unlock_quests;
      public TicketBanner[] g004_banner_info;
      public GachaModule[] gacha_modules;
      public PlayerUnitReservesCount player_unit_reserves_count;
      public string[] animation_pattern;
      public PlayerMaterialUnit[] player_material_units;
      public PlayerPresent[] player_presents;
      public WebAPI.Response.GachaG015ChargePayResult[] result;

      public GachaG015ChargePay()
      {
      }

      public GachaG015ChargePay(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerMaterialGear> playerMaterialGearList = new List<PlayerMaterialGear>();
        foreach (object json1 in (List<object>) json[nameof (player_material_gears)])
          playerMaterialGearList.Add(json1 == null ? (PlayerMaterialGear) null : new PlayerMaterialGear((Dictionary<string, object>) json1));
        this.player_material_gears = playerMaterialGearList.ToArray();
        SMManager.UpdateList<PlayerMaterialGear>(this.player_material_gears);
        List<PlayerItem> playerItemList = new List<PlayerItem>();
        foreach (object json2 in (List<object>) json[nameof (player_items)])
          playerItemList.Add(json2 == null ? (PlayerItem) null : new PlayerItem((Dictionary<string, object>) json2));
        this.player_items = playerItemList.ToArray();
        SMManager.UpdateList<PlayerItem>(this.player_items);
        this.player = json[nameof (player)] == null ? (Player) null : new Player((Dictionary<string, object>) json[nameof (player)]);
        SMManager.Change<Player>(this.player);
        List<PlayerUnit> playerUnitList1 = new List<PlayerUnit>();
        foreach (object json3 in (List<object>) json[nameof (player_units)])
          playerUnitList1.Add(json3 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json3));
        this.player_units = playerUnitList1.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_units);
        List<PlayerUnit> playerUnitList2 = new List<PlayerUnit>();
        foreach (object json4 in (List<object>) json[nameof (player_unit_reserves)])
          playerUnitList2.Add(json4 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json4));
        this.player_unit_reserves = playerUnitList2.ToArray();
        List<UnlockQuest> unlockQuestList = new List<UnlockQuest>();
        foreach (object json5 in (List<object>) json[nameof (unlock_quests)])
          unlockQuestList.Add(json5 == null ? (UnlockQuest) null : new UnlockQuest((Dictionary<string, object>) json5));
        this.unlock_quests = unlockQuestList.ToArray();
        List<TicketBanner> ticketBannerList = new List<TicketBanner>();
        foreach (object json6 in (List<object>) json[nameof (g004_banner_info)])
          ticketBannerList.Add(json6 == null ? (TicketBanner) null : new TicketBanner((Dictionary<string, object>) json6));
        this.g004_banner_info = ticketBannerList.ToArray();
        SMManager.UpdateList<TicketBanner>(this.g004_banner_info);
        List<GachaModule> gachaModuleList = new List<GachaModule>();
        foreach (object json7 in (List<object>) json[nameof (gacha_modules)])
          gachaModuleList.Add(json7 == null ? (GachaModule) null : new GachaModule((Dictionary<string, object>) json7));
        this.gacha_modules = gachaModuleList.ToArray();
        SMManager.UpdateList<GachaModule>(this.gacha_modules);
        this.player_unit_reserves_count = json[nameof (player_unit_reserves_count)] == null ? (PlayerUnitReservesCount) null : new PlayerUnitReservesCount((Dictionary<string, object>) json[nameof (player_unit_reserves_count)]);
        SMManager.Change<PlayerUnitReservesCount>(this.player_unit_reserves_count);
        this.animation_pattern = ((IEnumerable<object>) json[nameof (animation_pattern)]).Select<object, string>((Func<object, string>) (s => (string) s)).ToArray<string>();
        List<PlayerMaterialUnit> playerMaterialUnitList = new List<PlayerMaterialUnit>();
        foreach (object json8 in (List<object>) json[nameof (player_material_units)])
          playerMaterialUnitList.Add(json8 == null ? (PlayerMaterialUnit) null : new PlayerMaterialUnit((Dictionary<string, object>) json8));
        this.player_material_units = playerMaterialUnitList.ToArray();
        SMManager.UpdateList<PlayerMaterialUnit>(this.player_material_units);
        List<PlayerPresent> playerPresentList = new List<PlayerPresent>();
        foreach (object json9 in (List<object>) json[nameof (player_presents)])
          playerPresentList.Add(json9 == null ? (PlayerPresent) null : new PlayerPresent((Dictionary<string, object>) json9));
        this.player_presents = playerPresentList.ToArray();
        SMManager.UpdateList<PlayerPresent>(this.player_presents);
        List<WebAPI.Response.GachaG015ChargePayResult> g015ChargePayResultList = new List<WebAPI.Response.GachaG015ChargePayResult>();
        foreach (object json10 in (List<object>) json[nameof (result)])
          g015ChargePayResultList.Add(json10 == null ? (WebAPI.Response.GachaG015ChargePayResult) null : new WebAPI.Response.GachaG015ChargePayResult((Dictionary<string, object>) json10));
        this.result = g015ChargePayResultList.ToArray();
        if (!json.ContainsKey("player_presents:delete"))
          return;
        SMManager.DeleteList<PlayerPresent>(((IEnumerable<object>) json["player_presents:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class GachaG015ChargePayResult : KeyCompare
    {
      public int reward_result_quantity;
      public bool is_new;
      public int reward_type_id;
      public int reward_result_id;

      public GachaG015ChargePayResult()
      {
      }

      public GachaG015ChargePayResult(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_result_quantity = (int) (long) json[nameof (reward_result_quantity)];
        this.is_new = (bool) json[nameof (is_new)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
        this.reward_result_id = (int) (long) json[nameof (reward_result_id)];
      }
    }

    [Serializable]
    public class GachaG016ChargeMultiPay : KeyCompare
    {
      public PlayerMaterialGear[] player_material_gears;
      public PlayerItem[] player_items;
      public AnimationPatternMultiAfter[] animation_pattern_gems;
      public Player player;
      public PlayerUnit[] player_units;
      public PlayerUnit[] player_unit_reserves;
      public UnlockQuest[] unlock_quests;
      public TicketBanner[] g004_banner_info;
      public GachaModule[] gacha_modules;
      public PlayerUnitReservesCount player_unit_reserves_count;
      public string[] animation_pattern;
      public PlayerMaterialUnit[] player_material_units;
      public PlayerPresent[] player_presents;
      public WebAPI.Response.GachaG016ChargeMultiPayResult[] result;

      public GachaG016ChargeMultiPay()
      {
      }

      public GachaG016ChargeMultiPay(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerMaterialGear> playerMaterialGearList = new List<PlayerMaterialGear>();
        foreach (object json1 in (List<object>) json[nameof (player_material_gears)])
          playerMaterialGearList.Add(json1 == null ? (PlayerMaterialGear) null : new PlayerMaterialGear((Dictionary<string, object>) json1));
        this.player_material_gears = playerMaterialGearList.ToArray();
        SMManager.UpdateList<PlayerMaterialGear>(this.player_material_gears);
        List<PlayerItem> playerItemList = new List<PlayerItem>();
        foreach (object json2 in (List<object>) json[nameof (player_items)])
          playerItemList.Add(json2 == null ? (PlayerItem) null : new PlayerItem((Dictionary<string, object>) json2));
        this.player_items = playerItemList.ToArray();
        SMManager.UpdateList<PlayerItem>(this.player_items);
        List<AnimationPatternMultiAfter> patternMultiAfterList = new List<AnimationPatternMultiAfter>();
        foreach (object json3 in (List<object>) json[nameof (animation_pattern_gems)])
          patternMultiAfterList.Add(json3 == null ? (AnimationPatternMultiAfter) null : new AnimationPatternMultiAfter((Dictionary<string, object>) json3));
        this.animation_pattern_gems = patternMultiAfterList.ToArray();
        this.player = json[nameof (player)] == null ? (Player) null : new Player((Dictionary<string, object>) json[nameof (player)]);
        SMManager.Change<Player>(this.player);
        List<PlayerUnit> playerUnitList1 = new List<PlayerUnit>();
        foreach (object json4 in (List<object>) json[nameof (player_units)])
          playerUnitList1.Add(json4 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json4));
        this.player_units = playerUnitList1.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_units);
        List<PlayerUnit> playerUnitList2 = new List<PlayerUnit>();
        foreach (object json5 in (List<object>) json[nameof (player_unit_reserves)])
          playerUnitList2.Add(json5 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json5));
        this.player_unit_reserves = playerUnitList2.ToArray();
        List<UnlockQuest> unlockQuestList = new List<UnlockQuest>();
        foreach (object json6 in (List<object>) json[nameof (unlock_quests)])
          unlockQuestList.Add(json6 == null ? (UnlockQuest) null : new UnlockQuest((Dictionary<string, object>) json6));
        this.unlock_quests = unlockQuestList.ToArray();
        List<TicketBanner> ticketBannerList = new List<TicketBanner>();
        foreach (object json7 in (List<object>) json[nameof (g004_banner_info)])
          ticketBannerList.Add(json7 == null ? (TicketBanner) null : new TicketBanner((Dictionary<string, object>) json7));
        this.g004_banner_info = ticketBannerList.ToArray();
        SMManager.UpdateList<TicketBanner>(this.g004_banner_info);
        List<GachaModule> gachaModuleList = new List<GachaModule>();
        foreach (object json8 in (List<object>) json[nameof (gacha_modules)])
          gachaModuleList.Add(json8 == null ? (GachaModule) null : new GachaModule((Dictionary<string, object>) json8));
        this.gacha_modules = gachaModuleList.ToArray();
        SMManager.UpdateList<GachaModule>(this.gacha_modules);
        this.player_unit_reserves_count = json[nameof (player_unit_reserves_count)] == null ? (PlayerUnitReservesCount) null : new PlayerUnitReservesCount((Dictionary<string, object>) json[nameof (player_unit_reserves_count)]);
        SMManager.Change<PlayerUnitReservesCount>(this.player_unit_reserves_count);
        this.animation_pattern = ((IEnumerable<object>) json[nameof (animation_pattern)]).Select<object, string>((Func<object, string>) (s => (string) s)).ToArray<string>();
        List<PlayerMaterialUnit> playerMaterialUnitList = new List<PlayerMaterialUnit>();
        foreach (object json9 in (List<object>) json[nameof (player_material_units)])
          playerMaterialUnitList.Add(json9 == null ? (PlayerMaterialUnit) null : new PlayerMaterialUnit((Dictionary<string, object>) json9));
        this.player_material_units = playerMaterialUnitList.ToArray();
        SMManager.UpdateList<PlayerMaterialUnit>(this.player_material_units);
        List<PlayerPresent> playerPresentList = new List<PlayerPresent>();
        foreach (object json10 in (List<object>) json[nameof (player_presents)])
          playerPresentList.Add(json10 == null ? (PlayerPresent) null : new PlayerPresent((Dictionary<string, object>) json10));
        this.player_presents = playerPresentList.ToArray();
        SMManager.UpdateList<PlayerPresent>(this.player_presents);
        List<WebAPI.Response.GachaG016ChargeMultiPayResult> chargeMultiPayResultList = new List<WebAPI.Response.GachaG016ChargeMultiPayResult>();
        foreach (object json11 in (List<object>) json[nameof (result)])
          chargeMultiPayResultList.Add(json11 == null ? (WebAPI.Response.GachaG016ChargeMultiPayResult) null : new WebAPI.Response.GachaG016ChargeMultiPayResult((Dictionary<string, object>) json11));
        this.result = chargeMultiPayResultList.ToArray();
        if (!json.ContainsKey("player_presents:delete"))
          return;
        SMManager.DeleteList<PlayerPresent>(((IEnumerable<object>) json["player_presents:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class GachaG016ChargeMultiPayResult : KeyCompare
    {
      public int reward_result_quantity;
      public bool is_new;
      public int reward_type_id;
      public int reward_result_id;

      public GachaG016ChargeMultiPayResult()
      {
      }

      public GachaG016ChargeMultiPayResult(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_result_quantity = (int) (long) json[nameof (reward_result_quantity)];
        this.is_new = (bool) json[nameof (is_new)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
        this.reward_result_id = (int) (long) json[nameof (reward_result_id)];
      }
    }

    [Serializable]
    public class GachaG016ChargePay : KeyCompare
    {
      public PlayerMaterialGear[] player_material_gears;
      public PlayerItem[] player_items;
      public Player player;
      public PlayerUnit[] player_units;
      public PlayerUnit[] player_unit_reserves;
      public UnlockQuest[] unlock_quests;
      public TicketBanner[] g004_banner_info;
      public GachaModule[] gacha_modules;
      public PlayerUnitReservesCount player_unit_reserves_count;
      public string[] animation_pattern;
      public PlayerMaterialUnit[] player_material_units;
      public PlayerPresent[] player_presents;
      public WebAPI.Response.GachaG016ChargePayResult[] result;

      public GachaG016ChargePay()
      {
      }

      public GachaG016ChargePay(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerMaterialGear> playerMaterialGearList = new List<PlayerMaterialGear>();
        foreach (object json1 in (List<object>) json[nameof (player_material_gears)])
          playerMaterialGearList.Add(json1 == null ? (PlayerMaterialGear) null : new PlayerMaterialGear((Dictionary<string, object>) json1));
        this.player_material_gears = playerMaterialGearList.ToArray();
        SMManager.UpdateList<PlayerMaterialGear>(this.player_material_gears);
        List<PlayerItem> playerItemList = new List<PlayerItem>();
        foreach (object json2 in (List<object>) json[nameof (player_items)])
          playerItemList.Add(json2 == null ? (PlayerItem) null : new PlayerItem((Dictionary<string, object>) json2));
        this.player_items = playerItemList.ToArray();
        SMManager.UpdateList<PlayerItem>(this.player_items);
        this.player = json[nameof (player)] == null ? (Player) null : new Player((Dictionary<string, object>) json[nameof (player)]);
        SMManager.Change<Player>(this.player);
        List<PlayerUnit> playerUnitList1 = new List<PlayerUnit>();
        foreach (object json3 in (List<object>) json[nameof (player_units)])
          playerUnitList1.Add(json3 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json3));
        this.player_units = playerUnitList1.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_units);
        List<PlayerUnit> playerUnitList2 = new List<PlayerUnit>();
        foreach (object json4 in (List<object>) json[nameof (player_unit_reserves)])
          playerUnitList2.Add(json4 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json4));
        this.player_unit_reserves = playerUnitList2.ToArray();
        List<UnlockQuest> unlockQuestList = new List<UnlockQuest>();
        foreach (object json5 in (List<object>) json[nameof (unlock_quests)])
          unlockQuestList.Add(json5 == null ? (UnlockQuest) null : new UnlockQuest((Dictionary<string, object>) json5));
        this.unlock_quests = unlockQuestList.ToArray();
        List<TicketBanner> ticketBannerList = new List<TicketBanner>();
        foreach (object json6 in (List<object>) json[nameof (g004_banner_info)])
          ticketBannerList.Add(json6 == null ? (TicketBanner) null : new TicketBanner((Dictionary<string, object>) json6));
        this.g004_banner_info = ticketBannerList.ToArray();
        SMManager.UpdateList<TicketBanner>(this.g004_banner_info);
        List<GachaModule> gachaModuleList = new List<GachaModule>();
        foreach (object json7 in (List<object>) json[nameof (gacha_modules)])
          gachaModuleList.Add(json7 == null ? (GachaModule) null : new GachaModule((Dictionary<string, object>) json7));
        this.gacha_modules = gachaModuleList.ToArray();
        SMManager.UpdateList<GachaModule>(this.gacha_modules);
        this.player_unit_reserves_count = json[nameof (player_unit_reserves_count)] == null ? (PlayerUnitReservesCount) null : new PlayerUnitReservesCount((Dictionary<string, object>) json[nameof (player_unit_reserves_count)]);
        SMManager.Change<PlayerUnitReservesCount>(this.player_unit_reserves_count);
        this.animation_pattern = ((IEnumerable<object>) json[nameof (animation_pattern)]).Select<object, string>((Func<object, string>) (s => (string) s)).ToArray<string>();
        List<PlayerMaterialUnit> playerMaterialUnitList = new List<PlayerMaterialUnit>();
        foreach (object json8 in (List<object>) json[nameof (player_material_units)])
          playerMaterialUnitList.Add(json8 == null ? (PlayerMaterialUnit) null : new PlayerMaterialUnit((Dictionary<string, object>) json8));
        this.player_material_units = playerMaterialUnitList.ToArray();
        SMManager.UpdateList<PlayerMaterialUnit>(this.player_material_units);
        List<PlayerPresent> playerPresentList = new List<PlayerPresent>();
        foreach (object json9 in (List<object>) json[nameof (player_presents)])
          playerPresentList.Add(json9 == null ? (PlayerPresent) null : new PlayerPresent((Dictionary<string, object>) json9));
        this.player_presents = playerPresentList.ToArray();
        SMManager.UpdateList<PlayerPresent>(this.player_presents);
        List<WebAPI.Response.GachaG016ChargePayResult> g016ChargePayResultList = new List<WebAPI.Response.GachaG016ChargePayResult>();
        foreach (object json10 in (List<object>) json[nameof (result)])
          g016ChargePayResultList.Add(json10 == null ? (WebAPI.Response.GachaG016ChargePayResult) null : new WebAPI.Response.GachaG016ChargePayResult((Dictionary<string, object>) json10));
        this.result = g016ChargePayResultList.ToArray();
        if (!json.ContainsKey("player_presents:delete"))
          return;
        SMManager.DeleteList<PlayerPresent>(((IEnumerable<object>) json["player_presents:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class GachaG016ChargePayResult : KeyCompare
    {
      public int reward_result_quantity;
      public bool is_new;
      public int reward_type_id;
      public int reward_result_id;

      public GachaG016ChargePayResult()
      {
      }

      public GachaG016ChargePayResult(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_result_quantity = (int) (long) json[nameof (reward_result_quantity)];
        this.is_new = (bool) json[nameof (is_new)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
        this.reward_result_id = (int) (long) json[nameof (reward_result_id)];
      }
    }

    [Serializable]
    public class GachaG017GiftMultiPay : KeyCompare
    {
      public PlayerMaterialGear[] player_material_gears;
      public PlayerItem[] player_items;
      public AnimationPatternMultiAfter[] animation_pattern_gems;
      public Player player;
      public PlayerUnit[] player_units;
      public PlayerUnit[] player_unit_reserves;
      public UnlockQuest[] unlock_quests;
      public TicketBanner[] g004_banner_info;
      public GachaModule[] gacha_modules;
      public PlayerUnitReservesCount player_unit_reserves_count;
      public string[] animation_pattern;
      public PlayerMaterialUnit[] player_material_units;
      public PlayerPresent[] player_presents;
      public WebAPI.Response.GachaG017GiftMultiPayResult[] result;

      public GachaG017GiftMultiPay()
      {
      }

      public GachaG017GiftMultiPay(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerMaterialGear> playerMaterialGearList = new List<PlayerMaterialGear>();
        foreach (object json1 in (List<object>) json[nameof (player_material_gears)])
          playerMaterialGearList.Add(json1 == null ? (PlayerMaterialGear) null : new PlayerMaterialGear((Dictionary<string, object>) json1));
        this.player_material_gears = playerMaterialGearList.ToArray();
        SMManager.UpdateList<PlayerMaterialGear>(this.player_material_gears);
        List<PlayerItem> playerItemList = new List<PlayerItem>();
        foreach (object json2 in (List<object>) json[nameof (player_items)])
          playerItemList.Add(json2 == null ? (PlayerItem) null : new PlayerItem((Dictionary<string, object>) json2));
        this.player_items = playerItemList.ToArray();
        SMManager.UpdateList<PlayerItem>(this.player_items);
        List<AnimationPatternMultiAfter> patternMultiAfterList = new List<AnimationPatternMultiAfter>();
        foreach (object json3 in (List<object>) json[nameof (animation_pattern_gems)])
          patternMultiAfterList.Add(json3 == null ? (AnimationPatternMultiAfter) null : new AnimationPatternMultiAfter((Dictionary<string, object>) json3));
        this.animation_pattern_gems = patternMultiAfterList.ToArray();
        this.player = json[nameof (player)] == null ? (Player) null : new Player((Dictionary<string, object>) json[nameof (player)]);
        SMManager.Change<Player>(this.player);
        List<PlayerUnit> playerUnitList1 = new List<PlayerUnit>();
        foreach (object json4 in (List<object>) json[nameof (player_units)])
          playerUnitList1.Add(json4 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json4));
        this.player_units = playerUnitList1.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_units);
        List<PlayerUnit> playerUnitList2 = new List<PlayerUnit>();
        foreach (object json5 in (List<object>) json[nameof (player_unit_reserves)])
          playerUnitList2.Add(json5 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json5));
        this.player_unit_reserves = playerUnitList2.ToArray();
        List<UnlockQuest> unlockQuestList = new List<UnlockQuest>();
        foreach (object json6 in (List<object>) json[nameof (unlock_quests)])
          unlockQuestList.Add(json6 == null ? (UnlockQuest) null : new UnlockQuest((Dictionary<string, object>) json6));
        this.unlock_quests = unlockQuestList.ToArray();
        List<TicketBanner> ticketBannerList = new List<TicketBanner>();
        foreach (object json7 in (List<object>) json[nameof (g004_banner_info)])
          ticketBannerList.Add(json7 == null ? (TicketBanner) null : new TicketBanner((Dictionary<string, object>) json7));
        this.g004_banner_info = ticketBannerList.ToArray();
        SMManager.UpdateList<TicketBanner>(this.g004_banner_info);
        List<GachaModule> gachaModuleList = new List<GachaModule>();
        foreach (object json8 in (List<object>) json[nameof (gacha_modules)])
          gachaModuleList.Add(json8 == null ? (GachaModule) null : new GachaModule((Dictionary<string, object>) json8));
        this.gacha_modules = gachaModuleList.ToArray();
        SMManager.UpdateList<GachaModule>(this.gacha_modules);
        this.player_unit_reserves_count = json[nameof (player_unit_reserves_count)] == null ? (PlayerUnitReservesCount) null : new PlayerUnitReservesCount((Dictionary<string, object>) json[nameof (player_unit_reserves_count)]);
        SMManager.Change<PlayerUnitReservesCount>(this.player_unit_reserves_count);
        this.animation_pattern = ((IEnumerable<object>) json[nameof (animation_pattern)]).Select<object, string>((Func<object, string>) (s => (string) s)).ToArray<string>();
        List<PlayerMaterialUnit> playerMaterialUnitList = new List<PlayerMaterialUnit>();
        foreach (object json9 in (List<object>) json[nameof (player_material_units)])
          playerMaterialUnitList.Add(json9 == null ? (PlayerMaterialUnit) null : new PlayerMaterialUnit((Dictionary<string, object>) json9));
        this.player_material_units = playerMaterialUnitList.ToArray();
        SMManager.UpdateList<PlayerMaterialUnit>(this.player_material_units);
        List<PlayerPresent> playerPresentList = new List<PlayerPresent>();
        foreach (object json10 in (List<object>) json[nameof (player_presents)])
          playerPresentList.Add(json10 == null ? (PlayerPresent) null : new PlayerPresent((Dictionary<string, object>) json10));
        this.player_presents = playerPresentList.ToArray();
        SMManager.UpdateList<PlayerPresent>(this.player_presents);
        List<WebAPI.Response.GachaG017GiftMultiPayResult> giftMultiPayResultList = new List<WebAPI.Response.GachaG017GiftMultiPayResult>();
        foreach (object json11 in (List<object>) json[nameof (result)])
          giftMultiPayResultList.Add(json11 == null ? (WebAPI.Response.GachaG017GiftMultiPayResult) null : new WebAPI.Response.GachaG017GiftMultiPayResult((Dictionary<string, object>) json11));
        this.result = giftMultiPayResultList.ToArray();
        if (!json.ContainsKey("player_presents:delete"))
          return;
        SMManager.DeleteList<PlayerPresent>(((IEnumerable<object>) json["player_presents:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class GachaG017GiftMultiPayResult : KeyCompare
    {
      public int reward_result_quantity;
      public bool is_new;
      public int reward_type_id;
      public int reward_result_id;

      public GachaG017GiftMultiPayResult()
      {
      }

      public GachaG017GiftMultiPayResult(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_result_quantity = (int) (long) json[nameof (reward_result_quantity)];
        this.is_new = (bool) json[nameof (is_new)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
        this.reward_result_id = (int) (long) json[nameof (reward_result_id)];
      }
    }

    [Serializable]
    public class GachaG017GiftPay : KeyCompare
    {
      public PlayerMaterialGear[] player_material_gears;
      public PlayerItem[] player_items;
      public Player player;
      public PlayerUnit[] player_units;
      public PlayerUnit[] player_unit_reserves;
      public UnlockQuest[] unlock_quests;
      public TicketBanner[] g004_banner_info;
      public GachaModule[] gacha_modules;
      public PlayerUnitReservesCount player_unit_reserves_count;
      public string[] animation_pattern;
      public PlayerMaterialUnit[] player_material_units;
      public PlayerPresent[] player_presents;
      public WebAPI.Response.GachaG017GiftPayResult[] result;

      public GachaG017GiftPay()
      {
      }

      public GachaG017GiftPay(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerMaterialGear> playerMaterialGearList = new List<PlayerMaterialGear>();
        foreach (object json1 in (List<object>) json[nameof (player_material_gears)])
          playerMaterialGearList.Add(json1 == null ? (PlayerMaterialGear) null : new PlayerMaterialGear((Dictionary<string, object>) json1));
        this.player_material_gears = playerMaterialGearList.ToArray();
        SMManager.UpdateList<PlayerMaterialGear>(this.player_material_gears);
        List<PlayerItem> playerItemList = new List<PlayerItem>();
        foreach (object json2 in (List<object>) json[nameof (player_items)])
          playerItemList.Add(json2 == null ? (PlayerItem) null : new PlayerItem((Dictionary<string, object>) json2));
        this.player_items = playerItemList.ToArray();
        SMManager.UpdateList<PlayerItem>(this.player_items);
        this.player = json[nameof (player)] == null ? (Player) null : new Player((Dictionary<string, object>) json[nameof (player)]);
        SMManager.Change<Player>(this.player);
        List<PlayerUnit> playerUnitList1 = new List<PlayerUnit>();
        foreach (object json3 in (List<object>) json[nameof (player_units)])
          playerUnitList1.Add(json3 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json3));
        this.player_units = playerUnitList1.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_units);
        List<PlayerUnit> playerUnitList2 = new List<PlayerUnit>();
        foreach (object json4 in (List<object>) json[nameof (player_unit_reserves)])
          playerUnitList2.Add(json4 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json4));
        this.player_unit_reserves = playerUnitList2.ToArray();
        List<UnlockQuest> unlockQuestList = new List<UnlockQuest>();
        foreach (object json5 in (List<object>) json[nameof (unlock_quests)])
          unlockQuestList.Add(json5 == null ? (UnlockQuest) null : new UnlockQuest((Dictionary<string, object>) json5));
        this.unlock_quests = unlockQuestList.ToArray();
        List<TicketBanner> ticketBannerList = new List<TicketBanner>();
        foreach (object json6 in (List<object>) json[nameof (g004_banner_info)])
          ticketBannerList.Add(json6 == null ? (TicketBanner) null : new TicketBanner((Dictionary<string, object>) json6));
        this.g004_banner_info = ticketBannerList.ToArray();
        SMManager.UpdateList<TicketBanner>(this.g004_banner_info);
        List<GachaModule> gachaModuleList = new List<GachaModule>();
        foreach (object json7 in (List<object>) json[nameof (gacha_modules)])
          gachaModuleList.Add(json7 == null ? (GachaModule) null : new GachaModule((Dictionary<string, object>) json7));
        this.gacha_modules = gachaModuleList.ToArray();
        SMManager.UpdateList<GachaModule>(this.gacha_modules);
        this.player_unit_reserves_count = json[nameof (player_unit_reserves_count)] == null ? (PlayerUnitReservesCount) null : new PlayerUnitReservesCount((Dictionary<string, object>) json[nameof (player_unit_reserves_count)]);
        SMManager.Change<PlayerUnitReservesCount>(this.player_unit_reserves_count);
        this.animation_pattern = ((IEnumerable<object>) json[nameof (animation_pattern)]).Select<object, string>((Func<object, string>) (s => (string) s)).ToArray<string>();
        List<PlayerMaterialUnit> playerMaterialUnitList = new List<PlayerMaterialUnit>();
        foreach (object json8 in (List<object>) json[nameof (player_material_units)])
          playerMaterialUnitList.Add(json8 == null ? (PlayerMaterialUnit) null : new PlayerMaterialUnit((Dictionary<string, object>) json8));
        this.player_material_units = playerMaterialUnitList.ToArray();
        SMManager.UpdateList<PlayerMaterialUnit>(this.player_material_units);
        List<PlayerPresent> playerPresentList = new List<PlayerPresent>();
        foreach (object json9 in (List<object>) json[nameof (player_presents)])
          playerPresentList.Add(json9 == null ? (PlayerPresent) null : new PlayerPresent((Dictionary<string, object>) json9));
        this.player_presents = playerPresentList.ToArray();
        SMManager.UpdateList<PlayerPresent>(this.player_presents);
        List<WebAPI.Response.GachaG017GiftPayResult> g017GiftPayResultList = new List<WebAPI.Response.GachaG017GiftPayResult>();
        foreach (object json10 in (List<object>) json[nameof (result)])
          g017GiftPayResultList.Add(json10 == null ? (WebAPI.Response.GachaG017GiftPayResult) null : new WebAPI.Response.GachaG017GiftPayResult((Dictionary<string, object>) json10));
        this.result = g017GiftPayResultList.ToArray();
        if (!json.ContainsKey("player_presents:delete"))
          return;
        SMManager.DeleteList<PlayerPresent>(((IEnumerable<object>) json["player_presents:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class GachaG017GiftPayResult : KeyCompare
    {
      public int reward_result_quantity;
      public bool is_new;
      public int reward_type_id;
      public int reward_result_id;

      public GachaG017GiftPayResult()
      {
      }

      public GachaG017GiftPayResult(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_result_quantity = (int) (long) json[nameof (reward_result_quantity)];
        this.is_new = (bool) json[nameof (is_new)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
        this.reward_result_id = (int) (long) json[nameof (reward_result_id)];
      }
    }

    [Serializable]
    public class GachaG018GiftMultiPay : KeyCompare
    {
      public PlayerMaterialGear[] player_material_gears;
      public PlayerItem[] player_items;
      public AnimationPatternMultiAfter[] animation_pattern_gems;
      public Player player;
      public PlayerUnit[] player_units;
      public PlayerUnit[] player_unit_reserves;
      public UnlockQuest[] unlock_quests;
      public TicketBanner[] g004_banner_info;
      public GachaModule[] gacha_modules;
      public PlayerUnitReservesCount player_unit_reserves_count;
      public string[] animation_pattern;
      public PlayerMaterialUnit[] player_material_units;
      public PlayerPresent[] player_presents;
      public WebAPI.Response.GachaG018GiftMultiPayResult[] result;

      public GachaG018GiftMultiPay()
      {
      }

      public GachaG018GiftMultiPay(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerMaterialGear> playerMaterialGearList = new List<PlayerMaterialGear>();
        foreach (object json1 in (List<object>) json[nameof (player_material_gears)])
          playerMaterialGearList.Add(json1 == null ? (PlayerMaterialGear) null : new PlayerMaterialGear((Dictionary<string, object>) json1));
        this.player_material_gears = playerMaterialGearList.ToArray();
        SMManager.UpdateList<PlayerMaterialGear>(this.player_material_gears);
        List<PlayerItem> playerItemList = new List<PlayerItem>();
        foreach (object json2 in (List<object>) json[nameof (player_items)])
          playerItemList.Add(json2 == null ? (PlayerItem) null : new PlayerItem((Dictionary<string, object>) json2));
        this.player_items = playerItemList.ToArray();
        SMManager.UpdateList<PlayerItem>(this.player_items);
        List<AnimationPatternMultiAfter> patternMultiAfterList = new List<AnimationPatternMultiAfter>();
        foreach (object json3 in (List<object>) json[nameof (animation_pattern_gems)])
          patternMultiAfterList.Add(json3 == null ? (AnimationPatternMultiAfter) null : new AnimationPatternMultiAfter((Dictionary<string, object>) json3));
        this.animation_pattern_gems = patternMultiAfterList.ToArray();
        this.player = json[nameof (player)] == null ? (Player) null : new Player((Dictionary<string, object>) json[nameof (player)]);
        SMManager.Change<Player>(this.player);
        List<PlayerUnit> playerUnitList1 = new List<PlayerUnit>();
        foreach (object json4 in (List<object>) json[nameof (player_units)])
          playerUnitList1.Add(json4 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json4));
        this.player_units = playerUnitList1.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_units);
        List<PlayerUnit> playerUnitList2 = new List<PlayerUnit>();
        foreach (object json5 in (List<object>) json[nameof (player_unit_reserves)])
          playerUnitList2.Add(json5 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json5));
        this.player_unit_reserves = playerUnitList2.ToArray();
        List<UnlockQuest> unlockQuestList = new List<UnlockQuest>();
        foreach (object json6 in (List<object>) json[nameof (unlock_quests)])
          unlockQuestList.Add(json6 == null ? (UnlockQuest) null : new UnlockQuest((Dictionary<string, object>) json6));
        this.unlock_quests = unlockQuestList.ToArray();
        List<TicketBanner> ticketBannerList = new List<TicketBanner>();
        foreach (object json7 in (List<object>) json[nameof (g004_banner_info)])
          ticketBannerList.Add(json7 == null ? (TicketBanner) null : new TicketBanner((Dictionary<string, object>) json7));
        this.g004_banner_info = ticketBannerList.ToArray();
        SMManager.UpdateList<TicketBanner>(this.g004_banner_info);
        List<GachaModule> gachaModuleList = new List<GachaModule>();
        foreach (object json8 in (List<object>) json[nameof (gacha_modules)])
          gachaModuleList.Add(json8 == null ? (GachaModule) null : new GachaModule((Dictionary<string, object>) json8));
        this.gacha_modules = gachaModuleList.ToArray();
        SMManager.UpdateList<GachaModule>(this.gacha_modules);
        this.player_unit_reserves_count = json[nameof (player_unit_reserves_count)] == null ? (PlayerUnitReservesCount) null : new PlayerUnitReservesCount((Dictionary<string, object>) json[nameof (player_unit_reserves_count)]);
        SMManager.Change<PlayerUnitReservesCount>(this.player_unit_reserves_count);
        this.animation_pattern = ((IEnumerable<object>) json[nameof (animation_pattern)]).Select<object, string>((Func<object, string>) (s => (string) s)).ToArray<string>();
        List<PlayerMaterialUnit> playerMaterialUnitList = new List<PlayerMaterialUnit>();
        foreach (object json9 in (List<object>) json[nameof (player_material_units)])
          playerMaterialUnitList.Add(json9 == null ? (PlayerMaterialUnit) null : new PlayerMaterialUnit((Dictionary<string, object>) json9));
        this.player_material_units = playerMaterialUnitList.ToArray();
        SMManager.UpdateList<PlayerMaterialUnit>(this.player_material_units);
        List<PlayerPresent> playerPresentList = new List<PlayerPresent>();
        foreach (object json10 in (List<object>) json[nameof (player_presents)])
          playerPresentList.Add(json10 == null ? (PlayerPresent) null : new PlayerPresent((Dictionary<string, object>) json10));
        this.player_presents = playerPresentList.ToArray();
        SMManager.UpdateList<PlayerPresent>(this.player_presents);
        List<WebAPI.Response.GachaG018GiftMultiPayResult> giftMultiPayResultList = new List<WebAPI.Response.GachaG018GiftMultiPayResult>();
        foreach (object json11 in (List<object>) json[nameof (result)])
          giftMultiPayResultList.Add(json11 == null ? (WebAPI.Response.GachaG018GiftMultiPayResult) null : new WebAPI.Response.GachaG018GiftMultiPayResult((Dictionary<string, object>) json11));
        this.result = giftMultiPayResultList.ToArray();
        if (!json.ContainsKey("player_presents:delete"))
          return;
        SMManager.DeleteList<PlayerPresent>(((IEnumerable<object>) json["player_presents:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class GachaG018GiftMultiPayResult : KeyCompare
    {
      public int reward_result_quantity;
      public bool is_new;
      public int reward_type_id;
      public int reward_result_id;

      public GachaG018GiftMultiPayResult()
      {
      }

      public GachaG018GiftMultiPayResult(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_result_quantity = (int) (long) json[nameof (reward_result_quantity)];
        this.is_new = (bool) json[nameof (is_new)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
        this.reward_result_id = (int) (long) json[nameof (reward_result_id)];
      }
    }

    [Serializable]
    public class GachaG018GiftPay : KeyCompare
    {
      public PlayerMaterialGear[] player_material_gears;
      public PlayerItem[] player_items;
      public Player player;
      public PlayerUnit[] player_units;
      public PlayerUnit[] player_unit_reserves;
      public UnlockQuest[] unlock_quests;
      public TicketBanner[] g004_banner_info;
      public GachaModule[] gacha_modules;
      public PlayerUnitReservesCount player_unit_reserves_count;
      public string[] animation_pattern;
      public PlayerMaterialUnit[] player_material_units;
      public PlayerPresent[] player_presents;
      public WebAPI.Response.GachaG018GiftPayResult[] result;

      public GachaG018GiftPay()
      {
      }

      public GachaG018GiftPay(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerMaterialGear> playerMaterialGearList = new List<PlayerMaterialGear>();
        foreach (object json1 in (List<object>) json[nameof (player_material_gears)])
          playerMaterialGearList.Add(json1 == null ? (PlayerMaterialGear) null : new PlayerMaterialGear((Dictionary<string, object>) json1));
        this.player_material_gears = playerMaterialGearList.ToArray();
        SMManager.UpdateList<PlayerMaterialGear>(this.player_material_gears);
        List<PlayerItem> playerItemList = new List<PlayerItem>();
        foreach (object json2 in (List<object>) json[nameof (player_items)])
          playerItemList.Add(json2 == null ? (PlayerItem) null : new PlayerItem((Dictionary<string, object>) json2));
        this.player_items = playerItemList.ToArray();
        SMManager.UpdateList<PlayerItem>(this.player_items);
        this.player = json[nameof (player)] == null ? (Player) null : new Player((Dictionary<string, object>) json[nameof (player)]);
        SMManager.Change<Player>(this.player);
        List<PlayerUnit> playerUnitList1 = new List<PlayerUnit>();
        foreach (object json3 in (List<object>) json[nameof (player_units)])
          playerUnitList1.Add(json3 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json3));
        this.player_units = playerUnitList1.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_units);
        List<PlayerUnit> playerUnitList2 = new List<PlayerUnit>();
        foreach (object json4 in (List<object>) json[nameof (player_unit_reserves)])
          playerUnitList2.Add(json4 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json4));
        this.player_unit_reserves = playerUnitList2.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_unit_reserves);
        List<UnlockQuest> unlockQuestList = new List<UnlockQuest>();
        foreach (object json5 in (List<object>) json[nameof (unlock_quests)])
          unlockQuestList.Add(json5 == null ? (UnlockQuest) null : new UnlockQuest((Dictionary<string, object>) json5));
        this.unlock_quests = unlockQuestList.ToArray();
        List<TicketBanner> ticketBannerList = new List<TicketBanner>();
        foreach (object json6 in (List<object>) json[nameof (g004_banner_info)])
          ticketBannerList.Add(json6 == null ? (TicketBanner) null : new TicketBanner((Dictionary<string, object>) json6));
        this.g004_banner_info = ticketBannerList.ToArray();
        SMManager.UpdateList<TicketBanner>(this.g004_banner_info);
        List<GachaModule> gachaModuleList = new List<GachaModule>();
        foreach (object json7 in (List<object>) json[nameof (gacha_modules)])
          gachaModuleList.Add(json7 == null ? (GachaModule) null : new GachaModule((Dictionary<string, object>) json7));
        this.gacha_modules = gachaModuleList.ToArray();
        SMManager.UpdateList<GachaModule>(this.gacha_modules);
        this.player_unit_reserves_count = json[nameof (player_unit_reserves_count)] == null ? (PlayerUnitReservesCount) null : new PlayerUnitReservesCount((Dictionary<string, object>) json[nameof (player_unit_reserves_count)]);
        SMManager.Change<PlayerUnitReservesCount>(this.player_unit_reserves_count);
        this.animation_pattern = ((IEnumerable<object>) json[nameof (animation_pattern)]).Select<object, string>((Func<object, string>) (s => (string) s)).ToArray<string>();
        List<PlayerMaterialUnit> playerMaterialUnitList = new List<PlayerMaterialUnit>();
        foreach (object json8 in (List<object>) json[nameof (player_material_units)])
          playerMaterialUnitList.Add(json8 == null ? (PlayerMaterialUnit) null : new PlayerMaterialUnit((Dictionary<string, object>) json8));
        this.player_material_units = playerMaterialUnitList.ToArray();
        SMManager.UpdateList<PlayerMaterialUnit>(this.player_material_units);
        List<PlayerPresent> playerPresentList = new List<PlayerPresent>();
        foreach (object json9 in (List<object>) json[nameof (player_presents)])
          playerPresentList.Add(json9 == null ? (PlayerPresent) null : new PlayerPresent((Dictionary<string, object>) json9));
        this.player_presents = playerPresentList.ToArray();
        SMManager.UpdateList<PlayerPresent>(this.player_presents);
        List<WebAPI.Response.GachaG018GiftPayResult> g018GiftPayResultList = new List<WebAPI.Response.GachaG018GiftPayResult>();
        foreach (object json10 in (List<object>) json[nameof (result)])
          g018GiftPayResultList.Add(json10 == null ? (WebAPI.Response.GachaG018GiftPayResult) null : new WebAPI.Response.GachaG018GiftPayResult((Dictionary<string, object>) json10));
        this.result = g018GiftPayResultList.ToArray();
        if (!json.ContainsKey("player_presents:delete"))
          return;
        SMManager.DeleteList<PlayerPresent>(((IEnumerable<object>) json["player_presents:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class GachaG018GiftPayResult : KeyCompare
    {
      public int reward_result_quantity;
      public bool is_new;
      public int reward_type_id;
      public int reward_result_id;

      public GachaG018GiftPayResult()
      {
      }

      public GachaG018GiftPayResult(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_result_quantity = (int) (long) json[nameof (reward_result_quantity)];
        this.is_new = (bool) json[nameof (is_new)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
        this.reward_result_id = (int) (long) json[nameof (reward_result_id)];
      }
    }

    [Serializable]
    public class GachaG019GiftMultiPay : KeyCompare
    {
      public PlayerMaterialGear[] player_material_gears;
      public PlayerItem[] player_items;
      public AnimationPatternMultiAfter[] animation_pattern_gems;
      public Player player;
      public PlayerUnit[] player_units;
      public PlayerUnit[] player_unit_reserves;
      public UnlockQuest[] unlock_quests;
      public TicketBanner[] g004_banner_info;
      public GachaModule[] gacha_modules;
      public PlayerUnitReservesCount player_unit_reserves_count;
      public string[] animation_pattern;
      public PlayerMaterialUnit[] player_material_units;
      public PlayerPresent[] player_presents;
      public WebAPI.Response.GachaG019GiftMultiPayResult[] result;

      public GachaG019GiftMultiPay()
      {
      }

      public GachaG019GiftMultiPay(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerMaterialGear> playerMaterialGearList = new List<PlayerMaterialGear>();
        foreach (object json1 in (List<object>) json[nameof (player_material_gears)])
          playerMaterialGearList.Add(json1 == null ? (PlayerMaterialGear) null : new PlayerMaterialGear((Dictionary<string, object>) json1));
        this.player_material_gears = playerMaterialGearList.ToArray();
        SMManager.UpdateList<PlayerMaterialGear>(this.player_material_gears);
        List<PlayerItem> playerItemList = new List<PlayerItem>();
        foreach (object json2 in (List<object>) json[nameof (player_items)])
          playerItemList.Add(json2 == null ? (PlayerItem) null : new PlayerItem((Dictionary<string, object>) json2));
        this.player_items = playerItemList.ToArray();
        SMManager.UpdateList<PlayerItem>(this.player_items);
        List<AnimationPatternMultiAfter> patternMultiAfterList = new List<AnimationPatternMultiAfter>();
        foreach (object json3 in (List<object>) json[nameof (animation_pattern_gems)])
          patternMultiAfterList.Add(json3 == null ? (AnimationPatternMultiAfter) null : new AnimationPatternMultiAfter((Dictionary<string, object>) json3));
        this.animation_pattern_gems = patternMultiAfterList.ToArray();
        this.player = json[nameof (player)] == null ? (Player) null : new Player((Dictionary<string, object>) json[nameof (player)]);
        SMManager.Change<Player>(this.player);
        List<PlayerUnit> playerUnitList1 = new List<PlayerUnit>();
        foreach (object json4 in (List<object>) json[nameof (player_units)])
          playerUnitList1.Add(json4 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json4));
        this.player_units = playerUnitList1.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_units);
        List<PlayerUnit> playerUnitList2 = new List<PlayerUnit>();
        foreach (object json5 in (List<object>) json[nameof (player_unit_reserves)])
          playerUnitList2.Add(json5 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json5));
        this.player_unit_reserves = playerUnitList2.ToArray();
        List<UnlockQuest> unlockQuestList = new List<UnlockQuest>();
        foreach (object json6 in (List<object>) json[nameof (unlock_quests)])
          unlockQuestList.Add(json6 == null ? (UnlockQuest) null : new UnlockQuest((Dictionary<string, object>) json6));
        this.unlock_quests = unlockQuestList.ToArray();
        List<TicketBanner> ticketBannerList = new List<TicketBanner>();
        foreach (object json7 in (List<object>) json[nameof (g004_banner_info)])
          ticketBannerList.Add(json7 == null ? (TicketBanner) null : new TicketBanner((Dictionary<string, object>) json7));
        this.g004_banner_info = ticketBannerList.ToArray();
        SMManager.UpdateList<TicketBanner>(this.g004_banner_info);
        List<GachaModule> gachaModuleList = new List<GachaModule>();
        foreach (object json8 in (List<object>) json[nameof (gacha_modules)])
          gachaModuleList.Add(json8 == null ? (GachaModule) null : new GachaModule((Dictionary<string, object>) json8));
        this.gacha_modules = gachaModuleList.ToArray();
        SMManager.UpdateList<GachaModule>(this.gacha_modules);
        this.player_unit_reserves_count = json[nameof (player_unit_reserves_count)] == null ? (PlayerUnitReservesCount) null : new PlayerUnitReservesCount((Dictionary<string, object>) json[nameof (player_unit_reserves_count)]);
        SMManager.Change<PlayerUnitReservesCount>(this.player_unit_reserves_count);
        this.animation_pattern = ((IEnumerable<object>) json[nameof (animation_pattern)]).Select<object, string>((Func<object, string>) (s => (string) s)).ToArray<string>();
        List<PlayerMaterialUnit> playerMaterialUnitList = new List<PlayerMaterialUnit>();
        foreach (object json9 in (List<object>) json[nameof (player_material_units)])
          playerMaterialUnitList.Add(json9 == null ? (PlayerMaterialUnit) null : new PlayerMaterialUnit((Dictionary<string, object>) json9));
        this.player_material_units = playerMaterialUnitList.ToArray();
        SMManager.UpdateList<PlayerMaterialUnit>(this.player_material_units);
        List<PlayerPresent> playerPresentList = new List<PlayerPresent>();
        foreach (object json10 in (List<object>) json[nameof (player_presents)])
          playerPresentList.Add(json10 == null ? (PlayerPresent) null : new PlayerPresent((Dictionary<string, object>) json10));
        this.player_presents = playerPresentList.ToArray();
        SMManager.UpdateList<PlayerPresent>(this.player_presents);
        List<WebAPI.Response.GachaG019GiftMultiPayResult> giftMultiPayResultList = new List<WebAPI.Response.GachaG019GiftMultiPayResult>();
        foreach (object json11 in (List<object>) json[nameof (result)])
          giftMultiPayResultList.Add(json11 == null ? (WebAPI.Response.GachaG019GiftMultiPayResult) null : new WebAPI.Response.GachaG019GiftMultiPayResult((Dictionary<string, object>) json11));
        this.result = giftMultiPayResultList.ToArray();
        if (!json.ContainsKey("player_presents:delete"))
          return;
        SMManager.DeleteList<PlayerPresent>(((IEnumerable<object>) json["player_presents:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class GachaG019GiftMultiPayResult : KeyCompare
    {
      public int reward_result_quantity;
      public bool is_new;
      public int reward_type_id;
      public int reward_result_id;

      public GachaG019GiftMultiPayResult()
      {
      }

      public GachaG019GiftMultiPayResult(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_result_quantity = (int) (long) json[nameof (reward_result_quantity)];
        this.is_new = (bool) json[nameof (is_new)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
        this.reward_result_id = (int) (long) json[nameof (reward_result_id)];
      }
    }

    [Serializable]
    public class GachaG019GiftPay : KeyCompare
    {
      public PlayerMaterialGear[] player_material_gears;
      public PlayerItem[] player_items;
      public Player player;
      public PlayerUnit[] player_units;
      public PlayerUnit[] player_unit_reserves;
      public UnlockQuest[] unlock_quests;
      public TicketBanner[] g004_banner_info;
      public GachaModule[] gacha_modules;
      public PlayerUnitReservesCount player_unit_reserves_count;
      public string[] animation_pattern;
      public PlayerMaterialUnit[] player_material_units;
      public PlayerPresent[] player_presents;
      public WebAPI.Response.GachaG019GiftPayResult[] result;

      public GachaG019GiftPay()
      {
      }

      public GachaG019GiftPay(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerMaterialGear> playerMaterialGearList = new List<PlayerMaterialGear>();
        foreach (object json1 in (List<object>) json[nameof (player_material_gears)])
          playerMaterialGearList.Add(json1 == null ? (PlayerMaterialGear) null : new PlayerMaterialGear((Dictionary<string, object>) json1));
        this.player_material_gears = playerMaterialGearList.ToArray();
        SMManager.UpdateList<PlayerMaterialGear>(this.player_material_gears);
        List<PlayerItem> playerItemList = new List<PlayerItem>();
        foreach (object json2 in (List<object>) json[nameof (player_items)])
          playerItemList.Add(json2 == null ? (PlayerItem) null : new PlayerItem((Dictionary<string, object>) json2));
        this.player_items = playerItemList.ToArray();
        SMManager.UpdateList<PlayerItem>(this.player_items);
        this.player = json[nameof (player)] == null ? (Player) null : new Player((Dictionary<string, object>) json[nameof (player)]);
        SMManager.Change<Player>(this.player);
        List<PlayerUnit> playerUnitList1 = new List<PlayerUnit>();
        foreach (object json3 in (List<object>) json[nameof (player_units)])
          playerUnitList1.Add(json3 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json3));
        this.player_units = playerUnitList1.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_units);
        List<PlayerUnit> playerUnitList2 = new List<PlayerUnit>();
        foreach (object json4 in (List<object>) json[nameof (player_unit_reserves)])
          playerUnitList2.Add(json4 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json4));
        this.player_unit_reserves = playerUnitList2.ToArray();
        List<UnlockQuest> unlockQuestList = new List<UnlockQuest>();
        foreach (object json5 in (List<object>) json[nameof (unlock_quests)])
          unlockQuestList.Add(json5 == null ? (UnlockQuest) null : new UnlockQuest((Dictionary<string, object>) json5));
        this.unlock_quests = unlockQuestList.ToArray();
        List<TicketBanner> ticketBannerList = new List<TicketBanner>();
        foreach (object json6 in (List<object>) json[nameof (g004_banner_info)])
          ticketBannerList.Add(json6 == null ? (TicketBanner) null : new TicketBanner((Dictionary<string, object>) json6));
        this.g004_banner_info = ticketBannerList.ToArray();
        SMManager.UpdateList<TicketBanner>(this.g004_banner_info);
        List<GachaModule> gachaModuleList = new List<GachaModule>();
        foreach (object json7 in (List<object>) json[nameof (gacha_modules)])
          gachaModuleList.Add(json7 == null ? (GachaModule) null : new GachaModule((Dictionary<string, object>) json7));
        this.gacha_modules = gachaModuleList.ToArray();
        SMManager.UpdateList<GachaModule>(this.gacha_modules);
        this.player_unit_reserves_count = json[nameof (player_unit_reserves_count)] == null ? (PlayerUnitReservesCount) null : new PlayerUnitReservesCount((Dictionary<string, object>) json[nameof (player_unit_reserves_count)]);
        SMManager.Change<PlayerUnitReservesCount>(this.player_unit_reserves_count);
        this.animation_pattern = ((IEnumerable<object>) json[nameof (animation_pattern)]).Select<object, string>((Func<object, string>) (s => (string) s)).ToArray<string>();
        List<PlayerMaterialUnit> playerMaterialUnitList = new List<PlayerMaterialUnit>();
        foreach (object json8 in (List<object>) json[nameof (player_material_units)])
          playerMaterialUnitList.Add(json8 == null ? (PlayerMaterialUnit) null : new PlayerMaterialUnit((Dictionary<string, object>) json8));
        this.player_material_units = playerMaterialUnitList.ToArray();
        SMManager.UpdateList<PlayerMaterialUnit>(this.player_material_units);
        List<PlayerPresent> playerPresentList = new List<PlayerPresent>();
        foreach (object json9 in (List<object>) json[nameof (player_presents)])
          playerPresentList.Add(json9 == null ? (PlayerPresent) null : new PlayerPresent((Dictionary<string, object>) json9));
        this.player_presents = playerPresentList.ToArray();
        SMManager.UpdateList<PlayerPresent>(this.player_presents);
        List<WebAPI.Response.GachaG019GiftPayResult> g019GiftPayResultList = new List<WebAPI.Response.GachaG019GiftPayResult>();
        foreach (object json10 in (List<object>) json[nameof (result)])
          g019GiftPayResultList.Add(json10 == null ? (WebAPI.Response.GachaG019GiftPayResult) null : new WebAPI.Response.GachaG019GiftPayResult((Dictionary<string, object>) json10));
        this.result = g019GiftPayResultList.ToArray();
        if (!json.ContainsKey("player_presents:delete"))
          return;
        SMManager.DeleteList<PlayerPresent>(((IEnumerable<object>) json["player_presents:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class GachaG019GiftPayResult : KeyCompare
    {
      public int reward_result_quantity;
      public bool is_new;
      public int reward_type_id;
      public int reward_result_id;

      public GachaG019GiftPayResult()
      {
      }

      public GachaG019GiftPayResult(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_result_quantity = (int) (long) json[nameof (reward_result_quantity)];
        this.is_new = (bool) json[nameof (is_new)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
        this.reward_result_id = (int) (long) json[nameof (reward_result_id)];
      }
    }

    [Serializable]
    public class GachaG020GiftMultiPay : KeyCompare
    {
      public PlayerMaterialGear[] player_material_gears;
      public PlayerItem[] player_items;
      public AnimationPatternMultiAfter[] animation_pattern_gems;
      public Player player;
      public PlayerUnit[] player_units;
      public PlayerUnit[] player_unit_reserves;
      public UnlockQuest[] unlock_quests;
      public TicketBanner[] g004_banner_info;
      public GachaModule[] gacha_modules;
      public PlayerUnitReservesCount player_unit_reserves_count;
      public string[] animation_pattern;
      public PlayerMaterialUnit[] player_material_units;
      public PlayerPresent[] player_presents;
      public WebAPI.Response.GachaG020GiftMultiPayResult[] result;

      public GachaG020GiftMultiPay()
      {
      }

      public GachaG020GiftMultiPay(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerMaterialGear> playerMaterialGearList = new List<PlayerMaterialGear>();
        foreach (object json1 in (List<object>) json[nameof (player_material_gears)])
          playerMaterialGearList.Add(json1 == null ? (PlayerMaterialGear) null : new PlayerMaterialGear((Dictionary<string, object>) json1));
        this.player_material_gears = playerMaterialGearList.ToArray();
        SMManager.UpdateList<PlayerMaterialGear>(this.player_material_gears);
        List<PlayerItem> playerItemList = new List<PlayerItem>();
        foreach (object json2 in (List<object>) json[nameof (player_items)])
          playerItemList.Add(json2 == null ? (PlayerItem) null : new PlayerItem((Dictionary<string, object>) json2));
        this.player_items = playerItemList.ToArray();
        SMManager.UpdateList<PlayerItem>(this.player_items);
        List<AnimationPatternMultiAfter> patternMultiAfterList = new List<AnimationPatternMultiAfter>();
        foreach (object json3 in (List<object>) json[nameof (animation_pattern_gems)])
          patternMultiAfterList.Add(json3 == null ? (AnimationPatternMultiAfter) null : new AnimationPatternMultiAfter((Dictionary<string, object>) json3));
        this.animation_pattern_gems = patternMultiAfterList.ToArray();
        this.player = json[nameof (player)] == null ? (Player) null : new Player((Dictionary<string, object>) json[nameof (player)]);
        SMManager.Change<Player>(this.player);
        List<PlayerUnit> playerUnitList1 = new List<PlayerUnit>();
        foreach (object json4 in (List<object>) json[nameof (player_units)])
          playerUnitList1.Add(json4 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json4));
        this.player_units = playerUnitList1.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_units);
        List<PlayerUnit> playerUnitList2 = new List<PlayerUnit>();
        foreach (object json5 in (List<object>) json[nameof (player_unit_reserves)])
          playerUnitList2.Add(json5 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json5));
        this.player_unit_reserves = playerUnitList2.ToArray();
        List<UnlockQuest> unlockQuestList = new List<UnlockQuest>();
        foreach (object json6 in (List<object>) json[nameof (unlock_quests)])
          unlockQuestList.Add(json6 == null ? (UnlockQuest) null : new UnlockQuest((Dictionary<string, object>) json6));
        this.unlock_quests = unlockQuestList.ToArray();
        List<TicketBanner> ticketBannerList = new List<TicketBanner>();
        foreach (object json7 in (List<object>) json[nameof (g004_banner_info)])
          ticketBannerList.Add(json7 == null ? (TicketBanner) null : new TicketBanner((Dictionary<string, object>) json7));
        this.g004_banner_info = ticketBannerList.ToArray();
        SMManager.UpdateList<TicketBanner>(this.g004_banner_info);
        List<GachaModule> gachaModuleList = new List<GachaModule>();
        foreach (object json8 in (List<object>) json[nameof (gacha_modules)])
          gachaModuleList.Add(json8 == null ? (GachaModule) null : new GachaModule((Dictionary<string, object>) json8));
        this.gacha_modules = gachaModuleList.ToArray();
        SMManager.UpdateList<GachaModule>(this.gacha_modules);
        this.player_unit_reserves_count = json[nameof (player_unit_reserves_count)] == null ? (PlayerUnitReservesCount) null : new PlayerUnitReservesCount((Dictionary<string, object>) json[nameof (player_unit_reserves_count)]);
        SMManager.Change<PlayerUnitReservesCount>(this.player_unit_reserves_count);
        this.animation_pattern = ((IEnumerable<object>) json[nameof (animation_pattern)]).Select<object, string>((Func<object, string>) (s => (string) s)).ToArray<string>();
        List<PlayerMaterialUnit> playerMaterialUnitList = new List<PlayerMaterialUnit>();
        foreach (object json9 in (List<object>) json[nameof (player_material_units)])
          playerMaterialUnitList.Add(json9 == null ? (PlayerMaterialUnit) null : new PlayerMaterialUnit((Dictionary<string, object>) json9));
        this.player_material_units = playerMaterialUnitList.ToArray();
        SMManager.UpdateList<PlayerMaterialUnit>(this.player_material_units);
        List<PlayerPresent> playerPresentList = new List<PlayerPresent>();
        foreach (object json10 in (List<object>) json[nameof (player_presents)])
          playerPresentList.Add(json10 == null ? (PlayerPresent) null : new PlayerPresent((Dictionary<string, object>) json10));
        this.player_presents = playerPresentList.ToArray();
        SMManager.UpdateList<PlayerPresent>(this.player_presents);
        List<WebAPI.Response.GachaG020GiftMultiPayResult> giftMultiPayResultList = new List<WebAPI.Response.GachaG020GiftMultiPayResult>();
        foreach (object json11 in (List<object>) json[nameof (result)])
          giftMultiPayResultList.Add(json11 == null ? (WebAPI.Response.GachaG020GiftMultiPayResult) null : new WebAPI.Response.GachaG020GiftMultiPayResult((Dictionary<string, object>) json11));
        this.result = giftMultiPayResultList.ToArray();
        if (!json.ContainsKey("player_presents:delete"))
          return;
        SMManager.DeleteList<PlayerPresent>(((IEnumerable<object>) json["player_presents:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class GachaG020GiftMultiPayResult : KeyCompare
    {
      public int reward_result_quantity;
      public bool is_new;
      public int reward_type_id;
      public int reward_result_id;

      public GachaG020GiftMultiPayResult()
      {
      }

      public GachaG020GiftMultiPayResult(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_result_quantity = (int) (long) json[nameof (reward_result_quantity)];
        this.is_new = (bool) json[nameof (is_new)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
        this.reward_result_id = (int) (long) json[nameof (reward_result_id)];
      }
    }

    [Serializable]
    public class GachaG020GiftPay : KeyCompare
    {
      public PlayerMaterialGear[] player_material_gears;
      public PlayerItem[] player_items;
      public Player player;
      public PlayerUnit[] player_units;
      public PlayerUnit[] player_unit_reserves;
      public UnlockQuest[] unlock_quests;
      public TicketBanner[] g004_banner_info;
      public GachaModule[] gacha_modules;
      public PlayerUnitReservesCount player_unit_reserves_count;
      public string[] animation_pattern;
      public PlayerMaterialUnit[] player_material_units;
      public PlayerPresent[] player_presents;
      public WebAPI.Response.GachaG020GiftPayResult[] result;

      public GachaG020GiftPay()
      {
      }

      public GachaG020GiftPay(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerMaterialGear> playerMaterialGearList = new List<PlayerMaterialGear>();
        foreach (object json1 in (List<object>) json[nameof (player_material_gears)])
          playerMaterialGearList.Add(json1 == null ? (PlayerMaterialGear) null : new PlayerMaterialGear((Dictionary<string, object>) json1));
        this.player_material_gears = playerMaterialGearList.ToArray();
        SMManager.UpdateList<PlayerMaterialGear>(this.player_material_gears);
        List<PlayerItem> playerItemList = new List<PlayerItem>();
        foreach (object json2 in (List<object>) json[nameof (player_items)])
          playerItemList.Add(json2 == null ? (PlayerItem) null : new PlayerItem((Dictionary<string, object>) json2));
        this.player_items = playerItemList.ToArray();
        SMManager.UpdateList<PlayerItem>(this.player_items);
        this.player = json[nameof (player)] == null ? (Player) null : new Player((Dictionary<string, object>) json[nameof (player)]);
        SMManager.Change<Player>(this.player);
        List<PlayerUnit> playerUnitList1 = new List<PlayerUnit>();
        foreach (object json3 in (List<object>) json[nameof (player_units)])
          playerUnitList1.Add(json3 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json3));
        this.player_units = playerUnitList1.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_units);
        List<PlayerUnit> playerUnitList2 = new List<PlayerUnit>();
        foreach (object json4 in (List<object>) json[nameof (player_unit_reserves)])
          playerUnitList2.Add(json4 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json4));
        this.player_unit_reserves = playerUnitList2.ToArray();
        List<UnlockQuest> unlockQuestList = new List<UnlockQuest>();
        foreach (object json5 in (List<object>) json[nameof (unlock_quests)])
          unlockQuestList.Add(json5 == null ? (UnlockQuest) null : new UnlockQuest((Dictionary<string, object>) json5));
        this.unlock_quests = unlockQuestList.ToArray();
        List<TicketBanner> ticketBannerList = new List<TicketBanner>();
        foreach (object json6 in (List<object>) json[nameof (g004_banner_info)])
          ticketBannerList.Add(json6 == null ? (TicketBanner) null : new TicketBanner((Dictionary<string, object>) json6));
        this.g004_banner_info = ticketBannerList.ToArray();
        SMManager.UpdateList<TicketBanner>(this.g004_banner_info);
        List<GachaModule> gachaModuleList = new List<GachaModule>();
        foreach (object json7 in (List<object>) json[nameof (gacha_modules)])
          gachaModuleList.Add(json7 == null ? (GachaModule) null : new GachaModule((Dictionary<string, object>) json7));
        this.gacha_modules = gachaModuleList.ToArray();
        SMManager.UpdateList<GachaModule>(this.gacha_modules);
        this.player_unit_reserves_count = json[nameof (player_unit_reserves_count)] == null ? (PlayerUnitReservesCount) null : new PlayerUnitReservesCount((Dictionary<string, object>) json[nameof (player_unit_reserves_count)]);
        SMManager.Change<PlayerUnitReservesCount>(this.player_unit_reserves_count);
        this.animation_pattern = ((IEnumerable<object>) json[nameof (animation_pattern)]).Select<object, string>((Func<object, string>) (s => (string) s)).ToArray<string>();
        List<PlayerMaterialUnit> playerMaterialUnitList = new List<PlayerMaterialUnit>();
        foreach (object json8 in (List<object>) json[nameof (player_material_units)])
          playerMaterialUnitList.Add(json8 == null ? (PlayerMaterialUnit) null : new PlayerMaterialUnit((Dictionary<string, object>) json8));
        this.player_material_units = playerMaterialUnitList.ToArray();
        SMManager.UpdateList<PlayerMaterialUnit>(this.player_material_units);
        List<PlayerPresent> playerPresentList = new List<PlayerPresent>();
        foreach (object json9 in (List<object>) json[nameof (player_presents)])
          playerPresentList.Add(json9 == null ? (PlayerPresent) null : new PlayerPresent((Dictionary<string, object>) json9));
        this.player_presents = playerPresentList.ToArray();
        SMManager.UpdateList<PlayerPresent>(this.player_presents);
        List<WebAPI.Response.GachaG020GiftPayResult> g020GiftPayResultList = new List<WebAPI.Response.GachaG020GiftPayResult>();
        foreach (object json10 in (List<object>) json[nameof (result)])
          g020GiftPayResultList.Add(json10 == null ? (WebAPI.Response.GachaG020GiftPayResult) null : new WebAPI.Response.GachaG020GiftPayResult((Dictionary<string, object>) json10));
        this.result = g020GiftPayResultList.ToArray();
        if (!json.ContainsKey("player_presents:delete"))
          return;
        SMManager.DeleteList<PlayerPresent>(((IEnumerable<object>) json["player_presents:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class GachaG020GiftPayResult : KeyCompare
    {
      public int reward_result_quantity;
      public bool is_new;
      public int reward_type_id;
      public int reward_result_id;

      public GachaG020GiftPayResult()
      {
      }

      public GachaG020GiftPayResult(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_result_quantity = (int) (long) json[nameof (reward_result_quantity)];
        this.is_new = (bool) json[nameof (is_new)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
        this.reward_result_id = (int) (long) json[nameof (reward_result_id)];
      }
    }

    [Serializable]
    public class GachaG021FreeMultiPay : KeyCompare
    {
      public PlayerMaterialGear[] player_material_gears;
      public PlayerItem[] player_items;
      public AnimationPatternMultiAfter[] animation_pattern_gems;
      public Player player;
      public PlayerUnit[] player_units;
      public PlayerUnit[] player_unit_reserves;
      public UnlockQuest[] unlock_quests;
      public TicketBanner[] g004_banner_info;
      public GachaModule[] gacha_modules;
      public PlayerUnitReservesCount player_unit_reserves_count;
      public string[] animation_pattern;
      public PlayerMaterialUnit[] player_material_units;
      public PlayerPresent[] player_presents;
      public WebAPI.Response.GachaG021FreeMultiPayResult[] result;

      public GachaG021FreeMultiPay()
      {
      }

      public GachaG021FreeMultiPay(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerMaterialGear> playerMaterialGearList = new List<PlayerMaterialGear>();
        foreach (object json1 in (List<object>) json[nameof (player_material_gears)])
          playerMaterialGearList.Add(json1 == null ? (PlayerMaterialGear) null : new PlayerMaterialGear((Dictionary<string, object>) json1));
        this.player_material_gears = playerMaterialGearList.ToArray();
        SMManager.UpdateList<PlayerMaterialGear>(this.player_material_gears);
        List<PlayerItem> playerItemList = new List<PlayerItem>();
        foreach (object json2 in (List<object>) json[nameof (player_items)])
          playerItemList.Add(json2 == null ? (PlayerItem) null : new PlayerItem((Dictionary<string, object>) json2));
        this.player_items = playerItemList.ToArray();
        SMManager.UpdateList<PlayerItem>(this.player_items);
        List<AnimationPatternMultiAfter> patternMultiAfterList = new List<AnimationPatternMultiAfter>();
        foreach (object json3 in (List<object>) json[nameof (animation_pattern_gems)])
          patternMultiAfterList.Add(json3 == null ? (AnimationPatternMultiAfter) null : new AnimationPatternMultiAfter((Dictionary<string, object>) json3));
        this.animation_pattern_gems = patternMultiAfterList.ToArray();
        this.player = json[nameof (player)] == null ? (Player) null : new Player((Dictionary<string, object>) json[nameof (player)]);
        SMManager.Change<Player>(this.player);
        List<PlayerUnit> playerUnitList1 = new List<PlayerUnit>();
        foreach (object json4 in (List<object>) json[nameof (player_units)])
          playerUnitList1.Add(json4 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json4));
        this.player_units = playerUnitList1.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_units);
        List<PlayerUnit> playerUnitList2 = new List<PlayerUnit>();
        foreach (object json5 in (List<object>) json[nameof (player_unit_reserves)])
          playerUnitList2.Add(json5 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json5));
        this.player_unit_reserves = playerUnitList2.ToArray();
        List<UnlockQuest> unlockQuestList = new List<UnlockQuest>();
        foreach (object json6 in (List<object>) json[nameof (unlock_quests)])
          unlockQuestList.Add(json6 == null ? (UnlockQuest) null : new UnlockQuest((Dictionary<string, object>) json6));
        this.unlock_quests = unlockQuestList.ToArray();
        List<TicketBanner> ticketBannerList = new List<TicketBanner>();
        foreach (object json7 in (List<object>) json[nameof (g004_banner_info)])
          ticketBannerList.Add(json7 == null ? (TicketBanner) null : new TicketBanner((Dictionary<string, object>) json7));
        this.g004_banner_info = ticketBannerList.ToArray();
        SMManager.UpdateList<TicketBanner>(this.g004_banner_info);
        List<GachaModule> gachaModuleList = new List<GachaModule>();
        foreach (object json8 in (List<object>) json[nameof (gacha_modules)])
          gachaModuleList.Add(json8 == null ? (GachaModule) null : new GachaModule((Dictionary<string, object>) json8));
        this.gacha_modules = gachaModuleList.ToArray();
        SMManager.UpdateList<GachaModule>(this.gacha_modules);
        this.player_unit_reserves_count = json[nameof (player_unit_reserves_count)] == null ? (PlayerUnitReservesCount) null : new PlayerUnitReservesCount((Dictionary<string, object>) json[nameof (player_unit_reserves_count)]);
        SMManager.Change<PlayerUnitReservesCount>(this.player_unit_reserves_count);
        this.animation_pattern = ((IEnumerable<object>) json[nameof (animation_pattern)]).Select<object, string>((Func<object, string>) (s => (string) s)).ToArray<string>();
        List<PlayerMaterialUnit> playerMaterialUnitList = new List<PlayerMaterialUnit>();
        foreach (object json9 in (List<object>) json[nameof (player_material_units)])
          playerMaterialUnitList.Add(json9 == null ? (PlayerMaterialUnit) null : new PlayerMaterialUnit((Dictionary<string, object>) json9));
        this.player_material_units = playerMaterialUnitList.ToArray();
        SMManager.UpdateList<PlayerMaterialUnit>(this.player_material_units);
        List<PlayerPresent> playerPresentList = new List<PlayerPresent>();
        foreach (object json10 in (List<object>) json[nameof (player_presents)])
          playerPresentList.Add(json10 == null ? (PlayerPresent) null : new PlayerPresent((Dictionary<string, object>) json10));
        this.player_presents = playerPresentList.ToArray();
        SMManager.UpdateList<PlayerPresent>(this.player_presents);
        List<WebAPI.Response.GachaG021FreeMultiPayResult> freeMultiPayResultList = new List<WebAPI.Response.GachaG021FreeMultiPayResult>();
        foreach (object json11 in (List<object>) json[nameof (result)])
          freeMultiPayResultList.Add(json11 == null ? (WebAPI.Response.GachaG021FreeMultiPayResult) null : new WebAPI.Response.GachaG021FreeMultiPayResult((Dictionary<string, object>) json11));
        this.result = freeMultiPayResultList.ToArray();
        if (!json.ContainsKey("player_presents:delete"))
          return;
        SMManager.DeleteList<PlayerPresent>(((IEnumerable<object>) json["player_presents:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class GachaG021FreeMultiPayResult : KeyCompare
    {
      public int reward_result_quantity;
      public bool is_new;
      public int reward_type_id;
      public int reward_result_id;

      public GachaG021FreeMultiPayResult()
      {
      }

      public GachaG021FreeMultiPayResult(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_result_quantity = (int) (long) json[nameof (reward_result_quantity)];
        this.is_new = (bool) json[nameof (is_new)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
        this.reward_result_id = (int) (long) json[nameof (reward_result_id)];
      }
    }

    [Serializable]
    public class GachaG021FreePay : KeyCompare
    {
      public PlayerMaterialGear[] player_material_gears;
      public PlayerItem[] player_items;
      public Player player;
      public PlayerUnit[] player_units;
      public PlayerUnit[] player_unit_reserves;
      public UnlockQuest[] unlock_quests;
      public TicketBanner[] g004_banner_info;
      public GachaModule[] gacha_modules;
      public PlayerUnitReservesCount player_unit_reserves_count;
      public string[] animation_pattern;
      public PlayerMaterialUnit[] player_material_units;
      public PlayerPresent[] player_presents;
      public WebAPI.Response.GachaG021FreePayResult[] result;

      public GachaG021FreePay()
      {
      }

      public GachaG021FreePay(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerMaterialGear> playerMaterialGearList = new List<PlayerMaterialGear>();
        foreach (object json1 in (List<object>) json[nameof (player_material_gears)])
          playerMaterialGearList.Add(json1 == null ? (PlayerMaterialGear) null : new PlayerMaterialGear((Dictionary<string, object>) json1));
        this.player_material_gears = playerMaterialGearList.ToArray();
        SMManager.UpdateList<PlayerMaterialGear>(this.player_material_gears);
        List<PlayerItem> playerItemList = new List<PlayerItem>();
        foreach (object json2 in (List<object>) json[nameof (player_items)])
          playerItemList.Add(json2 == null ? (PlayerItem) null : new PlayerItem((Dictionary<string, object>) json2));
        this.player_items = playerItemList.ToArray();
        SMManager.UpdateList<PlayerItem>(this.player_items);
        this.player = json[nameof (player)] == null ? (Player) null : new Player((Dictionary<string, object>) json[nameof (player)]);
        SMManager.Change<Player>(this.player);
        List<PlayerUnit> playerUnitList1 = new List<PlayerUnit>();
        foreach (object json3 in (List<object>) json[nameof (player_units)])
          playerUnitList1.Add(json3 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json3));
        this.player_units = playerUnitList1.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_units);
        List<PlayerUnit> playerUnitList2 = new List<PlayerUnit>();
        foreach (object json4 in (List<object>) json[nameof (player_unit_reserves)])
          playerUnitList2.Add(json4 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json4));
        this.player_unit_reserves = playerUnitList2.ToArray();
        List<UnlockQuest> unlockQuestList = new List<UnlockQuest>();
        foreach (object json5 in (List<object>) json[nameof (unlock_quests)])
          unlockQuestList.Add(json5 == null ? (UnlockQuest) null : new UnlockQuest((Dictionary<string, object>) json5));
        this.unlock_quests = unlockQuestList.ToArray();
        List<TicketBanner> ticketBannerList = new List<TicketBanner>();
        foreach (object json6 in (List<object>) json[nameof (g004_banner_info)])
          ticketBannerList.Add(json6 == null ? (TicketBanner) null : new TicketBanner((Dictionary<string, object>) json6));
        this.g004_banner_info = ticketBannerList.ToArray();
        SMManager.UpdateList<TicketBanner>(this.g004_banner_info);
        List<GachaModule> gachaModuleList = new List<GachaModule>();
        foreach (object json7 in (List<object>) json[nameof (gacha_modules)])
          gachaModuleList.Add(json7 == null ? (GachaModule) null : new GachaModule((Dictionary<string, object>) json7));
        this.gacha_modules = gachaModuleList.ToArray();
        SMManager.UpdateList<GachaModule>(this.gacha_modules);
        this.player_unit_reserves_count = json[nameof (player_unit_reserves_count)] == null ? (PlayerUnitReservesCount) null : new PlayerUnitReservesCount((Dictionary<string, object>) json[nameof (player_unit_reserves_count)]);
        SMManager.Change<PlayerUnitReservesCount>(this.player_unit_reserves_count);
        this.animation_pattern = ((IEnumerable<object>) json[nameof (animation_pattern)]).Select<object, string>((Func<object, string>) (s => (string) s)).ToArray<string>();
        List<PlayerMaterialUnit> playerMaterialUnitList = new List<PlayerMaterialUnit>();
        foreach (object json8 in (List<object>) json[nameof (player_material_units)])
          playerMaterialUnitList.Add(json8 == null ? (PlayerMaterialUnit) null : new PlayerMaterialUnit((Dictionary<string, object>) json8));
        this.player_material_units = playerMaterialUnitList.ToArray();
        SMManager.UpdateList<PlayerMaterialUnit>(this.player_material_units);
        List<PlayerPresent> playerPresentList = new List<PlayerPresent>();
        foreach (object json9 in (List<object>) json[nameof (player_presents)])
          playerPresentList.Add(json9 == null ? (PlayerPresent) null : new PlayerPresent((Dictionary<string, object>) json9));
        this.player_presents = playerPresentList.ToArray();
        SMManager.UpdateList<PlayerPresent>(this.player_presents);
        List<WebAPI.Response.GachaG021FreePayResult> g021FreePayResultList = new List<WebAPI.Response.GachaG021FreePayResult>();
        foreach (object json10 in (List<object>) json[nameof (result)])
          g021FreePayResultList.Add(json10 == null ? (WebAPI.Response.GachaG021FreePayResult) null : new WebAPI.Response.GachaG021FreePayResult((Dictionary<string, object>) json10));
        this.result = g021FreePayResultList.ToArray();
        if (!json.ContainsKey("player_presents:delete"))
          return;
        SMManager.DeleteList<PlayerPresent>(((IEnumerable<object>) json["player_presents:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class GachaG021FreePayResult : KeyCompare
    {
      public int reward_result_quantity;
      public bool is_new;
      public int reward_type_id;
      public int reward_result_id;

      public GachaG021FreePayResult()
      {
      }

      public GachaG021FreePayResult(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_result_quantity = (int) (long) json[nameof (reward_result_quantity)];
        this.is_new = (bool) json[nameof (is_new)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
        this.reward_result_id = (int) (long) json[nameof (reward_result_id)];
      }
    }

    [Serializable]
    public class GachaG022GiftMultiPay : KeyCompare
    {
      public PlayerMaterialGear[] player_material_gears;
      public PlayerItem[] player_items;
      public AnimationPatternMultiAfter[] animation_pattern_gems;
      public Player player;
      public PlayerUnit[] player_units;
      public PlayerUnit[] player_unit_reserves;
      public UnlockQuest[] unlock_quests;
      public TicketBanner[] g004_banner_info;
      public GachaModule[] gacha_modules;
      public PlayerUnitReservesCount player_unit_reserves_count;
      public string[] animation_pattern;
      public PlayerMaterialUnit[] player_material_units;
      public PlayerPresent[] player_presents;
      public WebAPI.Response.GachaG022GiftMultiPayResult[] result;

      public GachaG022GiftMultiPay()
      {
      }

      public GachaG022GiftMultiPay(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerMaterialGear> playerMaterialGearList = new List<PlayerMaterialGear>();
        foreach (object json1 in (List<object>) json[nameof (player_material_gears)])
          playerMaterialGearList.Add(json1 == null ? (PlayerMaterialGear) null : new PlayerMaterialGear((Dictionary<string, object>) json1));
        this.player_material_gears = playerMaterialGearList.ToArray();
        SMManager.UpdateList<PlayerMaterialGear>(this.player_material_gears);
        List<PlayerItem> playerItemList = new List<PlayerItem>();
        foreach (object json2 in (List<object>) json[nameof (player_items)])
          playerItemList.Add(json2 == null ? (PlayerItem) null : new PlayerItem((Dictionary<string, object>) json2));
        this.player_items = playerItemList.ToArray();
        SMManager.UpdateList<PlayerItem>(this.player_items);
        List<AnimationPatternMultiAfter> patternMultiAfterList = new List<AnimationPatternMultiAfter>();
        foreach (object json3 in (List<object>) json[nameof (animation_pattern_gems)])
          patternMultiAfterList.Add(json3 == null ? (AnimationPatternMultiAfter) null : new AnimationPatternMultiAfter((Dictionary<string, object>) json3));
        this.animation_pattern_gems = patternMultiAfterList.ToArray();
        this.player = json[nameof (player)] == null ? (Player) null : new Player((Dictionary<string, object>) json[nameof (player)]);
        SMManager.Change<Player>(this.player);
        List<PlayerUnit> playerUnitList1 = new List<PlayerUnit>();
        foreach (object json4 in (List<object>) json[nameof (player_units)])
          playerUnitList1.Add(json4 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json4));
        this.player_units = playerUnitList1.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_units);
        List<PlayerUnit> playerUnitList2 = new List<PlayerUnit>();
        foreach (object json5 in (List<object>) json[nameof (player_unit_reserves)])
          playerUnitList2.Add(json5 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json5));
        this.player_unit_reserves = playerUnitList2.ToArray();
        List<UnlockQuest> unlockQuestList = new List<UnlockQuest>();
        foreach (object json6 in (List<object>) json[nameof (unlock_quests)])
          unlockQuestList.Add(json6 == null ? (UnlockQuest) null : new UnlockQuest((Dictionary<string, object>) json6));
        this.unlock_quests = unlockQuestList.ToArray();
        List<TicketBanner> ticketBannerList = new List<TicketBanner>();
        foreach (object json7 in (List<object>) json[nameof (g004_banner_info)])
          ticketBannerList.Add(json7 == null ? (TicketBanner) null : new TicketBanner((Dictionary<string, object>) json7));
        this.g004_banner_info = ticketBannerList.ToArray();
        SMManager.UpdateList<TicketBanner>(this.g004_banner_info);
        List<GachaModule> gachaModuleList = new List<GachaModule>();
        foreach (object json8 in (List<object>) json[nameof (gacha_modules)])
          gachaModuleList.Add(json8 == null ? (GachaModule) null : new GachaModule((Dictionary<string, object>) json8));
        this.gacha_modules = gachaModuleList.ToArray();
        SMManager.UpdateList<GachaModule>(this.gacha_modules);
        this.player_unit_reserves_count = json[nameof (player_unit_reserves_count)] == null ? (PlayerUnitReservesCount) null : new PlayerUnitReservesCount((Dictionary<string, object>) json[nameof (player_unit_reserves_count)]);
        SMManager.Change<PlayerUnitReservesCount>(this.player_unit_reserves_count);
        this.animation_pattern = ((IEnumerable<object>) json[nameof (animation_pattern)]).Select<object, string>((Func<object, string>) (s => (string) s)).ToArray<string>();
        List<PlayerMaterialUnit> playerMaterialUnitList = new List<PlayerMaterialUnit>();
        foreach (object json9 in (List<object>) json[nameof (player_material_units)])
          playerMaterialUnitList.Add(json9 == null ? (PlayerMaterialUnit) null : new PlayerMaterialUnit((Dictionary<string, object>) json9));
        this.player_material_units = playerMaterialUnitList.ToArray();
        SMManager.UpdateList<PlayerMaterialUnit>(this.player_material_units);
        List<PlayerPresent> playerPresentList = new List<PlayerPresent>();
        foreach (object json10 in (List<object>) json[nameof (player_presents)])
          playerPresentList.Add(json10 == null ? (PlayerPresent) null : new PlayerPresent((Dictionary<string, object>) json10));
        this.player_presents = playerPresentList.ToArray();
        SMManager.UpdateList<PlayerPresent>(this.player_presents);
        List<WebAPI.Response.GachaG022GiftMultiPayResult> giftMultiPayResultList = new List<WebAPI.Response.GachaG022GiftMultiPayResult>();
        foreach (object json11 in (List<object>) json[nameof (result)])
          giftMultiPayResultList.Add(json11 == null ? (WebAPI.Response.GachaG022GiftMultiPayResult) null : new WebAPI.Response.GachaG022GiftMultiPayResult((Dictionary<string, object>) json11));
        this.result = giftMultiPayResultList.ToArray();
        if (!json.ContainsKey("player_presents:delete"))
          return;
        SMManager.DeleteList<PlayerPresent>(((IEnumerable<object>) json["player_presents:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class GachaG022GiftMultiPayResult : KeyCompare
    {
      public int reward_result_quantity;
      public bool is_new;
      public int reward_type_id;
      public int reward_result_id;

      public GachaG022GiftMultiPayResult()
      {
      }

      public GachaG022GiftMultiPayResult(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_result_quantity = (int) (long) json[nameof (reward_result_quantity)];
        this.is_new = (bool) json[nameof (is_new)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
        this.reward_result_id = (int) (long) json[nameof (reward_result_id)];
      }
    }

    [Serializable]
    public class GachaG022GiftPay : KeyCompare
    {
      public PlayerMaterialGear[] player_material_gears;
      public PlayerItem[] player_items;
      public Player player;
      public PlayerUnit[] player_units;
      public PlayerUnit[] player_unit_reserves;
      public UnlockQuest[] unlock_quests;
      public TicketBanner[] g004_banner_info;
      public GachaModule[] gacha_modules;
      public PlayerUnitReservesCount player_unit_reserves_count;
      public string[] animation_pattern;
      public PlayerMaterialUnit[] player_material_units;
      public PlayerPresent[] player_presents;
      public WebAPI.Response.GachaG022GiftPayResult[] result;

      public GachaG022GiftPay()
      {
      }

      public GachaG022GiftPay(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerMaterialGear> playerMaterialGearList = new List<PlayerMaterialGear>();
        foreach (object json1 in (List<object>) json[nameof (player_material_gears)])
          playerMaterialGearList.Add(json1 == null ? (PlayerMaterialGear) null : new PlayerMaterialGear((Dictionary<string, object>) json1));
        this.player_material_gears = playerMaterialGearList.ToArray();
        SMManager.UpdateList<PlayerMaterialGear>(this.player_material_gears);
        List<PlayerItem> playerItemList = new List<PlayerItem>();
        foreach (object json2 in (List<object>) json[nameof (player_items)])
          playerItemList.Add(json2 == null ? (PlayerItem) null : new PlayerItem((Dictionary<string, object>) json2));
        this.player_items = playerItemList.ToArray();
        SMManager.UpdateList<PlayerItem>(this.player_items);
        this.player = json[nameof (player)] == null ? (Player) null : new Player((Dictionary<string, object>) json[nameof (player)]);
        SMManager.Change<Player>(this.player);
        List<PlayerUnit> playerUnitList1 = new List<PlayerUnit>();
        foreach (object json3 in (List<object>) json[nameof (player_units)])
          playerUnitList1.Add(json3 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json3));
        this.player_units = playerUnitList1.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_units);
        List<PlayerUnit> playerUnitList2 = new List<PlayerUnit>();
        foreach (object json4 in (List<object>) json[nameof (player_unit_reserves)])
          playerUnitList2.Add(json4 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json4));
        this.player_unit_reserves = playerUnitList2.ToArray();
        List<UnlockQuest> unlockQuestList = new List<UnlockQuest>();
        foreach (object json5 in (List<object>) json[nameof (unlock_quests)])
          unlockQuestList.Add(json5 == null ? (UnlockQuest) null : new UnlockQuest((Dictionary<string, object>) json5));
        this.unlock_quests = unlockQuestList.ToArray();
        List<TicketBanner> ticketBannerList = new List<TicketBanner>();
        foreach (object json6 in (List<object>) json[nameof (g004_banner_info)])
          ticketBannerList.Add(json6 == null ? (TicketBanner) null : new TicketBanner((Dictionary<string, object>) json6));
        this.g004_banner_info = ticketBannerList.ToArray();
        SMManager.UpdateList<TicketBanner>(this.g004_banner_info);
        List<GachaModule> gachaModuleList = new List<GachaModule>();
        foreach (object json7 in (List<object>) json[nameof (gacha_modules)])
          gachaModuleList.Add(json7 == null ? (GachaModule) null : new GachaModule((Dictionary<string, object>) json7));
        this.gacha_modules = gachaModuleList.ToArray();
        SMManager.UpdateList<GachaModule>(this.gacha_modules);
        this.player_unit_reserves_count = json[nameof (player_unit_reserves_count)] == null ? (PlayerUnitReservesCount) null : new PlayerUnitReservesCount((Dictionary<string, object>) json[nameof (player_unit_reserves_count)]);
        SMManager.Change<PlayerUnitReservesCount>(this.player_unit_reserves_count);
        this.animation_pattern = ((IEnumerable<object>) json[nameof (animation_pattern)]).Select<object, string>((Func<object, string>) (s => (string) s)).ToArray<string>();
        List<PlayerMaterialUnit> playerMaterialUnitList = new List<PlayerMaterialUnit>();
        foreach (object json8 in (List<object>) json[nameof (player_material_units)])
          playerMaterialUnitList.Add(json8 == null ? (PlayerMaterialUnit) null : new PlayerMaterialUnit((Dictionary<string, object>) json8));
        this.player_material_units = playerMaterialUnitList.ToArray();
        SMManager.UpdateList<PlayerMaterialUnit>(this.player_material_units);
        List<PlayerPresent> playerPresentList = new List<PlayerPresent>();
        foreach (object json9 in (List<object>) json[nameof (player_presents)])
          playerPresentList.Add(json9 == null ? (PlayerPresent) null : new PlayerPresent((Dictionary<string, object>) json9));
        this.player_presents = playerPresentList.ToArray();
        SMManager.UpdateList<PlayerPresent>(this.player_presents);
        List<WebAPI.Response.GachaG022GiftPayResult> g022GiftPayResultList = new List<WebAPI.Response.GachaG022GiftPayResult>();
        foreach (object json10 in (List<object>) json[nameof (result)])
          g022GiftPayResultList.Add(json10 == null ? (WebAPI.Response.GachaG022GiftPayResult) null : new WebAPI.Response.GachaG022GiftPayResult((Dictionary<string, object>) json10));
        this.result = g022GiftPayResultList.ToArray();
        if (!json.ContainsKey("player_presents:delete"))
          return;
        SMManager.DeleteList<PlayerPresent>(((IEnumerable<object>) json["player_presents:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class GachaG022GiftPayResult : KeyCompare
    {
      public int reward_result_quantity;
      public bool is_new;
      public int reward_type_id;
      public int reward_result_id;

      public GachaG022GiftPayResult()
      {
      }

      public GachaG022GiftPayResult(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_result_quantity = (int) (long) json[nameof (reward_result_quantity)];
        this.is_new = (bool) json[nameof (is_new)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
        this.reward_result_id = (int) (long) json[nameof (reward_result_id)];
      }
    }

    [Serializable]
    public class GachaG023GiftMultiPay : KeyCompare
    {
      public PlayerMaterialGear[] player_material_gears;
      public PlayerItem[] player_items;
      public AnimationPatternMultiAfter[] animation_pattern_gems;
      public Player player;
      public PlayerUnit[] player_units;
      public PlayerUnit[] player_unit_reserves;
      public UnlockQuest[] unlock_quests;
      public TicketBanner[] g004_banner_info;
      public GachaModule[] gacha_modules;
      public PlayerUnitReservesCount player_unit_reserves_count;
      public string[] animation_pattern;
      public PlayerMaterialUnit[] player_material_units;
      public PlayerPresent[] player_presents;
      public WebAPI.Response.GachaG023GiftMultiPayResult[] result;

      public GachaG023GiftMultiPay()
      {
      }

      public GachaG023GiftMultiPay(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerMaterialGear> playerMaterialGearList = new List<PlayerMaterialGear>();
        foreach (object json1 in (List<object>) json[nameof (player_material_gears)])
          playerMaterialGearList.Add(json1 == null ? (PlayerMaterialGear) null : new PlayerMaterialGear((Dictionary<string, object>) json1));
        this.player_material_gears = playerMaterialGearList.ToArray();
        SMManager.UpdateList<PlayerMaterialGear>(this.player_material_gears);
        List<PlayerItem> playerItemList = new List<PlayerItem>();
        foreach (object json2 in (List<object>) json[nameof (player_items)])
          playerItemList.Add(json2 == null ? (PlayerItem) null : new PlayerItem((Dictionary<string, object>) json2));
        this.player_items = playerItemList.ToArray();
        SMManager.UpdateList<PlayerItem>(this.player_items);
        List<AnimationPatternMultiAfter> patternMultiAfterList = new List<AnimationPatternMultiAfter>();
        foreach (object json3 in (List<object>) json[nameof (animation_pattern_gems)])
          patternMultiAfterList.Add(json3 == null ? (AnimationPatternMultiAfter) null : new AnimationPatternMultiAfter((Dictionary<string, object>) json3));
        this.animation_pattern_gems = patternMultiAfterList.ToArray();
        this.player = json[nameof (player)] == null ? (Player) null : new Player((Dictionary<string, object>) json[nameof (player)]);
        SMManager.Change<Player>(this.player);
        List<PlayerUnit> playerUnitList1 = new List<PlayerUnit>();
        foreach (object json4 in (List<object>) json[nameof (player_units)])
          playerUnitList1.Add(json4 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json4));
        this.player_units = playerUnitList1.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_units);
        List<PlayerUnit> playerUnitList2 = new List<PlayerUnit>();
        foreach (object json5 in (List<object>) json[nameof (player_unit_reserves)])
          playerUnitList2.Add(json5 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json5));
        this.player_unit_reserves = playerUnitList2.ToArray();
        List<UnlockQuest> unlockQuestList = new List<UnlockQuest>();
        foreach (object json6 in (List<object>) json[nameof (unlock_quests)])
          unlockQuestList.Add(json6 == null ? (UnlockQuest) null : new UnlockQuest((Dictionary<string, object>) json6));
        this.unlock_quests = unlockQuestList.ToArray();
        List<TicketBanner> ticketBannerList = new List<TicketBanner>();
        foreach (object json7 in (List<object>) json[nameof (g004_banner_info)])
          ticketBannerList.Add(json7 == null ? (TicketBanner) null : new TicketBanner((Dictionary<string, object>) json7));
        this.g004_banner_info = ticketBannerList.ToArray();
        SMManager.UpdateList<TicketBanner>(this.g004_banner_info);
        List<GachaModule> gachaModuleList = new List<GachaModule>();
        foreach (object json8 in (List<object>) json[nameof (gacha_modules)])
          gachaModuleList.Add(json8 == null ? (GachaModule) null : new GachaModule((Dictionary<string, object>) json8));
        this.gacha_modules = gachaModuleList.ToArray();
        SMManager.UpdateList<GachaModule>(this.gacha_modules);
        this.player_unit_reserves_count = json[nameof (player_unit_reserves_count)] == null ? (PlayerUnitReservesCount) null : new PlayerUnitReservesCount((Dictionary<string, object>) json[nameof (player_unit_reserves_count)]);
        SMManager.Change<PlayerUnitReservesCount>(this.player_unit_reserves_count);
        this.animation_pattern = ((IEnumerable<object>) json[nameof (animation_pattern)]).Select<object, string>((Func<object, string>) (s => (string) s)).ToArray<string>();
        List<PlayerMaterialUnit> playerMaterialUnitList = new List<PlayerMaterialUnit>();
        foreach (object json9 in (List<object>) json[nameof (player_material_units)])
          playerMaterialUnitList.Add(json9 == null ? (PlayerMaterialUnit) null : new PlayerMaterialUnit((Dictionary<string, object>) json9));
        this.player_material_units = playerMaterialUnitList.ToArray();
        SMManager.UpdateList<PlayerMaterialUnit>(this.player_material_units);
        List<PlayerPresent> playerPresentList = new List<PlayerPresent>();
        foreach (object json10 in (List<object>) json[nameof (player_presents)])
          playerPresentList.Add(json10 == null ? (PlayerPresent) null : new PlayerPresent((Dictionary<string, object>) json10));
        this.player_presents = playerPresentList.ToArray();
        SMManager.UpdateList<PlayerPresent>(this.player_presents);
        List<WebAPI.Response.GachaG023GiftMultiPayResult> giftMultiPayResultList = new List<WebAPI.Response.GachaG023GiftMultiPayResult>();
        foreach (object json11 in (List<object>) json[nameof (result)])
          giftMultiPayResultList.Add(json11 == null ? (WebAPI.Response.GachaG023GiftMultiPayResult) null : new WebAPI.Response.GachaG023GiftMultiPayResult((Dictionary<string, object>) json11));
        this.result = giftMultiPayResultList.ToArray();
        if (!json.ContainsKey("player_presents:delete"))
          return;
        SMManager.DeleteList<PlayerPresent>(((IEnumerable<object>) json["player_presents:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class GachaG023GiftMultiPayResult : KeyCompare
    {
      public int reward_result_quantity;
      public bool is_new;
      public int reward_type_id;
      public int reward_result_id;

      public GachaG023GiftMultiPayResult()
      {
      }

      public GachaG023GiftMultiPayResult(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_result_quantity = (int) (long) json[nameof (reward_result_quantity)];
        this.is_new = (bool) json[nameof (is_new)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
        this.reward_result_id = (int) (long) json[nameof (reward_result_id)];
      }
    }

    [Serializable]
    public class GachaG023GiftPay : KeyCompare
    {
      public PlayerMaterialGear[] player_material_gears;
      public PlayerItem[] player_items;
      public Player player;
      public PlayerUnit[] player_units;
      public PlayerUnit[] player_unit_reserves;
      public UnlockQuest[] unlock_quests;
      public TicketBanner[] g004_banner_info;
      public GachaModule[] gacha_modules;
      public PlayerUnitReservesCount player_unit_reserves_count;
      public string[] animation_pattern;
      public PlayerMaterialUnit[] player_material_units;
      public PlayerPresent[] player_presents;
      public WebAPI.Response.GachaG023GiftPayResult[] result;

      public GachaG023GiftPay()
      {
      }

      public GachaG023GiftPay(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerMaterialGear> playerMaterialGearList = new List<PlayerMaterialGear>();
        foreach (object json1 in (List<object>) json[nameof (player_material_gears)])
          playerMaterialGearList.Add(json1 == null ? (PlayerMaterialGear) null : new PlayerMaterialGear((Dictionary<string, object>) json1));
        this.player_material_gears = playerMaterialGearList.ToArray();
        SMManager.UpdateList<PlayerMaterialGear>(this.player_material_gears);
        List<PlayerItem> playerItemList = new List<PlayerItem>();
        foreach (object json2 in (List<object>) json[nameof (player_items)])
          playerItemList.Add(json2 == null ? (PlayerItem) null : new PlayerItem((Dictionary<string, object>) json2));
        this.player_items = playerItemList.ToArray();
        SMManager.UpdateList<PlayerItem>(this.player_items);
        this.player = json[nameof (player)] == null ? (Player) null : new Player((Dictionary<string, object>) json[nameof (player)]);
        SMManager.Change<Player>(this.player);
        List<PlayerUnit> playerUnitList1 = new List<PlayerUnit>();
        foreach (object json3 in (List<object>) json[nameof (player_units)])
          playerUnitList1.Add(json3 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json3));
        this.player_units = playerUnitList1.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_units);
        List<PlayerUnit> playerUnitList2 = new List<PlayerUnit>();
        foreach (object json4 in (List<object>) json[nameof (player_unit_reserves)])
          playerUnitList2.Add(json4 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json4));
        this.player_unit_reserves = playerUnitList2.ToArray();
        List<UnlockQuest> unlockQuestList = new List<UnlockQuest>();
        foreach (object json5 in (List<object>) json[nameof (unlock_quests)])
          unlockQuestList.Add(json5 == null ? (UnlockQuest) null : new UnlockQuest((Dictionary<string, object>) json5));
        this.unlock_quests = unlockQuestList.ToArray();
        List<TicketBanner> ticketBannerList = new List<TicketBanner>();
        foreach (object json6 in (List<object>) json[nameof (g004_banner_info)])
          ticketBannerList.Add(json6 == null ? (TicketBanner) null : new TicketBanner((Dictionary<string, object>) json6));
        this.g004_banner_info = ticketBannerList.ToArray();
        SMManager.UpdateList<TicketBanner>(this.g004_banner_info);
        List<GachaModule> gachaModuleList = new List<GachaModule>();
        foreach (object json7 in (List<object>) json[nameof (gacha_modules)])
          gachaModuleList.Add(json7 == null ? (GachaModule) null : new GachaModule((Dictionary<string, object>) json7));
        this.gacha_modules = gachaModuleList.ToArray();
        SMManager.UpdateList<GachaModule>(this.gacha_modules);
        this.player_unit_reserves_count = json[nameof (player_unit_reserves_count)] == null ? (PlayerUnitReservesCount) null : new PlayerUnitReservesCount((Dictionary<string, object>) json[nameof (player_unit_reserves_count)]);
        SMManager.Change<PlayerUnitReservesCount>(this.player_unit_reserves_count);
        this.animation_pattern = ((IEnumerable<object>) json[nameof (animation_pattern)]).Select<object, string>((Func<object, string>) (s => (string) s)).ToArray<string>();
        List<PlayerMaterialUnit> playerMaterialUnitList = new List<PlayerMaterialUnit>();
        foreach (object json8 in (List<object>) json[nameof (player_material_units)])
          playerMaterialUnitList.Add(json8 == null ? (PlayerMaterialUnit) null : new PlayerMaterialUnit((Dictionary<string, object>) json8));
        this.player_material_units = playerMaterialUnitList.ToArray();
        SMManager.UpdateList<PlayerMaterialUnit>(this.player_material_units);
        List<PlayerPresent> playerPresentList = new List<PlayerPresent>();
        foreach (object json9 in (List<object>) json[nameof (player_presents)])
          playerPresentList.Add(json9 == null ? (PlayerPresent) null : new PlayerPresent((Dictionary<string, object>) json9));
        this.player_presents = playerPresentList.ToArray();
        SMManager.UpdateList<PlayerPresent>(this.player_presents);
        List<WebAPI.Response.GachaG023GiftPayResult> g023GiftPayResultList = new List<WebAPI.Response.GachaG023GiftPayResult>();
        foreach (object json10 in (List<object>) json[nameof (result)])
          g023GiftPayResultList.Add(json10 == null ? (WebAPI.Response.GachaG023GiftPayResult) null : new WebAPI.Response.GachaG023GiftPayResult((Dictionary<string, object>) json10));
        this.result = g023GiftPayResultList.ToArray();
        if (!json.ContainsKey("player_presents:delete"))
          return;
        SMManager.DeleteList<PlayerPresent>(((IEnumerable<object>) json["player_presents:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class GachaG023GiftPayResult : KeyCompare
    {
      public int reward_result_quantity;
      public bool is_new;
      public int reward_type_id;
      public int reward_result_id;

      public GachaG023GiftPayResult()
      {
      }

      public GachaG023GiftPayResult(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_result_quantity = (int) (long) json[nameof (reward_result_quantity)];
        this.is_new = (bool) json[nameof (is_new)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
        this.reward_result_id = (int) (long) json[nameof (reward_result_id)];
      }
    }

    [Serializable]
    public class GachaG075ChargeMultiPay : KeyCompare
    {
      public PlayerMaterialGear[] player_material_gears;
      public PlayerCommonTicket[] player_common_tickets;
      public WebAPI.Response.GachaG075ChargeMultiPayAdditional_items[] additional_items;
      public Player player;
      public PlayerUnit[] player_units;
      public PlayerUnit[] player_unit_reserves;
      public PlayerItem[] player_items;
      public UnlockQuest[] unlock_quests;
      public TicketBanner[] g004_banner_info;
      public GachaModule[] gacha_modules;
      public PlayerUnitReservesCount player_unit_reserves_count;
      public PlayerMaterialUnit[] player_material_units;
      public PlayerPresent[] player_presents;
      public WebAPI.Response.GachaG075ChargeMultiPayResult[] result;

      public GachaG075ChargeMultiPay()
      {
      }

      public GachaG075ChargeMultiPay(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerMaterialGear> playerMaterialGearList = new List<PlayerMaterialGear>();
        foreach (object json1 in (List<object>) json[nameof (player_material_gears)])
          playerMaterialGearList.Add(json1 == null ? (PlayerMaterialGear) null : new PlayerMaterialGear((Dictionary<string, object>) json1));
        this.player_material_gears = playerMaterialGearList.ToArray();
        SMManager.UpdateList<PlayerMaterialGear>(this.player_material_gears);
        List<PlayerCommonTicket> playerCommonTicketList = new List<PlayerCommonTicket>();
        foreach (object json2 in (List<object>) json[nameof (player_common_tickets)])
          playerCommonTicketList.Add(json2 == null ? (PlayerCommonTicket) null : new PlayerCommonTicket((Dictionary<string, object>) json2));
        this.player_common_tickets = playerCommonTicketList.ToArray();
        SMManager.UpdateList<PlayerCommonTicket>(this.player_common_tickets);
        List<WebAPI.Response.GachaG075ChargeMultiPayAdditional_items> payAdditionalItemsList = new List<WebAPI.Response.GachaG075ChargeMultiPayAdditional_items>();
        foreach (object json3 in (List<object>) json[nameof (additional_items)])
          payAdditionalItemsList.Add(json3 == null ? (WebAPI.Response.GachaG075ChargeMultiPayAdditional_items) null : new WebAPI.Response.GachaG075ChargeMultiPayAdditional_items((Dictionary<string, object>) json3));
        this.additional_items = payAdditionalItemsList.ToArray();
        SMManager.UpdateList<WebAPI.Response.GachaG075ChargeMultiPayAdditional_items>(this.additional_items);
        this.player = json[nameof (player)] == null ? (Player) null : new Player((Dictionary<string, object>) json[nameof (player)]);
        SMManager.Change<Player>(this.player);
        List<PlayerUnit> playerUnitList1 = new List<PlayerUnit>();
        foreach (object json4 in (List<object>) json[nameof (player_units)])
          playerUnitList1.Add(json4 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json4));
        this.player_units = playerUnitList1.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_units);
        List<PlayerUnit> playerUnitList2 = new List<PlayerUnit>();
        foreach (object json5 in (List<object>) json[nameof (player_unit_reserves)])
          playerUnitList2.Add(json5 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json5));
        this.player_unit_reserves = playerUnitList2.ToArray();
        List<PlayerItem> playerItemList = new List<PlayerItem>();
        foreach (object json6 in (List<object>) json[nameof (player_items)])
          playerItemList.Add(json6 == null ? (PlayerItem) null : new PlayerItem((Dictionary<string, object>) json6));
        this.player_items = playerItemList.ToArray();
        SMManager.UpdateList<PlayerItem>(this.player_items);
        List<UnlockQuest> unlockQuestList = new List<UnlockQuest>();
        foreach (object json7 in (List<object>) json[nameof (unlock_quests)])
          unlockQuestList.Add(json7 == null ? (UnlockQuest) null : new UnlockQuest((Dictionary<string, object>) json7));
        this.unlock_quests = unlockQuestList.ToArray();
        List<TicketBanner> ticketBannerList = new List<TicketBanner>();
        foreach (object json8 in (List<object>) json[nameof (g004_banner_info)])
          ticketBannerList.Add(json8 == null ? (TicketBanner) null : new TicketBanner((Dictionary<string, object>) json8));
        this.g004_banner_info = ticketBannerList.ToArray();
        SMManager.UpdateList<TicketBanner>(this.g004_banner_info);
        List<GachaModule> gachaModuleList = new List<GachaModule>();
        foreach (object json9 in (List<object>) json[nameof (gacha_modules)])
          gachaModuleList.Add(json9 == null ? (GachaModule) null : new GachaModule((Dictionary<string, object>) json9));
        this.gacha_modules = gachaModuleList.ToArray();
        SMManager.UpdateList<GachaModule>(this.gacha_modules);
        this.player_unit_reserves_count = json[nameof (player_unit_reserves_count)] == null ? (PlayerUnitReservesCount) null : new PlayerUnitReservesCount((Dictionary<string, object>) json[nameof (player_unit_reserves_count)]);
        SMManager.Change<PlayerUnitReservesCount>(this.player_unit_reserves_count);
        List<PlayerMaterialUnit> playerMaterialUnitList = new List<PlayerMaterialUnit>();
        foreach (object json10 in (List<object>) json[nameof (player_material_units)])
          playerMaterialUnitList.Add(json10 == null ? (PlayerMaterialUnit) null : new PlayerMaterialUnit((Dictionary<string, object>) json10));
        this.player_material_units = playerMaterialUnitList.ToArray();
        SMManager.UpdateList<PlayerMaterialUnit>(this.player_material_units);
        List<PlayerPresent> playerPresentList = new List<PlayerPresent>();
        foreach (object json11 in (List<object>) json[nameof (player_presents)])
          playerPresentList.Add(json11 == null ? (PlayerPresent) null : new PlayerPresent((Dictionary<string, object>) json11));
        this.player_presents = playerPresentList.ToArray();
        SMManager.UpdateList<PlayerPresent>(this.player_presents);
        List<WebAPI.Response.GachaG075ChargeMultiPayResult> chargeMultiPayResultList = new List<WebAPI.Response.GachaG075ChargeMultiPayResult>();
        foreach (object json12 in (List<object>) json[nameof (result)])
          chargeMultiPayResultList.Add(json12 == null ? (WebAPI.Response.GachaG075ChargeMultiPayResult) null : new WebAPI.Response.GachaG075ChargeMultiPayResult((Dictionary<string, object>) json12));
        this.result = chargeMultiPayResultList.ToArray();
        if (!json.ContainsKey("player_presents:delete"))
          return;
        SMManager.DeleteList<PlayerPresent>(((IEnumerable<object>) json["player_presents:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class GachaG075ChargeMultiPayResult : KeyCompare
    {
      public int reward_result_quantity;
      public int reward_result_id;
      public bool is_new;
      public int reward_type_id;
      public int direction_type_id;

      public GachaG075ChargeMultiPayResult()
      {
      }

      public GachaG075ChargeMultiPayResult(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_result_quantity = (int) (long) json[nameof (reward_result_quantity)];
        this.reward_result_id = (int) (long) json[nameof (reward_result_id)];
        this.is_new = (bool) json[nameof (is_new)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
        this.direction_type_id = (int) (long) json[nameof (direction_type_id)];
      }
    }

    [Serializable]
    public class GachaG075ChargeMultiPayAdditional_items : KeyCompare
    {
      public int reward_quantity;
      public int reward_type_id;
      public int reward_id;

      public GachaG075ChargeMultiPayAdditional_items()
      {
      }

      public GachaG075ChargeMultiPayAdditional_items(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_quantity = (int) (long) json[nameof (reward_quantity)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
        this.reward_id = (int) (long) json[nameof (reward_id)];
      }
    }

    [Serializable]
    public class GachaG075ChargePay : KeyCompare
    {
      public PlayerMaterialGear[] player_material_gears;
      public PlayerCommonTicket[] player_common_tickets;
      public WebAPI.Response.GachaG075ChargePayAdditional_items[] additional_items;
      public Player player;
      public PlayerUnit[] player_units;
      public PlayerUnit[] player_unit_reserves;
      public PlayerItem[] player_items;
      public UnlockQuest[] unlock_quests;
      public TicketBanner[] g004_banner_info;
      public GachaModule[] gacha_modules;
      public PlayerUnitReservesCount player_unit_reserves_count;
      public PlayerMaterialUnit[] player_material_units;
      public PlayerPresent[] player_presents;
      public WebAPI.Response.GachaG075ChargePayResult[] result;

      public GachaG075ChargePay()
      {
      }

      public GachaG075ChargePay(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerMaterialGear> playerMaterialGearList = new List<PlayerMaterialGear>();
        foreach (object json1 in (List<object>) json[nameof (player_material_gears)])
          playerMaterialGearList.Add(json1 == null ? (PlayerMaterialGear) null : new PlayerMaterialGear((Dictionary<string, object>) json1));
        this.player_material_gears = playerMaterialGearList.ToArray();
        SMManager.UpdateList<PlayerMaterialGear>(this.player_material_gears);
        List<PlayerCommonTicket> playerCommonTicketList = new List<PlayerCommonTicket>();
        foreach (object json2 in (List<object>) json[nameof (player_common_tickets)])
          playerCommonTicketList.Add(json2 == null ? (PlayerCommonTicket) null : new PlayerCommonTicket((Dictionary<string, object>) json2));
        this.player_common_tickets = playerCommonTicketList.ToArray();
        SMManager.UpdateList<PlayerCommonTicket>(this.player_common_tickets);
        List<WebAPI.Response.GachaG075ChargePayAdditional_items> payAdditionalItemsList = new List<WebAPI.Response.GachaG075ChargePayAdditional_items>();
        foreach (object json3 in (List<object>) json[nameof (additional_items)])
          payAdditionalItemsList.Add(json3 == null ? (WebAPI.Response.GachaG075ChargePayAdditional_items) null : new WebAPI.Response.GachaG075ChargePayAdditional_items((Dictionary<string, object>) json3));
        this.additional_items = payAdditionalItemsList.ToArray();
        SMManager.UpdateList<WebAPI.Response.GachaG075ChargePayAdditional_items>(this.additional_items);
        this.player = json[nameof (player)] == null ? (Player) null : new Player((Dictionary<string, object>) json[nameof (player)]);
        SMManager.Change<Player>(this.player);
        List<PlayerUnit> playerUnitList1 = new List<PlayerUnit>();
        foreach (object json4 in (List<object>) json[nameof (player_units)])
          playerUnitList1.Add(json4 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json4));
        this.player_units = playerUnitList1.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_units);
        List<PlayerUnit> playerUnitList2 = new List<PlayerUnit>();
        foreach (object json5 in (List<object>) json[nameof (player_unit_reserves)])
          playerUnitList2.Add(json5 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json5));
        this.player_unit_reserves = playerUnitList2.ToArray();
        List<PlayerItem> playerItemList = new List<PlayerItem>();
        foreach (object json6 in (List<object>) json[nameof (player_items)])
          playerItemList.Add(json6 == null ? (PlayerItem) null : new PlayerItem((Dictionary<string, object>) json6));
        this.player_items = playerItemList.ToArray();
        SMManager.UpdateList<PlayerItem>(this.player_items);
        List<UnlockQuest> unlockQuestList = new List<UnlockQuest>();
        foreach (object json7 in (List<object>) json[nameof (unlock_quests)])
          unlockQuestList.Add(json7 == null ? (UnlockQuest) null : new UnlockQuest((Dictionary<string, object>) json7));
        this.unlock_quests = unlockQuestList.ToArray();
        List<TicketBanner> ticketBannerList = new List<TicketBanner>();
        foreach (object json8 in (List<object>) json[nameof (g004_banner_info)])
          ticketBannerList.Add(json8 == null ? (TicketBanner) null : new TicketBanner((Dictionary<string, object>) json8));
        this.g004_banner_info = ticketBannerList.ToArray();
        SMManager.UpdateList<TicketBanner>(this.g004_banner_info);
        List<GachaModule> gachaModuleList = new List<GachaModule>();
        foreach (object json9 in (List<object>) json[nameof (gacha_modules)])
          gachaModuleList.Add(json9 == null ? (GachaModule) null : new GachaModule((Dictionary<string, object>) json9));
        this.gacha_modules = gachaModuleList.ToArray();
        SMManager.UpdateList<GachaModule>(this.gacha_modules);
        this.player_unit_reserves_count = json[nameof (player_unit_reserves_count)] == null ? (PlayerUnitReservesCount) null : new PlayerUnitReservesCount((Dictionary<string, object>) json[nameof (player_unit_reserves_count)]);
        SMManager.Change<PlayerUnitReservesCount>(this.player_unit_reserves_count);
        List<PlayerMaterialUnit> playerMaterialUnitList = new List<PlayerMaterialUnit>();
        foreach (object json10 in (List<object>) json[nameof (player_material_units)])
          playerMaterialUnitList.Add(json10 == null ? (PlayerMaterialUnit) null : new PlayerMaterialUnit((Dictionary<string, object>) json10));
        this.player_material_units = playerMaterialUnitList.ToArray();
        SMManager.UpdateList<PlayerMaterialUnit>(this.player_material_units);
        List<PlayerPresent> playerPresentList = new List<PlayerPresent>();
        foreach (object json11 in (List<object>) json[nameof (player_presents)])
          playerPresentList.Add(json11 == null ? (PlayerPresent) null : new PlayerPresent((Dictionary<string, object>) json11));
        this.player_presents = playerPresentList.ToArray();
        SMManager.UpdateList<PlayerPresent>(this.player_presents);
        List<WebAPI.Response.GachaG075ChargePayResult> g075ChargePayResultList = new List<WebAPI.Response.GachaG075ChargePayResult>();
        foreach (object json12 in (List<object>) json[nameof (result)])
          g075ChargePayResultList.Add(json12 == null ? (WebAPI.Response.GachaG075ChargePayResult) null : new WebAPI.Response.GachaG075ChargePayResult((Dictionary<string, object>) json12));
        this.result = g075ChargePayResultList.ToArray();
        if (!json.ContainsKey("player_presents:delete"))
          return;
        SMManager.DeleteList<PlayerPresent>(((IEnumerable<object>) json["player_presents:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class GachaG075ChargePayResult : KeyCompare
    {
      public int reward_result_quantity;
      public int reward_result_id;
      public bool is_new;
      public int reward_type_id;
      public int direction_type_id;

      public GachaG075ChargePayResult()
      {
      }

      public GachaG075ChargePayResult(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_result_quantity = (int) (long) json[nameof (reward_result_quantity)];
        this.reward_result_id = (int) (long) json[nameof (reward_result_id)];
        this.is_new = (bool) json[nameof (is_new)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
        this.direction_type_id = (int) (long) json[nameof (direction_type_id)];
      }
    }

    [Serializable]
    public class GachaG075ChargePayAdditional_items : KeyCompare
    {
      public int reward_quantity;
      public int reward_type_id;
      public int reward_id;

      public GachaG075ChargePayAdditional_items()
      {
      }

      public GachaG075ChargePayAdditional_items(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_quantity = (int) (long) json[nameof (reward_quantity)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
        this.reward_id = (int) (long) json[nameof (reward_id)];
      }
    }

    [Serializable]
    public class GachaG101RetryGiftMultiPay : KeyCompare
    {
      public WebAPI.Response.GachaG101RetryGiftMultiPayResult[] result;
      public PlayerMaterialGear[] player_material_gears;
      public PlayerCommonTicket[] player_common_tickets;
      public WebAPI.Response.GachaG101RetryGiftMultiPayAdditional_items[] additional_items;
      public TicketBanner[] g004_banner_info;
      public int remaining_retry_count;
      public PlayerUnit[] player_units;
      public PlayerUnit[] player_unit_reserves;
      public PlayerItem[] player_items;
      public UnlockQuest[] unlock_quests;
      public Player player;
      public GachaModule[] gacha_modules;
      public PlayerUnit[] temp_player_units;
      public PlayerMaterialUnit[] player_material_units;
      public PlayerPresent[] player_presents;
      public DateTime? expired_at;

      public GachaG101RetryGiftMultiPay()
      {
      }

      public GachaG101RetryGiftMultiPay(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<WebAPI.Response.GachaG101RetryGiftMultiPayResult> giftMultiPayResultList = new List<WebAPI.Response.GachaG101RetryGiftMultiPayResult>();
        foreach (object json1 in (List<object>) json[nameof (result)])
          giftMultiPayResultList.Add(json1 == null ? (WebAPI.Response.GachaG101RetryGiftMultiPayResult) null : new WebAPI.Response.GachaG101RetryGiftMultiPayResult((Dictionary<string, object>) json1));
        this.result = giftMultiPayResultList.ToArray();
        List<PlayerMaterialGear> playerMaterialGearList = new List<PlayerMaterialGear>();
        foreach (object json2 in (List<object>) json[nameof (player_material_gears)])
          playerMaterialGearList.Add(json2 == null ? (PlayerMaterialGear) null : new PlayerMaterialGear((Dictionary<string, object>) json2));
        this.player_material_gears = playerMaterialGearList.ToArray();
        SMManager.UpdateList<PlayerMaterialGear>(this.player_material_gears);
        List<PlayerCommonTicket> playerCommonTicketList = new List<PlayerCommonTicket>();
        foreach (object json3 in (List<object>) json[nameof (player_common_tickets)])
          playerCommonTicketList.Add(json3 == null ? (PlayerCommonTicket) null : new PlayerCommonTicket((Dictionary<string, object>) json3));
        this.player_common_tickets = playerCommonTicketList.ToArray();
        SMManager.UpdateList<PlayerCommonTicket>(this.player_common_tickets);
        List<WebAPI.Response.GachaG101RetryGiftMultiPayAdditional_items> payAdditionalItemsList = new List<WebAPI.Response.GachaG101RetryGiftMultiPayAdditional_items>();
        foreach (object json4 in (List<object>) json[nameof (additional_items)])
          payAdditionalItemsList.Add(json4 == null ? (WebAPI.Response.GachaG101RetryGiftMultiPayAdditional_items) null : new WebAPI.Response.GachaG101RetryGiftMultiPayAdditional_items((Dictionary<string, object>) json4));
        this.additional_items = payAdditionalItemsList.ToArray();
        SMManager.UpdateList<WebAPI.Response.GachaG101RetryGiftMultiPayAdditional_items>(this.additional_items);
        List<TicketBanner> ticketBannerList = new List<TicketBanner>();
        foreach (object json5 in (List<object>) json[nameof (g004_banner_info)])
          ticketBannerList.Add(json5 == null ? (TicketBanner) null : new TicketBanner((Dictionary<string, object>) json5));
        this.g004_banner_info = ticketBannerList.ToArray();
        SMManager.UpdateList<TicketBanner>(this.g004_banner_info);
        this.remaining_retry_count = (int) (long) json[nameof (remaining_retry_count)];
        List<PlayerUnit> playerUnitList1 = new List<PlayerUnit>();
        foreach (object json6 in (List<object>) json[nameof (player_units)])
          playerUnitList1.Add(json6 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json6));
        this.player_units = playerUnitList1.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_units);
        List<PlayerUnit> playerUnitList2 = new List<PlayerUnit>();
        foreach (object json7 in (List<object>) json[nameof (player_unit_reserves)])
          playerUnitList2.Add(json7 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json7));
        this.player_unit_reserves = playerUnitList2.ToArray();
        List<PlayerItem> playerItemList = new List<PlayerItem>();
        foreach (object json8 in (List<object>) json[nameof (player_items)])
          playerItemList.Add(json8 == null ? (PlayerItem) null : new PlayerItem((Dictionary<string, object>) json8));
        this.player_items = playerItemList.ToArray();
        SMManager.UpdateList<PlayerItem>(this.player_items);
        List<UnlockQuest> unlockQuestList = new List<UnlockQuest>();
        foreach (object json9 in (List<object>) json[nameof (unlock_quests)])
          unlockQuestList.Add(json9 == null ? (UnlockQuest) null : new UnlockQuest((Dictionary<string, object>) json9));
        this.unlock_quests = unlockQuestList.ToArray();
        this.player = json[nameof (player)] == null ? (Player) null : new Player((Dictionary<string, object>) json[nameof (player)]);
        SMManager.Change<Player>(this.player);
        List<GachaModule> gachaModuleList = new List<GachaModule>();
        foreach (object json10 in (List<object>) json[nameof (gacha_modules)])
          gachaModuleList.Add(json10 == null ? (GachaModule) null : new GachaModule((Dictionary<string, object>) json10));
        this.gacha_modules = gachaModuleList.ToArray();
        SMManager.UpdateList<GachaModule>(this.gacha_modules);
        List<PlayerUnit> playerUnitList3 = new List<PlayerUnit>();
        foreach (object json11 in (List<object>) json[nameof (temp_player_units)])
          playerUnitList3.Add(json11 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json11));
        this.temp_player_units = playerUnitList3.ToArray();
        List<PlayerMaterialUnit> playerMaterialUnitList = new List<PlayerMaterialUnit>();
        foreach (object json12 in (List<object>) json[nameof (player_material_units)])
          playerMaterialUnitList.Add(json12 == null ? (PlayerMaterialUnit) null : new PlayerMaterialUnit((Dictionary<string, object>) json12));
        this.player_material_units = playerMaterialUnitList.ToArray();
        SMManager.UpdateList<PlayerMaterialUnit>(this.player_material_units);
        List<PlayerPresent> playerPresentList = new List<PlayerPresent>();
        foreach (object json13 in (List<object>) json[nameof (player_presents)])
          playerPresentList.Add(json13 == null ? (PlayerPresent) null : new PlayerPresent((Dictionary<string, object>) json13));
        this.player_presents = playerPresentList.ToArray();
        SMManager.UpdateList<PlayerPresent>(this.player_presents);
        this.expired_at = json[nameof (expired_at)] == null ? new DateTime?() : new DateTime?(DateTime.Parse((string) json[nameof (expired_at)]));
        if (!json.ContainsKey("player_presents:delete"))
          return;
        SMManager.DeleteList<PlayerPresent>(((IEnumerable<object>) json["player_presents:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class GachaG101RetryGiftMultiPayAdditional_items : KeyCompare
    {
      public int reward_quantity;
      public int reward_type_id;
      public int reward_id;

      public GachaG101RetryGiftMultiPayAdditional_items()
      {
      }

      public GachaG101RetryGiftMultiPayAdditional_items(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_quantity = (int) (long) json[nameof (reward_quantity)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
        this.reward_id = (int) (long) json[nameof (reward_id)];
      }
    }

    [Serializable]
    public class GachaG101RetryGiftMultiPayResult : KeyCompare
    {
      public int reward_type_id;
      public int direction_type_id;
      public int reward_result_id;
      public bool is_new;
      public int reward_result_quantity;
      public int reward_id;

      public GachaG101RetryGiftMultiPayResult()
      {
      }

      public GachaG101RetryGiftMultiPayResult(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
        this.direction_type_id = (int) (long) json[nameof (direction_type_id)];
        this.reward_result_id = (int) (long) json[nameof (reward_result_id)];
        this.is_new = (bool) json[nameof (is_new)];
        this.reward_result_quantity = (int) (long) json[nameof (reward_result_quantity)];
        this.reward_id = (int) (long) json[nameof (reward_id)];
      }
    }

    [Serializable]
    public class GachaG101RetryGiftPay : KeyCompare
    {
      public WebAPI.Response.GachaG101RetryGiftPayResult[] result;
      public PlayerMaterialGear[] player_material_gears;
      public PlayerCommonTicket[] player_common_tickets;
      public WebAPI.Response.GachaG101RetryGiftPayAdditional_items[] additional_items;
      public TicketBanner[] g004_banner_info;
      public int remaining_retry_count;
      public PlayerUnit[] player_units;
      public PlayerUnit[] player_unit_reserves;
      public PlayerItem[] player_items;
      public UnlockQuest[] unlock_quests;
      public Player player;
      public GachaModule[] gacha_modules;
      public PlayerUnitReservesCount player_unit_reserves_count;
      public PlayerUnit[] temp_player_units;
      public PlayerMaterialUnit[] player_material_units;
      public PlayerPresent[] player_presents;
      public DateTime? expired_at;

      public GachaG101RetryGiftPay()
      {
      }

      public GachaG101RetryGiftPay(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<WebAPI.Response.GachaG101RetryGiftPayResult> retryGiftPayResultList = new List<WebAPI.Response.GachaG101RetryGiftPayResult>();
        foreach (object json1 in (List<object>) json[nameof (result)])
          retryGiftPayResultList.Add(json1 == null ? (WebAPI.Response.GachaG101RetryGiftPayResult) null : new WebAPI.Response.GachaG101RetryGiftPayResult((Dictionary<string, object>) json1));
        this.result = retryGiftPayResultList.ToArray();
        List<PlayerMaterialGear> playerMaterialGearList = new List<PlayerMaterialGear>();
        foreach (object json2 in (List<object>) json[nameof (player_material_gears)])
          playerMaterialGearList.Add(json2 == null ? (PlayerMaterialGear) null : new PlayerMaterialGear((Dictionary<string, object>) json2));
        this.player_material_gears = playerMaterialGearList.ToArray();
        SMManager.UpdateList<PlayerMaterialGear>(this.player_material_gears);
        List<PlayerCommonTicket> playerCommonTicketList = new List<PlayerCommonTicket>();
        foreach (object json3 in (List<object>) json[nameof (player_common_tickets)])
          playerCommonTicketList.Add(json3 == null ? (PlayerCommonTicket) null : new PlayerCommonTicket((Dictionary<string, object>) json3));
        this.player_common_tickets = playerCommonTicketList.ToArray();
        SMManager.UpdateList<PlayerCommonTicket>(this.player_common_tickets);
        List<WebAPI.Response.GachaG101RetryGiftPayAdditional_items> payAdditionalItemsList = new List<WebAPI.Response.GachaG101RetryGiftPayAdditional_items>();
        foreach (object json4 in (List<object>) json[nameof (additional_items)])
          payAdditionalItemsList.Add(json4 == null ? (WebAPI.Response.GachaG101RetryGiftPayAdditional_items) null : new WebAPI.Response.GachaG101RetryGiftPayAdditional_items((Dictionary<string, object>) json4));
        this.additional_items = payAdditionalItemsList.ToArray();
        SMManager.UpdateList<WebAPI.Response.GachaG101RetryGiftPayAdditional_items>(this.additional_items);
        List<TicketBanner> ticketBannerList = new List<TicketBanner>();
        foreach (object json5 in (List<object>) json[nameof (g004_banner_info)])
          ticketBannerList.Add(json5 == null ? (TicketBanner) null : new TicketBanner((Dictionary<string, object>) json5));
        this.g004_banner_info = ticketBannerList.ToArray();
        SMManager.UpdateList<TicketBanner>(this.g004_banner_info);
        this.remaining_retry_count = (int) (long) json[nameof (remaining_retry_count)];
        List<PlayerUnit> playerUnitList1 = new List<PlayerUnit>();
        foreach (object json6 in (List<object>) json[nameof (player_units)])
          playerUnitList1.Add(json6 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json6));
        this.player_units = playerUnitList1.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_units);
        List<PlayerUnit> playerUnitList2 = new List<PlayerUnit>();
        foreach (object json7 in (List<object>) json[nameof (player_unit_reserves)])
          playerUnitList2.Add(json7 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json7));
        this.player_unit_reserves = playerUnitList2.ToArray();
        List<PlayerItem> playerItemList = new List<PlayerItem>();
        foreach (object json8 in (List<object>) json[nameof (player_items)])
          playerItemList.Add(json8 == null ? (PlayerItem) null : new PlayerItem((Dictionary<string, object>) json8));
        this.player_items = playerItemList.ToArray();
        SMManager.UpdateList<PlayerItem>(this.player_items);
        List<UnlockQuest> unlockQuestList = new List<UnlockQuest>();
        foreach (object json9 in (List<object>) json[nameof (unlock_quests)])
          unlockQuestList.Add(json9 == null ? (UnlockQuest) null : new UnlockQuest((Dictionary<string, object>) json9));
        this.unlock_quests = unlockQuestList.ToArray();
        this.player = json[nameof (player)] == null ? (Player) null : new Player((Dictionary<string, object>) json[nameof (player)]);
        SMManager.Change<Player>(this.player);
        List<GachaModule> gachaModuleList = new List<GachaModule>();
        foreach (object json10 in (List<object>) json[nameof (gacha_modules)])
          gachaModuleList.Add(json10 == null ? (GachaModule) null : new GachaModule((Dictionary<string, object>) json10));
        this.gacha_modules = gachaModuleList.ToArray();
        SMManager.UpdateList<GachaModule>(this.gacha_modules);
        this.player_unit_reserves_count = json[nameof (player_unit_reserves_count)] == null ? (PlayerUnitReservesCount) null : new PlayerUnitReservesCount((Dictionary<string, object>) json[nameof (player_unit_reserves_count)]);
        SMManager.Change<PlayerUnitReservesCount>(this.player_unit_reserves_count);
        List<PlayerUnit> playerUnitList3 = new List<PlayerUnit>();
        foreach (object json11 in (List<object>) json[nameof (temp_player_units)])
          playerUnitList3.Add(json11 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json11));
        this.temp_player_units = playerUnitList3.ToArray();
        List<PlayerMaterialUnit> playerMaterialUnitList = new List<PlayerMaterialUnit>();
        foreach (object json12 in (List<object>) json[nameof (player_material_units)])
          playerMaterialUnitList.Add(json12 == null ? (PlayerMaterialUnit) null : new PlayerMaterialUnit((Dictionary<string, object>) json12));
        this.player_material_units = playerMaterialUnitList.ToArray();
        SMManager.UpdateList<PlayerMaterialUnit>(this.player_material_units);
        List<PlayerPresent> playerPresentList = new List<PlayerPresent>();
        foreach (object json13 in (List<object>) json[nameof (player_presents)])
          playerPresentList.Add(json13 == null ? (PlayerPresent) null : new PlayerPresent((Dictionary<string, object>) json13));
        this.player_presents = playerPresentList.ToArray();
        SMManager.UpdateList<PlayerPresent>(this.player_presents);
        this.expired_at = json[nameof (expired_at)] == null ? new DateTime?() : new DateTime?(DateTime.Parse((string) json[nameof (expired_at)]));
        if (!json.ContainsKey("player_presents:delete"))
          return;
        SMManager.DeleteList<PlayerPresent>(((IEnumerable<object>) json["player_presents:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class GachaG101RetryGiftPayAdditional_items : KeyCompare
    {
      public int reward_quantity;
      public int reward_type_id;
      public int reward_id;

      public GachaG101RetryGiftPayAdditional_items()
      {
      }

      public GachaG101RetryGiftPayAdditional_items(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_quantity = (int) (long) json[nameof (reward_quantity)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
        this.reward_id = (int) (long) json[nameof (reward_id)];
      }
    }

    [Serializable]
    public class GachaG101RetryGiftPayResult : KeyCompare
    {
      public int reward_type_id;
      public int direction_type_id;
      public int reward_result_id;
      public bool is_new;
      public int reward_result_quantity;
      public int reward_id;

      public GachaG101RetryGiftPayResult()
      {
      }

      public GachaG101RetryGiftPayResult(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
        this.direction_type_id = (int) (long) json[nameof (direction_type_id)];
        this.reward_result_id = (int) (long) json[nameof (reward_result_id)];
        this.is_new = (bool) json[nameof (is_new)];
        this.reward_result_quantity = (int) (long) json[nameof (reward_result_quantity)];
        this.reward_id = (int) (long) json[nameof (reward_id)];
      }
    }

    [Serializable]
    public class GachaG301PickupSelectPlayerPickup : KeyCompare
    {
      public bool is_locked;
      public WebAPI.Response.GachaG301PickupSelectPlayerPickupPickup_list[] pickup_list;
      public int[] player_pickup_deck_entity_ids;

      public GachaG301PickupSelectPlayerPickup()
      {
      }

      public GachaG301PickupSelectPlayerPickup(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.is_locked = (bool) json[nameof (is_locked)];
        List<WebAPI.Response.GachaG301PickupSelectPlayerPickupPickup_list> pickupPickupListList = new List<WebAPI.Response.GachaG301PickupSelectPlayerPickupPickup_list>();
        foreach (object json1 in (List<object>) json[nameof (pickup_list)])
          pickupPickupListList.Add(json1 == null ? (WebAPI.Response.GachaG301PickupSelectPlayerPickupPickup_list) null : new WebAPI.Response.GachaG301PickupSelectPlayerPickupPickup_list((Dictionary<string, object>) json1));
        this.pickup_list = pickupPickupListList.ToArray();
        this.player_pickup_deck_entity_ids = ((IEnumerable<object>) json[nameof (player_pickup_deck_entity_ids)]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).ToArray<int>();
      }
    }

    [Serializable]
    public class GachaG301PickupSelectPlayerPickupPickup_list : KeyCompare
    {
      public int reward_quantity;
      public int[] send_deck_entity_ids;
      public bool is_possession;
      public int reward_type_id;
      public int deck_entity_id;
      public int reward_id;

      public GachaG301PickupSelectPlayerPickupPickup_list()
      {
      }

      public GachaG301PickupSelectPlayerPickupPickup_list(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_quantity = (int) (long) json[nameof (reward_quantity)];
        this.send_deck_entity_ids = ((IEnumerable<object>) json[nameof (send_deck_entity_ids)]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).ToArray<int>();
        this.is_possession = (bool) json[nameof (is_possession)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
        this.deck_entity_id = (int) (long) json[nameof (deck_entity_id)];
        this.reward_id = (int) (long) json[nameof (reward_id)];
      }
    }

    [Serializable]
    public class GachaG301PickupSelectSavePickup : KeyCompare
    {
      public int[] player_pickup_deck_entity_ids;

      public GachaG301PickupSelectSavePickup()
      {
      }

      public GachaG301PickupSelectSavePickup(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.player_pickup_deck_entity_ids = ((IEnumerable<object>) json[nameof (player_pickup_deck_entity_ids)]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).ToArray<int>();
      }
    }

    [Serializable]
    public class GachaGetPickupUnitMaxStatus : KeyCompare
    {
      public WebAPI.Response.GachaGetPickupUnitMaxStatusPickup_units[] pickup_units;

      public GachaGetPickupUnitMaxStatus()
      {
      }

      public GachaGetPickupUnitMaxStatus(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<WebAPI.Response.GachaGetPickupUnitMaxStatusPickup_units> statusPickupUnitsList = new List<WebAPI.Response.GachaGetPickupUnitMaxStatusPickup_units>();
        foreach (object json1 in (List<object>) json[nameof (pickup_units)])
          statusPickupUnitsList.Add(json1 == null ? (WebAPI.Response.GachaGetPickupUnitMaxStatusPickup_units) null : new WebAPI.Response.GachaGetPickupUnitMaxStatusPickup_units((Dictionary<string, object>) json1));
        this.pickup_units = statusPickupUnitsList.ToArray();
      }
    }

    [Serializable]
    public class GachaGetPickupUnitMaxStatusPickup_units : KeyCompare
    {
      public int unit_id;
      public WebAPI.Response.GachaGetPickupUnitMaxStatusPickup_unitsStatuses[] statuses;

      public GachaGetPickupUnitMaxStatusPickup_units()
      {
      }

      public GachaGetPickupUnitMaxStatusPickup_units(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.unit_id = (int) (long) json[nameof (unit_id)];
        List<WebAPI.Response.GachaGetPickupUnitMaxStatusPickup_unitsStatuses> pickupUnitsStatusesList = new List<WebAPI.Response.GachaGetPickupUnitMaxStatusPickup_unitsStatuses>();
        foreach (object json1 in (List<object>) json[nameof (statuses)])
          pickupUnitsStatusesList.Add(json1 == null ? (WebAPI.Response.GachaGetPickupUnitMaxStatusPickup_unitsStatuses) null : new WebAPI.Response.GachaGetPickupUnitMaxStatusPickup_unitsStatuses((Dictionary<string, object>) json1));
        this.statuses = pickupUnitsStatusesList.ToArray();
      }
    }

    [Serializable]
    public class GachaGetPickupUnitMaxStatusPickup_unitsStatuses : KeyCompare
    {
      public int dexterity;
      public int agility;
      public int strength;
      public int intelligence;
      public int hp;
      public int mind;
      public int lucky;
      public int vitality;
      public int unit_type;

      public GachaGetPickupUnitMaxStatusPickup_unitsStatuses()
      {
      }

      public GachaGetPickupUnitMaxStatusPickup_unitsStatuses(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.dexterity = (int) (long) json[nameof (dexterity)];
        this.agility = (int) (long) json[nameof (agility)];
        this.strength = (int) (long) json[nameof (strength)];
        this.intelligence = (int) (long) json[nameof (intelligence)];
        this.hp = (int) (long) json[nameof (hp)];
        this.mind = (int) (long) json[nameof (mind)];
        this.lucky = (int) (long) json[nameof (lucky)];
        this.vitality = (int) (long) json[nameof (vitality)];
        this.unit_type = (int) (long) json[nameof (unit_type)];
      }
    }

    [Serializable]
    public class GachaResume : KeyCompare
    {
      public WebAPI.Response.GachaResumeResult[] result;
      public PlayerMaterialGear[] player_material_gears;
      public PlayerCommonTicket[] player_common_tickets;
      public WebAPI.Response.GachaResumeAdditional_items[] additional_items;
      public PlayerUnit[] player_units;
      public int remaining_retry_count;
      public PlayerUnit[] player_unit_reserves;
      public PlayerItem[] player_items;
      public UnlockQuest[] unlock_quests;
      public GachaModule gacha_module;
      public PlayerUnit[] temp_player_units;
      public PlayerMaterialUnit[] player_material_units;
      public PlayerPresent[] player_presents;
      public DateTime? expired_at;

      public GachaResume()
      {
      }

      public GachaResume(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<WebAPI.Response.GachaResumeResult> gachaResumeResultList = new List<WebAPI.Response.GachaResumeResult>();
        foreach (object json1 in (List<object>) json[nameof (result)])
          gachaResumeResultList.Add(json1 == null ? (WebAPI.Response.GachaResumeResult) null : new WebAPI.Response.GachaResumeResult((Dictionary<string, object>) json1));
        this.result = gachaResumeResultList.ToArray();
        List<PlayerMaterialGear> playerMaterialGearList = new List<PlayerMaterialGear>();
        foreach (object json2 in (List<object>) json[nameof (player_material_gears)])
          playerMaterialGearList.Add(json2 == null ? (PlayerMaterialGear) null : new PlayerMaterialGear((Dictionary<string, object>) json2));
        this.player_material_gears = playerMaterialGearList.ToArray();
        SMManager.UpdateList<PlayerMaterialGear>(this.player_material_gears);
        List<PlayerCommonTicket> playerCommonTicketList = new List<PlayerCommonTicket>();
        foreach (object json3 in (List<object>) json[nameof (player_common_tickets)])
          playerCommonTicketList.Add(json3 == null ? (PlayerCommonTicket) null : new PlayerCommonTicket((Dictionary<string, object>) json3));
        this.player_common_tickets = playerCommonTicketList.ToArray();
        SMManager.UpdateList<PlayerCommonTicket>(this.player_common_tickets);
        List<WebAPI.Response.GachaResumeAdditional_items> resumeAdditionalItemsList = new List<WebAPI.Response.GachaResumeAdditional_items>();
        foreach (object json4 in (List<object>) json[nameof (additional_items)])
          resumeAdditionalItemsList.Add(json4 == null ? (WebAPI.Response.GachaResumeAdditional_items) null : new WebAPI.Response.GachaResumeAdditional_items((Dictionary<string, object>) json4));
        this.additional_items = resumeAdditionalItemsList.ToArray();
        SMManager.UpdateList<WebAPI.Response.GachaResumeAdditional_items>(this.additional_items);
        List<PlayerUnit> playerUnitList1 = new List<PlayerUnit>();
        foreach (object json5 in (List<object>) json[nameof (player_units)])
          playerUnitList1.Add(json5 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json5));
        this.player_units = playerUnitList1.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_units);
        this.remaining_retry_count = (int) (long) json[nameof (remaining_retry_count)];
        List<PlayerUnit> playerUnitList2 = new List<PlayerUnit>();
        foreach (object json6 in (List<object>) json[nameof (player_unit_reserves)])
          playerUnitList2.Add(json6 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json6));
        this.player_unit_reserves = playerUnitList2.ToArray();
        List<PlayerItem> playerItemList = new List<PlayerItem>();
        foreach (object json7 in (List<object>) json[nameof (player_items)])
          playerItemList.Add(json7 == null ? (PlayerItem) null : new PlayerItem((Dictionary<string, object>) json7));
        this.player_items = playerItemList.ToArray();
        SMManager.UpdateList<PlayerItem>(this.player_items);
        List<UnlockQuest> unlockQuestList = new List<UnlockQuest>();
        foreach (object json8 in (List<object>) json[nameof (unlock_quests)])
          unlockQuestList.Add(json8 == null ? (UnlockQuest) null : new UnlockQuest((Dictionary<string, object>) json8));
        this.unlock_quests = unlockQuestList.ToArray();
        this.gacha_module = json[nameof (gacha_module)] == null ? (GachaModule) null : new GachaModule((Dictionary<string, object>) json[nameof (gacha_module)]);
        SMManager.Change<GachaModule>(this.gacha_module);
        List<PlayerUnit> playerUnitList3 = new List<PlayerUnit>();
        foreach (object json9 in (List<object>) json[nameof (temp_player_units)])
          playerUnitList3.Add(json9 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json9));
        this.temp_player_units = playerUnitList3.ToArray();
        List<PlayerMaterialUnit> playerMaterialUnitList = new List<PlayerMaterialUnit>();
        foreach (object json10 in (List<object>) json[nameof (player_material_units)])
          playerMaterialUnitList.Add(json10 == null ? (PlayerMaterialUnit) null : new PlayerMaterialUnit((Dictionary<string, object>) json10));
        this.player_material_units = playerMaterialUnitList.ToArray();
        SMManager.UpdateList<PlayerMaterialUnit>(this.player_material_units);
        List<PlayerPresent> playerPresentList = new List<PlayerPresent>();
        foreach (object json11 in (List<object>) json[nameof (player_presents)])
          playerPresentList.Add(json11 == null ? (PlayerPresent) null : new PlayerPresent((Dictionary<string, object>) json11));
        this.player_presents = playerPresentList.ToArray();
        SMManager.UpdateList<PlayerPresent>(this.player_presents);
        this.expired_at = json[nameof (expired_at)] == null ? new DateTime?() : new DateTime?(DateTime.Parse((string) json[nameof (expired_at)]));
        if (!json.ContainsKey("player_presents:delete"))
          return;
        SMManager.DeleteList<PlayerPresent>(((IEnumerable<object>) json["player_presents:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class GachaResumeAdditional_items : KeyCompare
    {
      public int reward_quantity;
      public int reward_type_id;
      public int reward_id;

      public GachaResumeAdditional_items()
      {
      }

      public GachaResumeAdditional_items(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_quantity = (int) (long) json[nameof (reward_quantity)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
        this.reward_id = (int) (long) json[nameof (reward_id)];
      }
    }

    [Serializable]
    public class GachaResumeResult : KeyCompare
    {
      public int reward_type_id;
      public int reward_result_quantity;
      public bool is_new;
      public int reward_id;
      public int reward_result_id;

      public GachaResumeResult()
      {
      }

      public GachaResumeResult(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
        this.reward_result_quantity = (int) (long) json[nameof (reward_result_quantity)];
        this.is_new = (bool) json[nameof (is_new)];
        this.reward_id = (int) (long) json[nameof (reward_id)];
        this.reward_result_id = (int) (long) json[nameof (reward_result_id)];
      }
    }

    [Serializable]
    public class Gamekit2All : KeyCompare
    {
      public PlayerGameKit2AchievementResult[] achievements;

      public Gamekit2All()
      {
      }

      public Gamekit2All(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerGameKit2AchievementResult> achievementResultList = new List<PlayerGameKit2AchievementResult>();
        foreach (object json1 in (List<object>) json[nameof (achievements)])
          achievementResultList.Add(json1 == null ? (PlayerGameKit2AchievementResult) null : new PlayerGameKit2AchievementResult((Dictionary<string, object>) json1));
        this.achievements = achievementResultList.ToArray();
        SMManager.UpdateList<PlayerGameKit2AchievementResult>(this.achievements);
      }
    }

    [Serializable]
    public class GamekitAll : KeyCompare
    {
      public UserAchievements[] achievements;

      public GamekitAll()
      {
      }

      public GamekitAll(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<UserAchievements> userAchievementsList = new List<UserAchievements>();
        foreach (object json1 in (List<object>) json[nameof (achievements)])
          userAchievementsList.Add(json1 == null ? (UserAchievements) null : new UserAchievements((Dictionary<string, object>) json1));
        this.achievements = userAchievementsList.ToArray();
        SMManager.UpdateList<UserAchievements>(this.achievements);
      }
    }

    [Serializable]
    public class GuildApplicantsAccept : KeyCompare
    {
      public PlayerAffiliation player_affiliation;

      public GuildApplicantsAccept()
      {
      }

      public GuildApplicantsAccept(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.player_affiliation = json[nameof (player_affiliation)] == null ? (PlayerAffiliation) null : new PlayerAffiliation((Dictionary<string, object>) json[nameof (player_affiliation)]);
        SMManager.Change<PlayerAffiliation>(this.player_affiliation);
      }
    }

    [Serializable]
    public class GuildApplicantsCancel : KeyCompare
    {
      public PlayerAffiliation player_affiliation;

      public GuildApplicantsCancel()
      {
      }

      public GuildApplicantsCancel(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.player_affiliation = json[nameof (player_affiliation)] == null ? (PlayerAffiliation) null : new PlayerAffiliation((Dictionary<string, object>) json[nameof (player_affiliation)]);
        SMManager.Change<PlayerAffiliation>(this.player_affiliation);
      }
    }

    [Serializable]
    public class GuildApplicantsReject : KeyCompare
    {
      public PlayerAffiliation player_affiliation;

      public GuildApplicantsReject()
      {
      }

      public GuildApplicantsReject(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.player_affiliation = json[nameof (player_affiliation)] == null ? (PlayerAffiliation) null : new PlayerAffiliation((Dictionary<string, object>) json[nameof (player_affiliation)]);
        SMManager.Change<PlayerAffiliation>(this.player_affiliation);
      }
    }

    [Serializable]
    public class GuildApplicantsSend : KeyCompare
    {
      public bool display_transfer_popup;
      public PlayerAffiliation player_affiliation;
      public bool within_applicant_period;

      public GuildApplicantsSend()
      {
      }

      public GuildApplicantsSend(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.display_transfer_popup = (bool) json[nameof (display_transfer_popup)];
        this.player_affiliation = json[nameof (player_affiliation)] == null ? (PlayerAffiliation) null : new PlayerAffiliation((Dictionary<string, object>) json[nameof (player_affiliation)]);
        SMManager.Change<PlayerAffiliation>(this.player_affiliation);
        this.within_applicant_period = (bool) json[nameof (within_applicant_period)];
      }
    }

    [Serializable]
    public class GuildBankContact : KeyCompare
    {
      public GuildBank bank;

      public GuildBankContact()
      {
      }

      public GuildBankContact(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.bank = json[nameof (bank)] == null ? (GuildBank) null : new GuildBank((Dictionary<string, object>) json[nameof (bank)]);
      }
    }

    [Serializable]
    public class GuildBankInvest : KeyCompare
    {
      public Player player;
      public PlayerAffiliation player_affiliation;
      public GuildBank from_bank;
      public int[] level_cmp;
      public GuildBank bank;

      public GuildBankInvest()
      {
      }

      public GuildBankInvest(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.player = json[nameof (player)] == null ? (Player) null : new Player((Dictionary<string, object>) json[nameof (player)]);
        SMManager.Change<Player>(this.player);
        this.player_affiliation = json[nameof (player_affiliation)] == null ? (PlayerAffiliation) null : new PlayerAffiliation((Dictionary<string, object>) json[nameof (player_affiliation)]);
        SMManager.Change<PlayerAffiliation>(this.player_affiliation);
        this.from_bank = json[nameof (from_bank)] == null ? (GuildBank) null : new GuildBank((Dictionary<string, object>) json[nameof (from_bank)]);
        this.level_cmp = ((IEnumerable<object>) json[nameof (level_cmp)]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).ToArray<int>();
        this.bank = json[nameof (bank)] == null ? (GuildBank) null : new GuildBank((Dictionary<string, object>) json[nameof (bank)]);
      }
    }

    [Serializable]
    public class GuildBaseInvest : KeyCompare
    {
      public PlayerAffiliation player_affiliation;

      public GuildBaseInvest()
      {
      }

      public GuildBaseInvest(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.player_affiliation = json[nameof (player_affiliation)] == null ? (PlayerAffiliation) null : new PlayerAffiliation((Dictionary<string, object>) json[nameof (player_affiliation)]);
        SMManager.Change<PlayerAffiliation>(this.player_affiliation);
      }
    }

    [Serializable]
    public class GuildBroadcastMessage : KeyCompare
    {
      public PlayerAffiliation player_affiliation;

      public GuildBroadcastMessage()
      {
      }

      public GuildBroadcastMessage(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.player_affiliation = json[nameof (player_affiliation)] == null ? (PlayerAffiliation) null : new PlayerAffiliation((Dictionary<string, object>) json[nameof (player_affiliation)]);
        SMManager.Change<PlayerAffiliation>(this.player_affiliation);
      }
    }

    [Serializable]
    public class GuildCheckin : KeyCompare
    {
      public PlayerPresent[] player_presents;

      public GuildCheckin()
      {
      }

      public GuildCheckin(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerPresent> playerPresentList = new List<PlayerPresent>();
        foreach (object json1 in (List<object>) json[nameof (player_presents)])
          playerPresentList.Add(json1 == null ? (PlayerPresent) null : new PlayerPresent((Dictionary<string, object>) json1));
        this.player_presents = playerPresentList.ToArray();
        SMManager.UpdateList<PlayerPresent>(this.player_presents);
        if (!json.ContainsKey("player_presents:delete"))
          return;
        SMManager.DeleteList<PlayerPresent>(((IEnumerable<object>) json["player_presents:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class GuildDissolute : KeyCompare
    {
      public PlayerAffiliation player_affiliation;

      public GuildDissolute()
      {
      }

      public GuildDissolute(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.player_affiliation = json[nameof (player_affiliation)] == null ? (PlayerAffiliation) null : new PlayerAffiliation((Dictionary<string, object>) json[nameof (player_affiliation)]);
        SMManager.Change<PlayerAffiliation>(this.player_affiliation);
      }
    }

    [Serializable]
    public class GuildEmblemIndex : KeyCompare
    {
      public GuildDisplayEmblem[] emblems;

      public GuildEmblemIndex()
      {
      }

      public GuildEmblemIndex(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<GuildDisplayEmblem> guildDisplayEmblemList = new List<GuildDisplayEmblem>();
        foreach (object json1 in (List<object>) json[nameof (emblems)])
          guildDisplayEmblemList.Add(json1 == null ? (GuildDisplayEmblem) null : new GuildDisplayEmblem((Dictionary<string, object>) json1));
        this.emblems = guildDisplayEmblemList.ToArray();
      }
    }

    [Serializable]
    public class GuildEmblemSetting : KeyCompare
    {
      public PlayerAffiliation player_affiliation;

      public GuildEmblemSetting()
      {
      }

      public GuildEmblemSetting(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.player_affiliation = json[nameof (player_affiliation)] == null ? (PlayerAffiliation) null : new PlayerAffiliation((Dictionary<string, object>) json[nameof (player_affiliation)]);
        SMManager.Change<PlayerAffiliation>(this.player_affiliation);
      }
    }

    [Serializable]
    public class GuildEmblemUnsetting : KeyCompare
    {
      public PlayerAffiliation player_affiliation;

      public GuildEmblemUnsetting()
      {
      }

      public GuildEmblemUnsetting(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.player_affiliation = json[nameof (player_affiliation)] == null ? (PlayerAffiliation) null : new PlayerAffiliation((Dictionary<string, object>) json[nameof (player_affiliation)]);
        SMManager.Change<PlayerAffiliation>(this.player_affiliation);
      }
    }

    [Serializable]
    public class GuildEstablish : KeyCompare
    {
      public PlayerAffiliation player_affiliation;

      public GuildEstablish()
      {
      }

      public GuildEstablish(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.player_affiliation = json[nameof (player_affiliation)] == null ? (PlayerAffiliation) null : new PlayerAffiliation((Dictionary<string, object>) json[nameof (player_affiliation)]);
        SMManager.Change<PlayerAffiliation>(this.player_affiliation);
      }
    }

    [Serializable]
    public class GuildFriendAffiliations : KeyCompare
    {
      public FriendAffiliation[] friend_affiliations;

      public GuildFriendAffiliations()
      {
      }

      public GuildFriendAffiliations(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<FriendAffiliation> friendAffiliationList = new List<FriendAffiliation>();
        foreach (object json1 in (List<object>) json[nameof (friend_affiliations)])
          friendAffiliationList.Add(json1 == null ? (FriendAffiliation) null : new FriendAffiliation((Dictionary<string, object>) json1));
        this.friend_affiliations = friendAffiliationList.ToArray();
      }
    }

    [Serializable]
    public class GuildGiftGetWishListMaster : KeyCompare
    {
      public GuildGift[] gift_mst;

      public GuildGiftGetWishListMaster()
      {
      }

      public GuildGiftGetWishListMaster(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<GuildGift> guildGiftList = new List<GuildGift>();
        foreach (object json1 in (List<object>) json[nameof (gift_mst)])
          guildGiftList.Add(json1 == null ? (GuildGift) null : new GuildGift((Dictionary<string, object>) json1));
        this.gift_mst = guildGiftList.ToArray();
        SMManager.UpdateList<GuildGift>(this.gift_mst);
      }
    }

    [Serializable]
    public class GuildGiftReceiveExecute : KeyCompare
    {
      public PlayerMaterialGear[] player_material_gears;
      public PlayerCommonTicket[] player_common_tickets;
      public PlayerUnit[] player_units;
      public PlayerItem[] player_items;
      public GuildMemberGift[] player_gift;
      public Player player;
      public PlayerMaterialUnit[] player_material_units;
      public PlayerPresent[] player_presents;
      public PlayerQuestKey[] player_quest_keys;

      public GuildGiftReceiveExecute()
      {
      }

      public GuildGiftReceiveExecute(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerMaterialGear> playerMaterialGearList = new List<PlayerMaterialGear>();
        foreach (object json1 in (List<object>) json[nameof (player_material_gears)])
          playerMaterialGearList.Add(json1 == null ? (PlayerMaterialGear) null : new PlayerMaterialGear((Dictionary<string, object>) json1));
        this.player_material_gears = playerMaterialGearList.ToArray();
        SMManager.UpdateList<PlayerMaterialGear>(this.player_material_gears);
        List<PlayerCommonTicket> playerCommonTicketList = new List<PlayerCommonTicket>();
        foreach (object json2 in (List<object>) json[nameof (player_common_tickets)])
          playerCommonTicketList.Add(json2 == null ? (PlayerCommonTicket) null : new PlayerCommonTicket((Dictionary<string, object>) json2));
        this.player_common_tickets = playerCommonTicketList.ToArray();
        SMManager.UpdateList<PlayerCommonTicket>(this.player_common_tickets);
        List<PlayerUnit> playerUnitList = new List<PlayerUnit>();
        foreach (object json3 in (List<object>) json[nameof (player_units)])
          playerUnitList.Add(json3 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json3));
        this.player_units = playerUnitList.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_units);
        List<PlayerItem> playerItemList = new List<PlayerItem>();
        foreach (object json4 in (List<object>) json[nameof (player_items)])
          playerItemList.Add(json4 == null ? (PlayerItem) null : new PlayerItem((Dictionary<string, object>) json4));
        this.player_items = playerItemList.ToArray();
        SMManager.UpdateList<PlayerItem>(this.player_items);
        List<GuildMemberGift> guildMemberGiftList = new List<GuildMemberGift>();
        foreach (object json5 in (List<object>) json[nameof (player_gift)])
          guildMemberGiftList.Add(json5 == null ? (GuildMemberGift) null : new GuildMemberGift((Dictionary<string, object>) json5));
        this.player_gift = guildMemberGiftList.ToArray();
        SMManager.UpdateList<GuildMemberGift>(this.player_gift);
        this.player = json[nameof (player)] == null ? (Player) null : new Player((Dictionary<string, object>) json[nameof (player)]);
        SMManager.Change<Player>(this.player);
        List<PlayerMaterialUnit> playerMaterialUnitList = new List<PlayerMaterialUnit>();
        foreach (object json6 in (List<object>) json[nameof (player_material_units)])
          playerMaterialUnitList.Add(json6 == null ? (PlayerMaterialUnit) null : new PlayerMaterialUnit((Dictionary<string, object>) json6));
        this.player_material_units = playerMaterialUnitList.ToArray();
        SMManager.UpdateList<PlayerMaterialUnit>(this.player_material_units);
        List<PlayerPresent> playerPresentList = new List<PlayerPresent>();
        foreach (object json7 in (List<object>) json[nameof (player_presents)])
          playerPresentList.Add(json7 == null ? (PlayerPresent) null : new PlayerPresent((Dictionary<string, object>) json7));
        this.player_presents = playerPresentList.ToArray();
        SMManager.UpdateList<PlayerPresent>(this.player_presents);
        List<PlayerQuestKey> playerQuestKeyList = new List<PlayerQuestKey>();
        foreach (object json8 in (List<object>) json[nameof (player_quest_keys)])
          playerQuestKeyList.Add(json8 == null ? (PlayerQuestKey) null : new PlayerQuestKey((Dictionary<string, object>) json8));
        this.player_quest_keys = playerQuestKeyList.ToArray();
        SMManager.UpdateList<PlayerQuestKey>(this.player_quest_keys);
        if (!json.ContainsKey("player_presents:delete"))
          return;
        SMManager.DeleteList<PlayerPresent>(((IEnumerable<object>) json["player_presents:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class GuildGiftReceiveList : KeyCompare
    {
      public GuildMemberGift[] player_gift;

      public GuildGiftReceiveList()
      {
      }

      public GuildGiftReceiveList(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<GuildMemberGift> guildMemberGiftList = new List<GuildMemberGift>();
        foreach (object json1 in (List<object>) json[nameof (player_gift)])
          guildMemberGiftList.Add(json1 == null ? (GuildMemberGift) null : new GuildMemberGift((Dictionary<string, object>) json1));
        this.player_gift = guildMemberGiftList.ToArray();
        SMManager.UpdateList<GuildMemberGift>(this.player_gift);
      }
    }

    [Serializable]
    public class GuildGiftSendExecute : KeyCompare
    {
      public GuildMemberGift[] player_send;

      public GuildGiftSendExecute()
      {
      }

      public GuildGiftSendExecute(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<GuildMemberGift> guildMemberGiftList = new List<GuildMemberGift>();
        foreach (object json1 in (List<object>) json[nameof (player_send)])
          guildMemberGiftList.Add(json1 == null ? (GuildMemberGift) null : new GuildMemberGift((Dictionary<string, object>) json1));
        this.player_send = guildMemberGiftList.ToArray();
        SMManager.UpdateList<GuildMemberGift>(this.player_send);
      }
    }

    [Serializable]
    public class GuildGiftSendList : KeyCompare
    {
      public GuildMemberGift[] player_send;

      public GuildGiftSendList()
      {
      }

      public GuildGiftSendList(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<GuildMemberGift> guildMemberGiftList = new List<GuildMemberGift>();
        foreach (object json1 in (List<object>) json[nameof (player_send)])
          guildMemberGiftList.Add(json1 == null ? (GuildMemberGift) null : new GuildMemberGift((Dictionary<string, object>) json1));
        this.player_send = guildMemberGiftList.ToArray();
        SMManager.UpdateList<GuildMemberGift>(this.player_send);
      }
    }

    [Serializable]
    public class GuildGiftUpdateWishList : KeyCompare
    {
      public PlayerAffiliation player_affiliation;

      public GuildGiftUpdateWishList()
      {
      }

      public GuildGiftUpdateWishList(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.player_affiliation = json[nameof (player_affiliation)] == null ? (PlayerAffiliation) null : new PlayerAffiliation((Dictionary<string, object>) json[nameof (player_affiliation)]);
        SMManager.Change<PlayerAffiliation>(this.player_affiliation);
      }
    }

    [Serializable]
    public class GuildInfo : KeyCompare
    {
      public GuildDirectory guild;

      public GuildInfo()
      {
      }

      public GuildInfo(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.guild = json[nameof (guild)] == null ? (GuildDirectory) null : new GuildDirectory((Dictionary<string, object>) json[nameof (guild)]);
      }
    }

    [Serializable]
    public class GuildlogAutoupdate : KeyCompare
    {
      public SM.GuildSignal guild_signal;
      public int remaining_logs_count;
      public GuildLog[] guild_logs;

      public GuildlogAutoupdate()
      {
      }

      public GuildlogAutoupdate(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.guild_signal = json[nameof (guild_signal)] == null ? (SM.GuildSignal) null : new SM.GuildSignal((Dictionary<string, object>) json[nameof (guild_signal)]);
        SMManager.Change<SM.GuildSignal>(this.guild_signal);
        this.remaining_logs_count = (int) (long) json[nameof (remaining_logs_count)];
        List<GuildLog> guildLogList = new List<GuildLog>();
        foreach (object json1 in (List<object>) json[nameof (guild_logs)])
          guildLogList.Add(json1 == null ? (GuildLog) null : new GuildLog((Dictionary<string, object>) json1));
        this.guild_logs = guildLogList.ToArray();
        SMManager.UpdateList<GuildLog>(this.guild_logs);
      }
    }

    [Serializable]
    public class GuildlogMemberShowLatest : KeyCompare
    {
      public WebAPI.Response.GuildlogMemberShowLatestGuild_logs[] guild_logs;

      public GuildlogMemberShowLatest()
      {
      }

      public GuildlogMemberShowLatest(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<WebAPI.Response.GuildlogMemberShowLatestGuild_logs> showLatestGuildLogsList = new List<WebAPI.Response.GuildlogMemberShowLatestGuild_logs>();
        foreach (object json1 in (List<object>) json[nameof (guild_logs)])
          showLatestGuildLogsList.Add(json1 == null ? (WebAPI.Response.GuildlogMemberShowLatestGuild_logs) null : new WebAPI.Response.GuildlogMemberShowLatestGuild_logs((Dictionary<string, object>) json1));
        this.guild_logs = showLatestGuildLogsList.ToArray();
      }
    }

    [Serializable]
    public class GuildlogMemberShowLatestGuild_logs : KeyCompare
    {
      public bool is_deleted;
      public string log_id;
      public string created_at;
      public string log_author_id;
      public string log_author_name;
      public string log_text;
      public int log_type;

      public GuildlogMemberShowLatestGuild_logs()
      {
      }

      public GuildlogMemberShowLatestGuild_logs(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.is_deleted = (bool) json[nameof (is_deleted)];
        this.log_id = (string) json[nameof (log_id)];
        this.created_at = json[nameof (created_at)] == null ? (string) null : (string) json[nameof (created_at)];
        this.log_author_id = json[nameof (log_author_id)] == null ? (string) null : (string) json[nameof (log_author_id)];
        this.log_author_name = json[nameof (log_author_name)] == null ? (string) null : (string) json[nameof (log_author_name)];
        this.log_text = (string) json[nameof (log_text)];
        this.log_type = (int) (long) json[nameof (log_type)];
      }
    }

    [Serializable]
    public class GuildlogMemberShowPast : KeyCompare
    {
      public WebAPI.Response.GuildlogMemberShowPastGuild_logs[] guild_logs;

      public GuildlogMemberShowPast()
      {
      }

      public GuildlogMemberShowPast(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<WebAPI.Response.GuildlogMemberShowPastGuild_logs> showPastGuildLogsList = new List<WebAPI.Response.GuildlogMemberShowPastGuild_logs>();
        foreach (object json1 in (List<object>) json[nameof (guild_logs)])
          showPastGuildLogsList.Add(json1 == null ? (WebAPI.Response.GuildlogMemberShowPastGuild_logs) null : new WebAPI.Response.GuildlogMemberShowPastGuild_logs((Dictionary<string, object>) json1));
        this.guild_logs = showPastGuildLogsList.ToArray();
      }
    }

    [Serializable]
    public class GuildlogMemberShowPastGuild_logs : KeyCompare
    {
      public bool is_deleted;
      public string log_id;
      public string created_at;
      public string log_author_id;
      public string log_author_name;
      public string log_text;
      public int log_type;

      public GuildlogMemberShowPastGuild_logs()
      {
      }

      public GuildlogMemberShowPastGuild_logs(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.is_deleted = (bool) json[nameof (is_deleted)];
        this.log_id = (string) json[nameof (log_id)];
        this.created_at = json[nameof (created_at)] == null ? (string) null : (string) json[nameof (created_at)];
        this.log_author_id = json[nameof (log_author_id)] == null ? (string) null : (string) json[nameof (log_author_id)];
        this.log_author_name = json[nameof (log_author_name)] == null ? (string) null : (string) json[nameof (log_author_name)];
        this.log_text = (string) json[nameof (log_text)];
        this.log_type = (int) (long) json[nameof (log_type)];
      }
    }

    [Serializable]
    public class GuildlogSendStamp : KeyCompare
    {
      public bool result;

      public GuildlogSendStamp()
      {
      }

      public GuildlogSendStamp(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.result = (bool) json[nameof (result)];
      }
    }

    [Serializable]
    public class GuildlogShowPast : KeyCompare
    {
      public PlayerAffiliation player_affiliation;
      public GuildLog[] guild_logs;

      public GuildlogShowPast()
      {
      }

      public GuildlogShowPast(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.player_affiliation = json[nameof (player_affiliation)] == null ? (PlayerAffiliation) null : new PlayerAffiliation((Dictionary<string, object>) json[nameof (player_affiliation)]);
        SMManager.Change<PlayerAffiliation>(this.player_affiliation);
        List<GuildLog> guildLogList = new List<GuildLog>();
        foreach (object json1 in (List<object>) json[nameof (guild_logs)])
          guildLogList.Add(json1 == null ? (GuildLog) null : new GuildLog((Dictionary<string, object>) json1));
        this.guild_logs = guildLogList.ToArray();
      }
    }

    [Serializable]
    public class GuildlogWrite : KeyCompare
    {
      public bool result;

      public GuildlogWrite()
      {
      }

      public GuildlogWrite(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.result = (bool) json[nameof (result)];
      }
    }

    [Serializable]
    public class GuildMasterResign : KeyCompare
    {
      public PlayerAffiliation player_affiliation;

      public GuildMasterResign()
      {
      }

      public GuildMasterResign(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.player_affiliation = json[nameof (player_affiliation)] == null ? (PlayerAffiliation) null : new PlayerAffiliation((Dictionary<string, object>) json[nameof (player_affiliation)]);
        SMManager.Change<PlayerAffiliation>(this.player_affiliation);
      }
    }

    [Serializable]
    public class GuildMasterTransfer : KeyCompare
    {
      public PlayerAffiliation player_affiliation;

      public GuildMasterTransfer()
      {
      }

      public GuildMasterTransfer(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.player_affiliation = json[nameof (player_affiliation)] == null ? (PlayerAffiliation) null : new PlayerAffiliation((Dictionary<string, object>) json[nameof (player_affiliation)]);
        SMManager.Change<PlayerAffiliation>(this.player_affiliation);
      }
    }

    [Serializable]
    public class GuildMembershipsBanish : KeyCompare
    {
      public PlayerAffiliation player_affiliation;

      public GuildMembershipsBanish()
      {
      }

      public GuildMembershipsBanish(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.player_affiliation = json[nameof (player_affiliation)] == null ? (PlayerAffiliation) null : new PlayerAffiliation((Dictionary<string, object>) json[nameof (player_affiliation)]);
        SMManager.Change<PlayerAffiliation>(this.player_affiliation);
      }
    }

    [Serializable]
    public class GuildMembershipsLeave : KeyCompare
    {
      public PlayerAffiliation player_affiliation;

      public GuildMembershipsLeave()
      {
      }

      public GuildMembershipsLeave(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.player_affiliation = json[nameof (player_affiliation)] == null ? (PlayerAffiliation) null : new PlayerAffiliation((Dictionary<string, object>) json[nameof (player_affiliation)]);
        SMManager.Change<PlayerAffiliation>(this.player_affiliation);
      }
    }

    [Serializable]
    public class GuildmissionBulkReceive : KeyCompare
    {
      public PlayerUnit[] player_units;
      public GuildMissionInfo[] player_guild_missions;
      public Player player;
      public int[] received_missions;
      public PlayerPresent[] player_presents;

      public GuildmissionBulkReceive()
      {
      }

      public GuildmissionBulkReceive(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerUnit> playerUnitList = new List<PlayerUnit>();
        foreach (object json1 in (List<object>) json[nameof (player_units)])
          playerUnitList.Add(json1 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json1));
        this.player_units = playerUnitList.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_units);
        List<GuildMissionInfo> guildMissionInfoList = new List<GuildMissionInfo>();
        foreach (object json2 in (List<object>) json[nameof (player_guild_missions)])
          guildMissionInfoList.Add(json2 == null ? (GuildMissionInfo) null : new GuildMissionInfo((Dictionary<string, object>) json2));
        this.player_guild_missions = guildMissionInfoList.ToArray();
        SMManager.UpdateList<GuildMissionInfo>(this.player_guild_missions);
        this.player = json[nameof (player)] == null ? (Player) null : new Player((Dictionary<string, object>) json[nameof (player)]);
        SMManager.Change<Player>(this.player);
        this.received_missions = ((IEnumerable<object>) json[nameof (received_missions)]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).ToArray<int>();
        List<PlayerPresent> playerPresentList = new List<PlayerPresent>();
        foreach (object json3 in (List<object>) json[nameof (player_presents)])
          playerPresentList.Add(json3 == null ? (PlayerPresent) null : new PlayerPresent((Dictionary<string, object>) json3));
        this.player_presents = playerPresentList.ToArray();
        SMManager.UpdateList<PlayerPresent>(this.player_presents);
        if (!json.ContainsKey("player_presents:delete"))
          return;
        SMManager.DeleteList<PlayerPresent>(((IEnumerable<object>) json["player_presents:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class GuildmissionIndex : KeyCompare
    {
      public Player player;
      public GuildMissionInfo[] player_guild_missions;

      public GuildmissionIndex()
      {
      }

      public GuildmissionIndex(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.player = json[nameof (player)] == null ? (Player) null : new Player((Dictionary<string, object>) json[nameof (player)]);
        SMManager.Change<Player>(this.player);
        List<GuildMissionInfo> guildMissionInfoList = new List<GuildMissionInfo>();
        foreach (object json1 in (List<object>) json[nameof (player_guild_missions)])
          guildMissionInfoList.Add(json1 == null ? (GuildMissionInfo) null : new GuildMissionInfo((Dictionary<string, object>) json1));
        this.player_guild_missions = guildMissionInfoList.ToArray();
        SMManager.UpdateList<GuildMissionInfo>(this.player_guild_missions);
      }
    }

    [Serializable]
    public class GuildmissionReceive : KeyCompare
    {
      public Player player;
      public GuildMissionInfo[] player_guild_missions;
      public PlayerPresent[] player_presents;
      public PlayerUnit[] player_units;

      public GuildmissionReceive()
      {
      }

      public GuildmissionReceive(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.player = json[nameof (player)] == null ? (Player) null : new Player((Dictionary<string, object>) json[nameof (player)]);
        SMManager.Change<Player>(this.player);
        List<GuildMissionInfo> guildMissionInfoList = new List<GuildMissionInfo>();
        foreach (object json1 in (List<object>) json[nameof (player_guild_missions)])
          guildMissionInfoList.Add(json1 == null ? (GuildMissionInfo) null : new GuildMissionInfo((Dictionary<string, object>) json1));
        this.player_guild_missions = guildMissionInfoList.ToArray();
        SMManager.UpdateList<GuildMissionInfo>(this.player_guild_missions);
        List<PlayerPresent> playerPresentList = new List<PlayerPresent>();
        foreach (object json2 in (List<object>) json[nameof (player_presents)])
          playerPresentList.Add(json2 == null ? (PlayerPresent) null : new PlayerPresent((Dictionary<string, object>) json2));
        this.player_presents = playerPresentList.ToArray();
        SMManager.UpdateList<PlayerPresent>(this.player_presents);
        List<PlayerUnit> playerUnitList = new List<PlayerUnit>();
        foreach (object json3 in (List<object>) json[nameof (player_units)])
          playerUnitList.Add(json3 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json3));
        this.player_units = playerUnitList.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_units);
        if (!json.ContainsKey("player_presents:delete"))
          return;
        SMManager.DeleteList<PlayerPresent>(((IEnumerable<object>) json["player_presents:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class GuildPrivateMessage : KeyCompare
    {
      public PlayerAffiliation player_affiliation;

      public GuildPrivateMessage()
      {
      }

      public GuildPrivateMessage(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.player_affiliation = json[nameof (player_affiliation)] == null ? (PlayerAffiliation) null : new PlayerAffiliation((Dictionary<string, object>) json[nameof (player_affiliation)]);
        SMManager.Change<PlayerAffiliation>(this.player_affiliation);
      }
    }

    [Serializable]
    public class GuildraidBattleDetail : KeyCompare
    {
      public int next_stage_id;
      public int? damage_rank_in_guild;
      public int rp;
      public int boss_total_damage;
      public int[] used_player_unit_ids;
      public int loop_count;
      public bool is_started_endless;
      public int? damage_rank_in_all;
      public int stage_id;
      public string recommend_strength;
      public int order;
      public bool drop_info_display_flag;
      public string quest_name;
      public int boss_damage_ratio;
      public int boss_id;
      public WebAPI.Response.GuildraidBattleDetailDrop_items[] drop_items;
      public WebAPI.Response.GuildraidBattleDetailEnemy_info_list enemy_info_list;

      public GuildraidBattleDetail()
      {
      }

      public GuildraidBattleDetail(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.next_stage_id = (int) (long) json[nameof (next_stage_id)];
        long? nullable1;
        int? nullable2;
        if (json[nameof (damage_rank_in_guild)] != null)
        {
          nullable1 = (long?) json[nameof (damage_rank_in_guild)];
          nullable2 = nullable1.HasValue ? new int?((int) nullable1.GetValueOrDefault()) : new int?();
        }
        else
          nullable2 = new int?();
        this.damage_rank_in_guild = nullable2;
        this.rp = (int) (long) json[nameof (rp)];
        this.boss_total_damage = (int) (long) json[nameof (boss_total_damage)];
        this.used_player_unit_ids = ((IEnumerable<object>) json[nameof (used_player_unit_ids)]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).ToArray<int>();
        this.loop_count = (int) (long) json[nameof (loop_count)];
        this.is_started_endless = (bool) json[nameof (is_started_endless)];
        int? nullable3;
        if (json[nameof (damage_rank_in_all)] != null)
        {
          nullable1 = (long?) json[nameof (damage_rank_in_all)];
          nullable3 = nullable1.HasValue ? new int?((int) nullable1.GetValueOrDefault()) : new int?();
        }
        else
          nullable3 = new int?();
        this.damage_rank_in_all = nullable3;
        this.stage_id = (int) (long) json[nameof (stage_id)];
        this.recommend_strength = (string) json[nameof (recommend_strength)];
        this.order = (int) (long) json[nameof (order)];
        this.drop_info_display_flag = (bool) json[nameof (drop_info_display_flag)];
        this.quest_name = (string) json[nameof (quest_name)];
        this.boss_damage_ratio = (int) (long) json[nameof (boss_damage_ratio)];
        this.boss_id = (int) (long) json[nameof (boss_id)];
        List<WebAPI.Response.GuildraidBattleDetailDrop_items> battleDetailDropItemsList = new List<WebAPI.Response.GuildraidBattleDetailDrop_items>();
        foreach (object json1 in (List<object>) json[nameof (drop_items)])
          battleDetailDropItemsList.Add(json1 == null ? (WebAPI.Response.GuildraidBattleDetailDrop_items) null : new WebAPI.Response.GuildraidBattleDetailDrop_items((Dictionary<string, object>) json1));
        this.drop_items = battleDetailDropItemsList.ToArray();
        this.enemy_info_list = json[nameof (enemy_info_list)] == null ? (WebAPI.Response.GuildraidBattleDetailEnemy_info_list) null : new WebAPI.Response.GuildraidBattleDetailEnemy_info_list((Dictionary<string, object>) json[nameof (enemy_info_list)]);
      }
    }

    [Serializable]
    public class GuildraidBattleDetailEnemy_info_list : KeyCompare
    {
      public WebAPI.Response.GuildraidBattleDetailEnemy_info_listUnit_list[] unit_list;
      public int[] kind_ids;

      public GuildraidBattleDetailEnemy_info_list()
      {
      }

      public GuildraidBattleDetailEnemy_info_list(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<WebAPI.Response.GuildraidBattleDetailEnemy_info_listUnit_list> infoListUnitListList = new List<WebAPI.Response.GuildraidBattleDetailEnemy_info_listUnit_list>();
        foreach (object json1 in (List<object>) json[nameof (unit_list)])
          infoListUnitListList.Add(json1 == null ? (WebAPI.Response.GuildraidBattleDetailEnemy_info_listUnit_list) null : new WebAPI.Response.GuildraidBattleDetailEnemy_info_listUnit_list((Dictionary<string, object>) json1));
        this.unit_list = infoListUnitListList.ToArray();
        this.kind_ids = ((IEnumerable<object>) json[nameof (kind_ids)]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).ToArray<int>();
      }
    }

    [Serializable]
    public class GuildraidBattleDetailEnemy_info_listUnit_list : KeyCompare
    {
      public int[] skill_ids;
      public WebAPI.Response.GuildraidBattleDetailEnemy_info_listUnit_listGear gear;
      public int unit_id;

      public GuildraidBattleDetailEnemy_info_listUnit_list()
      {
      }

      public GuildraidBattleDetailEnemy_info_listUnit_list(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.skill_ids = ((IEnumerable<object>) json[nameof (skill_ids)]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).ToArray<int>();
        this.gear = json[nameof (gear)] == null ? (WebAPI.Response.GuildraidBattleDetailEnemy_info_listUnit_listGear) null : new WebAPI.Response.GuildraidBattleDetailEnemy_info_listUnit_listGear((Dictionary<string, object>) json[nameof (gear)]);
        this.unit_id = (int) (long) json[nameof (unit_id)];
      }
    }

    [Serializable]
    public class GuildraidBattleDetailEnemy_info_listUnit_listGear : KeyCompare
    {
      public int gear_id;
      public int rank;

      public GuildraidBattleDetailEnemy_info_listUnit_listGear()
      {
      }

      public GuildraidBattleDetailEnemy_info_listUnit_listGear(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.gear_id = (int) (long) json[nameof (gear_id)];
        this.rank = (int) (long) json[nameof (rank)];
      }
    }

    [Serializable]
    public class GuildraidBattleDetailDrop_items : KeyCompare
    {
      public int reward_quantity;
      public int id;
      public int reward_id;
      public int reward_type_id;

      public GuildraidBattleDetailDrop_items()
      {
      }

      public GuildraidBattleDetailDrop_items(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_quantity = (int) (long) json[nameof (reward_quantity)];
        this.id = (int) (long) json[nameof (id)];
        this.reward_id = (int) (long) json[nameof (reward_id)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
      }
    }

    [Serializable]
    public class GuildraidBattleEditSupplyDeck : KeyCompare
    {
      public Player player;
      public PlayerItem[] player_items;

      public GuildraidBattleEditSupplyDeck()
      {
      }

      public GuildraidBattleEditSupplyDeck(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.player = json[nameof (player)] == null ? (Player) null : new Player((Dictionary<string, object>) json[nameof (player)]);
        SMManager.Change<Player>(this.player);
        List<PlayerItem> playerItemList = new List<PlayerItem>();
        foreach (object json1 in (List<object>) json[nameof (player_items)])
          playerItemList.Add(json1 == null ? (PlayerItem) null : new PlayerItem((Dictionary<string, object>) json1));
        this.player_items = playerItemList.ToArray();
        SMManager.UpdateList<PlayerItem>(this.player_items);
        if (!json.ContainsKey("player_items:delete"))
          return;
        SMManager.DeleteList<PlayerItem>(((IEnumerable<object>) json["player_items:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class GuildraidBattleFinish : KeyCompare
    {
      public int stage_id;
      public Player player;
      public BattleEnd battle_finish;
      public bool already_defeated;
      public int boss_id;
      public PlayerQuestKey[] player_quest_keys;
      public int boss_total_damage;
      public int loop_count;
      public bool is_simulation;
      public PlayerAwakeSkill[] player_awake_skills;
      public int boss_damage;
      public PlayerUnit[] player_units;
      public PlayerUnitTypeTicket[] player_unit_type_tickets;
      public PlayerItem[] player_items;
      public RaidDamageReward[] damage_rewards;
      public PlayerMaterialUnit[] player_material_units;
      public PlayerPresent[] player_presents;
      public PlayerMaterialGear[] player_material_gears;
      public PlayerCharacterIntimate[] player_character_intimates;
      public PlayerMissionHistory[] player_mission_histories;
      public RaidDefeatReward[] defeat_rewards;
      public QuestScoreBonusTimetable[] questscore_bonus_timetable;
      public int order;
      public int quest_s_id;

      public GuildraidBattleFinish()
      {
      }

      public GuildraidBattleFinish(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.stage_id = (int) (long) json[nameof (stage_id)];
        this.player = json[nameof (player)] == null ? (Player) null : new Player((Dictionary<string, object>) json[nameof (player)]);
        SMManager.Change<Player>(this.player);
        this.battle_finish = json[nameof (battle_finish)] == null ? (BattleEnd) null : new BattleEnd((Dictionary<string, object>) json[nameof (battle_finish)]);
        SMManager.Change<BattleEnd>(this.battle_finish);
        this.already_defeated = (bool) json[nameof (already_defeated)];
        this.boss_id = (int) (long) json[nameof (boss_id)];
        List<PlayerQuestKey> playerQuestKeyList = new List<PlayerQuestKey>();
        foreach (object json1 in (List<object>) json[nameof (player_quest_keys)])
          playerQuestKeyList.Add(json1 == null ? (PlayerQuestKey) null : new PlayerQuestKey((Dictionary<string, object>) json1));
        this.player_quest_keys = playerQuestKeyList.ToArray();
        SMManager.UpdateList<PlayerQuestKey>(this.player_quest_keys);
        this.boss_total_damage = (int) (long) json[nameof (boss_total_damage)];
        this.loop_count = (int) (long) json[nameof (loop_count)];
        this.is_simulation = (bool) json[nameof (is_simulation)];
        List<PlayerAwakeSkill> playerAwakeSkillList = new List<PlayerAwakeSkill>();
        foreach (object json2 in (List<object>) json[nameof (player_awake_skills)])
          playerAwakeSkillList.Add(json2 == null ? (PlayerAwakeSkill) null : new PlayerAwakeSkill((Dictionary<string, object>) json2));
        this.player_awake_skills = playerAwakeSkillList.ToArray();
        SMManager.UpdateList<PlayerAwakeSkill>(this.player_awake_skills);
        this.boss_damage = (int) (long) json[nameof (boss_damage)];
        List<PlayerUnit> playerUnitList = new List<PlayerUnit>();
        foreach (object json3 in (List<object>) json[nameof (player_units)])
          playerUnitList.Add(json3 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json3));
        this.player_units = playerUnitList.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_units);
        List<PlayerUnitTypeTicket> playerUnitTypeTicketList = new List<PlayerUnitTypeTicket>();
        foreach (object json4 in (List<object>) json[nameof (player_unit_type_tickets)])
          playerUnitTypeTicketList.Add(json4 == null ? (PlayerUnitTypeTicket) null : new PlayerUnitTypeTicket((Dictionary<string, object>) json4));
        this.player_unit_type_tickets = playerUnitTypeTicketList.ToArray();
        SMManager.UpdateList<PlayerUnitTypeTicket>(this.player_unit_type_tickets);
        List<PlayerItem> playerItemList = new List<PlayerItem>();
        foreach (object json5 in (List<object>) json[nameof (player_items)])
          playerItemList.Add(json5 == null ? (PlayerItem) null : new PlayerItem((Dictionary<string, object>) json5));
        this.player_items = playerItemList.ToArray();
        SMManager.UpdateList<PlayerItem>(this.player_items);
        List<RaidDamageReward> raidDamageRewardList = new List<RaidDamageReward>();
        foreach (object json6 in (List<object>) json[nameof (damage_rewards)])
          raidDamageRewardList.Add(json6 == null ? (RaidDamageReward) null : new RaidDamageReward((Dictionary<string, object>) json6));
        this.damage_rewards = raidDamageRewardList.ToArray();
        List<PlayerMaterialUnit> playerMaterialUnitList = new List<PlayerMaterialUnit>();
        foreach (object json7 in (List<object>) json[nameof (player_material_units)])
          playerMaterialUnitList.Add(json7 == null ? (PlayerMaterialUnit) null : new PlayerMaterialUnit((Dictionary<string, object>) json7));
        this.player_material_units = playerMaterialUnitList.ToArray();
        SMManager.UpdateList<PlayerMaterialUnit>(this.player_material_units);
        List<PlayerPresent> playerPresentList = new List<PlayerPresent>();
        foreach (object json8 in (List<object>) json[nameof (player_presents)])
          playerPresentList.Add(json8 == null ? (PlayerPresent) null : new PlayerPresent((Dictionary<string, object>) json8));
        this.player_presents = playerPresentList.ToArray();
        SMManager.UpdateList<PlayerPresent>(this.player_presents);
        List<PlayerMaterialGear> playerMaterialGearList = new List<PlayerMaterialGear>();
        foreach (object json9 in (List<object>) json[nameof (player_material_gears)])
          playerMaterialGearList.Add(json9 == null ? (PlayerMaterialGear) null : new PlayerMaterialGear((Dictionary<string, object>) json9));
        this.player_material_gears = playerMaterialGearList.ToArray();
        SMManager.UpdateList<PlayerMaterialGear>(this.player_material_gears);
        List<PlayerCharacterIntimate> characterIntimateList = new List<PlayerCharacterIntimate>();
        foreach (object json10 in (List<object>) json[nameof (player_character_intimates)])
          characterIntimateList.Add(json10 == null ? (PlayerCharacterIntimate) null : new PlayerCharacterIntimate((Dictionary<string, object>) json10));
        this.player_character_intimates = characterIntimateList.ToArray();
        SMManager.UpdateList<PlayerCharacterIntimate>(this.player_character_intimates);
        List<PlayerMissionHistory> playerMissionHistoryList = new List<PlayerMissionHistory>();
        foreach (object json11 in (List<object>) json[nameof (player_mission_histories)])
          playerMissionHistoryList.Add(json11 == null ? (PlayerMissionHistory) null : new PlayerMissionHistory((Dictionary<string, object>) json11));
        this.player_mission_histories = playerMissionHistoryList.ToArray();
        SMManager.UpdateList<PlayerMissionHistory>(this.player_mission_histories);
        List<RaidDefeatReward> raidDefeatRewardList = new List<RaidDefeatReward>();
        foreach (object json12 in (List<object>) json[nameof (defeat_rewards)])
          raidDefeatRewardList.Add(json12 == null ? (RaidDefeatReward) null : new RaidDefeatReward((Dictionary<string, object>) json12));
        this.defeat_rewards = raidDefeatRewardList.ToArray();
        List<QuestScoreBonusTimetable> scoreBonusTimetableList = new List<QuestScoreBonusTimetable>();
        foreach (object json13 in (List<object>) json[nameof (questscore_bonus_timetable)])
          scoreBonusTimetableList.Add(json13 == null ? (QuestScoreBonusTimetable) null : new QuestScoreBonusTimetable((Dictionary<string, object>) json13));
        this.questscore_bonus_timetable = scoreBonusTimetableList.ToArray();
        SMManager.UpdateList<QuestScoreBonusTimetable>(this.questscore_bonus_timetable);
        this.order = (int) (long) json[nameof (order)];
        this.quest_s_id = (int) (long) json[nameof (quest_s_id)];
        if (json.ContainsKey("player_material_gears:delete"))
          SMManager.DeleteList<PlayerMaterialGear>(((IEnumerable<object>) json["player_material_gears:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
        if (json.ContainsKey("player_items:delete"))
          SMManager.DeleteList<PlayerItem>(((IEnumerable<object>) json["player_items:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
        if (!json.ContainsKey("player_presents:delete"))
          return;
        SMManager.DeleteList<PlayerPresent>(((IEnumerable<object>) json["player_presents:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class GuildraidBattleForceClose : KeyCompare
    {
      public GuildraidBattleForceClose()
      {
      }

      public GuildraidBattleForceClose(Dictionary<string, object> json) => this._hasKey = false;
    }

    [Serializable]
    public class GuildraidBattleHelper : KeyCompare
    {
      public GuildRaidPlayerHelpers[] helpers;
      public string[] used_helpers;

      public GuildraidBattleHelper()
      {
      }

      public GuildraidBattleHelper(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<GuildRaidPlayerHelpers> raidPlayerHelpersList = new List<GuildRaidPlayerHelpers>();
        foreach (object json1 in (List<object>) json[nameof (helpers)])
          raidPlayerHelpersList.Add(json1 == null ? (GuildRaidPlayerHelpers) null : new GuildRaidPlayerHelpers((Dictionary<string, object>) json1));
        this.helpers = raidPlayerHelpersList.ToArray();
        this.used_helpers = ((IEnumerable<object>) json[nameof (used_helpers)]).Select<object, string>((Func<object, string>) (s => (string) s)).ToArray<string>();
      }
    }

    [Serializable]
    public class GuildraidBattleResume : KeyCompare
    {
      public WebAPI.Response.GuildraidBattleResumePanel_item[] panel_item;
      public Player player;
      public int boss_id;
      public int quest_type;
      public WebAPI.Response.GuildraidBattleResumeUser_deck_enemy_item[] user_deck_enemy_item;
      public PlayerItem[] helper_player_gears;
      public PlayerUnit[] helper_player_unit_over_killers;
      public int boss_total_damage;
      public PlayerUnit[] helper_player_units;
      public PlayerCharacterQuestS[] player_character_quests;
      public PlayerExtraQuestS[] player_extra_quests;
      public PlayerUnit[] player_units;
      public PlayerItem[] user_deck_gears;
      public bool is_simulation;
      public PlayerItem[] player_gears;
      public PlayerAwakeSkill[] player_awake_skills;
      public WebAPI.Response.GuildraidBattleResumeEnemy_item[] enemy_item;
      public int deck_number;
      public int deck_type_id;
      public bool battle_start;
      public string battle_uuid;
      public int quest_loop_count;
      public PlayerAwakeSkill[] helper_player_awake_skills;
      public int support_player_unit_id;
      public int[] user_deck_enemy;
      public PlayerHarmonyQuestS[] player_harmony_quests;
      public PlayerGearReisouSchema[] player_reisou_gears;
      public int loop_count;
      public int[] panel;
      public int[] enemy;
      public PlayerUnit[] user_deck_units;
      public int[] player_unit_ids;
      public PlayerGearReisouSchema[] helper_player_reisou_gears;
      public string support_player_id;
      public int[] guest_ids;
      public PlayerHelper[] helpers;
      public int order;
      public int quest_s_id;

      public GuildraidBattleResume()
      {
      }

      public GuildraidBattleResume(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<WebAPI.Response.GuildraidBattleResumePanel_item> battleResumePanelItemList = new List<WebAPI.Response.GuildraidBattleResumePanel_item>();
        foreach (object json1 in (List<object>) json[nameof (panel_item)])
          battleResumePanelItemList.Add(json1 == null ? (WebAPI.Response.GuildraidBattleResumePanel_item) null : new WebAPI.Response.GuildraidBattleResumePanel_item((Dictionary<string, object>) json1));
        this.panel_item = battleResumePanelItemList.ToArray();
        this.player = json[nameof (player)] == null ? (Player) null : new Player((Dictionary<string, object>) json[nameof (player)]);
        SMManager.Change<Player>(this.player);
        this.boss_id = (int) (long) json[nameof (boss_id)];
        this.quest_type = (int) (long) json[nameof (quest_type)];
        List<WebAPI.Response.GuildraidBattleResumeUser_deck_enemy_item> userDeckEnemyItemList = new List<WebAPI.Response.GuildraidBattleResumeUser_deck_enemy_item>();
        foreach (object json2 in (List<object>) json[nameof (user_deck_enemy_item)])
          userDeckEnemyItemList.Add(json2 == null ? (WebAPI.Response.GuildraidBattleResumeUser_deck_enemy_item) null : new WebAPI.Response.GuildraidBattleResumeUser_deck_enemy_item((Dictionary<string, object>) json2));
        this.user_deck_enemy_item = userDeckEnemyItemList.ToArray();
        List<PlayerItem> playerItemList1 = new List<PlayerItem>();
        foreach (object json3 in (List<object>) json[nameof (helper_player_gears)])
          playerItemList1.Add(json3 == null ? (PlayerItem) null : new PlayerItem((Dictionary<string, object>) json3));
        this.helper_player_gears = playerItemList1.ToArray();
        List<PlayerUnit> playerUnitList1 = new List<PlayerUnit>();
        foreach (object json4 in (List<object>) json[nameof (helper_player_unit_over_killers)])
          playerUnitList1.Add(json4 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json4));
        this.helper_player_unit_over_killers = playerUnitList1.ToArray();
        this.boss_total_damage = (int) (long) json[nameof (boss_total_damage)];
        List<PlayerUnit> playerUnitList2 = new List<PlayerUnit>();
        foreach (object json5 in (List<object>) json[nameof (helper_player_units)])
          playerUnitList2.Add(json5 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json5));
        this.helper_player_units = playerUnitList2.ToArray();
        List<PlayerCharacterQuestS> playerCharacterQuestSList = new List<PlayerCharacterQuestS>();
        foreach (object json6 in (List<object>) json[nameof (player_character_quests)])
          playerCharacterQuestSList.Add(json6 == null ? (PlayerCharacterQuestS) null : new PlayerCharacterQuestS((Dictionary<string, object>) json6));
        this.player_character_quests = playerCharacterQuestSList.ToArray();
        SMManager.UpdateList<PlayerCharacterQuestS>(this.player_character_quests);
        List<PlayerExtraQuestS> playerExtraQuestSList = new List<PlayerExtraQuestS>();
        foreach (object json7 in (List<object>) json[nameof (player_extra_quests)])
          playerExtraQuestSList.Add(json7 == null ? (PlayerExtraQuestS) null : new PlayerExtraQuestS((Dictionary<string, object>) json7));
        this.player_extra_quests = playerExtraQuestSList.ToArray();
        SMManager.UpdateList<PlayerExtraQuestS>(this.player_extra_quests);
        List<PlayerUnit> playerUnitList3 = new List<PlayerUnit>();
        foreach (object json8 in (List<object>) json[nameof (player_units)])
          playerUnitList3.Add(json8 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json8));
        this.player_units = playerUnitList3.ToArray();
        List<PlayerItem> playerItemList2 = new List<PlayerItem>();
        foreach (object json9 in (List<object>) json[nameof (user_deck_gears)])
          playerItemList2.Add(json9 == null ? (PlayerItem) null : new PlayerItem((Dictionary<string, object>) json9));
        this.user_deck_gears = playerItemList2.ToArray();
        this.is_simulation = (bool) json[nameof (is_simulation)];
        List<PlayerItem> playerItemList3 = new List<PlayerItem>();
        foreach (object json10 in (List<object>) json[nameof (player_gears)])
          playerItemList3.Add(json10 == null ? (PlayerItem) null : new PlayerItem((Dictionary<string, object>) json10));
        this.player_gears = playerItemList3.ToArray();
        List<PlayerAwakeSkill> playerAwakeSkillList1 = new List<PlayerAwakeSkill>();
        foreach (object json11 in (List<object>) json[nameof (player_awake_skills)])
          playerAwakeSkillList1.Add(json11 == null ? (PlayerAwakeSkill) null : new PlayerAwakeSkill((Dictionary<string, object>) json11));
        this.player_awake_skills = playerAwakeSkillList1.ToArray();
        List<WebAPI.Response.GuildraidBattleResumeEnemy_item> battleResumeEnemyItemList = new List<WebAPI.Response.GuildraidBattleResumeEnemy_item>();
        foreach (object json12 in (List<object>) json[nameof (enemy_item)])
          battleResumeEnemyItemList.Add(json12 == null ? (WebAPI.Response.GuildraidBattleResumeEnemy_item) null : new WebAPI.Response.GuildraidBattleResumeEnemy_item((Dictionary<string, object>) json12));
        this.enemy_item = battleResumeEnemyItemList.ToArray();
        this.deck_number = (int) (long) json[nameof (deck_number)];
        this.deck_type_id = (int) (long) json[nameof (deck_type_id)];
        this.battle_start = (bool) json[nameof (battle_start)];
        this.battle_uuid = (string) json[nameof (battle_uuid)];
        this.quest_loop_count = (int) (long) json[nameof (quest_loop_count)];
        List<PlayerAwakeSkill> playerAwakeSkillList2 = new List<PlayerAwakeSkill>();
        foreach (object json13 in (List<object>) json[nameof (helper_player_awake_skills)])
          playerAwakeSkillList2.Add(json13 == null ? (PlayerAwakeSkill) null : new PlayerAwakeSkill((Dictionary<string, object>) json13));
        this.helper_player_awake_skills = playerAwakeSkillList2.ToArray();
        this.support_player_unit_id = (int) (long) json[nameof (support_player_unit_id)];
        this.user_deck_enemy = ((IEnumerable<object>) json[nameof (user_deck_enemy)]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).ToArray<int>();
        List<PlayerHarmonyQuestS> playerHarmonyQuestSList = new List<PlayerHarmonyQuestS>();
        foreach (object json14 in (List<object>) json[nameof (player_harmony_quests)])
          playerHarmonyQuestSList.Add(json14 == null ? (PlayerHarmonyQuestS) null : new PlayerHarmonyQuestS((Dictionary<string, object>) json14));
        this.player_harmony_quests = playerHarmonyQuestSList.ToArray();
        SMManager.UpdateList<PlayerHarmonyQuestS>(this.player_harmony_quests);
        List<PlayerGearReisouSchema> gearReisouSchemaList1 = new List<PlayerGearReisouSchema>();
        foreach (object json15 in (List<object>) json[nameof (player_reisou_gears)])
          gearReisouSchemaList1.Add(json15 == null ? (PlayerGearReisouSchema) null : new PlayerGearReisouSchema((Dictionary<string, object>) json15));
        this.player_reisou_gears = gearReisouSchemaList1.ToArray();
        this.loop_count = (int) (long) json[nameof (loop_count)];
        this.panel = ((IEnumerable<object>) json[nameof (panel)]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).ToArray<int>();
        this.enemy = ((IEnumerable<object>) json[nameof (enemy)]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).ToArray<int>();
        List<PlayerUnit> playerUnitList4 = new List<PlayerUnit>();
        foreach (object json16 in (List<object>) json[nameof (user_deck_units)])
          playerUnitList4.Add(json16 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json16));
        this.user_deck_units = playerUnitList4.ToArray();
        this.player_unit_ids = ((IEnumerable<object>) json[nameof (player_unit_ids)]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).ToArray<int>();
        List<PlayerGearReisouSchema> gearReisouSchemaList2 = new List<PlayerGearReisouSchema>();
        foreach (object json17 in (List<object>) json[nameof (helper_player_reisou_gears)])
          gearReisouSchemaList2.Add(json17 == null ? (PlayerGearReisouSchema) null : new PlayerGearReisouSchema((Dictionary<string, object>) json17));
        this.helper_player_reisou_gears = gearReisouSchemaList2.ToArray();
        this.support_player_id = json[nameof (support_player_id)] == null ? (string) null : (string) json[nameof (support_player_id)];
        this.guest_ids = ((IEnumerable<object>) json[nameof (guest_ids)]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).ToArray<int>();
        List<PlayerHelper> playerHelperList = new List<PlayerHelper>();
        foreach (object json18 in (List<object>) json[nameof (helpers)])
          playerHelperList.Add(json18 == null ? (PlayerHelper) null : new PlayerHelper((Dictionary<string, object>) json18));
        this.helpers = playerHelperList.ToArray();
        this.order = (int) (long) json[nameof (order)];
        this.quest_s_id = (int) (long) json[nameof (quest_s_id)];
      }
    }

    [Serializable]
    public class GuildraidBattleResumeEnemy_item : KeyCompare
    {
      public int reward_quantity;
      public int id;
      public int reward_id;
      public int reward_type_id;

      public GuildraidBattleResumeEnemy_item()
      {
      }

      public GuildraidBattleResumeEnemy_item(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_quantity = (int) (long) json[nameof (reward_quantity)];
        this.id = (int) (long) json[nameof (id)];
        this.reward_id = (int) (long) json[nameof (reward_id)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
      }
    }

    [Serializable]
    public class GuildraidBattleResumeUser_deck_enemy_item : KeyCompare
    {
      public int reward_quantity;
      public int id;
      public int reward_id;
      public int reward_type_id;

      public GuildraidBattleResumeUser_deck_enemy_item()
      {
      }

      public GuildraidBattleResumeUser_deck_enemy_item(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_quantity = (int) (long) json[nameof (reward_quantity)];
        this.id = (int) (long) json[nameof (id)];
        this.reward_id = (int) (long) json[nameof (reward_id)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
      }
    }

    [Serializable]
    public class GuildraidBattleResumePanel_item : KeyCompare
    {
      public int reward_quantity;
      public int id;
      public int reward_id;
      public int reward_type_id;

      public GuildraidBattleResumePanel_item()
      {
      }

      public GuildraidBattleResumePanel_item(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_quantity = (int) (long) json[nameof (reward_quantity)];
        this.id = (int) (long) json[nameof (id)];
        this.reward_id = (int) (long) json[nameof (reward_id)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
      }
    }

    [Serializable]
    public class GuildraidBattleStart : KeyCompare
    {
      public WebAPI.Response.GuildraidBattleStartPanel_item[] panel_item;
      public Player player;
      public int boss_id;
      public int quest_type;
      public WebAPI.Response.GuildraidBattleStartUser_deck_enemy_item[] user_deck_enemy_item;
      public PlayerItem[] helper_player_gears;
      public PlayerUnit[] helper_player_unit_over_killers;
      public int boss_total_damage;
      public PlayerUnit[] helper_player_units;
      public string support_player_id;
      public PlayerUnit[] user_deck_units;
      public PlayerUnit[] player_units;
      public PlayerItem[] user_deck_gears;
      public bool is_simulation;
      public PlayerItem[] player_gears;
      public PlayerAwakeSkill[] player_awake_skills;
      public WebAPI.Response.GuildraidBattleStartEnemy_item[] enemy_item;
      public int deck_number;
      public int deck_type_id;
      public bool battle_start;
      public string battle_uuid;
      public int quest_loop_count;
      public PlayerAwakeSkill[] helper_player_awake_skills;
      public int support_player_unit_id;
      public int[] user_deck_enemy;
      public PlayerGearReisouSchema[] player_reisou_gears;
      public int loop_count;
      public int[] panel;
      public int[] enemy;
      public int[] player_unit_ids;
      public PlayerGearReisouSchema[] helper_player_reisou_gears;
      public int[] guest_ids;
      public PlayerHelper[] helpers;
      public int order;
      public int quest_s_id;

      public GuildraidBattleStart()
      {
      }

      public GuildraidBattleStart(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<WebAPI.Response.GuildraidBattleStartPanel_item> battleStartPanelItemList = new List<WebAPI.Response.GuildraidBattleStartPanel_item>();
        foreach (object json1 in (List<object>) json[nameof (panel_item)])
          battleStartPanelItemList.Add(json1 == null ? (WebAPI.Response.GuildraidBattleStartPanel_item) null : new WebAPI.Response.GuildraidBattleStartPanel_item((Dictionary<string, object>) json1));
        this.panel_item = battleStartPanelItemList.ToArray();
        this.player = json[nameof (player)] == null ? (Player) null : new Player((Dictionary<string, object>) json[nameof (player)]);
        SMManager.Change<Player>(this.player);
        this.boss_id = (int) (long) json[nameof (boss_id)];
        this.quest_type = (int) (long) json[nameof (quest_type)];
        List<WebAPI.Response.GuildraidBattleStartUser_deck_enemy_item> userDeckEnemyItemList = new List<WebAPI.Response.GuildraidBattleStartUser_deck_enemy_item>();
        foreach (object json2 in (List<object>) json[nameof (user_deck_enemy_item)])
          userDeckEnemyItemList.Add(json2 == null ? (WebAPI.Response.GuildraidBattleStartUser_deck_enemy_item) null : new WebAPI.Response.GuildraidBattleStartUser_deck_enemy_item((Dictionary<string, object>) json2));
        this.user_deck_enemy_item = userDeckEnemyItemList.ToArray();
        List<PlayerItem> playerItemList1 = new List<PlayerItem>();
        foreach (object json3 in (List<object>) json[nameof (helper_player_gears)])
          playerItemList1.Add(json3 == null ? (PlayerItem) null : new PlayerItem((Dictionary<string, object>) json3));
        this.helper_player_gears = playerItemList1.ToArray();
        List<PlayerUnit> playerUnitList1 = new List<PlayerUnit>();
        foreach (object json4 in (List<object>) json[nameof (helper_player_unit_over_killers)])
          playerUnitList1.Add(json4 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json4));
        this.helper_player_unit_over_killers = playerUnitList1.ToArray();
        this.boss_total_damage = (int) (long) json[nameof (boss_total_damage)];
        List<PlayerUnit> playerUnitList2 = new List<PlayerUnit>();
        foreach (object json5 in (List<object>) json[nameof (helper_player_units)])
          playerUnitList2.Add(json5 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json5));
        this.helper_player_units = playerUnitList2.ToArray();
        this.support_player_id = json[nameof (support_player_id)] == null ? (string) null : (string) json[nameof (support_player_id)];
        List<PlayerUnit> playerUnitList3 = new List<PlayerUnit>();
        foreach (object json6 in (List<object>) json[nameof (user_deck_units)])
          playerUnitList3.Add(json6 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json6));
        this.user_deck_units = playerUnitList3.ToArray();
        List<PlayerUnit> playerUnitList4 = new List<PlayerUnit>();
        foreach (object json7 in (List<object>) json[nameof (player_units)])
          playerUnitList4.Add(json7 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json7));
        this.player_units = playerUnitList4.ToArray();
        List<PlayerItem> playerItemList2 = new List<PlayerItem>();
        foreach (object json8 in (List<object>) json[nameof (user_deck_gears)])
          playerItemList2.Add(json8 == null ? (PlayerItem) null : new PlayerItem((Dictionary<string, object>) json8));
        this.user_deck_gears = playerItemList2.ToArray();
        this.is_simulation = (bool) json[nameof (is_simulation)];
        List<PlayerItem> playerItemList3 = new List<PlayerItem>();
        foreach (object json9 in (List<object>) json[nameof (player_gears)])
          playerItemList3.Add(json9 == null ? (PlayerItem) null : new PlayerItem((Dictionary<string, object>) json9));
        this.player_gears = playerItemList3.ToArray();
        List<PlayerAwakeSkill> playerAwakeSkillList1 = new List<PlayerAwakeSkill>();
        foreach (object json10 in (List<object>) json[nameof (player_awake_skills)])
          playerAwakeSkillList1.Add(json10 == null ? (PlayerAwakeSkill) null : new PlayerAwakeSkill((Dictionary<string, object>) json10));
        this.player_awake_skills = playerAwakeSkillList1.ToArray();
        List<WebAPI.Response.GuildraidBattleStartEnemy_item> battleStartEnemyItemList = new List<WebAPI.Response.GuildraidBattleStartEnemy_item>();
        foreach (object json11 in (List<object>) json[nameof (enemy_item)])
          battleStartEnemyItemList.Add(json11 == null ? (WebAPI.Response.GuildraidBattleStartEnemy_item) null : new WebAPI.Response.GuildraidBattleStartEnemy_item((Dictionary<string, object>) json11));
        this.enemy_item = battleStartEnemyItemList.ToArray();
        this.deck_number = (int) (long) json[nameof (deck_number)];
        this.deck_type_id = (int) (long) json[nameof (deck_type_id)];
        this.battle_start = (bool) json[nameof (battle_start)];
        this.battle_uuid = (string) json[nameof (battle_uuid)];
        this.quest_loop_count = (int) (long) json[nameof (quest_loop_count)];
        List<PlayerAwakeSkill> playerAwakeSkillList2 = new List<PlayerAwakeSkill>();
        foreach (object json12 in (List<object>) json[nameof (helper_player_awake_skills)])
          playerAwakeSkillList2.Add(json12 == null ? (PlayerAwakeSkill) null : new PlayerAwakeSkill((Dictionary<string, object>) json12));
        this.helper_player_awake_skills = playerAwakeSkillList2.ToArray();
        this.support_player_unit_id = (int) (long) json[nameof (support_player_unit_id)];
        this.user_deck_enemy = ((IEnumerable<object>) json[nameof (user_deck_enemy)]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).ToArray<int>();
        List<PlayerGearReisouSchema> gearReisouSchemaList1 = new List<PlayerGearReisouSchema>();
        foreach (object json13 in (List<object>) json[nameof (player_reisou_gears)])
          gearReisouSchemaList1.Add(json13 == null ? (PlayerGearReisouSchema) null : new PlayerGearReisouSchema((Dictionary<string, object>) json13));
        this.player_reisou_gears = gearReisouSchemaList1.ToArray();
        this.loop_count = (int) (long) json[nameof (loop_count)];
        this.panel = ((IEnumerable<object>) json[nameof (panel)]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).ToArray<int>();
        this.enemy = ((IEnumerable<object>) json[nameof (enemy)]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).ToArray<int>();
        this.player_unit_ids = ((IEnumerable<object>) json[nameof (player_unit_ids)]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).ToArray<int>();
        List<PlayerGearReisouSchema> gearReisouSchemaList2 = new List<PlayerGearReisouSchema>();
        foreach (object json14 in (List<object>) json[nameof (helper_player_reisou_gears)])
          gearReisouSchemaList2.Add(json14 == null ? (PlayerGearReisouSchema) null : new PlayerGearReisouSchema((Dictionary<string, object>) json14));
        this.helper_player_reisou_gears = gearReisouSchemaList2.ToArray();
        this.guest_ids = ((IEnumerable<object>) json[nameof (guest_ids)]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).ToArray<int>();
        List<PlayerHelper> playerHelperList = new List<PlayerHelper>();
        foreach (object json15 in (List<object>) json[nameof (helpers)])
          playerHelperList.Add(json15 == null ? (PlayerHelper) null : new PlayerHelper((Dictionary<string, object>) json15));
        this.helpers = playerHelperList.ToArray();
        this.order = (int) (long) json[nameof (order)];
        this.quest_s_id = (int) (long) json[nameof (quest_s_id)];
      }
    }

    [Serializable]
    public class GuildraidBattleStartEnemy_item : KeyCompare
    {
      public int reward_quantity;
      public int id;
      public int reward_id;
      public int reward_type_id;

      public GuildraidBattleStartEnemy_item()
      {
      }

      public GuildraidBattleStartEnemy_item(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_quantity = (int) (long) json[nameof (reward_quantity)];
        this.id = (int) (long) json[nameof (id)];
        this.reward_id = (int) (long) json[nameof (reward_id)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
      }
    }

    [Serializable]
    public class GuildraidBattleStartUser_deck_enemy_item : KeyCompare
    {
      public int reward_quantity;
      public int id;
      public int reward_id;
      public int reward_type_id;

      public GuildraidBattleStartUser_deck_enemy_item()
      {
      }

      public GuildraidBattleStartUser_deck_enemy_item(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_quantity = (int) (long) json[nameof (reward_quantity)];
        this.id = (int) (long) json[nameof (id)];
        this.reward_id = (int) (long) json[nameof (reward_id)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
      }
    }

    [Serializable]
    public class GuildraidBattleStartPanel_item : KeyCompare
    {
      public int reward_quantity;
      public int id;
      public int reward_id;
      public int reward_type_id;

      public GuildraidBattleStartPanel_item()
      {
      }

      public GuildraidBattleStartPanel_item(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_quantity = (int) (long) json[nameof (reward_quantity)];
        this.id = (int) (long) json[nameof (id)];
        this.reward_id = (int) (long) json[nameof (reward_id)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
      }
    }

    [Serializable]
    public class GuildraidHistoryDeck : KeyCompare
    {
      public PlayerUnit[] player_over_killers;
      public string battle_uuid;
      public PlayerItem[] helper_gears;
      public PlayerAwakeSkill[] helper_awake_skills;
      public PlayerUnit[] player_units;
      public PlayerGearReisouSchema[] helper_reisou_gears;
      public PlayerItem[] player_gears;
      public PlayerAwakeSkill[] player_awake_skills;
      public PlayerGearReisouSchema[] player_reisou_gears;
      public PlayerUnit[] helper_unit;
      public PlayerUnit[] helper_over_killers;

      public GuildraidHistoryDeck()
      {
      }

      public GuildraidHistoryDeck(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerUnit> playerUnitList1 = new List<PlayerUnit>();
        foreach (object json1 in (List<object>) json[nameof (player_over_killers)])
          playerUnitList1.Add(json1 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json1));
        this.player_over_killers = playerUnitList1.ToArray();
        this.battle_uuid = (string) json[nameof (battle_uuid)];
        List<PlayerItem> playerItemList1 = new List<PlayerItem>();
        if ((List<object>) json[nameof (helper_gears)] != null)
        {
          foreach (object json2 in (List<object>) json[nameof (helper_gears)])
            playerItemList1.Add(json2 == null ? (PlayerItem) null : new PlayerItem((Dictionary<string, object>) json2));
        }
        this.helper_gears = playerItemList1.ToArray();
        List<PlayerAwakeSkill> playerAwakeSkillList1 = new List<PlayerAwakeSkill>();
        if ((List<object>) json[nameof (helper_awake_skills)] != null)
        {
          foreach (object json3 in (List<object>) json[nameof (helper_awake_skills)])
            playerAwakeSkillList1.Add(json3 == null ? (PlayerAwakeSkill) null : new PlayerAwakeSkill((Dictionary<string, object>) json3));
        }
        this.helper_awake_skills = playerAwakeSkillList1.ToArray();
        List<PlayerUnit> playerUnitList2 = new List<PlayerUnit>();
        foreach (object json4 in (List<object>) json[nameof (player_units)])
          playerUnitList2.Add(json4 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json4));
        this.player_units = playerUnitList2.ToArray();
        List<PlayerGearReisouSchema> gearReisouSchemaList1 = new List<PlayerGearReisouSchema>();
        if ((List<object>) json[nameof (helper_reisou_gears)] != null)
        {
          foreach (object json5 in (List<object>) json[nameof (helper_reisou_gears)])
            gearReisouSchemaList1.Add(json5 == null ? (PlayerGearReisouSchema) null : new PlayerGearReisouSchema((Dictionary<string, object>) json5));
        }
        this.helper_reisou_gears = gearReisouSchemaList1.ToArray();
        List<PlayerItem> playerItemList2 = new List<PlayerItem>();
        if ((List<object>) json[nameof (player_gears)] != null)
        {
          foreach (object json6 in (List<object>) json[nameof (player_gears)])
            playerItemList2.Add(json6 == null ? (PlayerItem) null : new PlayerItem((Dictionary<string, object>) json6));
        }
        this.player_gears = playerItemList2.ToArray();
        List<PlayerAwakeSkill> playerAwakeSkillList2 = new List<PlayerAwakeSkill>();
        if ((List<object>) json[nameof (player_awake_skills)] != null)
        {
          foreach (object json7 in (List<object>) json[nameof (player_awake_skills)])
            playerAwakeSkillList2.Add(json7 == null ? (PlayerAwakeSkill) null : new PlayerAwakeSkill((Dictionary<string, object>) json7));
        }
        this.player_awake_skills = playerAwakeSkillList2.ToArray();
        List<PlayerGearReisouSchema> gearReisouSchemaList2 = new List<PlayerGearReisouSchema>();
        if ((List<object>) json[nameof (player_reisou_gears)] != null)
        {
          foreach (object json8 in (List<object>) json[nameof (player_reisou_gears)])
            gearReisouSchemaList2.Add(json8 == null ? (PlayerGearReisouSchema) null : new PlayerGearReisouSchema((Dictionary<string, object>) json8));
        }
        this.player_reisou_gears = gearReisouSchemaList2.ToArray();
        List<PlayerUnit> playerUnitList3 = new List<PlayerUnit>();
        foreach (object json9 in (List<object>) json[nameof (helper_unit)])
          playerUnitList3.Add(json9 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json9));
        this.helper_unit = playerUnitList3.ToArray();
        List<PlayerUnit> playerUnitList4 = new List<PlayerUnit>();
        foreach (object json10 in (List<object>) json[nameof (helper_over_killers)])
          playerUnitList4.Add(json10 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json10));
        this.helper_over_killers = playerUnitList4.ToArray();
      }
    }

    [Serializable]
    public class GuildraidRaidEndlessEntry : KeyCompare
    {
      public SM.GuildRaidProgress raid_progress;

      public GuildraidRaidEndlessEntry()
      {
      }

      public GuildraidRaidEndlessEntry(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.raid_progress = json[nameof (raid_progress)] == null ? (SM.GuildRaidProgress) null : new SM.GuildRaidProgress((Dictionary<string, object>) json[nameof (raid_progress)]);
      }
    }

    [Serializable]
    public class GuildraidRaidTop : KeyCompare
    {
      public int[] recent_quest_ids;
      public WebAPI.Response.GuildraidRaidTopDamage_rewards[] damage_rewards;
      public bool raid_aggregating;
      public WebAPI.Response.GuildraidRaidTopRaid_rank1_rewards[] raid_rank1_rewards;
      public WebAPI.Response.GuildraidRaidTopRaid_guild_ranking_guild_rewards[] raid_guild_ranking_guild_rewards;
      public int rp;
      public int? loop_count;
      public PlayerAffiliation player_affiliation;
      public int? raid_rank_period_id;
      public WebAPI.Response.GuildraidRaidTopCurrent_ranking current_ranking;
      public SM.GuildSignal guild_signal;
      public int? raid_damage_rank;
      public WebAPI.Response.GuildraidRaidTopPrevious_ranking previous_ranking;
      public int boss_damage_ratio;
      public int? prev_order;
      public WebAPI.Response.GuildraidRaidTopRaid_guild_ranking_rewards[] raid_guild_ranking_rewards;
      public PlayerPresent[] player_presents;
      public RaidPeriod raid_period;
      public bool is_started_endless;
      public WebAPI.Response.GuildraidRaidTopDefeat_rewards[] defeat_rewards;
      public bool is_complete;
      public long? raid_total_damage;
      public int? order;
      public int? prev_loop_count;

      public GuildraidRaidTop()
      {
      }

      public GuildraidRaidTop(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.recent_quest_ids = ((IEnumerable<object>) json[nameof (recent_quest_ids)]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).ToArray<int>();
        List<WebAPI.Response.GuildraidRaidTopDamage_rewards> topDamageRewardsList = new List<WebAPI.Response.GuildraidRaidTopDamage_rewards>();
        foreach (object json1 in (List<object>) json[nameof (damage_rewards)])
          topDamageRewardsList.Add(json1 == null ? (WebAPI.Response.GuildraidRaidTopDamage_rewards) null : new WebAPI.Response.GuildraidRaidTopDamage_rewards((Dictionary<string, object>) json1));
        this.damage_rewards = topDamageRewardsList.ToArray();
        this.raid_aggregating = (bool) json[nameof (raid_aggregating)];
        List<WebAPI.Response.GuildraidRaidTopRaid_rank1_rewards> raidRank1RewardsList = new List<WebAPI.Response.GuildraidRaidTopRaid_rank1_rewards>();
        foreach (object json2 in (List<object>) json[nameof (raid_rank1_rewards)])
          raidRank1RewardsList.Add(json2 == null ? (WebAPI.Response.GuildraidRaidTopRaid_rank1_rewards) null : new WebAPI.Response.GuildraidRaidTopRaid_rank1_rewards((Dictionary<string, object>) json2));
        this.raid_rank1_rewards = raidRank1RewardsList.ToArray();
        List<WebAPI.Response.GuildraidRaidTopRaid_guild_ranking_guild_rewards> rankingGuildRewardsList = new List<WebAPI.Response.GuildraidRaidTopRaid_guild_ranking_guild_rewards>();
        foreach (object json3 in (List<object>) json[nameof (raid_guild_ranking_guild_rewards)])
          rankingGuildRewardsList.Add(json3 == null ? (WebAPI.Response.GuildraidRaidTopRaid_guild_ranking_guild_rewards) null : new WebAPI.Response.GuildraidRaidTopRaid_guild_ranking_guild_rewards((Dictionary<string, object>) json3));
        this.raid_guild_ranking_guild_rewards = rankingGuildRewardsList.ToArray();
        this.rp = (int) (long) json[nameof (rp)];
        long? nullable1;
        int? nullable2;
        if (json[nameof (loop_count)] != null)
        {
          nullable1 = (long?) json[nameof (loop_count)];
          nullable2 = nullable1.HasValue ? new int?((int) nullable1.GetValueOrDefault()) : new int?();
        }
        else
          nullable2 = new int?();
        this.loop_count = nullable2;
        this.player_affiliation = json[nameof (player_affiliation)] == null ? (PlayerAffiliation) null : new PlayerAffiliation((Dictionary<string, object>) json[nameof (player_affiliation)]);
        SMManager.Change<PlayerAffiliation>(this.player_affiliation);
        int? nullable3;
        if (json[nameof (raid_rank_period_id)] != null)
        {
          nullable1 = (long?) json[nameof (raid_rank_period_id)];
          nullable3 = nullable1.HasValue ? new int?((int) nullable1.GetValueOrDefault()) : new int?();
        }
        else
          nullable3 = new int?();
        this.raid_rank_period_id = nullable3;
        this.current_ranking = json[nameof (current_ranking)] == null ? (WebAPI.Response.GuildraidRaidTopCurrent_ranking) null : new WebAPI.Response.GuildraidRaidTopCurrent_ranking((Dictionary<string, object>) json[nameof (current_ranking)]);
        SMManager.Change<WebAPI.Response.GuildraidRaidTopCurrent_ranking>(this.current_ranking);
        this.guild_signal = json[nameof (guild_signal)] == null ? (SM.GuildSignal) null : new SM.GuildSignal((Dictionary<string, object>) json[nameof (guild_signal)]);
        SMManager.Change<SM.GuildSignal>(this.guild_signal);
        int? nullable4;
        if (json[nameof (raid_damage_rank)] != null)
        {
          nullable1 = (long?) json[nameof (raid_damage_rank)];
          nullable4 = nullable1.HasValue ? new int?((int) nullable1.GetValueOrDefault()) : new int?();
        }
        else
          nullable4 = new int?();
        this.raid_damage_rank = nullable4;
        this.previous_ranking = json[nameof (previous_ranking)] == null ? (WebAPI.Response.GuildraidRaidTopPrevious_ranking) null : new WebAPI.Response.GuildraidRaidTopPrevious_ranking((Dictionary<string, object>) json[nameof (previous_ranking)]);
        SMManager.Change<WebAPI.Response.GuildraidRaidTopPrevious_ranking>(this.previous_ranking);
        this.boss_damage_ratio = (int) (long) json[nameof (boss_damage_ratio)];
        int? nullable5;
        if (json[nameof (prev_order)] != null)
        {
          nullable1 = (long?) json[nameof (prev_order)];
          nullable5 = nullable1.HasValue ? new int?((int) nullable1.GetValueOrDefault()) : new int?();
        }
        else
          nullable5 = new int?();
        this.prev_order = nullable5;
        List<WebAPI.Response.GuildraidRaidTopRaid_guild_ranking_rewards> guildRankingRewardsList = new List<WebAPI.Response.GuildraidRaidTopRaid_guild_ranking_rewards>();
        foreach (object json4 in (List<object>) json[nameof (raid_guild_ranking_rewards)])
          guildRankingRewardsList.Add(json4 == null ? (WebAPI.Response.GuildraidRaidTopRaid_guild_ranking_rewards) null : new WebAPI.Response.GuildraidRaidTopRaid_guild_ranking_rewards((Dictionary<string, object>) json4));
        this.raid_guild_ranking_rewards = guildRankingRewardsList.ToArray();
        List<PlayerPresent> playerPresentList = new List<PlayerPresent>();
        foreach (object json5 in (List<object>) json[nameof (player_presents)])
          playerPresentList.Add(json5 == null ? (PlayerPresent) null : new PlayerPresent((Dictionary<string, object>) json5));
        this.player_presents = playerPresentList.ToArray();
        SMManager.UpdateList<PlayerPresent>(this.player_presents);
        this.raid_period = json[nameof (raid_period)] == null ? (RaidPeriod) null : new RaidPeriod((Dictionary<string, object>) json[nameof (raid_period)]);
        SMManager.Change<RaidPeriod>(this.raid_period);
        this.is_started_endless = (bool) json[nameof (is_started_endless)];
        List<WebAPI.Response.GuildraidRaidTopDefeat_rewards> topDefeatRewardsList = new List<WebAPI.Response.GuildraidRaidTopDefeat_rewards>();
        foreach (object json6 in (List<object>) json[nameof (defeat_rewards)])
          topDefeatRewardsList.Add(json6 == null ? (WebAPI.Response.GuildraidRaidTopDefeat_rewards) null : new WebAPI.Response.GuildraidRaidTopDefeat_rewards((Dictionary<string, object>) json6));
        this.defeat_rewards = topDefeatRewardsList.ToArray();
        this.is_complete = (bool) json[nameof (is_complete)];
        this.raid_total_damage = json[nameof (raid_total_damage)] == null ? new long?() : new long?((long) json[nameof (raid_total_damage)]);
        long? nullable6;
        int? nullable7;
        if (json[nameof (order)] != null)
        {
          nullable6 = (long?) json[nameof (order)];
          nullable7 = nullable6.HasValue ? new int?((int) nullable6.GetValueOrDefault()) : new int?();
        }
        else
          nullable7 = new int?();
        this.order = nullable7;
        int? nullable8;
        if (json[nameof (prev_loop_count)] != null)
        {
          nullable6 = (long?) json[nameof (prev_loop_count)];
          nullable8 = nullable6.HasValue ? new int?((int) nullable6.GetValueOrDefault()) : new int?();
        }
        else
          nullable8 = new int?();
        this.prev_loop_count = nullable8;
      }
    }

    [Serializable]
    public class GuildraidRaidTopDefeat_rewards : KeyCompare
    {
      public RaidDefeatReward[] rewards;
      public int quest_id;

      public GuildraidRaidTopDefeat_rewards()
      {
      }

      public GuildraidRaidTopDefeat_rewards(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<RaidDefeatReward> raidDefeatRewardList = new List<RaidDefeatReward>();
        foreach (object json1 in (List<object>) json[nameof (rewards)])
          raidDefeatRewardList.Add(json1 == null ? (RaidDefeatReward) null : new RaidDefeatReward((Dictionary<string, object>) json1));
        this.rewards = raidDefeatRewardList.ToArray();
        this.quest_id = (int) (long) json[nameof (quest_id)];
      }
    }

    [Serializable]
    public class GuildraidRaidTopRaid_guild_ranking_rewards : KeyCompare
    {
      public WebAPI.Response.GuildraidRaidTopRaid_guild_ranking_rewardsRewards[] rewards;
      public int condition_id;

      public GuildraidRaidTopRaid_guild_ranking_rewards()
      {
      }

      public GuildraidRaidTopRaid_guild_ranking_rewards(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<WebAPI.Response.GuildraidRaidTopRaid_guild_ranking_rewardsRewards> rankingRewardsRewardsList = new List<WebAPI.Response.GuildraidRaidTopRaid_guild_ranking_rewardsRewards>();
        foreach (object json1 in (List<object>) json[nameof (rewards)])
          rankingRewardsRewardsList.Add(json1 == null ? (WebAPI.Response.GuildraidRaidTopRaid_guild_ranking_rewardsRewards) null : new WebAPI.Response.GuildraidRaidTopRaid_guild_ranking_rewardsRewards((Dictionary<string, object>) json1));
        this.rewards = rankingRewardsRewardsList.ToArray();
        this.condition_id = (int) (long) json[nameof (condition_id)];
      }
    }

    [Serializable]
    public class GuildraidRaidTopRaid_guild_ranking_rewardsRewards : KeyCompare
    {
      public int reward_quantity;
      public int reward_type_id;
      public int reward_id;

      public GuildraidRaidTopRaid_guild_ranking_rewardsRewards()
      {
      }

      public GuildraidRaidTopRaid_guild_ranking_rewardsRewards(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_quantity = (int) (long) json[nameof (reward_quantity)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
        this.reward_id = (int) (long) json[nameof (reward_id)];
      }
    }

    [Serializable]
    public class GuildraidRaidTopPrevious_ranking : KeyCompare
    {
      public long damage_score;
      public int? damage_rank;

      public GuildraidRaidTopPrevious_ranking()
      {
      }

      public GuildraidRaidTopPrevious_ranking(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.damage_score = (long) json[nameof (damage_score)];
        int? nullable1;
        if (json[nameof (damage_rank)] != null)
        {
          long? nullable2 = (long?) json[nameof (damage_rank)];
          nullable1 = nullable2.HasValue ? new int?((int) nullable2.GetValueOrDefault()) : new int?();
        }
        else
          nullable1 = new int?();
        this.damage_rank = nullable1;
      }
    }

    [Serializable]
    public class GuildraidRaidTopCurrent_ranking : KeyCompare
    {
      public long damage_score;
      public int? damage_rank;

      public GuildraidRaidTopCurrent_ranking()
      {
      }

      public GuildraidRaidTopCurrent_ranking(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.damage_score = (long) json[nameof (damage_score)];
        int? nullable1;
        if (json[nameof (damage_rank)] != null)
        {
          long? nullable2 = (long?) json[nameof (damage_rank)];
          nullable1 = nullable2.HasValue ? new int?((int) nullable2.GetValueOrDefault()) : new int?();
        }
        else
          nullable1 = new int?();
        this.damage_rank = nullable1;
      }
    }

    [Serializable]
    public class GuildraidRaidTopRaid_guild_ranking_guild_rewards : KeyCompare
    {
      public GuildRankingGuildReward[] rewards;
      public int condition_id;

      public GuildraidRaidTopRaid_guild_ranking_guild_rewards()
      {
      }

      public GuildraidRaidTopRaid_guild_ranking_guild_rewards(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<GuildRankingGuildReward> rankingGuildRewardList = new List<GuildRankingGuildReward>();
        foreach (object json1 in (List<object>) json[nameof (rewards)])
          rankingGuildRewardList.Add(json1 == null ? (GuildRankingGuildReward) null : new GuildRankingGuildReward((Dictionary<string, object>) json1));
        this.rewards = rankingGuildRewardList.ToArray();
        this.condition_id = (int) (long) json[nameof (condition_id)];
      }
    }

    [Serializable]
    public class GuildraidRaidTopRaid_rank1_rewards : KeyCompare
    {
      public WebAPI.Response.GuildraidRaidTopRaid_rank1_rewardsRewards[] rewards;

      public GuildraidRaidTopRaid_rank1_rewards()
      {
      }

      public GuildraidRaidTopRaid_rank1_rewards(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<WebAPI.Response.GuildraidRaidTopRaid_rank1_rewardsRewards> rank1RewardsRewardsList = new List<WebAPI.Response.GuildraidRaidTopRaid_rank1_rewardsRewards>();
        foreach (object json1 in (List<object>) json[nameof (rewards)])
          rank1RewardsRewardsList.Add(json1 == null ? (WebAPI.Response.GuildraidRaidTopRaid_rank1_rewardsRewards) null : new WebAPI.Response.GuildraidRaidTopRaid_rank1_rewardsRewards((Dictionary<string, object>) json1));
        this.rewards = rank1RewardsRewardsList.ToArray();
      }
    }

    [Serializable]
    public class GuildraidRaidTopRaid_rank1_rewardsRewards : KeyCompare
    {
      public int reward_quantity;
      public int reward_type_id;
      public int reward_id;

      public GuildraidRaidTopRaid_rank1_rewardsRewards()
      {
      }

      public GuildraidRaidTopRaid_rank1_rewardsRewards(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_quantity = (int) (long) json[nameof (reward_quantity)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
        this.reward_id = (int) (long) json[nameof (reward_id)];
      }
    }

    [Serializable]
    public class GuildraidRaidTopDamage_rewards : KeyCompare
    {
      public RaidDamageReward[] rewards;
      public int quest_id;

      public GuildraidRaidTopDamage_rewards()
      {
      }

      public GuildraidRaidTopDamage_rewards(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<RaidDamageReward> raidDamageRewardList = new List<RaidDamageReward>();
        foreach (object json1 in (List<object>) json[nameof (rewards)])
          raidDamageRewardList.Add(json1 == null ? (RaidDamageReward) null : new RaidDamageReward((Dictionary<string, object>) json1));
        this.rewards = raidDamageRewardList.ToArray();
        this.quest_id = (int) (long) json[nameof (quest_id)];
      }
    }

    [Serializable]
    public class GuildraidRankingGuild : KeyCompare
    {
      public WebAPI.Response.GuildraidRankingGuildDamage_rankings[] damage_rankings;
      public WebAPI.Response.GuildraidRankingGuildPlayer_guild_score player_guild_score;
      public int period_id;

      public GuildraidRankingGuild()
      {
      }

      public GuildraidRankingGuild(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<WebAPI.Response.GuildraidRankingGuildDamage_rankings> guildDamageRankingsList = new List<WebAPI.Response.GuildraidRankingGuildDamage_rankings>();
        foreach (object json1 in (List<object>) json[nameof (damage_rankings)])
          guildDamageRankingsList.Add(json1 == null ? (WebAPI.Response.GuildraidRankingGuildDamage_rankings) null : new WebAPI.Response.GuildraidRankingGuildDamage_rankings((Dictionary<string, object>) json1));
        this.damage_rankings = guildDamageRankingsList.ToArray();
        this.player_guild_score = json[nameof (player_guild_score)] == null ? (WebAPI.Response.GuildraidRankingGuildPlayer_guild_score) null : new WebAPI.Response.GuildraidRankingGuildPlayer_guild_score((Dictionary<string, object>) json[nameof (player_guild_score)]);
        this.period_id = (int) (long) json[nameof (period_id)];
      }
    }

    [Serializable]
    public class GuildraidRankingGuildPlayer_guild_score : KeyCompare
    {
      public long damage_score;
      public int? damage_rank;

      public GuildraidRankingGuildPlayer_guild_score()
      {
      }

      public GuildraidRankingGuildPlayer_guild_score(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.damage_score = (long) json[nameof (damage_score)];
        int? nullable1;
        if (json[nameof (damage_rank)] != null)
        {
          long? nullable2 = (long?) json[nameof (damage_rank)];
          nullable1 = nullable2.HasValue ? new int?((int) nullable2.GetValueOrDefault()) : new int?();
        }
        else
          nullable1 = new int?();
        this.damage_rank = nullable1;
      }
    }

    [Serializable]
    public class GuildraidRankingGuildDamage_rankings : KeyCompare
    {
      public int leader_unit_job_id;
      public int rank;
      public string guild_name;
      public int membership_capacity;
      public long score;
      public int current_emblem_id;
      public int leader_unit_id;
      public string guild_id;
      public int leader_unit_level;
      public int membership_num;

      public GuildraidRankingGuildDamage_rankings()
      {
      }

      public GuildraidRankingGuildDamage_rankings(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.leader_unit_job_id = (int) (long) json[nameof (leader_unit_job_id)];
        this.rank = (int) (long) json[nameof (rank)];
        this.guild_name = (string) json[nameof (guild_name)];
        this.membership_capacity = (int) (long) json[nameof (membership_capacity)];
        this.score = (long) json[nameof (score)];
        this.current_emblem_id = (int) (long) json[nameof (current_emblem_id)];
        this.leader_unit_id = (int) (long) json[nameof (leader_unit_id)];
        this.guild_id = (string) json[nameof (guild_id)];
        this.leader_unit_level = (int) (long) json[nameof (leader_unit_level)];
        this.membership_num = (int) (long) json[nameof (membership_num)];
      }
    }

    [Serializable]
    public class GuildraidRankingPlayer : KeyCompare
    {
      public WebAPI.Response.GuildraidRankingPlayerPlayer_score player_score;
      public GuildMembership[] memberships;
      public int period_id;
      public WebAPI.Response.GuildraidRankingPlayerDamage_rankings_in_all[] damage_rankings_in_all;
      public WebAPI.Response.GuildraidRankingPlayerDamage_rankings_in_guild[] damage_rankings_in_guild;
      public int boss_id;

      public GuildraidRankingPlayer()
      {
      }

      public GuildraidRankingPlayer(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.player_score = json[nameof (player_score)] == null ? (WebAPI.Response.GuildraidRankingPlayerPlayer_score) null : new WebAPI.Response.GuildraidRankingPlayerPlayer_score((Dictionary<string, object>) json[nameof (player_score)]);
        List<GuildMembership> guildMembershipList = new List<GuildMembership>();
        foreach (object json1 in (List<object>) json[nameof (memberships)])
          guildMembershipList.Add(json1 == null ? (GuildMembership) null : new GuildMembership((Dictionary<string, object>) json1));
        this.memberships = guildMembershipList.ToArray();
        SMManager.UpdateList<GuildMembership>(this.memberships);
        this.period_id = (int) (long) json[nameof (period_id)];
        List<WebAPI.Response.GuildraidRankingPlayerDamage_rankings_in_all> damageRankingsInAllList = new List<WebAPI.Response.GuildraidRankingPlayerDamage_rankings_in_all>();
        foreach (object json2 in (List<object>) json[nameof (damage_rankings_in_all)])
          damageRankingsInAllList.Add(json2 == null ? (WebAPI.Response.GuildraidRankingPlayerDamage_rankings_in_all) null : new WebAPI.Response.GuildraidRankingPlayerDamage_rankings_in_all((Dictionary<string, object>) json2));
        this.damage_rankings_in_all = damageRankingsInAllList.ToArray();
        List<WebAPI.Response.GuildraidRankingPlayerDamage_rankings_in_guild> damageRankingsInGuildList = new List<WebAPI.Response.GuildraidRankingPlayerDamage_rankings_in_guild>();
        foreach (object json3 in (List<object>) json[nameof (damage_rankings_in_guild)])
          damageRankingsInGuildList.Add(json3 == null ? (WebAPI.Response.GuildraidRankingPlayerDamage_rankings_in_guild) null : new WebAPI.Response.GuildraidRankingPlayerDamage_rankings_in_guild((Dictionary<string, object>) json3));
        this.damage_rankings_in_guild = damageRankingsInGuildList.ToArray();
        this.boss_id = (int) (long) json[nameof (boss_id)];
      }
    }

    [Serializable]
    public class GuildraidRankingPlayerDamage_rankings_in_guild : KeyCompare
    {
      public string player_name;
      public int player_level;
      public int leader_unit_job_id;
      public int rank;
      public string player_id;
      public string player_guild_name;
      public int score;
      public int player_emblem_id;
      public int leader_unit_id;
      public int leader_unit_level;

      public GuildraidRankingPlayerDamage_rankings_in_guild()
      {
      }

      public GuildraidRankingPlayerDamage_rankings_in_guild(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.player_name = (string) json[nameof (player_name)];
        this.player_level = (int) (long) json[nameof (player_level)];
        this.leader_unit_job_id = (int) (long) json[nameof (leader_unit_job_id)];
        this.rank = (int) (long) json[nameof (rank)];
        this.player_id = (string) json[nameof (player_id)];
        this.player_guild_name = (string) json[nameof (player_guild_name)];
        this.score = (int) (long) json[nameof (score)];
        this.player_emblem_id = (int) (long) json[nameof (player_emblem_id)];
        this.leader_unit_id = (int) (long) json[nameof (leader_unit_id)];
        this.leader_unit_level = (int) (long) json[nameof (leader_unit_level)];
      }
    }

    [Serializable]
    public class GuildraidRankingPlayerDamage_rankings_in_all : KeyCompare
    {
      public string player_name;
      public int player_level;
      public int leader_unit_job_id;
      public int rank;
      public string player_id;
      public string player_guild_name;
      public int score;
      public int player_emblem_id;
      public int leader_unit_id;
      public int leader_unit_level;

      public GuildraidRankingPlayerDamage_rankings_in_all()
      {
      }

      public GuildraidRankingPlayerDamage_rankings_in_all(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.player_name = (string) json[nameof (player_name)];
        this.player_level = (int) (long) json[nameof (player_level)];
        this.leader_unit_job_id = (int) (long) json[nameof (leader_unit_job_id)];
        this.rank = (int) (long) json[nameof (rank)];
        this.player_id = (string) json[nameof (player_id)];
        this.player_guild_name = (string) json[nameof (player_guild_name)];
        this.score = (int) (long) json[nameof (score)];
        this.player_emblem_id = (int) (long) json[nameof (player_emblem_id)];
        this.leader_unit_id = (int) (long) json[nameof (leader_unit_id)];
        this.leader_unit_level = (int) (long) json[nameof (leader_unit_level)];
      }
    }

    [Serializable]
    public class GuildraidRankingPlayerPlayer_score : KeyCompare
    {
      public int damage_score;
      public int? damage_rank_in_guild;
      public int? damage_rank_in_all;

      public GuildraidRankingPlayerPlayer_score()
      {
      }

      public GuildraidRankingPlayerPlayer_score(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.damage_score = (int) (long) json[nameof (damage_score)];
        long? nullable1;
        int? nullable2;
        if (json[nameof (damage_rank_in_guild)] != null)
        {
          nullable1 = (long?) json[nameof (damage_rank_in_guild)];
          nullable2 = nullable1.HasValue ? new int?((int) nullable1.GetValueOrDefault()) : new int?();
        }
        else
          nullable2 = new int?();
        this.damage_rank_in_guild = nullable2;
        int? nullable3;
        if (json[nameof (damage_rank_in_all)] != null)
        {
          nullable1 = (long?) json[nameof (damage_rank_in_all)];
          nullable3 = nullable1.HasValue ? new int?((int) nullable1.GetValueOrDefault()) : new int?();
        }
        else
          nullable3 = new int?();
        this.damage_rank_in_all = nullable3;
      }
    }

    [Serializable]
    public class GuildraidSubjugationHistory : KeyCompare
    {
      public int period_id;
      public WebAPI.Response.GuildraidSubjugationHistorySubjugation_histories[] subjugation_histories;

      public GuildraidSubjugationHistory()
      {
      }

      public GuildraidSubjugationHistory(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.period_id = (int) (long) json[nameof (period_id)];
        List<WebAPI.Response.GuildraidSubjugationHistorySubjugation_histories> subjugationHistoriesList = new List<WebAPI.Response.GuildraidSubjugationHistorySubjugation_histories>();
        foreach (object json1 in (List<object>) json[nameof (subjugation_histories)])
          subjugationHistoriesList.Add(json1 == null ? (WebAPI.Response.GuildraidSubjugationHistorySubjugation_histories) null : new WebAPI.Response.GuildraidSubjugationHistorySubjugation_histories((Dictionary<string, object>) json1));
        this.subjugation_histories = subjugationHistoriesList.ToArray();
      }
    }

    [Serializable]
    public class GuildraidSubjugationHistorySubjugation_histories : KeyCompare
    {
      public int loop_count;
      public DateTime defeated_at;
      public int quest_s_id;

      public GuildraidSubjugationHistorySubjugation_histories()
      {
      }

      public GuildraidSubjugationHistorySubjugation_histories(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.loop_count = (int) (long) json[nameof (loop_count)];
        this.defeated_at = DateTime.Parse((string) json[nameof (defeated_at)]);
        this.quest_s_id = (int) (long) json[nameof (quest_s_id)];
      }
    }

    [Serializable]
    public class GuildRecommends : KeyCompare
    {
      public GuildDirectory[] guilds;

      public GuildRecommends()
      {
      }

      public GuildRecommends(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<GuildDirectory> guildDirectoryList = new List<GuildDirectory>();
        foreach (object json1 in (List<object>) json[nameof (guilds)])
          guildDirectoryList.Add(json1 == null ? (GuildDirectory) null : new GuildDirectory((Dictionary<string, object>) json1));
        this.guilds = guildDirectoryList.ToArray();
      }
    }

    [Serializable]
    public class GuildSearch : KeyCompare
    {
      public GuildDirectory[] guilds;

      public GuildSearch()
      {
      }

      public GuildSearch(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<GuildDirectory> guildDirectoryList = new List<GuildDirectory>();
        foreach (object json1 in (List<object>) json[nameof (guilds)])
          guildDirectoryList.Add(json1 == null ? (GuildDirectory) null : new GuildDirectory((Dictionary<string, object>) json1));
        this.guilds = guildDirectoryList.ToArray();
      }
    }

    [Serializable]
    public class GuildSettings : KeyCompare
    {
      public PlayerAffiliation player_affiliation;

      public GuildSettings()
      {
      }

      public GuildSettings(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.player_affiliation = json[nameof (player_affiliation)] == null ? (PlayerAffiliation) null : new PlayerAffiliation((Dictionary<string, object>) json[nameof (player_affiliation)]);
        SMManager.Change<PlayerAffiliation>(this.player_affiliation);
      }
    }

    [Serializable]
    public class GuildShow : KeyCompare
    {
      public string[] opposed_player_ids;
      public GuildRegistration guild;
      public GuildRegistration opponent;

      public GuildShow()
      {
      }

      public GuildShow(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.opposed_player_ids = ((IEnumerable<object>) json[nameof (opposed_player_ids)]).Select<object, string>((Func<object, string>) (s => (string) s)).ToArray<string>();
        this.guild = json[nameof (guild)] == null ? (GuildRegistration) null : new GuildRegistration((Dictionary<string, object>) json[nameof (guild)]);
        this.opponent = json[nameof (opponent)] == null ? (GuildRegistration) null : new GuildRegistration((Dictionary<string, object>) json[nameof (opponent)]);
      }
    }

    [Serializable]
    public class GuildSignal : KeyCompare
    {
      public SM.GuildSignal guild_signal;

      public GuildSignal()
      {
      }

      public GuildSignal(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.guild_signal = json[nameof (guild_signal)] == null ? (SM.GuildSignal) null : new SM.GuildSignal((Dictionary<string, object>) json[nameof (guild_signal)]);
        SMManager.Change<SM.GuildSignal>(this.guild_signal);
      }
    }

    [Serializable]
    public class GuildSubmasterAssign : KeyCompare
    {
      public PlayerAffiliation player_affiliation;

      public GuildSubmasterAssign()
      {
      }

      public GuildSubmasterAssign(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.player_affiliation = json[nameof (player_affiliation)] == null ? (PlayerAffiliation) null : new PlayerAffiliation((Dictionary<string, object>) json[nameof (player_affiliation)]);
        SMManager.Change<PlayerAffiliation>(this.player_affiliation);
      }
    }

    [Serializable]
    public class GuildSubmasterDismiss : KeyCompare
    {
      public PlayerAffiliation player_affiliation;

      public GuildSubmasterDismiss()
      {
      }

      public GuildSubmasterDismiss(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.player_affiliation = json[nameof (player_affiliation)] == null ? (PlayerAffiliation) null : new PlayerAffiliation((Dictionary<string, object>) json[nameof (player_affiliation)]);
        SMManager.Change<PlayerAffiliation>(this.player_affiliation);
      }
    }

    [Serializable]
    public class GuildSubmasterResign : KeyCompare
    {
      public PlayerAffiliation player_affiliation;

      public GuildSubmasterResign()
      {
      }

      public GuildSubmasterResign(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.player_affiliation = json[nameof (player_affiliation)] == null ? (PlayerAffiliation) null : new PlayerAffiliation((Dictionary<string, object>) json[nameof (player_affiliation)]);
        SMManager.Change<PlayerAffiliation>(this.player_affiliation);
      }
    }

    [Serializable]
    public class GuildTop : KeyCompare
    {
      public WebAPI.Response.GuildTopRaid_guild_ranking_guild_rewards[] raid_guild_ranking_guild_rewards;
      public int rp;
      public bool is_open_guild_gift_campaign;
      public PlayerGuildFacility[] guild_facilities;
      public bool display_transfer_popup;
      public PlayerGuildTownSlot[] guild_town_slots;
      public SM.GuildSignal guild_signal;
      public EventInfo[] event_infos;
      public bool is_open_guild_bunk_campaign;
      public PlayerPresent[] player_presents;
      public long? raid_total_damage;
      public PlayerAffiliation player_affiliation;
      public int? raid_rank_period_id;
      public WebAPI.Response.GuildTopRaid_rank1_rewards[] raid_rank1_rewards;
      public PlayerGuildTown[] guild_towns;
      public bool raid_aggregating;
      public int? raid_damage_rank;
      public WebAPI.Response.GuildTopRaid_guild_ranking_rewards[] raid_guild_ranking_rewards;
      public bool is_new_guild_log;
      public bool has_receivable_guild_checkin;
      public RaidPeriod raid_period;
      public bool is_resume_battle;

      public GuildTop()
      {
      }

      public GuildTop(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<WebAPI.Response.GuildTopRaid_guild_ranking_guild_rewards> rankingGuildRewardsList = new List<WebAPI.Response.GuildTopRaid_guild_ranking_guild_rewards>();
        foreach (object json1 in (List<object>) json[nameof (raid_guild_ranking_guild_rewards)])
          rankingGuildRewardsList.Add(json1 == null ? (WebAPI.Response.GuildTopRaid_guild_ranking_guild_rewards) null : new WebAPI.Response.GuildTopRaid_guild_ranking_guild_rewards((Dictionary<string, object>) json1));
        this.raid_guild_ranking_guild_rewards = rankingGuildRewardsList.ToArray();
        this.rp = (int) (long) json[nameof (rp)];
        this.is_open_guild_gift_campaign = (bool) json[nameof (is_open_guild_gift_campaign)];
        List<PlayerGuildFacility> playerGuildFacilityList = new List<PlayerGuildFacility>();
        foreach (object json2 in (List<object>) json[nameof (guild_facilities)])
          playerGuildFacilityList.Add(json2 == null ? (PlayerGuildFacility) null : new PlayerGuildFacility((Dictionary<string, object>) json2));
        this.guild_facilities = playerGuildFacilityList.ToArray();
        SMManager.UpdateList<PlayerGuildFacility>(this.guild_facilities);
        this.display_transfer_popup = (bool) json[nameof (display_transfer_popup)];
        List<PlayerGuildTownSlot> playerGuildTownSlotList = new List<PlayerGuildTownSlot>();
        foreach (object json3 in (List<object>) json[nameof (guild_town_slots)])
          playerGuildTownSlotList.Add(json3 == null ? (PlayerGuildTownSlot) null : new PlayerGuildTownSlot((Dictionary<string, object>) json3));
        this.guild_town_slots = playerGuildTownSlotList.ToArray();
        SMManager.UpdateList<PlayerGuildTownSlot>(this.guild_town_slots);
        this.guild_signal = json[nameof (guild_signal)] == null ? (SM.GuildSignal) null : new SM.GuildSignal((Dictionary<string, object>) json[nameof (guild_signal)]);
        SMManager.Change<SM.GuildSignal>(this.guild_signal);
        List<EventInfo> eventInfoList = new List<EventInfo>();
        foreach (object json4 in (List<object>) json[nameof (event_infos)])
          eventInfoList.Add(json4 == null ? (EventInfo) null : new EventInfo((Dictionary<string, object>) json4));
        this.event_infos = eventInfoList.ToArray();
        SMManager.UpdateList<EventInfo>(this.event_infos);
        this.is_open_guild_bunk_campaign = (bool) json[nameof (is_open_guild_bunk_campaign)];
        List<PlayerPresent> playerPresentList = new List<PlayerPresent>();
        foreach (object json5 in (List<object>) json[nameof (player_presents)])
          playerPresentList.Add(json5 == null ? (PlayerPresent) null : new PlayerPresent((Dictionary<string, object>) json5));
        this.player_presents = playerPresentList.ToArray();
        SMManager.UpdateList<PlayerPresent>(this.player_presents);
        this.raid_total_damage = json[nameof (raid_total_damage)] == null ? new long?() : new long?((long) json[nameof (raid_total_damage)]);
        this.player_affiliation = json[nameof (player_affiliation)] == null ? (PlayerAffiliation) null : new PlayerAffiliation((Dictionary<string, object>) json[nameof (player_affiliation)]);
        SMManager.Change<PlayerAffiliation>(this.player_affiliation);
        int? nullable1;
        if (json[nameof (raid_rank_period_id)] != null)
        {
          long? nullable2 = (long?) json[nameof (raid_rank_period_id)];
          nullable1 = nullable2.HasValue ? new int?((int) nullable2.GetValueOrDefault()) : new int?();
        }
        else
          nullable1 = new int?();
        this.raid_rank_period_id = nullable1;
        List<WebAPI.Response.GuildTopRaid_rank1_rewards> raidRank1RewardsList = new List<WebAPI.Response.GuildTopRaid_rank1_rewards>();
        foreach (object json6 in (List<object>) json[nameof (raid_rank1_rewards)])
          raidRank1RewardsList.Add(json6 == null ? (WebAPI.Response.GuildTopRaid_rank1_rewards) null : new WebAPI.Response.GuildTopRaid_rank1_rewards((Dictionary<string, object>) json6));
        this.raid_rank1_rewards = raidRank1RewardsList.ToArray();
        List<PlayerGuildTown> playerGuildTownList = new List<PlayerGuildTown>();
        foreach (object json7 in (List<object>) json[nameof (guild_towns)])
          playerGuildTownList.Add(json7 == null ? (PlayerGuildTown) null : new PlayerGuildTown((Dictionary<string, object>) json7));
        this.guild_towns = playerGuildTownList.ToArray();
        SMManager.UpdateList<PlayerGuildTown>(this.guild_towns);
        this.raid_aggregating = (bool) json[nameof (raid_aggregating)];
        int? nullable3;
        if (json[nameof (raid_damage_rank)] != null)
        {
          long? nullable4 = (long?) json[nameof (raid_damage_rank)];
          nullable3 = nullable4.HasValue ? new int?((int) nullable4.GetValueOrDefault()) : new int?();
        }
        else
          nullable3 = new int?();
        this.raid_damage_rank = nullable3;
        this.raid_period = json[nameof (raid_period)] == null ? (RaidPeriod) null : new RaidPeriod((Dictionary<string, object>) json[nameof (raid_period)]);
        SMManager.Change<RaidPeriod>(this.raid_period);
        List<WebAPI.Response.GuildTopRaid_guild_ranking_rewards> guildRankingRewardsList = new List<WebAPI.Response.GuildTopRaid_guild_ranking_rewards>();
        foreach (object json8 in (List<object>) json[nameof (raid_guild_ranking_rewards)])
          guildRankingRewardsList.Add(json8 == null ? (WebAPI.Response.GuildTopRaid_guild_ranking_rewards) null : new WebAPI.Response.GuildTopRaid_guild_ranking_rewards((Dictionary<string, object>) json8));
        this.raid_guild_ranking_rewards = guildRankingRewardsList.ToArray();
        this.is_new_guild_log = (bool) json[nameof (is_new_guild_log)];
        this.has_receivable_guild_checkin = (bool) json[nameof (has_receivable_guild_checkin)];
        this.is_resume_battle = (bool) json[nameof (is_resume_battle)];
        this.raid_period = json[nameof (raid_period)] == null ? (RaidPeriod) null : new RaidPeriod((Dictionary<string, object>) json[nameof (raid_period)]);
        SMManager.Change<RaidPeriod>(this.raid_period);
        if (!json.ContainsKey("player_presents:delete"))
          return;
        SMManager.DeleteList<PlayerPresent>(((IEnumerable<object>) json["player_presents:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class GuildTopRaid_guild_ranking_rewards : KeyCompare
    {
      public WebAPI.Response.GuildTopRaid_guild_ranking_rewardsRewards[] rewards;
      public int condition_id;

      public GuildTopRaid_guild_ranking_rewards()
      {
      }

      public GuildTopRaid_guild_ranking_rewards(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<WebAPI.Response.GuildTopRaid_guild_ranking_rewardsRewards> rankingRewardsRewardsList = new List<WebAPI.Response.GuildTopRaid_guild_ranking_rewardsRewards>();
        foreach (object json1 in (List<object>) json[nameof (rewards)])
          rankingRewardsRewardsList.Add(json1 == null ? (WebAPI.Response.GuildTopRaid_guild_ranking_rewardsRewards) null : new WebAPI.Response.GuildTopRaid_guild_ranking_rewardsRewards((Dictionary<string, object>) json1));
        this.rewards = rankingRewardsRewardsList.ToArray();
        this.condition_id = (int) (long) json[nameof (condition_id)];
      }
    }

    [Serializable]
    public class GuildTopRaid_guild_ranking_rewardsRewards : KeyCompare
    {
      public int reward_quantity;
      public int reward_type_id;
      public int reward_id;

      public GuildTopRaid_guild_ranking_rewardsRewards()
      {
      }

      public GuildTopRaid_guild_ranking_rewardsRewards(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_quantity = (int) (long) json[nameof (reward_quantity)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
        this.reward_id = (int) (long) json[nameof (reward_id)];
      }
    }

    [Serializable]
    public class GuildTopRaid_rank1_rewards : KeyCompare
    {
      public WebAPI.Response.GuildTopRaid_rank1_rewardsRewards[] rewards;

      public GuildTopRaid_rank1_rewards()
      {
      }

      public GuildTopRaid_rank1_rewards(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<WebAPI.Response.GuildTopRaid_rank1_rewardsRewards> rank1RewardsRewardsList = new List<WebAPI.Response.GuildTopRaid_rank1_rewardsRewards>();
        foreach (object json1 in (List<object>) json[nameof (rewards)])
          rank1RewardsRewardsList.Add(json1 == null ? (WebAPI.Response.GuildTopRaid_rank1_rewardsRewards) null : new WebAPI.Response.GuildTopRaid_rank1_rewardsRewards((Dictionary<string, object>) json1));
        this.rewards = rank1RewardsRewardsList.ToArray();
      }
    }

    [Serializable]
    public class GuildTopRaid_rank1_rewardsRewards : KeyCompare
    {
      public int reward_quantity;
      public int reward_type_id;
      public int reward_id;

      public GuildTopRaid_rank1_rewardsRewards()
      {
      }

      public GuildTopRaid_rank1_rewardsRewards(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_quantity = (int) (long) json[nameof (reward_quantity)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
        this.reward_id = (int) (long) json[nameof (reward_id)];
      }
    }

    [Serializable]
    public class GuildTopRaid_guild_ranking_guild_rewards : KeyCompare
    {
      public GuildRankingGuildReward[] rewards;
      public int condition_id;

      public GuildTopRaid_guild_ranking_guild_rewards()
      {
      }

      public GuildTopRaid_guild_ranking_guild_rewards(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<GuildRankingGuildReward> rankingGuildRewardList = new List<GuildRankingGuildReward>();
        foreach (object json1 in (List<object>) json[nameof (rewards)])
          rankingGuildRewardList.Add(json1 == null ? (GuildRankingGuildReward) null : new GuildRankingGuildReward((Dictionary<string, object>) json1));
        this.rewards = rankingGuildRewardList.ToArray();
        this.condition_id = (int) (long) json[nameof (condition_id)];
      }
    }

    [Serializable]
    public class GuildtownChange : KeyCompare
    {
      public PlayerGuildTownSlot[] guild_town_slots;

      public GuildtownChange()
      {
      }

      public GuildtownChange(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerGuildTownSlot> playerGuildTownSlotList = new List<PlayerGuildTownSlot>();
        foreach (object json1 in (List<object>) json[nameof (guild_town_slots)])
          playerGuildTownSlotList.Add(json1 == null ? (PlayerGuildTownSlot) null : new PlayerGuildTownSlot((Dictionary<string, object>) json1));
        this.guild_town_slots = playerGuildTownSlotList.ToArray();
        SMManager.UpdateList<PlayerGuildTownSlot>(this.guild_town_slots);
      }
    }

    [Serializable]
    public class GuildtownGuildMedalShop : KeyCompare
    {
      public Shop[] shops;

      public GuildtownGuildMedalShop()
      {
      }

      public GuildtownGuildMedalShop(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<Shop> shopList = new List<Shop>();
        foreach (object json1 in (List<object>) json[nameof (shops)])
          shopList.Add(json1 == null ? (Shop) null : new Shop((Dictionary<string, object>) json1));
        this.shops = shopList.ToArray();
        SMManager.UpdateList<Shop>(this.shops);
      }
    }

    [Serializable]
    public class GuildtownSave : KeyCompare
    {
      public PlayerGuildTownSlot[] guild_town_slots;
      public PlayerAffiliation player_affiliation;

      public GuildtownSave()
      {
      }

      public GuildtownSave(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerGuildTownSlot> playerGuildTownSlotList = new List<PlayerGuildTownSlot>();
        foreach (object json1 in (List<object>) json[nameof (guild_town_slots)])
          playerGuildTownSlotList.Add(json1 == null ? (PlayerGuildTownSlot) null : new PlayerGuildTownSlot((Dictionary<string, object>) json1));
        this.guild_town_slots = playerGuildTownSlotList.ToArray();
        SMManager.UpdateList<PlayerGuildTownSlot>(this.guild_town_slots);
        this.player_affiliation = json[nameof (player_affiliation)] == null ? (PlayerAffiliation) null : new PlayerAffiliation((Dictionary<string, object>) json[nameof (player_affiliation)]);
        SMManager.Change<PlayerAffiliation>(this.player_affiliation);
      }
    }

    [Serializable]
    public class GuildtownSelect : KeyCompare
    {
      public PlayerAffiliation player_affiliation;

      public GuildtownSelect()
      {
      }

      public GuildtownSelect(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.player_affiliation = json[nameof (player_affiliation)] == null ? (PlayerAffiliation) null : new PlayerAffiliation((Dictionary<string, object>) json[nameof (player_affiliation)]);
        SMManager.Change<PlayerAffiliation>(this.player_affiliation);
      }
    }

    [Serializable]
    public class GuildtownSellFacility : KeyCompare
    {
      public int gain_guild_medal;
      public PlayerAffiliation player_affiliation;
      public PlayerGuildFacility[] guild_facilities;

      public GuildtownSellFacility()
      {
      }

      public GuildtownSellFacility(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.gain_guild_medal = (int) (long) json[nameof (gain_guild_medal)];
        this.player_affiliation = json[nameof (player_affiliation)] == null ? (PlayerAffiliation) null : new PlayerAffiliation((Dictionary<string, object>) json[nameof (player_affiliation)]);
        SMManager.Change<PlayerAffiliation>(this.player_affiliation);
        List<PlayerGuildFacility> playerGuildFacilityList = new List<PlayerGuildFacility>();
        foreach (object json1 in (List<object>) json[nameof (guild_facilities)])
          playerGuildFacilityList.Add(json1 == null ? (PlayerGuildFacility) null : new PlayerGuildFacility((Dictionary<string, object>) json1));
        this.guild_facilities = playerGuildFacilityList.ToArray();
        SMManager.UpdateList<PlayerGuildFacility>(this.guild_facilities);
      }
    }

    [Serializable]
    public class GuildtownShow : KeyCompare
    {
      public PlayerGuildTownSlot[] guild_town_slots;
      public int default_town_slot_number;
      public PlayerGuildFacility[] guild_facilities;

      public GuildtownShow()
      {
      }

      public GuildtownShow(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerGuildTownSlot> playerGuildTownSlotList = new List<PlayerGuildTownSlot>();
        foreach (object json1 in (List<object>) json[nameof (guild_town_slots)])
          playerGuildTownSlotList.Add(json1 == null ? (PlayerGuildTownSlot) null : new PlayerGuildTownSlot((Dictionary<string, object>) json1));
        this.guild_town_slots = playerGuildTownSlotList.ToArray();
        this.default_town_slot_number = (int) (long) json[nameof (default_town_slot_number)];
        List<PlayerGuildFacility> playerGuildFacilityList = new List<PlayerGuildFacility>();
        foreach (object json2 in (List<object>) json[nameof (guild_facilities)])
          playerGuildFacilityList.Add(json2 == null ? (PlayerGuildFacility) null : new PlayerGuildFacility((Dictionary<string, object>) json2));
        this.guild_facilities = playerGuildFacilityList.ToArray();
      }
    }

    [Serializable]
    public class GuildtownTest : KeyCompare
    {
      public PlayerUnit[] target_deck_units;
      public PlayerItem[] target_support_gears;
      public PlayerItem[] own_support_gears;
      public PlayerGearReisouSchema[] own_support_reisou_gears;
      public PlayerUnit[] target_over_killers;
      public PlayerGuildFacility[] target_facilities;
      public int[] target_call_skill_same_character_ids;
      public PlayerUnit[] own_deck_units;
      public PlayerUnit[] own_support_over_killers;
      public PlayerGearReisouSchema[] target_deck_reisou_gears;
      public PlayerGearReisouSchema[] own_deck_reisou_gears;
      public PlayerUnit[] own_support_units;
      public GuildBaseBonusEffect[] bonus_effects;
      public PlayerUnit[] target_support_over_killers;
      public PlayerCharacterIntimate[] own_character_intimates;
      public PlayerItem[] target_deck_gears;
      public PlayerAwakeSkill[] own_support_awake_skills;
      public PlayerAwakeSkill[] target_deck_awake_skills;
      public PlayerAwakeSkill[] target_support_awake_skills;
      public PlayerUnit[] own_over_killers;
      public GvgStage stage;
      public int[] target_call_skill_values;
      public PlayerUnit[] target_support_units;
      public GuildBaseBonusEffect[] target_bonus_effects;
      public PlayerCharacterIntimate[] target_character_intimates;
      public PlayerGuildTownSlot target_town_slot;
      public PlayerGearReisouSchema[] target_support_reisou_gears;
      public PlayerItem[] own_deck_gears;
      public PlayerAwakeSkill[] own_deck_awake_skills;

      public GuildtownTest()
      {
      }

      public GuildtownTest(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerUnit> playerUnitList1 = new List<PlayerUnit>();
        foreach (object json1 in (List<object>) json[nameof (target_deck_units)])
          playerUnitList1.Add(json1 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json1));
        this.target_deck_units = playerUnitList1.ToArray();
        List<PlayerItem> playerItemList1 = new List<PlayerItem>();
        foreach (object json2 in (List<object>) json[nameof (target_support_gears)])
          playerItemList1.Add(json2 == null ? (PlayerItem) null : new PlayerItem((Dictionary<string, object>) json2));
        this.target_support_gears = playerItemList1.ToArray();
        List<PlayerItem> playerItemList2 = new List<PlayerItem>();
        foreach (object json3 in (List<object>) json[nameof (own_support_gears)])
          playerItemList2.Add(json3 == null ? (PlayerItem) null : new PlayerItem((Dictionary<string, object>) json3));
        this.own_support_gears = playerItemList2.ToArray();
        List<PlayerGearReisouSchema> gearReisouSchemaList1 = new List<PlayerGearReisouSchema>();
        foreach (object json4 in (List<object>) json[nameof (own_support_reisou_gears)])
          gearReisouSchemaList1.Add(json4 == null ? (PlayerGearReisouSchema) null : new PlayerGearReisouSchema((Dictionary<string, object>) json4));
        this.own_support_reisou_gears = gearReisouSchemaList1.ToArray();
        List<PlayerUnit> playerUnitList2 = new List<PlayerUnit>();
        foreach (object json5 in (List<object>) json[nameof (target_over_killers)])
          playerUnitList2.Add(json5 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json5));
        this.target_over_killers = playerUnitList2.ToArray();
        List<PlayerGuildFacility> playerGuildFacilityList = new List<PlayerGuildFacility>();
        foreach (object json6 in (List<object>) json[nameof (target_facilities)])
          playerGuildFacilityList.Add(json6 == null ? (PlayerGuildFacility) null : new PlayerGuildFacility((Dictionary<string, object>) json6));
        this.target_facilities = playerGuildFacilityList.ToArray();
        this.target_call_skill_same_character_ids = ((IEnumerable<object>) json[nameof (target_call_skill_same_character_ids)]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).ToArray<int>();
        List<PlayerUnit> playerUnitList3 = new List<PlayerUnit>();
        foreach (object json7 in (List<object>) json[nameof (own_deck_units)])
          playerUnitList3.Add(json7 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json7));
        this.own_deck_units = playerUnitList3.ToArray();
        List<PlayerUnit> playerUnitList4 = new List<PlayerUnit>();
        foreach (object json8 in (List<object>) json[nameof (own_support_over_killers)])
          playerUnitList4.Add(json8 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json8));
        this.own_support_over_killers = playerUnitList4.ToArray();
        List<PlayerGearReisouSchema> gearReisouSchemaList2 = new List<PlayerGearReisouSchema>();
        foreach (object json9 in (List<object>) json[nameof (target_deck_reisou_gears)])
          gearReisouSchemaList2.Add(json9 == null ? (PlayerGearReisouSchema) null : new PlayerGearReisouSchema((Dictionary<string, object>) json9));
        this.target_deck_reisou_gears = gearReisouSchemaList2.ToArray();
        List<PlayerGearReisouSchema> gearReisouSchemaList3 = new List<PlayerGearReisouSchema>();
        foreach (object json10 in (List<object>) json[nameof (own_deck_reisou_gears)])
          gearReisouSchemaList3.Add(json10 == null ? (PlayerGearReisouSchema) null : new PlayerGearReisouSchema((Dictionary<string, object>) json10));
        this.own_deck_reisou_gears = gearReisouSchemaList3.ToArray();
        List<PlayerUnit> playerUnitList5 = new List<PlayerUnit>();
        foreach (object json11 in (List<object>) json[nameof (own_support_units)])
          playerUnitList5.Add(json11 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json11));
        this.own_support_units = playerUnitList5.ToArray();
        List<GuildBaseBonusEffect> guildBaseBonusEffectList1 = new List<GuildBaseBonusEffect>();
        foreach (object json12 in (List<object>) json[nameof (bonus_effects)])
          guildBaseBonusEffectList1.Add(json12 == null ? (GuildBaseBonusEffect) null : new GuildBaseBonusEffect((Dictionary<string, object>) json12));
        this.bonus_effects = guildBaseBonusEffectList1.ToArray();
        List<PlayerUnit> playerUnitList6 = new List<PlayerUnit>();
        foreach (object json13 in (List<object>) json[nameof (target_support_over_killers)])
          playerUnitList6.Add(json13 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json13));
        this.target_support_over_killers = playerUnitList6.ToArray();
        List<PlayerCharacterIntimate> characterIntimateList1 = new List<PlayerCharacterIntimate>();
        foreach (object json14 in (List<object>) json[nameof (own_character_intimates)])
          characterIntimateList1.Add(json14 == null ? (PlayerCharacterIntimate) null : new PlayerCharacterIntimate((Dictionary<string, object>) json14));
        this.own_character_intimates = characterIntimateList1.ToArray();
        List<PlayerItem> playerItemList3 = new List<PlayerItem>();
        foreach (object json15 in (List<object>) json[nameof (target_deck_gears)])
          playerItemList3.Add(json15 == null ? (PlayerItem) null : new PlayerItem((Dictionary<string, object>) json15));
        this.target_deck_gears = playerItemList3.ToArray();
        List<PlayerAwakeSkill> playerAwakeSkillList1 = new List<PlayerAwakeSkill>();
        foreach (object json16 in (List<object>) json[nameof (own_support_awake_skills)])
          playerAwakeSkillList1.Add(json16 == null ? (PlayerAwakeSkill) null : new PlayerAwakeSkill((Dictionary<string, object>) json16));
        this.own_support_awake_skills = playerAwakeSkillList1.ToArray();
        List<PlayerAwakeSkill> playerAwakeSkillList2 = new List<PlayerAwakeSkill>();
        foreach (object json17 in (List<object>) json[nameof (target_deck_awake_skills)])
          playerAwakeSkillList2.Add(json17 == null ? (PlayerAwakeSkill) null : new PlayerAwakeSkill((Dictionary<string, object>) json17));
        this.target_deck_awake_skills = playerAwakeSkillList2.ToArray();
        List<PlayerAwakeSkill> playerAwakeSkillList3 = new List<PlayerAwakeSkill>();
        foreach (object json18 in (List<object>) json[nameof (target_support_awake_skills)])
          playerAwakeSkillList3.Add(json18 == null ? (PlayerAwakeSkill) null : new PlayerAwakeSkill((Dictionary<string, object>) json18));
        this.target_support_awake_skills = playerAwakeSkillList3.ToArray();
        List<PlayerUnit> playerUnitList7 = new List<PlayerUnit>();
        foreach (object json19 in (List<object>) json[nameof (own_over_killers)])
          playerUnitList7.Add(json19 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json19));
        this.own_over_killers = playerUnitList7.ToArray();
        this.stage = json[nameof (stage)] == null ? (GvgStage) null : new GvgStage((Dictionary<string, object>) json[nameof (stage)]);
        this.target_call_skill_values = ((IEnumerable<object>) json[nameof (target_call_skill_values)]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).ToArray<int>();
        List<PlayerUnit> playerUnitList8 = new List<PlayerUnit>();
        foreach (object json20 in (List<object>) json[nameof (target_support_units)])
          playerUnitList8.Add(json20 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json20));
        this.target_support_units = playerUnitList8.ToArray();
        List<GuildBaseBonusEffect> guildBaseBonusEffectList2 = new List<GuildBaseBonusEffect>();
        foreach (object json21 in (List<object>) json[nameof (target_bonus_effects)])
          guildBaseBonusEffectList2.Add(json21 == null ? (GuildBaseBonusEffect) null : new GuildBaseBonusEffect((Dictionary<string, object>) json21));
        this.target_bonus_effects = guildBaseBonusEffectList2.ToArray();
        List<PlayerCharacterIntimate> characterIntimateList2 = new List<PlayerCharacterIntimate>();
        foreach (object json22 in (List<object>) json[nameof (target_character_intimates)])
          characterIntimateList2.Add(json22 == null ? (PlayerCharacterIntimate) null : new PlayerCharacterIntimate((Dictionary<string, object>) json22));
        this.target_character_intimates = characterIntimateList2.ToArray();
        this.target_town_slot = json[nameof (target_town_slot)] == null ? (PlayerGuildTownSlot) null : new PlayerGuildTownSlot((Dictionary<string, object>) json[nameof (target_town_slot)]);
        List<PlayerGearReisouSchema> gearReisouSchemaList4 = new List<PlayerGearReisouSchema>();
        foreach (object json23 in (List<object>) json[nameof (target_support_reisou_gears)])
          gearReisouSchemaList4.Add(json23 == null ? (PlayerGearReisouSchema) null : new PlayerGearReisouSchema((Dictionary<string, object>) json23));
        this.target_support_reisou_gears = gearReisouSchemaList4.ToArray();
        List<PlayerItem> playerItemList4 = new List<PlayerItem>();
        foreach (object json24 in (List<object>) json[nameof (own_deck_gears)])
          playerItemList4.Add(json24 == null ? (PlayerItem) null : new PlayerItem((Dictionary<string, object>) json24));
        this.own_deck_gears = playerItemList4.ToArray();
        List<PlayerAwakeSkill> playerAwakeSkillList4 = new List<PlayerAwakeSkill>();
        foreach (object json25 in (List<object>) json[nameof (own_deck_awake_skills)])
          playerAwakeSkillList4.Add(json25 == null ? (PlayerAwakeSkill) null : new PlayerAwakeSkill((Dictionary<string, object>) json25));
        this.own_deck_awake_skills = playerAwakeSkillList4.ToArray();
      }
    }

    [Serializable]
    public class GvgBattleFinish : KeyCompare
    {
      public int gain_player_experience;
      public PlayerMaterialGear[] player_material_gears;
      public PlayerItem[] player_items;
      public int gain_battle_medal;
      public int _star_status;
      public Player before_player;
      public PlayerUnit[] player_units;
      public bool win;
      public int _battle_status;
      public Player player;
      public int capture_star;
      public int gain_friend_point;
      public PlayerMaterialUnit[] player_material_units;
      public int gvg_max_star_possession;
      public PlayerQuestKey[] player_quest_keys;

      public GvgStarStatus star_status
      {
        get
        {
          if (!Enum.IsDefined(typeof (GvgStarStatus), (object) this._star_status))
            Debug.LogError((object) ("Key not Found: MasterDataTable.GvgStarStatus[" + (object) this._star_status + "]"));
          return (GvgStarStatus) this._star_status;
        }
      }

      public GvgBattleStatus battle_status
      {
        get
        {
          if (!Enum.IsDefined(typeof (GvgBattleStatus), (object) this._battle_status))
            Debug.LogError((object) ("Key not Found: MasterDataTable.GvgBattleStatus[" + (object) this._battle_status + "]"));
          return (GvgBattleStatus) this._battle_status;
        }
      }

      public GvgBattleFinish()
      {
      }

      public GvgBattleFinish(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.gain_player_experience = (int) (long) json[nameof (gain_player_experience)];
        List<PlayerMaterialGear> playerMaterialGearList = new List<PlayerMaterialGear>();
        foreach (object json1 in (List<object>) json[nameof (player_material_gears)])
          playerMaterialGearList.Add(json1 == null ? (PlayerMaterialGear) null : new PlayerMaterialGear((Dictionary<string, object>) json1));
        this.player_material_gears = playerMaterialGearList.ToArray();
        SMManager.UpdateList<PlayerMaterialGear>(this.player_material_gears);
        List<PlayerItem> playerItemList = new List<PlayerItem>();
        foreach (object json2 in (List<object>) json[nameof (player_items)])
          playerItemList.Add(json2 == null ? (PlayerItem) null : new PlayerItem((Dictionary<string, object>) json2));
        this.player_items = playerItemList.ToArray();
        SMManager.UpdateList<PlayerItem>(this.player_items);
        this.gain_battle_medal = (int) (long) json[nameof (gain_battle_medal)];
        this._star_status = (int) (long) json[nameof (star_status)];
        this.before_player = json[nameof (before_player)] == null ? (Player) null : new Player((Dictionary<string, object>) json[nameof (before_player)]);
        List<PlayerUnit> playerUnitList = new List<PlayerUnit>();
        foreach (object json3 in (List<object>) json[nameof (player_units)])
          playerUnitList.Add(json3 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json3));
        this.player_units = playerUnitList.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_units);
        this.win = (bool) json[nameof (win)];
        this._battle_status = (int) (long) json[nameof (battle_status)];
        this.player = json[nameof (player)] == null ? (Player) null : new Player((Dictionary<string, object>) json[nameof (player)]);
        SMManager.Change<Player>(this.player);
        this.capture_star = (int) (long) json[nameof (capture_star)];
        this.gain_friend_point = (int) (long) json[nameof (gain_friend_point)];
        List<PlayerMaterialUnit> playerMaterialUnitList = new List<PlayerMaterialUnit>();
        foreach (object json4 in (List<object>) json[nameof (player_material_units)])
          playerMaterialUnitList.Add(json4 == null ? (PlayerMaterialUnit) null : new PlayerMaterialUnit((Dictionary<string, object>) json4));
        this.player_material_units = playerMaterialUnitList.ToArray();
        SMManager.UpdateList<PlayerMaterialUnit>(this.player_material_units);
        this.gvg_max_star_possession = (int) (long) json[nameof (gvg_max_star_possession)];
        List<PlayerQuestKey> playerQuestKeyList = new List<PlayerQuestKey>();
        foreach (object json5 in (List<object>) json[nameof (player_quest_keys)])
          playerQuestKeyList.Add(json5 == null ? (PlayerQuestKey) null : new PlayerQuestKey((Dictionary<string, object>) json5));
        this.player_quest_keys = playerQuestKeyList.ToArray();
        SMManager.UpdateList<PlayerQuestKey>(this.player_quest_keys);
      }
    }

    [Serializable]
    public class GvgBattleForceClose : KeyCompare
    {
      public GvgBattleForceClose()
      {
      }

      public GvgBattleForceClose(Dictionary<string, object> json) => this._hasKey = false;
    }

    [Serializable]
    public class GvgBattleResume : KeyCompare
    {
      public PlayerUnit[] target_deck_units;
      public PlayerItem[] target_support_gears;
      public PlayerItem[] own_support_gears;
      public PlayerGearReisouSchema[] own_support_reisou_gears;
      public PlayerUnit[] target_over_killers;
      public PlayerGuildFacility[] target_facilities;
      public int[] target_call_skill_same_character_ids;
      public PlayerUnit[] own_deck_units;
      public PlayerUnit[] own_support_over_killers;
      public int target_star;
      public PlayerGearReisouSchema[] target_deck_reisou_gears;
      public PlayerGearReisouSchema[] own_deck_reisou_gears;
      public PlayerUnit[] own_support_units;
      public GuildBaseBonusEffect[] bonus_effects;
      public PlayerUnit[] target_support_over_killers;
      public string battle_uuid;
      public PlayerCharacterIntimate[] own_character_intimates;
      public DateTime battle_start_time;
      public PlayerItem[] target_deck_gears;
      public PlayerAwakeSkill[] own_support_awake_skills;
      public PlayerAwakeSkill[] target_deck_awake_skills;
      public PlayerAwakeSkill[] target_support_awake_skills;
      public PlayerUnit[] own_over_killers;
      public GvgStage stage;
      public int[] target_call_skill_values;
      public PlayerUnit[] target_support_units;
      public GuildBaseBonusEffect[] target_bonus_effects;
      public PlayerCharacterIntimate[] target_character_intimates;
      public PlayerGuildTownSlot target_town_slot;
      public PlayerGearReisouSchema[] target_support_reisou_gears;
      public PlayerItem[] own_deck_gears;
      public PlayerAwakeSkill[] own_deck_awake_skills;

      public GvgBattleResume()
      {
      }

      public GvgBattleResume(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerUnit> playerUnitList1 = new List<PlayerUnit>();
        foreach (object json1 in (List<object>) json[nameof (target_deck_units)])
          playerUnitList1.Add(json1 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json1));
        this.target_deck_units = playerUnitList1.ToArray();
        List<PlayerItem> playerItemList1 = new List<PlayerItem>();
        foreach (object json2 in (List<object>) json[nameof (target_support_gears)])
          playerItemList1.Add(json2 == null ? (PlayerItem) null : new PlayerItem((Dictionary<string, object>) json2));
        this.target_support_gears = playerItemList1.ToArray();
        List<PlayerItem> playerItemList2 = new List<PlayerItem>();
        foreach (object json3 in (List<object>) json[nameof (own_support_gears)])
          playerItemList2.Add(json3 == null ? (PlayerItem) null : new PlayerItem((Dictionary<string, object>) json3));
        this.own_support_gears = playerItemList2.ToArray();
        List<PlayerGearReisouSchema> gearReisouSchemaList1 = new List<PlayerGearReisouSchema>();
        foreach (object json4 in (List<object>) json[nameof (own_support_reisou_gears)])
          gearReisouSchemaList1.Add(json4 == null ? (PlayerGearReisouSchema) null : new PlayerGearReisouSchema((Dictionary<string, object>) json4));
        this.own_support_reisou_gears = gearReisouSchemaList1.ToArray();
        List<PlayerUnit> playerUnitList2 = new List<PlayerUnit>();
        foreach (object json5 in (List<object>) json[nameof (target_over_killers)])
          playerUnitList2.Add(json5 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json5));
        this.target_over_killers = playerUnitList2.ToArray();
        List<PlayerGuildFacility> playerGuildFacilityList = new List<PlayerGuildFacility>();
        foreach (object json6 in (List<object>) json[nameof (target_facilities)])
          playerGuildFacilityList.Add(json6 == null ? (PlayerGuildFacility) null : new PlayerGuildFacility((Dictionary<string, object>) json6));
        this.target_facilities = playerGuildFacilityList.ToArray();
        this.target_call_skill_same_character_ids = ((IEnumerable<object>) json[nameof (target_call_skill_same_character_ids)]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).ToArray<int>();
        List<PlayerUnit> playerUnitList3 = new List<PlayerUnit>();
        foreach (object json7 in (List<object>) json[nameof (own_deck_units)])
          playerUnitList3.Add(json7 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json7));
        this.own_deck_units = playerUnitList3.ToArray();
        List<PlayerUnit> playerUnitList4 = new List<PlayerUnit>();
        foreach (object json8 in (List<object>) json[nameof (own_support_over_killers)])
          playerUnitList4.Add(json8 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json8));
        this.own_support_over_killers = playerUnitList4.ToArray();
        this.target_star = (int) (long) json[nameof (target_star)];
        List<PlayerGearReisouSchema> gearReisouSchemaList2 = new List<PlayerGearReisouSchema>();
        foreach (object json9 in (List<object>) json[nameof (target_deck_reisou_gears)])
          gearReisouSchemaList2.Add(json9 == null ? (PlayerGearReisouSchema) null : new PlayerGearReisouSchema((Dictionary<string, object>) json9));
        this.target_deck_reisou_gears = gearReisouSchemaList2.ToArray();
        List<PlayerGearReisouSchema> gearReisouSchemaList3 = new List<PlayerGearReisouSchema>();
        foreach (object json10 in (List<object>) json[nameof (own_deck_reisou_gears)])
          gearReisouSchemaList3.Add(json10 == null ? (PlayerGearReisouSchema) null : new PlayerGearReisouSchema((Dictionary<string, object>) json10));
        this.own_deck_reisou_gears = gearReisouSchemaList3.ToArray();
        List<PlayerUnit> playerUnitList5 = new List<PlayerUnit>();
        foreach (object json11 in (List<object>) json[nameof (own_support_units)])
          playerUnitList5.Add(json11 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json11));
        this.own_support_units = playerUnitList5.ToArray();
        List<GuildBaseBonusEffect> guildBaseBonusEffectList1 = new List<GuildBaseBonusEffect>();
        foreach (object json12 in (List<object>) json[nameof (bonus_effects)])
          guildBaseBonusEffectList1.Add(json12 == null ? (GuildBaseBonusEffect) null : new GuildBaseBonusEffect((Dictionary<string, object>) json12));
        this.bonus_effects = guildBaseBonusEffectList1.ToArray();
        List<PlayerUnit> playerUnitList6 = new List<PlayerUnit>();
        foreach (object json13 in (List<object>) json[nameof (target_support_over_killers)])
          playerUnitList6.Add(json13 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json13));
        this.target_support_over_killers = playerUnitList6.ToArray();
        this.battle_uuid = (string) json[nameof (battle_uuid)];
        List<PlayerCharacterIntimate> characterIntimateList1 = new List<PlayerCharacterIntimate>();
        foreach (object json14 in (List<object>) json[nameof (own_character_intimates)])
          characterIntimateList1.Add(json14 == null ? (PlayerCharacterIntimate) null : new PlayerCharacterIntimate((Dictionary<string, object>) json14));
        this.own_character_intimates = characterIntimateList1.ToArray();
        this.battle_start_time = DateTime.Parse((string) json[nameof (battle_start_time)]);
        List<PlayerItem> playerItemList3 = new List<PlayerItem>();
        foreach (object json15 in (List<object>) json[nameof (target_deck_gears)])
          playerItemList3.Add(json15 == null ? (PlayerItem) null : new PlayerItem((Dictionary<string, object>) json15));
        this.target_deck_gears = playerItemList3.ToArray();
        List<PlayerAwakeSkill> playerAwakeSkillList1 = new List<PlayerAwakeSkill>();
        foreach (object json16 in (List<object>) json[nameof (own_support_awake_skills)])
          playerAwakeSkillList1.Add(json16 == null ? (PlayerAwakeSkill) null : new PlayerAwakeSkill((Dictionary<string, object>) json16));
        this.own_support_awake_skills = playerAwakeSkillList1.ToArray();
        List<PlayerAwakeSkill> playerAwakeSkillList2 = new List<PlayerAwakeSkill>();
        foreach (object json17 in (List<object>) json[nameof (target_deck_awake_skills)])
          playerAwakeSkillList2.Add(json17 == null ? (PlayerAwakeSkill) null : new PlayerAwakeSkill((Dictionary<string, object>) json17));
        this.target_deck_awake_skills = playerAwakeSkillList2.ToArray();
        List<PlayerAwakeSkill> playerAwakeSkillList3 = new List<PlayerAwakeSkill>();
        foreach (object json18 in (List<object>) json[nameof (target_support_awake_skills)])
          playerAwakeSkillList3.Add(json18 == null ? (PlayerAwakeSkill) null : new PlayerAwakeSkill((Dictionary<string, object>) json18));
        this.target_support_awake_skills = playerAwakeSkillList3.ToArray();
        List<PlayerUnit> playerUnitList7 = new List<PlayerUnit>();
        foreach (object json19 in (List<object>) json[nameof (own_over_killers)])
          playerUnitList7.Add(json19 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json19));
        this.own_over_killers = playerUnitList7.ToArray();
        this.stage = json[nameof (stage)] == null ? (GvgStage) null : new GvgStage((Dictionary<string, object>) json[nameof (stage)]);
        this.target_call_skill_values = ((IEnumerable<object>) json[nameof (target_call_skill_values)]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).ToArray<int>();
        List<PlayerUnit> playerUnitList8 = new List<PlayerUnit>();
        foreach (object json20 in (List<object>) json[nameof (target_support_units)])
          playerUnitList8.Add(json20 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json20));
        this.target_support_units = playerUnitList8.ToArray();
        List<GuildBaseBonusEffect> guildBaseBonusEffectList2 = new List<GuildBaseBonusEffect>();
        foreach (object json21 in (List<object>) json[nameof (target_bonus_effects)])
          guildBaseBonusEffectList2.Add(json21 == null ? (GuildBaseBonusEffect) null : new GuildBaseBonusEffect((Dictionary<string, object>) json21));
        this.target_bonus_effects = guildBaseBonusEffectList2.ToArray();
        List<PlayerCharacterIntimate> characterIntimateList2 = new List<PlayerCharacterIntimate>();
        foreach (object json22 in (List<object>) json[nameof (target_character_intimates)])
          characterIntimateList2.Add(json22 == null ? (PlayerCharacterIntimate) null : new PlayerCharacterIntimate((Dictionary<string, object>) json22));
        this.target_character_intimates = characterIntimateList2.ToArray();
        this.target_town_slot = json[nameof (target_town_slot)] == null ? (PlayerGuildTownSlot) null : new PlayerGuildTownSlot((Dictionary<string, object>) json[nameof (target_town_slot)]);
        List<PlayerGearReisouSchema> gearReisouSchemaList4 = new List<PlayerGearReisouSchema>();
        foreach (object json23 in (List<object>) json[nameof (target_support_reisou_gears)])
          gearReisouSchemaList4.Add(json23 == null ? (PlayerGearReisouSchema) null : new PlayerGearReisouSchema((Dictionary<string, object>) json23));
        this.target_support_reisou_gears = gearReisouSchemaList4.ToArray();
        List<PlayerItem> playerItemList4 = new List<PlayerItem>();
        foreach (object json24 in (List<object>) json[nameof (own_deck_gears)])
          playerItemList4.Add(json24 == null ? (PlayerItem) null : new PlayerItem((Dictionary<string, object>) json24));
        this.own_deck_gears = playerItemList4.ToArray();
        List<PlayerAwakeSkill> playerAwakeSkillList4 = new List<PlayerAwakeSkill>();
        foreach (object json25 in (List<object>) json[nameof (own_deck_awake_skills)])
          playerAwakeSkillList4.Add(json25 == null ? (PlayerAwakeSkill) null : new PlayerAwakeSkill((Dictionary<string, object>) json25));
        this.own_deck_awake_skills = playerAwakeSkillList4.ToArray();
      }
    }

    [Serializable]
    public class GvgBattleStart : KeyCompare
    {
      public PlayerUnit[] target_deck_units;
      public PlayerItem[] target_support_gears;
      public PlayerItem[] own_support_gears;
      public PlayerGearReisouSchema[] own_support_reisou_gears;
      public PlayerUnit[] target_over_killers;
      public PlayerGuildFacility[] target_facilities;
      public int[] target_call_skill_same_character_ids;
      public PlayerUnit[] own_deck_units;
      public PlayerUnit[] own_support_over_killers;
      public int target_star;
      public PlayerGearReisouSchema[] target_deck_reisou_gears;
      public PlayerGearReisouSchema[] own_deck_reisou_gears;
      public PlayerUnit[] own_support_units;
      public GuildBaseBonusEffect[] bonus_effects;
      public PlayerUnit[] target_support_over_killers;
      public string battle_uuid;
      public PlayerCharacterIntimate[] own_character_intimates;
      public DateTime battle_start_time;
      public PlayerItem[] target_deck_gears;
      public PlayerAwakeSkill[] own_support_awake_skills;
      public PlayerAwakeSkill[] target_deck_awake_skills;
      public PlayerAwakeSkill[] target_support_awake_skills;
      public PlayerUnit[] own_over_killers;
      public GvgStage stage;
      public int[] target_call_skill_values;
      public PlayerUnit[] target_support_units;
      public GuildBaseBonusEffect[] target_bonus_effects;
      public PlayerCharacterIntimate[] target_character_intimates;
      public PlayerGuildTownSlot target_town_slot;
      public PlayerGearReisouSchema[] target_support_reisou_gears;
      public PlayerItem[] own_deck_gears;
      public PlayerAwakeSkill[] own_deck_awake_skills;

      public GvgBattleStart()
      {
      }

      public GvgBattleStart(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerUnit> playerUnitList1 = new List<PlayerUnit>();
        foreach (object json1 in (List<object>) json[nameof (target_deck_units)])
          playerUnitList1.Add(json1 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json1));
        this.target_deck_units = playerUnitList1.ToArray();
        List<PlayerItem> playerItemList1 = new List<PlayerItem>();
        foreach (object json2 in (List<object>) json[nameof (target_support_gears)])
          playerItemList1.Add(json2 == null ? (PlayerItem) null : new PlayerItem((Dictionary<string, object>) json2));
        this.target_support_gears = playerItemList1.ToArray();
        List<PlayerItem> playerItemList2 = new List<PlayerItem>();
        foreach (object json3 in (List<object>) json[nameof (own_support_gears)])
          playerItemList2.Add(json3 == null ? (PlayerItem) null : new PlayerItem((Dictionary<string, object>) json3));
        this.own_support_gears = playerItemList2.ToArray();
        List<PlayerGearReisouSchema> gearReisouSchemaList1 = new List<PlayerGearReisouSchema>();
        foreach (object json4 in (List<object>) json[nameof (own_support_reisou_gears)])
          gearReisouSchemaList1.Add(json4 == null ? (PlayerGearReisouSchema) null : new PlayerGearReisouSchema((Dictionary<string, object>) json4));
        this.own_support_reisou_gears = gearReisouSchemaList1.ToArray();
        List<PlayerUnit> playerUnitList2 = new List<PlayerUnit>();
        foreach (object json5 in (List<object>) json[nameof (target_over_killers)])
          playerUnitList2.Add(json5 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json5));
        this.target_over_killers = playerUnitList2.ToArray();
        List<PlayerGuildFacility> playerGuildFacilityList = new List<PlayerGuildFacility>();
        foreach (object json6 in (List<object>) json[nameof (target_facilities)])
          playerGuildFacilityList.Add(json6 == null ? (PlayerGuildFacility) null : new PlayerGuildFacility((Dictionary<string, object>) json6));
        this.target_facilities = playerGuildFacilityList.ToArray();
        this.target_call_skill_same_character_ids = ((IEnumerable<object>) json[nameof (target_call_skill_same_character_ids)]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).ToArray<int>();
        List<PlayerUnit> playerUnitList3 = new List<PlayerUnit>();
        foreach (object json7 in (List<object>) json[nameof (own_deck_units)])
          playerUnitList3.Add(json7 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json7));
        this.own_deck_units = playerUnitList3.ToArray();
        List<PlayerUnit> playerUnitList4 = new List<PlayerUnit>();
        foreach (object json8 in (List<object>) json[nameof (own_support_over_killers)])
          playerUnitList4.Add(json8 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json8));
        this.own_support_over_killers = playerUnitList4.ToArray();
        this.target_star = (int) (long) json[nameof (target_star)];
        List<PlayerGearReisouSchema> gearReisouSchemaList2 = new List<PlayerGearReisouSchema>();
        foreach (object json9 in (List<object>) json[nameof (target_deck_reisou_gears)])
          gearReisouSchemaList2.Add(json9 == null ? (PlayerGearReisouSchema) null : new PlayerGearReisouSchema((Dictionary<string, object>) json9));
        this.target_deck_reisou_gears = gearReisouSchemaList2.ToArray();
        List<PlayerGearReisouSchema> gearReisouSchemaList3 = new List<PlayerGearReisouSchema>();
        foreach (object json10 in (List<object>) json[nameof (own_deck_reisou_gears)])
          gearReisouSchemaList3.Add(json10 == null ? (PlayerGearReisouSchema) null : new PlayerGearReisouSchema((Dictionary<string, object>) json10));
        this.own_deck_reisou_gears = gearReisouSchemaList3.ToArray();
        List<PlayerUnit> playerUnitList5 = new List<PlayerUnit>();
        foreach (object json11 in (List<object>) json[nameof (own_support_units)])
          playerUnitList5.Add(json11 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json11));
        this.own_support_units = playerUnitList5.ToArray();
        List<GuildBaseBonusEffect> guildBaseBonusEffectList1 = new List<GuildBaseBonusEffect>();
        foreach (object json12 in (List<object>) json[nameof (bonus_effects)])
          guildBaseBonusEffectList1.Add(json12 == null ? (GuildBaseBonusEffect) null : new GuildBaseBonusEffect((Dictionary<string, object>) json12));
        this.bonus_effects = guildBaseBonusEffectList1.ToArray();
        List<PlayerUnit> playerUnitList6 = new List<PlayerUnit>();
        foreach (object json13 in (List<object>) json[nameof (target_support_over_killers)])
          playerUnitList6.Add(json13 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json13));
        this.target_support_over_killers = playerUnitList6.ToArray();
        this.battle_uuid = (string) json[nameof (battle_uuid)];
        List<PlayerCharacterIntimate> characterIntimateList1 = new List<PlayerCharacterIntimate>();
        foreach (object json14 in (List<object>) json[nameof (own_character_intimates)])
          characterIntimateList1.Add(json14 == null ? (PlayerCharacterIntimate) null : new PlayerCharacterIntimate((Dictionary<string, object>) json14));
        this.own_character_intimates = characterIntimateList1.ToArray();
        this.battle_start_time = DateTime.Parse((string) json[nameof (battle_start_time)]);
        List<PlayerItem> playerItemList3 = new List<PlayerItem>();
        foreach (object json15 in (List<object>) json[nameof (target_deck_gears)])
          playerItemList3.Add(json15 == null ? (PlayerItem) null : new PlayerItem((Dictionary<string, object>) json15));
        this.target_deck_gears = playerItemList3.ToArray();
        List<PlayerAwakeSkill> playerAwakeSkillList1 = new List<PlayerAwakeSkill>();
        foreach (object json16 in (List<object>) json[nameof (own_support_awake_skills)])
          playerAwakeSkillList1.Add(json16 == null ? (PlayerAwakeSkill) null : new PlayerAwakeSkill((Dictionary<string, object>) json16));
        this.own_support_awake_skills = playerAwakeSkillList1.ToArray();
        List<PlayerAwakeSkill> playerAwakeSkillList2 = new List<PlayerAwakeSkill>();
        foreach (object json17 in (List<object>) json[nameof (target_deck_awake_skills)])
          playerAwakeSkillList2.Add(json17 == null ? (PlayerAwakeSkill) null : new PlayerAwakeSkill((Dictionary<string, object>) json17));
        this.target_deck_awake_skills = playerAwakeSkillList2.ToArray();
        List<PlayerAwakeSkill> playerAwakeSkillList3 = new List<PlayerAwakeSkill>();
        foreach (object json18 in (List<object>) json[nameof (target_support_awake_skills)])
          playerAwakeSkillList3.Add(json18 == null ? (PlayerAwakeSkill) null : new PlayerAwakeSkill((Dictionary<string, object>) json18));
        this.target_support_awake_skills = playerAwakeSkillList3.ToArray();
        List<PlayerUnit> playerUnitList7 = new List<PlayerUnit>();
        foreach (object json19 in (List<object>) json[nameof (own_over_killers)])
          playerUnitList7.Add(json19 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json19));
        this.own_over_killers = playerUnitList7.ToArray();
        this.stage = json[nameof (stage)] == null ? (GvgStage) null : new GvgStage((Dictionary<string, object>) json[nameof (stage)]);
        this.target_call_skill_values = ((IEnumerable<object>) json[nameof (target_call_skill_values)]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).ToArray<int>();
        List<PlayerUnit> playerUnitList8 = new List<PlayerUnit>();
        foreach (object json20 in (List<object>) json[nameof (target_support_units)])
          playerUnitList8.Add(json20 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json20));
        this.target_support_units = playerUnitList8.ToArray();
        List<GuildBaseBonusEffect> guildBaseBonusEffectList2 = new List<GuildBaseBonusEffect>();
        foreach (object json21 in (List<object>) json[nameof (target_bonus_effects)])
          guildBaseBonusEffectList2.Add(json21 == null ? (GuildBaseBonusEffect) null : new GuildBaseBonusEffect((Dictionary<string, object>) json21));
        this.target_bonus_effects = guildBaseBonusEffectList2.ToArray();
        List<PlayerCharacterIntimate> characterIntimateList2 = new List<PlayerCharacterIntimate>();
        foreach (object json22 in (List<object>) json[nameof (target_character_intimates)])
          characterIntimateList2.Add(json22 == null ? (PlayerCharacterIntimate) null : new PlayerCharacterIntimate((Dictionary<string, object>) json22));
        this.target_character_intimates = characterIntimateList2.ToArray();
        this.target_town_slot = json[nameof (target_town_slot)] == null ? (PlayerGuildTownSlot) null : new PlayerGuildTownSlot((Dictionary<string, object>) json[nameof (target_town_slot)]);
        List<PlayerGearReisouSchema> gearReisouSchemaList4 = new List<PlayerGearReisouSchema>();
        foreach (object json23 in (List<object>) json[nameof (target_support_reisou_gears)])
          gearReisouSchemaList4.Add(json23 == null ? (PlayerGearReisouSchema) null : new PlayerGearReisouSchema((Dictionary<string, object>) json23));
        this.target_support_reisou_gears = gearReisouSchemaList4.ToArray();
        List<PlayerItem> playerItemList4 = new List<PlayerItem>();
        foreach (object json24 in (List<object>) json[nameof (own_deck_gears)])
          playerItemList4.Add(json24 == null ? (PlayerItem) null : new PlayerItem((Dictionary<string, object>) json24));
        this.own_deck_gears = playerItemList4.ToArray();
        List<PlayerAwakeSkill> playerAwakeSkillList4 = new List<PlayerAwakeSkill>();
        foreach (object json25 in (List<object>) json[nameof (own_deck_awake_skills)])
          playerAwakeSkillList4.Add(json25 == null ? (PlayerAwakeSkill) null : new PlayerAwakeSkill((Dictionary<string, object>) json25));
        this.own_deck_awake_skills = playerAwakeSkillList4.ToArray();
      }
    }

    [Serializable]
    public class GvgDeckAttackEdit : KeyCompare
    {
      public GvgDeck deck;

      public GvgDeckAttackEdit()
      {
      }

      public GvgDeckAttackEdit(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.deck = json[nameof (deck)] == null ? (GvgDeck) null : new GvgDeck((Dictionary<string, object>) json[nameof (deck)]);
      }
    }

    [Serializable]
    public class GvgDeckAttackShow : KeyCompare
    {
      public GvgDeck deck;

      public GvgDeckAttackShow()
      {
      }

      public GvgDeckAttackShow(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.deck = json[nameof (deck)] == null ? (GvgDeck) null : new GvgDeck((Dictionary<string, object>) json[nameof (deck)]);
      }
    }

    [Serializable]
    public class GvgDeckDefenseEdit : KeyCompare
    {
      public GvgDeck deck;

      public GvgDeckDefenseEdit()
      {
      }

      public GvgDeckDefenseEdit(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.deck = json[nameof (deck)] == null ? (GvgDeck) null : new GvgDeck((Dictionary<string, object>) json[nameof (deck)]);
      }
    }

    [Serializable]
    public class GvgDeckDefenseReinforcement : KeyCompare
    {
      public GvgReinforcement reinforcement;

      public GvgDeckDefenseReinforcement()
      {
      }

      public GvgDeckDefenseReinforcement(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reinforcement = json[nameof (reinforcement)] == null ? (GvgReinforcement) null : new GvgReinforcement((Dictionary<string, object>) json[nameof (reinforcement)]);
      }
    }

    [Serializable]
    public class GvgDeckDefenseRemoveReinforcement : KeyCompare
    {
      public GvgReinforcement reinforcement;

      public GvgDeckDefenseRemoveReinforcement()
      {
      }

      public GvgDeckDefenseRemoveReinforcement(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reinforcement = json[nameof (reinforcement)] == null ? (GvgReinforcement) null : new GvgReinforcement((Dictionary<string, object>) json[nameof (reinforcement)]);
      }
    }

    [Serializable]
    public class GvgDeckDefenseShow : KeyCompare
    {
      public GvgReinforcement reinforcement;
      public GvgDeck deck;

      public GvgDeckDefenseShow()
      {
      }

      public GvgDeckDefenseShow(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reinforcement = json[nameof (reinforcement)] == null ? (GvgReinforcement) null : new GvgReinforcement((Dictionary<string, object>) json[nameof (reinforcement)]);
        this.deck = json[nameof (deck)] == null ? (GvgDeck) null : new GvgDeck((Dictionary<string, object>) json[nameof (deck)]);
      }
    }

    [Serializable]
    public class GvgDeckReinforcementCandidates : KeyCompare
    {
      public GvgCandidate[] candidates;

      public GvgDeckReinforcementCandidates()
      {
      }

      public GvgDeckReinforcementCandidates(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<GvgCandidate> gvgCandidateList = new List<GvgCandidate>();
        foreach (object json1 in (List<object>) json[nameof (candidates)])
          gvgCandidateList.Add(json1 == null ? (GvgCandidate) null : new GvgCandidate((Dictionary<string, object>) json1));
        this.candidates = gvgCandidateList.ToArray();
      }
    }

    [Serializable]
    public class GvgDeckReinforcementStatus : KeyCompare
    {
      public GvgReinforcement reinforcement;

      public GvgDeckReinforcementStatus()
      {
      }

      public GvgDeckReinforcementStatus(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reinforcement = json[nameof (reinforcement)] == null ? (GvgReinforcement) null : new GvgReinforcement((Dictionary<string, object>) json[nameof (reinforcement)]);
      }
    }

    [Serializable]
    public class GvgDefenseMember : KeyCompare
    {
      public PlayerAffiliation player_affiliation;

      public GvgDefenseMember()
      {
      }

      public GvgDefenseMember(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.player_affiliation = json[nameof (player_affiliation)] == null ? (PlayerAffiliation) null : new PlayerAffiliation((Dictionary<string, object>) json[nameof (player_affiliation)]);
        SMManager.Change<PlayerAffiliation>(this.player_affiliation);
      }
    }

    [Serializable]
    public class GvgHistoryHistoryGet : KeyCompare
    {
      public GvgHistory[] gvg_histories;

      public GvgHistoryHistoryGet()
      {
      }

      public GvgHistoryHistoryGet(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<GvgHistory> gvgHistoryList = new List<GvgHistory>();
        foreach (object json1 in (List<object>) json[nameof (gvg_histories)])
          gvgHistoryList.Add(json1 == null ? (GvgHistory) null : new GvgHistory((Dictionary<string, object>) json1));
        this.gvg_histories = gvgHistoryList.ToArray();
        SMManager.UpdateList<GvgHistory>(this.gvg_histories);
      }
    }

    [Serializable]
    public class GvgMatchingCancel : KeyCompare
    {
      public PlayerAffiliation player_affiliation;

      public GvgMatchingCancel()
      {
      }

      public GvgMatchingCancel(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.player_affiliation = json[nameof (player_affiliation)] == null ? (PlayerAffiliation) null : new PlayerAffiliation((Dictionary<string, object>) json[nameof (player_affiliation)]);
        SMManager.Change<PlayerAffiliation>(this.player_affiliation);
      }
    }

    [Serializable]
    public class GvgMatchingEntry : KeyCompare
    {
      public PlayerAffiliation player_affiliation;

      public GvgMatchingEntry()
      {
      }

      public GvgMatchingEntry(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.player_affiliation = json[nameof (player_affiliation)] == null ? (PlayerAffiliation) null : new PlayerAffiliation((Dictionary<string, object>) json[nameof (player_affiliation)]);
        SMManager.Change<PlayerAffiliation>(this.player_affiliation);
      }
    }

    [Serializable]
    public class GvgResult : KeyCompare
    {
      public int before_experience;
      public GvgGuildRewardMaster[] guild_rewards;
      public GvgBattleScore score;
      public GvgWholeRewardMaster[] whole_rewards;
      public int before_experience_next;
      public int before_level;
      public PlayerPresent[] player_presents;
      public GuildDirectory opponent;

      public GvgResult()
      {
      }

      public GvgResult(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.before_experience = (int) (long) json[nameof (before_experience)];
        List<GvgGuildRewardMaster> guildRewardMasterList = new List<GvgGuildRewardMaster>();
        foreach (object json1 in (List<object>) json[nameof (guild_rewards)])
          guildRewardMasterList.Add(json1 == null ? (GvgGuildRewardMaster) null : new GvgGuildRewardMaster((Dictionary<string, object>) json1));
        this.guild_rewards = guildRewardMasterList.ToArray();
        this.score = json[nameof (score)] == null ? (GvgBattleScore) null : new GvgBattleScore((Dictionary<string, object>) json[nameof (score)]);
        List<GvgWholeRewardMaster> wholeRewardMasterList = new List<GvgWholeRewardMaster>();
        foreach (object json2 in (List<object>) json[nameof (whole_rewards)])
          wholeRewardMasterList.Add(json2 == null ? (GvgWholeRewardMaster) null : new GvgWholeRewardMaster((Dictionary<string, object>) json2));
        this.whole_rewards = wholeRewardMasterList.ToArray();
        this.before_experience_next = (int) (long) json[nameof (before_experience_next)];
        this.before_level = (int) (long) json[nameof (before_level)];
        List<PlayerPresent> playerPresentList = new List<PlayerPresent>();
        foreach (object json3 in (List<object>) json[nameof (player_presents)])
          playerPresentList.Add(json3 == null ? (PlayerPresent) null : new PlayerPresent((Dictionary<string, object>) json3));
        this.player_presents = playerPresentList.ToArray();
        SMManager.UpdateList<PlayerPresent>(this.player_presents);
        this.opponent = json[nameof (opponent)] == null ? (GuildDirectory) null : new GuildDirectory((Dictionary<string, object>) json[nameof (opponent)]);
        if (!json.ContainsKey("player_presents:delete"))
          return;
        SMManager.DeleteList<PlayerPresent>(((IEnumerable<object>) json["player_presents:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class HomeExchangeSubCoin : KeyCompare
    {
      public int before_coin;
      public Player player;
      public PlayerCommonTicket[] player_common_tickets;
      public WebAPI.Response.HomeExchangeSubCoinExchange_player_common_tickets[] exchange_player_common_tickets;

      public HomeExchangeSubCoin()
      {
      }

      public HomeExchangeSubCoin(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.before_coin = (int) (long) json[nameof (before_coin)];
        this.player = json[nameof (player)] == null ? (Player) null : new Player((Dictionary<string, object>) json[nameof (player)]);
        SMManager.Change<Player>(this.player);
        List<PlayerCommonTicket> playerCommonTicketList = new List<PlayerCommonTicket>();
        foreach (object json1 in (List<object>) json[nameof (player_common_tickets)])
          playerCommonTicketList.Add(json1 == null ? (PlayerCommonTicket) null : new PlayerCommonTicket((Dictionary<string, object>) json1));
        this.player_common_tickets = playerCommonTicketList.ToArray();
        SMManager.UpdateList<PlayerCommonTicket>(this.player_common_tickets);
        List<WebAPI.Response.HomeExchangeSubCoinExchange_player_common_tickets> playerCommonTicketsList = new List<WebAPI.Response.HomeExchangeSubCoinExchange_player_common_tickets>();
        foreach (object json2 in (List<object>) json[nameof (exchange_player_common_tickets)])
          playerCommonTicketsList.Add(json2 == null ? (WebAPI.Response.HomeExchangeSubCoinExchange_player_common_tickets) null : new WebAPI.Response.HomeExchangeSubCoinExchange_player_common_tickets((Dictionary<string, object>) json2));
        this.exchange_player_common_tickets = playerCommonTicketsList.ToArray();
        if (!json.ContainsKey("player_common_tickets:delete"))
          return;
        SMManager.DeleteList<PlayerCommonTicket>(((IEnumerable<object>) json["player_common_tickets:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class HomeExchangeSubCoinExchange_player_common_tickets : KeyCompare
    {
      public int gain_coin;
      public int ticket_quantity;
      public int ticket_id;

      public HomeExchangeSubCoinExchange_player_common_tickets()
      {
      }

      public HomeExchangeSubCoinExchange_player_common_tickets(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.gain_coin = (int) (long) json[nameof (gain_coin)];
        this.ticket_quantity = (int) (long) json[nameof (ticket_quantity)];
        this.ticket_id = (int) (long) json[nameof (ticket_id)];
      }
    }

    [Serializable]
    public class HomeNow : KeyCompare
    {
      public DateTime now;

      public HomeNow()
      {
      }

      public HomeNow(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.now = DateTime.Parse((string) json[nameof (now)]);
      }
    }

    [Serializable]
    public class HomeStartUp : KeyCompare, WebAPI.Response.HomeStartUpIndexer
    {
      public int[] active_boost_period_id_list;
      public OfficialInformationArticle[] articles;
      public DateTime? battle_medal_shop_latest_start_time;
      public int[] boost_type_id_list;
      public bool can_roulette;
      public int challenge_point;
      public CoinBonus[] coin_bonuses;
      public int[] corps_period_ids;
      public int[] corps_player_unit_ids;
      public Period[] event_info;
      public UnitBonus[] event_unit_bonuses;
      public ExploreProgress explore_progress;
      public DateTime? gacha_latest_start_time;
      public SM.GuildSignal guild_signal;
      public bool has_buyable_newbie_packs;
      public bool has_exchangeable_subcoin;
      public bool has_fillable_loginbonus;
      public bool has_near_dead_subcoin;
      public bool has_receivable_paymentbonus;
      public bool has_receivable_rewards;
      public HotDealInfo[] hotdeal_info;
      public bool is_active_paymentbonus;
      public bool is_open_colosseum_campaign;
      public bool is_open_pvp_campaign;
      public bool is_open_roulette;
      public DateTime last_signed_in_at;
      public LimitShopInfo[] limit_shop_infos;
      public DateTime? medal_shop_latest_start_time;
      public DateTime? money_shop_latest_start_time;
      public OfficialInformationPopup officialinfo_popup;
      public Player player;
      public LevelRewardSchemaMixin[] player_achieve_level_rewards;
      public PlayerCharacterIntimate[] player_character_intimates;
      public PlayerItem[] player_items;
      public PlayerLoginBonus[] player_loginbonuses;
      public PlayerMythologyGearStatus[] player_mythology_gear_statuses;
      public PlayerPresent[] player_presents;
      public PlayerQuestKey[] player_quest_keys;
      public PlayerUnit[] player_units;
      public QuestScoreBonusTimetable[] questscore_bonus_timetable;
      public DateTime? raid_medal_shop_latest_start_time;
      public int received_friend_request_count;
      public DateTime? slot_latest_start_time;
      public int[] story_playback_event_ids;
      public DateTime? subcoin_shop_latest_start_time;
      public bool unread_talk_messages;

      public HomeStartUp()
      {
      }

      public HomeStartUp(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.active_boost_period_id_list = ((IEnumerable<object>) json[nameof (active_boost_period_id_list)]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).ToArray<int>();
        List<OfficialInformationArticle> informationArticleList = new List<OfficialInformationArticle>();
        foreach (object json1 in (List<object>) json[nameof (articles)])
          informationArticleList.Add(json1 == null ? (OfficialInformationArticle) null : new OfficialInformationArticle((Dictionary<string, object>) json1));
        this.articles = informationArticleList.ToArray();
        SMManager.UpdateList<OfficialInformationArticle>(this.articles);
        this.battle_medal_shop_latest_start_time = json[nameof (battle_medal_shop_latest_start_time)] == null ? new DateTime?() : new DateTime?(DateTime.Parse((string) json[nameof (battle_medal_shop_latest_start_time)]));
        this.boost_type_id_list = ((IEnumerable<object>) json[nameof (boost_type_id_list)]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).ToArray<int>();
        this.can_roulette = (bool) json[nameof (can_roulette)];
        this.challenge_point = (int) (long) json[nameof (challenge_point)];
        List<CoinBonus> coinBonusList = new List<CoinBonus>();
        foreach (object json2 in (List<object>) json[nameof (coin_bonuses)])
          coinBonusList.Add(json2 == null ? (CoinBonus) null : new CoinBonus((Dictionary<string, object>) json2));
        this.coin_bonuses = coinBonusList.ToArray();
        SMManager.UpdateList<CoinBonus>(this.coin_bonuses);
        this.corps_period_ids = ((IEnumerable<object>) json[nameof (corps_period_ids)]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).ToArray<int>();
        this.corps_player_unit_ids = ((IEnumerable<object>) json[nameof (corps_player_unit_ids)]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).ToArray<int>();
        List<Period> periodList = new List<Period>();
        foreach (object json3 in (List<object>) json[nameof (event_info)])
          periodList.Add(json3 == null ? (Period) null : new Period((Dictionary<string, object>) json3));
        this.event_info = periodList.ToArray();
        SMManager.UpdateList<Period>(this.event_info);
        List<UnitBonus> unitBonusList = new List<UnitBonus>();
        foreach (object json4 in (List<object>) json[nameof (event_unit_bonuses)])
          unitBonusList.Add(json4 == null ? (UnitBonus) null : new UnitBonus((Dictionary<string, object>) json4));
        this.event_unit_bonuses = unitBonusList.ToArray();
        SMManager.UpdateList<UnitBonus>(this.event_unit_bonuses);
        this.explore_progress = json[nameof (explore_progress)] == null ? (ExploreProgress) null : new ExploreProgress((Dictionary<string, object>) json[nameof (explore_progress)]);
        SMManager.Change<ExploreProgress>(this.explore_progress);
        this.gacha_latest_start_time = json[nameof (gacha_latest_start_time)] == null ? new DateTime?() : new DateTime?(DateTime.Parse((string) json[nameof (gacha_latest_start_time)]));
        this.guild_signal = json[nameof (guild_signal)] == null ? (SM.GuildSignal) null : new SM.GuildSignal((Dictionary<string, object>) json[nameof (guild_signal)]);
        SMManager.Change<SM.GuildSignal>(this.guild_signal);
        this.has_buyable_newbie_packs = (bool) json[nameof (has_buyable_newbie_packs)];
        this.has_exchangeable_subcoin = (bool) json[nameof (has_exchangeable_subcoin)];
        this.has_fillable_loginbonus = (bool) json[nameof (has_fillable_loginbonus)];
        this.has_near_dead_subcoin = (bool) json[nameof (has_near_dead_subcoin)];
        this.has_receivable_paymentbonus = (bool) json[nameof (has_receivable_paymentbonus)];
        this.has_receivable_rewards = (bool) json[nameof (has_receivable_rewards)];
        List<HotDealInfo> hotDealInfoList = new List<HotDealInfo>();
        foreach (object json5 in (List<object>) json[nameof (hotdeal_info)])
          hotDealInfoList.Add(json5 == null ? (HotDealInfo) null : new HotDealInfo((Dictionary<string, object>) json5));
        this.hotdeal_info = hotDealInfoList.ToArray();
        this.is_active_paymentbonus = (bool) json[nameof (is_active_paymentbonus)];
        this.is_open_colosseum_campaign = (bool) json[nameof (is_open_colosseum_campaign)];
        this.is_open_pvp_campaign = (bool) json[nameof (is_open_pvp_campaign)];
        this.is_open_roulette = (bool) json[nameof (is_open_roulette)];
        this.last_signed_in_at = DateTime.Parse((string) json[nameof (last_signed_in_at)]);
        List<LimitShopInfo> limitShopInfoList = new List<LimitShopInfo>();
        foreach (object json6 in (List<object>) json[nameof (limit_shop_infos)])
          limitShopInfoList.Add(json6 == null ? (LimitShopInfo) null : new LimitShopInfo((Dictionary<string, object>) json6));
        this.limit_shop_infos = limitShopInfoList.ToArray();
        this.medal_shop_latest_start_time = json[nameof (medal_shop_latest_start_time)] == null ? new DateTime?() : new DateTime?(DateTime.Parse((string) json[nameof (medal_shop_latest_start_time)]));
        this.money_shop_latest_start_time = json[nameof (money_shop_latest_start_time)] == null ? new DateTime?() : new DateTime?(DateTime.Parse((string) json[nameof (money_shop_latest_start_time)]));
        this.officialinfo_popup = json[nameof (officialinfo_popup)] == null ? (OfficialInformationPopup) null : new OfficialInformationPopup((Dictionary<string, object>) json[nameof (officialinfo_popup)]);
        this.player = json[nameof (player)] == null ? (Player) null : new Player((Dictionary<string, object>) json[nameof (player)]);
        SMManager.Change<Player>(this.player);
        List<LevelRewardSchemaMixin> rewardSchemaMixinList = new List<LevelRewardSchemaMixin>();
        foreach (object json7 in (List<object>) json[nameof (player_achieve_level_rewards)])
          rewardSchemaMixinList.Add(json7 == null ? (LevelRewardSchemaMixin) null : new LevelRewardSchemaMixin((Dictionary<string, object>) json7));
        this.player_achieve_level_rewards = rewardSchemaMixinList.ToArray();
        List<PlayerCharacterIntimate> characterIntimateList = new List<PlayerCharacterIntimate>();
        foreach (object json8 in (List<object>) json[nameof (player_character_intimates)])
          characterIntimateList.Add(json8 == null ? (PlayerCharacterIntimate) null : new PlayerCharacterIntimate((Dictionary<string, object>) json8));
        this.player_character_intimates = characterIntimateList.ToArray();
        SMManager.UpdateList<PlayerCharacterIntimate>(this.player_character_intimates);
        List<PlayerItem> playerItemList = new List<PlayerItem>();
        foreach (object json9 in (List<object>) json[nameof (player_items)])
          playerItemList.Add(json9 == null ? (PlayerItem) null : new PlayerItem((Dictionary<string, object>) json9));
        this.player_items = playerItemList.ToArray();
        SMManager.UpdateList<PlayerItem>(this.player_items);
        List<PlayerLoginBonus> playerLoginBonusList = new List<PlayerLoginBonus>();
        foreach (object json10 in (List<object>) json[nameof (player_loginbonuses)])
          playerLoginBonusList.Add(json10 == null ? (PlayerLoginBonus) null : new PlayerLoginBonus((Dictionary<string, object>) json10));
        this.player_loginbonuses = playerLoginBonusList.ToArray();
        List<PlayerMythologyGearStatus> mythologyGearStatusList = new List<PlayerMythologyGearStatus>();
        foreach (object json11 in (List<object>) json[nameof (player_mythology_gear_statuses)])
          mythologyGearStatusList.Add(json11 == null ? (PlayerMythologyGearStatus) null : new PlayerMythologyGearStatus((Dictionary<string, object>) json11));
        this.player_mythology_gear_statuses = mythologyGearStatusList.ToArray();
        SMManager.UpdateList<PlayerMythologyGearStatus>(this.player_mythology_gear_statuses);
        List<PlayerPresent> playerPresentList = new List<PlayerPresent>();
        foreach (object json12 in (List<object>) json[nameof (player_presents)])
          playerPresentList.Add(json12 == null ? (PlayerPresent) null : new PlayerPresent((Dictionary<string, object>) json12));
        this.player_presents = playerPresentList.ToArray();
        SMManager.UpdateList<PlayerPresent>(this.player_presents);
        List<PlayerQuestKey> playerQuestKeyList = new List<PlayerQuestKey>();
        foreach (object json13 in (List<object>) json[nameof (player_quest_keys)])
          playerQuestKeyList.Add(json13 == null ? (PlayerQuestKey) null : new PlayerQuestKey((Dictionary<string, object>) json13));
        this.player_quest_keys = playerQuestKeyList.ToArray();
        SMManager.UpdateList<PlayerQuestKey>(this.player_quest_keys);
        List<PlayerUnit> playerUnitList = new List<PlayerUnit>();
        foreach (object json14 in (List<object>) json[nameof (player_units)])
          playerUnitList.Add(json14 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json14));
        this.player_units = playerUnitList.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_units);
        List<QuestScoreBonusTimetable> scoreBonusTimetableList = new List<QuestScoreBonusTimetable>();
        foreach (object json15 in (List<object>) json[nameof (questscore_bonus_timetable)])
          scoreBonusTimetableList.Add(json15 == null ? (QuestScoreBonusTimetable) null : new QuestScoreBonusTimetable((Dictionary<string, object>) json15));
        this.questscore_bonus_timetable = scoreBonusTimetableList.ToArray();
        SMManager.UpdateList<QuestScoreBonusTimetable>(this.questscore_bonus_timetable);
        this.raid_medal_shop_latest_start_time = json[nameof (raid_medal_shop_latest_start_time)] == null ? new DateTime?() : new DateTime?(DateTime.Parse((string) json[nameof (raid_medal_shop_latest_start_time)]));
        this.received_friend_request_count = (int) (long) json[nameof (received_friend_request_count)];
        this.slot_latest_start_time = json[nameof (slot_latest_start_time)] == null ? new DateTime?() : new DateTime?(DateTime.Parse((string) json[nameof (slot_latest_start_time)]));
        this.story_playback_event_ids = ((IEnumerable<object>) json[nameof (story_playback_event_ids)]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).ToArray<int>();
        this.subcoin_shop_latest_start_time = json[nameof (subcoin_shop_latest_start_time)] == null ? new DateTime?() : new DateTime?(DateTime.Parse((string) json[nameof (subcoin_shop_latest_start_time)]));
        this.unread_talk_messages = (bool) json[nameof (unread_talk_messages)];
        if (!json.ContainsKey("player_presents:delete"))
          return;
        SMManager.DeleteList<PlayerPresent>(((IEnumerable<object>) json["player_presents:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }

      public object this[string fieldName]
      {
        get => typeof (WebAPI.Response.HomeStartUp).GetField(fieldName).GetValue((object) this);
      }
    }

    [Serializable]
    public class HomeStartUp2 : KeyCompare
    {
      public int[] active_boost_period_id_list;
      public OfficialInformationArticle[] articles;
      public PlayerAwakeStatePlayerUnitIds awake_state_player_unit_ids;
      public DateTime? battle_medal_shop_latest_start_time;
      public int[] boost_type_id_list;
      public bool can_roulette;
      public int challenge_point;
      public CoinBonus[] coin_bonuses;
      public int[] corps_period_ids;
      public int[] corps_player_unit_ids;
      public Period[] event_info;
      public UnitBonus[] event_unit_bonuses;
      public ExploreDeck[] explore_decks;
      public ExploreProgress explore_progress;
      public string[] favorite_friend_list;
      public DateTime? gacha_latest_start_time;
      public SM.GuildSignal guild_signal;
      public bool has_buyable_newbie_packs;
      public bool has_exchangeable_subcoin;
      public bool has_fillable_loginbonus;
      public bool has_near_dead_subcoin;
      public bool has_receivable_paymentbonus;
      public bool has_receivable_rewards;
      public HotDealInfo[] hotdeal_info;
      public bool is_active_paymentbonus;
      public bool is_open_colosseum_campaign;
      public bool is_open_pvp_campaign;
      public bool is_open_roulette;
      public LastPlayPlayerStoryQuestSIds last_play_story_quest_s_ids;
      public DateTime last_signed_in_at;
      public LimitShopInfo[] limit_shop_infos;
      public DateTime? medal_shop_latest_start_time;
      public DateTime? money_shop_latest_start_time;
      public OfficialInformationPopup officialinfo_popup;
      public int[] opened_equip_number_player_unit_ids;
      public Player player;
      public LevelRewardSchemaMixin[] player_achieve_level_rewards;
      public PlayerAffiliation player_affiliation;
      public PlayerAwakeSkill[] player_awake_skills;
      public PlayerCharacterIntimate[] player_character_intimates;
      public PlayerCommonTicket[] player_common_tickets;
      public PlayerCustomDeck[] player_custom_decks;
      public PlayerDeck[] player_decks;
      public DisplayPvPHistory player_detail_pvp_history;
      public PlayerItem[] player_items;
      public PlayerLoginBonus[] player_loginbonuses;
      public PlayerMaterialGear[] player_material_gears;
      public PlayerMaterialUnit[] player_material_units;
      public PlayerMissionHistory[] player_mission_histories;
      public PlayerMythologyGearStatus[] player_mythology_gear_statuses;
      public PlayerPresent[] player_presents;
      public PlayerQuestKey[] player_quest_keys;
      public PlayerRecoveryItem[] player_recovery_items;
      public PlayerSeaDeck[] player_sea_decks;
      public PlayerSeasonTicket[] player_season_tickets;
      public PlayerStoryQuestS[] player_story_quests;
      public PlayerUnitReservesCount player_unit_reserves_count;
      public PlayerUnitTypeTicket[] player_unit_type_tickets;
      public PlayerUnit[] player_units;
      public QuestScoreBonusTimetable[] questscore_bonus_timetable;
      public DateTime? raid_medal_shop_latest_start_time;
      public int received_friend_request_count;
      public PlayerRentalPlayerUnitIds rental_player_unit_ids;
      public QuestScoreCampaignProgress[] score_campaigns;
      public SeaPlayer sea_player;
      public PlayerSelectTicketSummary[] select_tickets;
      public DateTime? slot_latest_start_time;
      public int[] story_playback_event_ids;
      public DateTime? subcoin_shop_latest_start_time;
      public PlayerTransmigrateMemoryPlayerUnitIds transmigrate_memory_player_unit_ids;
      public bool unread_talk_messages;

      public HomeStartUp2()
      {
      }

      public HomeStartUp2(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.active_boost_period_id_list = ((IEnumerable<object>) json[nameof (active_boost_period_id_list)]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).ToArray<int>();
        List<OfficialInformationArticle> informationArticleList = new List<OfficialInformationArticle>();
        foreach (object json1 in (List<object>) json[nameof (articles)])
          informationArticleList.Add(json1 == null ? (OfficialInformationArticle) null : new OfficialInformationArticle((Dictionary<string, object>) json1));
        this.articles = informationArticleList.ToArray();
        SMManager.UpdateList<OfficialInformationArticle>(this.articles);
        this.awake_state_player_unit_ids = json[nameof (awake_state_player_unit_ids)] == null ? (PlayerAwakeStatePlayerUnitIds) null : new PlayerAwakeStatePlayerUnitIds((Dictionary<string, object>) json[nameof (awake_state_player_unit_ids)]);
        SMManager.Change<PlayerAwakeStatePlayerUnitIds>(this.awake_state_player_unit_ids);
        this.battle_medal_shop_latest_start_time = json[nameof (battle_medal_shop_latest_start_time)] == null ? new DateTime?() : new DateTime?(DateTime.Parse((string) json[nameof (battle_medal_shop_latest_start_time)]));
        this.boost_type_id_list = ((IEnumerable<object>) json[nameof (boost_type_id_list)]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).ToArray<int>();
        this.can_roulette = (bool) json[nameof (can_roulette)];
        this.challenge_point = (int) (long) json[nameof (challenge_point)];
        List<CoinBonus> coinBonusList = new List<CoinBonus>();
        foreach (object json2 in (List<object>) json[nameof (coin_bonuses)])
          coinBonusList.Add(json2 == null ? (CoinBonus) null : new CoinBonus((Dictionary<string, object>) json2));
        this.coin_bonuses = coinBonusList.ToArray();
        SMManager.UpdateList<CoinBonus>(this.coin_bonuses);
        this.corps_period_ids = ((IEnumerable<object>) json[nameof (corps_period_ids)]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).ToArray<int>();
        this.corps_player_unit_ids = ((IEnumerable<object>) json[nameof (corps_player_unit_ids)]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).ToArray<int>();
        List<Period> periodList = new List<Period>();
        foreach (object json3 in (List<object>) json[nameof (event_info)])
          periodList.Add(json3 == null ? (Period) null : new Period((Dictionary<string, object>) json3));
        this.event_info = periodList.ToArray();
        SMManager.UpdateList<Period>(this.event_info);
        List<UnitBonus> unitBonusList = new List<UnitBonus>();
        foreach (object json4 in (List<object>) json[nameof (event_unit_bonuses)])
          unitBonusList.Add(json4 == null ? (UnitBonus) null : new UnitBonus((Dictionary<string, object>) json4));
        this.event_unit_bonuses = unitBonusList.ToArray();
        SMManager.UpdateList<UnitBonus>(this.event_unit_bonuses);
        List<ExploreDeck> exploreDeckList = new List<ExploreDeck>();
        foreach (object json5 in (List<object>) json[nameof (explore_decks)])
          exploreDeckList.Add(json5 == null ? (ExploreDeck) null : new ExploreDeck((Dictionary<string, object>) json5));
        this.explore_decks = exploreDeckList.ToArray();
        SMManager.UpdateList<ExploreDeck>(this.explore_decks);
        this.explore_progress = json[nameof (explore_progress)] == null ? (ExploreProgress) null : new ExploreProgress((Dictionary<string, object>) json[nameof (explore_progress)]);
        SMManager.Change<ExploreProgress>(this.explore_progress);
        this.favorite_friend_list = ((IEnumerable<object>) json[nameof (favorite_friend_list)]).Select<object, string>((Func<object, string>) (s => (string) s)).ToArray<string>();
        this.gacha_latest_start_time = json[nameof (gacha_latest_start_time)] == null ? new DateTime?() : new DateTime?(DateTime.Parse((string) json[nameof (gacha_latest_start_time)]));
        this.guild_signal = json[nameof (guild_signal)] == null ? (SM.GuildSignal) null : new SM.GuildSignal((Dictionary<string, object>) json[nameof (guild_signal)]);
        SMManager.Change<SM.GuildSignal>(this.guild_signal);
        this.has_buyable_newbie_packs = (bool) json[nameof (has_buyable_newbie_packs)];
        this.has_exchangeable_subcoin = (bool) json[nameof (has_exchangeable_subcoin)];
        this.has_fillable_loginbonus = (bool) json[nameof (has_fillable_loginbonus)];
        this.has_near_dead_subcoin = (bool) json[nameof (has_near_dead_subcoin)];
        this.has_receivable_paymentbonus = (bool) json[nameof (has_receivable_paymentbonus)];
        this.has_receivable_rewards = (bool) json[nameof (has_receivable_rewards)];
        List<HotDealInfo> hotDealInfoList = new List<HotDealInfo>();
        foreach (object json6 in (List<object>) json[nameof (hotdeal_info)])
          hotDealInfoList.Add(json6 == null ? (HotDealInfo) null : new HotDealInfo((Dictionary<string, object>) json6));
        this.hotdeal_info = hotDealInfoList.ToArray();
        this.is_active_paymentbonus = (bool) json[nameof (is_active_paymentbonus)];
        this.is_open_colosseum_campaign = (bool) json[nameof (is_open_colosseum_campaign)];
        this.is_open_pvp_campaign = (bool) json[nameof (is_open_pvp_campaign)];
        this.is_open_roulette = (bool) json[nameof (is_open_roulette)];
        this.last_play_story_quest_s_ids = json[nameof (last_play_story_quest_s_ids)] == null ? (LastPlayPlayerStoryQuestSIds) null : new LastPlayPlayerStoryQuestSIds((Dictionary<string, object>) json[nameof (last_play_story_quest_s_ids)]);
        SMManager.Change<LastPlayPlayerStoryQuestSIds>(this.last_play_story_quest_s_ids);
        this.last_signed_in_at = DateTime.Parse((string) json[nameof (last_signed_in_at)]);
        List<LimitShopInfo> limitShopInfoList = new List<LimitShopInfo>();
        foreach (object json7 in (List<object>) json[nameof (limit_shop_infos)])
          limitShopInfoList.Add(json7 == null ? (LimitShopInfo) null : new LimitShopInfo((Dictionary<string, object>) json7));
        this.limit_shop_infos = limitShopInfoList.ToArray();
        this.medal_shop_latest_start_time = json[nameof (medal_shop_latest_start_time)] == null ? new DateTime?() : new DateTime?(DateTime.Parse((string) json[nameof (medal_shop_latest_start_time)]));
        this.money_shop_latest_start_time = json[nameof (money_shop_latest_start_time)] == null ? new DateTime?() : new DateTime?(DateTime.Parse((string) json[nameof (money_shop_latest_start_time)]));
        this.officialinfo_popup = json[nameof (officialinfo_popup)] == null ? (OfficialInformationPopup) null : new OfficialInformationPopup((Dictionary<string, object>) json[nameof (officialinfo_popup)]);
        this.opened_equip_number_player_unit_ids = ((IEnumerable<object>) json[nameof (opened_equip_number_player_unit_ids)]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).ToArray<int>();
        this.player = json[nameof (player)] == null ? (Player) null : new Player((Dictionary<string, object>) json[nameof (player)]);
        SMManager.Change<Player>(this.player);
        List<LevelRewardSchemaMixin> rewardSchemaMixinList = new List<LevelRewardSchemaMixin>();
        foreach (object json8 in (List<object>) json[nameof (player_achieve_level_rewards)])
          rewardSchemaMixinList.Add(json8 == null ? (LevelRewardSchemaMixin) null : new LevelRewardSchemaMixin((Dictionary<string, object>) json8));
        this.player_achieve_level_rewards = rewardSchemaMixinList.ToArray();
        this.player_affiliation = json[nameof (player_affiliation)] == null ? (PlayerAffiliation) null : new PlayerAffiliation((Dictionary<string, object>) json[nameof (player_affiliation)]);
        SMManager.Change<PlayerAffiliation>(this.player_affiliation);
        List<PlayerAwakeSkill> playerAwakeSkillList = new List<PlayerAwakeSkill>();
        foreach (object json9 in (List<object>) json[nameof (player_awake_skills)])
          playerAwakeSkillList.Add(json9 == null ? (PlayerAwakeSkill) null : new PlayerAwakeSkill((Dictionary<string, object>) json9));
        this.player_awake_skills = playerAwakeSkillList.ToArray();
        SMManager.UpdateList<PlayerAwakeSkill>(this.player_awake_skills, true);
        List<PlayerCharacterIntimate> characterIntimateList = new List<PlayerCharacterIntimate>();
        foreach (object json10 in (List<object>) json[nameof (player_character_intimates)])
          characterIntimateList.Add(json10 == null ? (PlayerCharacterIntimate) null : new PlayerCharacterIntimate((Dictionary<string, object>) json10));
        this.player_character_intimates = characterIntimateList.ToArray();
        SMManager.UpdateList<PlayerCharacterIntimate>(this.player_character_intimates, true);
        List<PlayerCommonTicket> playerCommonTicketList = new List<PlayerCommonTicket>();
        foreach (object json11 in (List<object>) json[nameof (player_common_tickets)])
          playerCommonTicketList.Add(json11 == null ? (PlayerCommonTicket) null : new PlayerCommonTicket((Dictionary<string, object>) json11));
        this.player_common_tickets = playerCommonTicketList.ToArray();
        SMManager.UpdateList<PlayerCommonTicket>(this.player_common_tickets);
        List<PlayerCustomDeck> playerCustomDeckList = new List<PlayerCustomDeck>();
        foreach (object json12 in (List<object>) json[nameof (player_custom_decks)])
          playerCustomDeckList.Add(json12 == null ? (PlayerCustomDeck) null : new PlayerCustomDeck((Dictionary<string, object>) json12));
        this.player_custom_decks = playerCustomDeckList.ToArray();
        SMManager.UpdateList<PlayerCustomDeck>(this.player_custom_decks);
        List<PlayerDeck> playerDeckList = new List<PlayerDeck>();
        foreach (object json13 in (List<object>) json[nameof (player_decks)])
          playerDeckList.Add(json13 == null ? (PlayerDeck) null : new PlayerDeck((Dictionary<string, object>) json13));
        this.player_decks = playerDeckList.ToArray();
        SMManager.UpdateList<PlayerDeck>(this.player_decks);
        this.player_detail_pvp_history = json[nameof (player_detail_pvp_history)] == null ? (DisplayPvPHistory) null : new DisplayPvPHistory((Dictionary<string, object>) json[nameof (player_detail_pvp_history)]);
        SMManager.Change<DisplayPvPHistory>(this.player_detail_pvp_history);
        List<PlayerItem> playerItemList = new List<PlayerItem>();
        foreach (object json14 in (List<object>) json[nameof (player_items)])
          playerItemList.Add(json14 == null ? (PlayerItem) null : new PlayerItem((Dictionary<string, object>) json14));
        this.player_items = playerItemList.ToArray();
        SMManager.UpdateList<PlayerItem>(this.player_items, true);
        List<PlayerLoginBonus> playerLoginBonusList = new List<PlayerLoginBonus>();
        foreach (object json15 in (List<object>) json[nameof (player_loginbonuses)])
          playerLoginBonusList.Add(json15 == null ? (PlayerLoginBonus) null : new PlayerLoginBonus((Dictionary<string, object>) json15));
        this.player_loginbonuses = playerLoginBonusList.ToArray();
        List<PlayerMaterialGear> playerMaterialGearList = new List<PlayerMaterialGear>();
        foreach (object json16 in (List<object>) json[nameof (player_material_gears)])
          playerMaterialGearList.Add(json16 == null ? (PlayerMaterialGear) null : new PlayerMaterialGear((Dictionary<string, object>) json16));
        this.player_material_gears = playerMaterialGearList.ToArray();
        SMManager.UpdateList<PlayerMaterialGear>(this.player_material_gears, true);
        List<PlayerMaterialUnit> playerMaterialUnitList = new List<PlayerMaterialUnit>();
        foreach (object json17 in (List<object>) json[nameof (player_material_units)])
          playerMaterialUnitList.Add(json17 == null ? (PlayerMaterialUnit) null : new PlayerMaterialUnit((Dictionary<string, object>) json17));
        this.player_material_units = playerMaterialUnitList.ToArray();
        SMManager.UpdateList<PlayerMaterialUnit>(this.player_material_units, true);
        List<PlayerMissionHistory> playerMissionHistoryList = new List<PlayerMissionHistory>();
        foreach (object json18 in (List<object>) json[nameof (player_mission_histories)])
          playerMissionHistoryList.Add(json18 == null ? (PlayerMissionHistory) null : new PlayerMissionHistory((Dictionary<string, object>) json18));
        this.player_mission_histories = playerMissionHistoryList.ToArray();
        SMManager.UpdateList<PlayerMissionHistory>(this.player_mission_histories);
        List<PlayerMythologyGearStatus> mythologyGearStatusList = new List<PlayerMythologyGearStatus>();
        foreach (object json19 in (List<object>) json[nameof (player_mythology_gear_statuses)])
          mythologyGearStatusList.Add(json19 == null ? (PlayerMythologyGearStatus) null : new PlayerMythologyGearStatus((Dictionary<string, object>) json19));
        this.player_mythology_gear_statuses = mythologyGearStatusList.ToArray();
        SMManager.UpdateList<PlayerMythologyGearStatus>(this.player_mythology_gear_statuses);
        List<PlayerPresent> playerPresentList = new List<PlayerPresent>();
        foreach (object json20 in (List<object>) json[nameof (player_presents)])
          playerPresentList.Add(json20 == null ? (PlayerPresent) null : new PlayerPresent((Dictionary<string, object>) json20));
        this.player_presents = playerPresentList.ToArray();
        SMManager.UpdateList<PlayerPresent>(this.player_presents, true);
        List<PlayerQuestKey> playerQuestKeyList = new List<PlayerQuestKey>();
        foreach (object json21 in (List<object>) json[nameof (player_quest_keys)])
          playerQuestKeyList.Add(json21 == null ? (PlayerQuestKey) null : new PlayerQuestKey((Dictionary<string, object>) json21));
        this.player_quest_keys = playerQuestKeyList.ToArray();
        SMManager.UpdateList<PlayerQuestKey>(this.player_quest_keys);
        List<PlayerRecoveryItem> playerRecoveryItemList = new List<PlayerRecoveryItem>();
        foreach (object json22 in (List<object>) json[nameof (player_recovery_items)])
          playerRecoveryItemList.Add(json22 == null ? (PlayerRecoveryItem) null : new PlayerRecoveryItem((Dictionary<string, object>) json22));
        this.player_recovery_items = playerRecoveryItemList.ToArray();
        SMManager.UpdateList<PlayerRecoveryItem>(this.player_recovery_items);
        List<PlayerSeaDeck> playerSeaDeckList = new List<PlayerSeaDeck>();
        foreach (object json23 in (List<object>) json[nameof (player_sea_decks)])
          playerSeaDeckList.Add(json23 == null ? (PlayerSeaDeck) null : new PlayerSeaDeck((Dictionary<string, object>) json23));
        this.player_sea_decks = playerSeaDeckList.ToArray();
        SMManager.UpdateList<PlayerSeaDeck>(this.player_sea_decks);
        List<PlayerSeasonTicket> playerSeasonTicketList = new List<PlayerSeasonTicket>();
        foreach (object json24 in (List<object>) json[nameof (player_season_tickets)])
          playerSeasonTicketList.Add(json24 == null ? (PlayerSeasonTicket) null : new PlayerSeasonTicket((Dictionary<string, object>) json24));
        this.player_season_tickets = playerSeasonTicketList.ToArray();
        SMManager.UpdateList<PlayerSeasonTicket>(this.player_season_tickets);
        List<PlayerStoryQuestS> playerStoryQuestSList = new List<PlayerStoryQuestS>();
        foreach (object json25 in (List<object>) json[nameof (player_story_quests)])
          playerStoryQuestSList.Add(json25 == null ? (PlayerStoryQuestS) null : new PlayerStoryQuestS((Dictionary<string, object>) json25));
        this.player_story_quests = playerStoryQuestSList.ToArray();
        SMManager.UpdateList<PlayerStoryQuestS>(this.player_story_quests);
        this.player_unit_reserves_count = json[nameof (player_unit_reserves_count)] == null ? (PlayerUnitReservesCount) null : new PlayerUnitReservesCount((Dictionary<string, object>) json[nameof (player_unit_reserves_count)]);
        SMManager.Change<PlayerUnitReservesCount>(this.player_unit_reserves_count);
        List<PlayerUnitTypeTicket> playerUnitTypeTicketList = new List<PlayerUnitTypeTicket>();
        foreach (object json26 in (List<object>) json[nameof (player_unit_type_tickets)])
          playerUnitTypeTicketList.Add(json26 == null ? (PlayerUnitTypeTicket) null : new PlayerUnitTypeTicket((Dictionary<string, object>) json26));
        this.player_unit_type_tickets = playerUnitTypeTicketList.ToArray();
        SMManager.UpdateList<PlayerUnitTypeTicket>(this.player_unit_type_tickets);
        List<PlayerUnit> playerUnitList = new List<PlayerUnit>();
        foreach (object json27 in (List<object>) json[nameof (player_units)])
          playerUnitList.Add(json27 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json27));
        this.player_units = playerUnitList.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_units, true);
        List<QuestScoreBonusTimetable> scoreBonusTimetableList = new List<QuestScoreBonusTimetable>();
        foreach (object json28 in (List<object>) json[nameof (questscore_bonus_timetable)])
          scoreBonusTimetableList.Add(json28 == null ? (QuestScoreBonusTimetable) null : new QuestScoreBonusTimetable((Dictionary<string, object>) json28));
        this.questscore_bonus_timetable = scoreBonusTimetableList.ToArray();
        SMManager.UpdateList<QuestScoreBonusTimetable>(this.questscore_bonus_timetable);
        this.raid_medal_shop_latest_start_time = json[nameof (raid_medal_shop_latest_start_time)] == null ? new DateTime?() : new DateTime?(DateTime.Parse((string) json[nameof (raid_medal_shop_latest_start_time)]));
        this.received_friend_request_count = (int) (long) json[nameof (received_friend_request_count)];
        this.rental_player_unit_ids = json[nameof (rental_player_unit_ids)] == null ? (PlayerRentalPlayerUnitIds) null : new PlayerRentalPlayerUnitIds((Dictionary<string, object>) json[nameof (rental_player_unit_ids)]);
        SMManager.Change<PlayerRentalPlayerUnitIds>(this.rental_player_unit_ids);
        List<QuestScoreCampaignProgress> campaignProgressList = new List<QuestScoreCampaignProgress>();
        foreach (object json29 in (List<object>) json[nameof (score_campaigns)])
          campaignProgressList.Add(json29 == null ? (QuestScoreCampaignProgress) null : new QuestScoreCampaignProgress((Dictionary<string, object>) json29));
        this.score_campaigns = campaignProgressList.ToArray();
        SMManager.UpdateList<QuestScoreCampaignProgress>(this.score_campaigns);
        this.sea_player = json[nameof (sea_player)] == null ? (SeaPlayer) null : new SeaPlayer((Dictionary<string, object>) json[nameof (sea_player)]);
        SMManager.Change<SeaPlayer>(this.sea_player);
        List<PlayerSelectTicketSummary> selectTicketSummaryList = new List<PlayerSelectTicketSummary>();
        foreach (object json30 in (List<object>) json[nameof (select_tickets)])
          selectTicketSummaryList.Add(json30 == null ? (PlayerSelectTicketSummary) null : new PlayerSelectTicketSummary((Dictionary<string, object>) json30));
        this.select_tickets = selectTicketSummaryList.ToArray();
        SMManager.UpdateList<PlayerSelectTicketSummary>(this.select_tickets);
        this.slot_latest_start_time = json[nameof (slot_latest_start_time)] == null ? new DateTime?() : new DateTime?(DateTime.Parse((string) json[nameof (slot_latest_start_time)]));
        this.story_playback_event_ids = ((IEnumerable<object>) json[nameof (story_playback_event_ids)]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).ToArray<int>();
        this.subcoin_shop_latest_start_time = json[nameof (subcoin_shop_latest_start_time)] == null ? new DateTime?() : new DateTime?(DateTime.Parse((string) json[nameof (subcoin_shop_latest_start_time)]));
        this.transmigrate_memory_player_unit_ids = json[nameof (transmigrate_memory_player_unit_ids)] == null ? (PlayerTransmigrateMemoryPlayerUnitIds) null : new PlayerTransmigrateMemoryPlayerUnitIds((Dictionary<string, object>) json[nameof (transmigrate_memory_player_unit_ids)]);
        SMManager.Change<PlayerTransmigrateMemoryPlayerUnitIds>(this.transmigrate_memory_player_unit_ids);
        this.unread_talk_messages = (bool) json[nameof (unread_talk_messages)];
        if (!json.ContainsKey("player_presents:delete"))
          return;
        SMManager.DeleteList<PlayerPresent>(((IEnumerable<object>) json["player_presents:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class HomeStartUpTransition : KeyCompare, WebAPI.Response.HomeStartUpIndexer
    {
      public int[] active_boost_period_id_list;
      public OfficialInformationArticle[] articles;
      public DateTime? battle_medal_shop_latest_start_time;
      public int[] boost_type_id_list;
      public bool can_roulette;
      public int challenge_point;
      public CoinBonus[] coin_bonuses;
      public int[] corps_period_ids;
      public int[] corps_player_unit_ids;
      public Period[] event_info;
      public UnitBonus[] event_unit_bonuses;
      public ExploreProgress explore_progress;
      public DateTime? gacha_latest_start_time;
      public SM.GuildSignal guild_signal;
      public bool has_buyable_newbie_packs;
      public bool has_exchangeable_subcoin;
      public bool has_fillable_loginbonus;
      public bool has_near_dead_subcoin;
      public bool has_receivable_paymentbonus;
      public bool has_receivable_rewards;
      public HotDealInfo[] hotdeal_info;
      public bool is_active_paymentbonus;
      public bool is_open_colosseum_campaign;
      public bool is_open_pvp_campaign;
      public bool is_open_roulette;
      public DateTime last_signed_in_at;
      public LimitShopInfo[] limit_shop_infos;
      public DateTime? medal_shop_latest_start_time;
      public DateTime? money_shop_latest_start_time;
      public OfficialInformationPopup officialinfo_popup;
      public Player player;
      public LevelRewardSchemaMixin[] player_achieve_level_rewards;
      public PlayerCharacterIntimate[] player_character_intimates;
      public PlayerItem[] player_items;
      public PlayerLoginBonus[] player_loginbonuses;
      public PlayerMythologyGearStatus[] player_mythology_gear_statuses;
      public PlayerPresent[] player_presents;
      public PlayerQuestKey[] player_quest_keys;
      public PlayerUnit[] player_units;
      public QuestScoreBonusTimetable[] questscore_bonus_timetable;
      public DateTime? raid_medal_shop_latest_start_time;
      public int received_friend_request_count;
      public DateTime? slot_latest_start_time;
      public int[] story_playback_event_ids;
      public DateTime? subcoin_shop_latest_start_time;
      public bool unread_talk_messages;

      public HomeStartUpTransition()
      {
      }

      public HomeStartUpTransition(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.active_boost_period_id_list = ((IEnumerable<object>) json[nameof (active_boost_period_id_list)]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).ToArray<int>();
        List<OfficialInformationArticle> informationArticleList = new List<OfficialInformationArticle>();
        foreach (object json1 in (List<object>) json[nameof (articles)])
          informationArticleList.Add(json1 == null ? (OfficialInformationArticle) null : new OfficialInformationArticle((Dictionary<string, object>) json1));
        this.articles = informationArticleList.ToArray();
        SMManager.UpdateList<OfficialInformationArticle>(this.articles);
        this.battle_medal_shop_latest_start_time = json[nameof (battle_medal_shop_latest_start_time)] == null ? new DateTime?() : new DateTime?(DateTime.Parse((string) json[nameof (battle_medal_shop_latest_start_time)]));
        this.boost_type_id_list = ((IEnumerable<object>) json[nameof (boost_type_id_list)]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).ToArray<int>();
        this.can_roulette = (bool) json[nameof (can_roulette)];
        this.challenge_point = (int) (long) json[nameof (challenge_point)];
        List<CoinBonus> coinBonusList = new List<CoinBonus>();
        foreach (object json2 in (List<object>) json[nameof (coin_bonuses)])
          coinBonusList.Add(json2 == null ? (CoinBonus) null : new CoinBonus((Dictionary<string, object>) json2));
        this.coin_bonuses = coinBonusList.ToArray();
        SMManager.UpdateList<CoinBonus>(this.coin_bonuses);
        this.corps_period_ids = ((IEnumerable<object>) json[nameof (corps_period_ids)]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).ToArray<int>();
        this.corps_player_unit_ids = ((IEnumerable<object>) json[nameof (corps_player_unit_ids)]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).ToArray<int>();
        List<Period> periodList = new List<Period>();
        foreach (object json3 in (List<object>) json[nameof (event_info)])
          periodList.Add(json3 == null ? (Period) null : new Period((Dictionary<string, object>) json3));
        this.event_info = periodList.ToArray();
        SMManager.UpdateList<Period>(this.event_info);
        List<UnitBonus> unitBonusList = new List<UnitBonus>();
        foreach (object json4 in (List<object>) json[nameof (event_unit_bonuses)])
          unitBonusList.Add(json4 == null ? (UnitBonus) null : new UnitBonus((Dictionary<string, object>) json4));
        this.event_unit_bonuses = unitBonusList.ToArray();
        SMManager.UpdateList<UnitBonus>(this.event_unit_bonuses);
        this.explore_progress = json[nameof (explore_progress)] == null ? (ExploreProgress) null : new ExploreProgress((Dictionary<string, object>) json[nameof (explore_progress)]);
        SMManager.Change<ExploreProgress>(this.explore_progress);
        this.gacha_latest_start_time = json[nameof (gacha_latest_start_time)] == null ? new DateTime?() : new DateTime?(DateTime.Parse((string) json[nameof (gacha_latest_start_time)]));
        this.guild_signal = json[nameof (guild_signal)] == null ? (SM.GuildSignal) null : new SM.GuildSignal((Dictionary<string, object>) json[nameof (guild_signal)]);
        SMManager.Change<SM.GuildSignal>(this.guild_signal);
        this.has_buyable_newbie_packs = (bool) json[nameof (has_buyable_newbie_packs)];
        this.has_exchangeable_subcoin = (bool) json[nameof (has_exchangeable_subcoin)];
        this.has_fillable_loginbonus = (bool) json[nameof (has_fillable_loginbonus)];
        this.has_near_dead_subcoin = (bool) json[nameof (has_near_dead_subcoin)];
        this.has_receivable_paymentbonus = (bool) json[nameof (has_receivable_paymentbonus)];
        this.has_receivable_rewards = (bool) json[nameof (has_receivable_rewards)];
        List<HotDealInfo> hotDealInfoList = new List<HotDealInfo>();
        foreach (object json5 in (List<object>) json[nameof (hotdeal_info)])
          hotDealInfoList.Add(json5 == null ? (HotDealInfo) null : new HotDealInfo((Dictionary<string, object>) json5));
        this.hotdeal_info = hotDealInfoList.ToArray();
        this.is_active_paymentbonus = (bool) json[nameof (is_active_paymentbonus)];
        this.is_open_colosseum_campaign = (bool) json[nameof (is_open_colosseum_campaign)];
        this.is_open_pvp_campaign = (bool) json[nameof (is_open_pvp_campaign)];
        this.is_open_roulette = (bool) json[nameof (is_open_roulette)];
        this.last_signed_in_at = DateTime.Parse((string) json[nameof (last_signed_in_at)]);
        List<LimitShopInfo> limitShopInfoList = new List<LimitShopInfo>();
        foreach (object json6 in (List<object>) json[nameof (limit_shop_infos)])
          limitShopInfoList.Add(json6 == null ? (LimitShopInfo) null : new LimitShopInfo((Dictionary<string, object>) json6));
        this.limit_shop_infos = limitShopInfoList.ToArray();
        this.medal_shop_latest_start_time = json[nameof (medal_shop_latest_start_time)] == null ? new DateTime?() : new DateTime?(DateTime.Parse((string) json[nameof (medal_shop_latest_start_time)]));
        this.money_shop_latest_start_time = json[nameof (money_shop_latest_start_time)] == null ? new DateTime?() : new DateTime?(DateTime.Parse((string) json[nameof (money_shop_latest_start_time)]));
        this.officialinfo_popup = json[nameof (officialinfo_popup)] == null ? (OfficialInformationPopup) null : new OfficialInformationPopup((Dictionary<string, object>) json[nameof (officialinfo_popup)]);
        this.player = json[nameof (player)] == null ? (Player) null : new Player((Dictionary<string, object>) json[nameof (player)]);
        SMManager.Change<Player>(this.player);
        List<LevelRewardSchemaMixin> rewardSchemaMixinList = new List<LevelRewardSchemaMixin>();
        foreach (object json7 in (List<object>) json[nameof (player_achieve_level_rewards)])
          rewardSchemaMixinList.Add(json7 == null ? (LevelRewardSchemaMixin) null : new LevelRewardSchemaMixin((Dictionary<string, object>) json7));
        this.player_achieve_level_rewards = rewardSchemaMixinList.ToArray();
        List<PlayerCharacterIntimate> characterIntimateList = new List<PlayerCharacterIntimate>();
        foreach (object json8 in (List<object>) json[nameof (player_character_intimates)])
          characterIntimateList.Add(json8 == null ? (PlayerCharacterIntimate) null : new PlayerCharacterIntimate((Dictionary<string, object>) json8));
        this.player_character_intimates = characterIntimateList.ToArray();
        SMManager.UpdateList<PlayerCharacterIntimate>(this.player_character_intimates);
        List<PlayerItem> playerItemList = new List<PlayerItem>();
        foreach (object json9 in (List<object>) json[nameof (player_items)])
          playerItemList.Add(json9 == null ? (PlayerItem) null : new PlayerItem((Dictionary<string, object>) json9));
        this.player_items = playerItemList.ToArray();
        SMManager.UpdateList<PlayerItem>(this.player_items);
        List<PlayerLoginBonus> playerLoginBonusList = new List<PlayerLoginBonus>();
        foreach (object json10 in (List<object>) json[nameof (player_loginbonuses)])
          playerLoginBonusList.Add(json10 == null ? (PlayerLoginBonus) null : new PlayerLoginBonus((Dictionary<string, object>) json10));
        this.player_loginbonuses = playerLoginBonusList.ToArray();
        List<PlayerMythologyGearStatus> mythologyGearStatusList = new List<PlayerMythologyGearStatus>();
        foreach (object json11 in (List<object>) json[nameof (player_mythology_gear_statuses)])
          mythologyGearStatusList.Add(json11 == null ? (PlayerMythologyGearStatus) null : new PlayerMythologyGearStatus((Dictionary<string, object>) json11));
        this.player_mythology_gear_statuses = mythologyGearStatusList.ToArray();
        SMManager.UpdateList<PlayerMythologyGearStatus>(this.player_mythology_gear_statuses);
        List<PlayerPresent> playerPresentList = new List<PlayerPresent>();
        foreach (object json12 in (List<object>) json[nameof (player_presents)])
          playerPresentList.Add(json12 == null ? (PlayerPresent) null : new PlayerPresent((Dictionary<string, object>) json12));
        this.player_presents = playerPresentList.ToArray();
        SMManager.UpdateList<PlayerPresent>(this.player_presents);
        List<PlayerQuestKey> playerQuestKeyList = new List<PlayerQuestKey>();
        foreach (object json13 in (List<object>) json[nameof (player_quest_keys)])
          playerQuestKeyList.Add(json13 == null ? (PlayerQuestKey) null : new PlayerQuestKey((Dictionary<string, object>) json13));
        this.player_quest_keys = playerQuestKeyList.ToArray();
        SMManager.UpdateList<PlayerQuestKey>(this.player_quest_keys);
        List<PlayerUnit> playerUnitList = new List<PlayerUnit>();
        foreach (object json14 in (List<object>) json[nameof (player_units)])
          playerUnitList.Add(json14 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json14));
        this.player_units = playerUnitList.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_units);
        List<QuestScoreBonusTimetable> scoreBonusTimetableList = new List<QuestScoreBonusTimetable>();
        foreach (object json15 in (List<object>) json[nameof (questscore_bonus_timetable)])
          scoreBonusTimetableList.Add(json15 == null ? (QuestScoreBonusTimetable) null : new QuestScoreBonusTimetable((Dictionary<string, object>) json15));
        this.questscore_bonus_timetable = scoreBonusTimetableList.ToArray();
        SMManager.UpdateList<QuestScoreBonusTimetable>(this.questscore_bonus_timetable);
        this.raid_medal_shop_latest_start_time = json[nameof (raid_medal_shop_latest_start_time)] == null ? new DateTime?() : new DateTime?(DateTime.Parse((string) json[nameof (raid_medal_shop_latest_start_time)]));
        this.received_friend_request_count = (int) (long) json[nameof (received_friend_request_count)];
        this.slot_latest_start_time = json[nameof (slot_latest_start_time)] == null ? new DateTime?() : new DateTime?(DateTime.Parse((string) json[nameof (slot_latest_start_time)]));
        this.story_playback_event_ids = ((IEnumerable<object>) json[nameof (story_playback_event_ids)]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).ToArray<int>();
        this.subcoin_shop_latest_start_time = json[nameof (subcoin_shop_latest_start_time)] == null ? new DateTime?() : new DateTime?(DateTime.Parse((string) json[nameof (subcoin_shop_latest_start_time)]));
        this.unread_talk_messages = (bool) json[nameof (unread_talk_messages)];
        if (!json.ContainsKey("player_presents:delete"))
          return;
        SMManager.DeleteList<PlayerPresent>(((IEnumerable<object>) json["player_presents:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }

      public object this[string fieldName]
      {
        get
        {
          return typeof (WebAPI.Response.HomeStartUpTransition).GetField(fieldName).GetValue((object) this);
        }
      }
    }

    [Serializable]
    public class HotdealPackVerifyCheck : KeyCompare
    {
      public HotdealPackVerifyCheck()
      {
      }

      public HotdealPackVerifyCheck(Dictionary<string, object> json) => this._hasKey = false;
    }

    [Serializable]
    public class HotdealPresentPack : KeyCompare
    {
      public PlayerMaterialGear[] player_material_gears;
      public PlayerItem[] player_items;
      public GiftRewardSchema[] rewards;
      public PlayerUnitTypeTicket[] player_unit_type_tickets;
      public PlayerSeasonTicket[] player_season_tickets;
      public PlayerRecoveryItem[] player_recovery_items;
      public Player player;
      public PlayerAwakeSkill[] player_awake_skills;
      public PlayerSelectTicketSummary[] select_tickets;
      public PlayerMaterialUnit[] player_material_units;
      public PlayerPresent[] player_presents;
      public PlayerQuestKey[] player_quest_keys;

      public HotdealPresentPack()
      {
      }

      public HotdealPresentPack(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerMaterialGear> playerMaterialGearList = new List<PlayerMaterialGear>();
        foreach (object json1 in (List<object>) json[nameof (player_material_gears)])
          playerMaterialGearList.Add(json1 == null ? (PlayerMaterialGear) null : new PlayerMaterialGear((Dictionary<string, object>) json1));
        this.player_material_gears = playerMaterialGearList.ToArray();
        SMManager.UpdateList<PlayerMaterialGear>(this.player_material_gears);
        List<PlayerItem> playerItemList = new List<PlayerItem>();
        foreach (object json2 in (List<object>) json[nameof (player_items)])
          playerItemList.Add(json2 == null ? (PlayerItem) null : new PlayerItem((Dictionary<string, object>) json2));
        this.player_items = playerItemList.ToArray();
        SMManager.UpdateList<PlayerItem>(this.player_items);
        List<GiftRewardSchema> giftRewardSchemaList = new List<GiftRewardSchema>();
        foreach (object json3 in (List<object>) json[nameof (rewards)])
          giftRewardSchemaList.Add(json3 == null ? (GiftRewardSchema) null : new GiftRewardSchema((Dictionary<string, object>) json3));
        this.rewards = giftRewardSchemaList.ToArray();
        List<PlayerUnitTypeTicket> playerUnitTypeTicketList = new List<PlayerUnitTypeTicket>();
        bool flag1 = (List<object>) json[nameof (player_unit_type_tickets)] == null;
        if (!flag1)
        {
          foreach (object json4 in (List<object>) json[nameof (player_unit_type_tickets)])
            playerUnitTypeTicketList.Add(json4 == null ? (PlayerUnitTypeTicket) null : new PlayerUnitTypeTicket((Dictionary<string, object>) json4));
        }
        this.player_unit_type_tickets = playerUnitTypeTicketList.ToArray();
        if (!flag1)
          SMManager.UpdateList<PlayerUnitTypeTicket>(this.player_unit_type_tickets);
        List<PlayerSeasonTicket> playerSeasonTicketList = new List<PlayerSeasonTicket>();
        bool flag2 = (List<object>) json[nameof (player_season_tickets)] == null;
        if (!flag2)
        {
          foreach (object json5 in (List<object>) json[nameof (player_season_tickets)])
            playerSeasonTicketList.Add(json5 == null ? (PlayerSeasonTicket) null : new PlayerSeasonTicket((Dictionary<string, object>) json5));
        }
        this.player_season_tickets = playerSeasonTicketList.ToArray();
        if (!flag2)
          SMManager.UpdateList<PlayerSeasonTicket>(this.player_season_tickets);
        List<PlayerRecoveryItem> playerRecoveryItemList = new List<PlayerRecoveryItem>();
        foreach (object json6 in (List<object>) json[nameof (player_recovery_items)])
          playerRecoveryItemList.Add(json6 == null ? (PlayerRecoveryItem) null : new PlayerRecoveryItem((Dictionary<string, object>) json6));
        this.player_recovery_items = playerRecoveryItemList.ToArray();
        SMManager.UpdateList<PlayerRecoveryItem>(this.player_recovery_items);
        this.player = json[nameof (player)] == null ? (Player) null : new Player((Dictionary<string, object>) json[nameof (player)]);
        SMManager.Change<Player>(this.player);
        List<PlayerAwakeSkill> playerAwakeSkillList = new List<PlayerAwakeSkill>();
        foreach (object json7 in (List<object>) json[nameof (player_awake_skills)])
          playerAwakeSkillList.Add(json7 == null ? (PlayerAwakeSkill) null : new PlayerAwakeSkill((Dictionary<string, object>) json7));
        this.player_awake_skills = playerAwakeSkillList.ToArray();
        SMManager.UpdateList<PlayerAwakeSkill>(this.player_awake_skills);
        List<PlayerSelectTicketSummary> selectTicketSummaryList = new List<PlayerSelectTicketSummary>();
        bool flag3 = (List<object>) json[nameof (select_tickets)] == null;
        if (!flag3)
        {
          foreach (object json8 in (List<object>) json[nameof (select_tickets)])
            selectTicketSummaryList.Add(json8 == null ? (PlayerSelectTicketSummary) null : new PlayerSelectTicketSummary((Dictionary<string, object>) json8));
        }
        this.select_tickets = selectTicketSummaryList.ToArray();
        if (!flag3)
          SMManager.UpdateList<PlayerSelectTicketSummary>(this.select_tickets);
        List<PlayerMaterialUnit> playerMaterialUnitList = new List<PlayerMaterialUnit>();
        foreach (object json9 in (List<object>) json[nameof (player_material_units)])
          playerMaterialUnitList.Add(json9 == null ? (PlayerMaterialUnit) null : new PlayerMaterialUnit((Dictionary<string, object>) json9));
        this.player_material_units = playerMaterialUnitList.ToArray();
        SMManager.UpdateList<PlayerMaterialUnit>(this.player_material_units);
        List<PlayerPresent> playerPresentList = new List<PlayerPresent>();
        foreach (object json10 in (List<object>) json[nameof (player_presents)])
          playerPresentList.Add(json10 == null ? (PlayerPresent) null : new PlayerPresent((Dictionary<string, object>) json10));
        this.player_presents = playerPresentList.ToArray();
        SMManager.UpdateList<PlayerPresent>(this.player_presents);
        List<PlayerQuestKey> playerQuestKeyList = new List<PlayerQuestKey>();
        foreach (object json11 in (List<object>) json[nameof (player_quest_keys)])
          playerQuestKeyList.Add(json11 == null ? (PlayerQuestKey) null : new PlayerQuestKey((Dictionary<string, object>) json11));
        this.player_quest_keys = playerQuestKeyList.ToArray();
        SMManager.UpdateList<PlayerQuestKey>(this.player_quest_keys);
      }
    }

    [Serializable]
    public class InternalPvpFinish : KeyCompare
    {
      public bool battle_finish;

      public InternalPvpFinish()
      {
      }

      public InternalPvpFinish(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.battle_finish = (bool) json[nameof (battle_finish)];
      }
    }

    [Serializable]
    public class InternalPvpForceClose : KeyCompare
    {
      public bool result;

      public InternalPvpForceClose()
      {
      }

      public InternalPvpForceClose(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.result = (bool) json[nameof (result)];
      }
    }

    [Serializable]
    public class InternalPvpMaintenance : KeyCompare
    {
      public string pvp_maintenance_title;
      public bool pvp_maintenance;
      public string pvp_maintenance_message;

      public InternalPvpMaintenance()
      {
      }

      public InternalPvpMaintenance(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.pvp_maintenance_title = (string) json[nameof (pvp_maintenance_title)];
        this.pvp_maintenance = (bool) json[nameof (pvp_maintenance)];
        this.pvp_maintenance_message = (string) json[nameof (pvp_maintenance_message)];
      }
    }

    [Serializable]
    public class InternalPvpNotice : KeyCompare
    {
      public bool created;

      public InternalPvpNotice()
      {
      }

      public InternalPvpNotice(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.created = (bool) json[nameof (created)];
      }
    }

    [Serializable]
    public class InternalPvpStart : KeyCompare
    {
      public PlayerAwakeSkill[] player2_awake_skills;
      public PlayerCharacterIntimate[] player2_character_intimates;
      public PlayerUnit[] player1_units_over_killers;
      public DateTime battle_start_at;
      public string battle_uuid;
      public Bonus[] bonus;
      public PlayerItem[] player1_items;
      public bool battle_start;
      public PlayerCharacterIntimate[] player1_character_intimates;
      public Player player2;
      public PlayerAwakeSkill[] player1_awake_skills;
      public PlayerGearReisouSchema[] player2_reisou_items;
      public Player player1;
      public PlayerGearReisouSchema[] player1_reisou_items;
      public PlayerUnit[] player2_units;
      public PlayerUnit[] player2_units_over_killers;
      public PlayerUnit[] player1_units;
      public PlayerItem[] player2_items;
      public MpStage stage;

      public InternalPvpStart()
      {
      }

      public InternalPvpStart(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerAwakeSkill> playerAwakeSkillList1 = new List<PlayerAwakeSkill>();
        foreach (object json1 in (List<object>) json[nameof (player2_awake_skills)])
          playerAwakeSkillList1.Add(json1 == null ? (PlayerAwakeSkill) null : new PlayerAwakeSkill((Dictionary<string, object>) json1));
        this.player2_awake_skills = playerAwakeSkillList1.ToArray();
        List<PlayerCharacterIntimate> characterIntimateList1 = new List<PlayerCharacterIntimate>();
        foreach (object json2 in (List<object>) json[nameof (player2_character_intimates)])
          characterIntimateList1.Add(json2 == null ? (PlayerCharacterIntimate) null : new PlayerCharacterIntimate((Dictionary<string, object>) json2));
        this.player2_character_intimates = characterIntimateList1.ToArray();
        List<PlayerUnit> playerUnitList1 = new List<PlayerUnit>();
        foreach (object json3 in (List<object>) json[nameof (player1_units_over_killers)])
          playerUnitList1.Add(json3 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json3));
        this.player1_units_over_killers = playerUnitList1.ToArray();
        this.battle_start_at = DateTime.Parse((string) json[nameof (battle_start_at)]);
        this.battle_uuid = (string) json[nameof (battle_uuid)];
        List<Bonus> bonusList = new List<Bonus>();
        foreach (object json4 in (List<object>) json[nameof (bonus)])
          bonusList.Add(json4 == null ? (Bonus) null : new Bonus((Dictionary<string, object>) json4));
        this.bonus = bonusList.ToArray();
        List<PlayerItem> playerItemList1 = new List<PlayerItem>();
        foreach (object json5 in (List<object>) json[nameof (player1_items)])
          playerItemList1.Add(json5 == null ? (PlayerItem) null : new PlayerItem((Dictionary<string, object>) json5));
        this.player1_items = playerItemList1.ToArray();
        this.battle_start = (bool) json[nameof (battle_start)];
        List<PlayerCharacterIntimate> characterIntimateList2 = new List<PlayerCharacterIntimate>();
        foreach (object json6 in (List<object>) json[nameof (player1_character_intimates)])
          characterIntimateList2.Add(json6 == null ? (PlayerCharacterIntimate) null : new PlayerCharacterIntimate((Dictionary<string, object>) json6));
        this.player1_character_intimates = characterIntimateList2.ToArray();
        this.player2 = json[nameof (player2)] == null ? (Player) null : new Player((Dictionary<string, object>) json[nameof (player2)]);
        List<PlayerAwakeSkill> playerAwakeSkillList2 = new List<PlayerAwakeSkill>();
        foreach (object json7 in (List<object>) json[nameof (player1_awake_skills)])
          playerAwakeSkillList2.Add(json7 == null ? (PlayerAwakeSkill) null : new PlayerAwakeSkill((Dictionary<string, object>) json7));
        this.player1_awake_skills = playerAwakeSkillList2.ToArray();
        List<PlayerGearReisouSchema> gearReisouSchemaList1 = new List<PlayerGearReisouSchema>();
        foreach (object json8 in (List<object>) json[nameof (player2_reisou_items)])
          gearReisouSchemaList1.Add(json8 == null ? (PlayerGearReisouSchema) null : new PlayerGearReisouSchema((Dictionary<string, object>) json8));
        this.player2_reisou_items = gearReisouSchemaList1.ToArray();
        this.player1 = json[nameof (player1)] == null ? (Player) null : new Player((Dictionary<string, object>) json[nameof (player1)]);
        List<PlayerGearReisouSchema> gearReisouSchemaList2 = new List<PlayerGearReisouSchema>();
        foreach (object json9 in (List<object>) json[nameof (player1_reisou_items)])
          gearReisouSchemaList2.Add(json9 == null ? (PlayerGearReisouSchema) null : new PlayerGearReisouSchema((Dictionary<string, object>) json9));
        this.player1_reisou_items = gearReisouSchemaList2.ToArray();
        List<PlayerUnit> playerUnitList2 = new List<PlayerUnit>();
        foreach (object json10 in (List<object>) json[nameof (player2_units)])
          playerUnitList2.Add(json10 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json10));
        this.player2_units = playerUnitList2.ToArray();
        List<PlayerUnit> playerUnitList3 = new List<PlayerUnit>();
        foreach (object json11 in (List<object>) json[nameof (player2_units_over_killers)])
          playerUnitList3.Add(json11 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json11));
        this.player2_units_over_killers = playerUnitList3.ToArray();
        List<PlayerUnit> playerUnitList4 = new List<PlayerUnit>();
        foreach (object json12 in (List<object>) json[nameof (player1_units)])
          playerUnitList4.Add(json12 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json12));
        this.player1_units = playerUnitList4.ToArray();
        List<PlayerItem> playerItemList2 = new List<PlayerItem>();
        foreach (object json13 in (List<object>) json[nameof (player2_items)])
          playerItemList2.Add(json13 == null ? (PlayerItem) null : new PlayerItem((Dictionary<string, object>) json13));
        this.player2_items = playerItemList2.ToArray();
        this.stage = json[nameof (stage)] == null ? (MpStage) null : new MpStage((Dictionary<string, object>) json[nameof (stage)]);
      }
    }

    [Serializable]
    public class InternalPvpStatus : KeyCompare
    {
      public int league_rank;
      public bool is_battle;
      public bool cpu_timeout_flg;
      public int point;
      public bool pvp_maintenance;
      public bool auth;
      public string[] friend_ids;

      public InternalPvpStatus()
      {
      }

      public InternalPvpStatus(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.league_rank = (int) (long) json[nameof (league_rank)];
        this.is_battle = (bool) json[nameof (is_battle)];
        this.cpu_timeout_flg = (bool) json[nameof (cpu_timeout_flg)];
        this.point = (int) (long) json[nameof (point)];
        this.pvp_maintenance = (bool) json[nameof (pvp_maintenance)];
        this.auth = (bool) json[nameof (auth)];
        this.friend_ids = ((IEnumerable<object>) json[nameof (friend_ids)]).Select<object, string>((Func<object, string>) (s => (string) s)).ToArray<string>();
      }
    }

    [Serializable]
    public class InternalPvpTutorialFinish : KeyCompare
    {
      public bool battle_finish;

      public InternalPvpTutorialFinish()
      {
      }

      public InternalPvpTutorialFinish(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.battle_finish = (bool) json[nameof (battle_finish)];
      }
    }

    [Serializable]
    public class InternalPvpTutorialStart : KeyCompare
    {
      public PlayerAwakeSkill[] player2_awake_skills;
      public PlayerCharacterIntimate[] player2_character_intimates;
      public PlayerUnit[] player1_units_over_killers;
      public DateTime battle_start_at;
      public string battle_uuid;
      public Bonus[] bonus;
      public PlayerItem[] player1_items;
      public bool battle_start;
      public PlayerCharacterIntimate[] player1_character_intimates;
      public Player player2;
      public PlayerAwakeSkill[] player1_awake_skills;
      public PlayerGearReisouSchema[] player2_reisou_items;
      public Player player1;
      public PlayerGearReisouSchema[] player1_reisou_items;
      public PlayerUnit[] player2_units;
      public PlayerUnit[] player2_units_over_killers;
      public PlayerUnit[] player1_units;
      public PlayerItem[] player2_items;
      public MpStage stage;

      public InternalPvpTutorialStart()
      {
      }

      public InternalPvpTutorialStart(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerAwakeSkill> playerAwakeSkillList1 = new List<PlayerAwakeSkill>();
        foreach (object json1 in (List<object>) json[nameof (player2_awake_skills)])
          playerAwakeSkillList1.Add(json1 == null ? (PlayerAwakeSkill) null : new PlayerAwakeSkill((Dictionary<string, object>) json1));
        this.player2_awake_skills = playerAwakeSkillList1.ToArray();
        List<PlayerCharacterIntimate> characterIntimateList1 = new List<PlayerCharacterIntimate>();
        foreach (object json2 in (List<object>) json[nameof (player2_character_intimates)])
          characterIntimateList1.Add(json2 == null ? (PlayerCharacterIntimate) null : new PlayerCharacterIntimate((Dictionary<string, object>) json2));
        this.player2_character_intimates = characterIntimateList1.ToArray();
        List<PlayerUnit> playerUnitList1 = new List<PlayerUnit>();
        foreach (object json3 in (List<object>) json[nameof (player1_units_over_killers)])
          playerUnitList1.Add(json3 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json3));
        this.player1_units_over_killers = playerUnitList1.ToArray();
        this.battle_start_at = DateTime.Parse((string) json[nameof (battle_start_at)]);
        this.battle_uuid = (string) json[nameof (battle_uuid)];
        List<Bonus> bonusList = new List<Bonus>();
        foreach (object json4 in (List<object>) json[nameof (bonus)])
          bonusList.Add(json4 == null ? (Bonus) null : new Bonus((Dictionary<string, object>) json4));
        this.bonus = bonusList.ToArray();
        List<PlayerItem> playerItemList1 = new List<PlayerItem>();
        foreach (object json5 in (List<object>) json[nameof (player1_items)])
          playerItemList1.Add(json5 == null ? (PlayerItem) null : new PlayerItem((Dictionary<string, object>) json5));
        this.player1_items = playerItemList1.ToArray();
        this.battle_start = (bool) json[nameof (battle_start)];
        List<PlayerCharacterIntimate> characterIntimateList2 = new List<PlayerCharacterIntimate>();
        foreach (object json6 in (List<object>) json[nameof (player1_character_intimates)])
          characterIntimateList2.Add(json6 == null ? (PlayerCharacterIntimate) null : new PlayerCharacterIntimate((Dictionary<string, object>) json6));
        this.player1_character_intimates = characterIntimateList2.ToArray();
        this.player2 = json[nameof (player2)] == null ? (Player) null : new Player((Dictionary<string, object>) json[nameof (player2)]);
        List<PlayerAwakeSkill> playerAwakeSkillList2 = new List<PlayerAwakeSkill>();
        foreach (object json7 in (List<object>) json[nameof (player1_awake_skills)])
          playerAwakeSkillList2.Add(json7 == null ? (PlayerAwakeSkill) null : new PlayerAwakeSkill((Dictionary<string, object>) json7));
        this.player1_awake_skills = playerAwakeSkillList2.ToArray();
        List<PlayerGearReisouSchema> gearReisouSchemaList1 = new List<PlayerGearReisouSchema>();
        foreach (object json8 in (List<object>) json[nameof (player2_reisou_items)])
          gearReisouSchemaList1.Add(json8 == null ? (PlayerGearReisouSchema) null : new PlayerGearReisouSchema((Dictionary<string, object>) json8));
        this.player2_reisou_items = gearReisouSchemaList1.ToArray();
        this.player1 = json[nameof (player1)] == null ? (Player) null : new Player((Dictionary<string, object>) json[nameof (player1)]);
        List<PlayerGearReisouSchema> gearReisouSchemaList2 = new List<PlayerGearReisouSchema>();
        foreach (object json9 in (List<object>) json[nameof (player1_reisou_items)])
          gearReisouSchemaList2.Add(json9 == null ? (PlayerGearReisouSchema) null : new PlayerGearReisouSchema((Dictionary<string, object>) json9));
        this.player1_reisou_items = gearReisouSchemaList2.ToArray();
        List<PlayerUnit> playerUnitList2 = new List<PlayerUnit>();
        foreach (object json10 in (List<object>) json[nameof (player2_units)])
          playerUnitList2.Add(json10 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json10));
        this.player2_units = playerUnitList2.ToArray();
        List<PlayerUnit> playerUnitList3 = new List<PlayerUnit>();
        foreach (object json11 in (List<object>) json[nameof (player2_units_over_killers)])
          playerUnitList3.Add(json11 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json11));
        this.player2_units_over_killers = playerUnitList3.ToArray();
        List<PlayerUnit> playerUnitList4 = new List<PlayerUnit>();
        foreach (object json12 in (List<object>) json[nameof (player1_units)])
          playerUnitList4.Add(json12 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json12));
        this.player1_units = playerUnitList4.ToArray();
        List<PlayerItem> playerItemList2 = new List<PlayerItem>();
        foreach (object json13 in (List<object>) json[nameof (player2_items)])
          playerItemList2.Add(json13 == null ? (PlayerItem) null : new PlayerItem((Dictionary<string, object>) json13));
        this.player2_items = playerItemList2.ToArray();
        this.stage = json[nameof (stage)] == null ? (MpStage) null : new MpStage((Dictionary<string, object>) json[nameof (stage)]);
      }
    }

    [Serializable]
    public class ItemBodyExchange : KeyCompare
    {
      public Player player;
      public PlayerItem[] player_items;
      public PlayerMaterialGear[] player_material_gears;

      public ItemBodyExchange()
      {
      }

      public ItemBodyExchange(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.player = json[nameof (player)] == null ? (Player) null : new Player((Dictionary<string, object>) json[nameof (player)]);
        SMManager.Change<Player>(this.player);
        List<PlayerItem> playerItemList = new List<PlayerItem>();
        foreach (object json1 in (List<object>) json[nameof (player_items)])
          playerItemList.Add(json1 == null ? (PlayerItem) null : new PlayerItem((Dictionary<string, object>) json1));
        this.player_items = playerItemList.ToArray();
        SMManager.UpdateList<PlayerItem>(this.player_items);
        List<PlayerMaterialGear> playerMaterialGearList = new List<PlayerMaterialGear>();
        foreach (object json2 in (List<object>) json[nameof (player_material_gears)])
          playerMaterialGearList.Add(json2 == null ? (PlayerMaterialGear) null : new PlayerMaterialGear((Dictionary<string, object>) json2));
        this.player_material_gears = playerMaterialGearList.ToArray();
        SMManager.UpdateList<PlayerMaterialGear>(this.player_material_gears);
        if (json.ContainsKey("player_material_gears:delete"))
          SMManager.DeleteList<PlayerMaterialGear>(((IEnumerable<object>) json["player_material_gears:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
        if (!json.ContainsKey("player_items:delete"))
          return;
        SMManager.DeleteList<PlayerItem>(((IEnumerable<object>) json["player_items:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class ItemGearBuildup : KeyCompare
    {
      public string[] animation_pattern;
      public Player player;
      public PlayerItem[] player_items;
      public PlayerItem player_item;

      public ItemGearBuildup()
      {
      }

      public ItemGearBuildup(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.animation_pattern = ((IEnumerable<object>) json[nameof (animation_pattern)]).Select<object, string>((Func<object, string>) (s => (string) s)).ToArray<string>();
        this.player = json[nameof (player)] == null ? (Player) null : new Player((Dictionary<string, object>) json[nameof (player)]);
        SMManager.Change<Player>(this.player);
        List<PlayerItem> playerItemList = new List<PlayerItem>();
        foreach (object json1 in (List<object>) json[nameof (player_items)])
          playerItemList.Add(json1 == null ? (PlayerItem) null : new PlayerItem((Dictionary<string, object>) json1));
        this.player_items = playerItemList.ToArray();
        SMManager.UpdateList<PlayerItem>(this.player_items);
        this.player_item = json[nameof (player_item)] == null ? (PlayerItem) null : new PlayerItem((Dictionary<string, object>) json[nameof (player_item)]);
        if (!json.ContainsKey("player_items:delete"))
          return;
        SMManager.DeleteList<PlayerItem>(((IEnumerable<object>) json["player_items:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class ItemGearBulkDrilling : KeyCompare
    {
      public PlayerMaterialGear[] player_material_gears;
      public PlayerItem[] player_items;
      public Player player;
      public PlayerItem player_item;
      public PlayerCustomDeck[] player_custom_decks;
      public string[] animation_pattern;
      public PlayerMythologyGearStatus[] player_mythology_gear_statuses;

      public ItemGearBulkDrilling()
      {
      }

      public ItemGearBulkDrilling(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerMaterialGear> playerMaterialGearList = new List<PlayerMaterialGear>();
        foreach (object json1 in (List<object>) json[nameof (player_material_gears)])
          playerMaterialGearList.Add(json1 == null ? (PlayerMaterialGear) null : new PlayerMaterialGear((Dictionary<string, object>) json1));
        this.player_material_gears = playerMaterialGearList.ToArray();
        SMManager.UpdateList<PlayerMaterialGear>(this.player_material_gears);
        List<PlayerItem> playerItemList = new List<PlayerItem>();
        foreach (object json2 in (List<object>) json[nameof (player_items)])
          playerItemList.Add(json2 == null ? (PlayerItem) null : new PlayerItem((Dictionary<string, object>) json2));
        this.player_items = playerItemList.ToArray();
        SMManager.UpdateList<PlayerItem>(this.player_items);
        this.player = json[nameof (player)] == null ? (Player) null : new Player((Dictionary<string, object>) json[nameof (player)]);
        SMManager.Change<Player>(this.player);
        this.player_item = json[nameof (player_item)] == null ? (PlayerItem) null : new PlayerItem((Dictionary<string, object>) json[nameof (player_item)]);
        List<PlayerCustomDeck> playerCustomDeckList = new List<PlayerCustomDeck>();
        foreach (object json3 in (List<object>) json[nameof (player_custom_decks)])
          playerCustomDeckList.Add(json3 == null ? (PlayerCustomDeck) null : new PlayerCustomDeck((Dictionary<string, object>) json3));
        this.player_custom_decks = playerCustomDeckList.ToArray();
        SMManager.UpdateList<PlayerCustomDeck>(this.player_custom_decks);
        this.animation_pattern = ((IEnumerable<object>) json[nameof (animation_pattern)]).Select<object, string>((Func<object, string>) (s => (string) s)).ToArray<string>();
        List<PlayerMythologyGearStatus> mythologyGearStatusList = new List<PlayerMythologyGearStatus>();
        foreach (object json4 in (List<object>) json[nameof (player_mythology_gear_statuses)])
          mythologyGearStatusList.Add(json4 == null ? (PlayerMythologyGearStatus) null : new PlayerMythologyGearStatus((Dictionary<string, object>) json4));
        this.player_mythology_gear_statuses = mythologyGearStatusList.ToArray();
        SMManager.UpdateList<PlayerMythologyGearStatus>(this.player_mythology_gear_statuses);
        if (json.ContainsKey("player_material_gears:delete"))
          SMManager.DeleteList<PlayerMaterialGear>(((IEnumerable<object>) json["player_material_gears:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
        if (!json.ContainsKey("player_items:delete"))
          return;
        SMManager.DeleteList<PlayerItem>(((IEnumerable<object>) json["player_items:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class ItemGearBulkDrillingConfirm : KeyCompare
    {
      public PlayerItem player_reisou_item;
      public PlayerItem player_item;
      public int consume_money;
      public PlayerMythologyGearStatus player_mythology_gear_status;

      public ItemGearBulkDrillingConfirm()
      {
      }

      public ItemGearBulkDrillingConfirm(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.player_reisou_item = json[nameof (player_reisou_item)] == null ? (PlayerItem) null : new PlayerItem((Dictionary<string, object>) json[nameof (player_reisou_item)]);
        this.player_item = json[nameof (player_item)] == null ? (PlayerItem) null : new PlayerItem((Dictionary<string, object>) json[nameof (player_item)]);
        this.consume_money = (int) (long) json[nameof (consume_money)];
        this.player_mythology_gear_status = json[nameof (player_mythology_gear_status)] == null ? (PlayerMythologyGearStatus) null : new PlayerMythologyGearStatus((Dictionary<string, object>) json[nameof (player_mythology_gear_status)]);
      }
    }

    [Serializable]
    public class ItemGearCallGift : KeyCompare
    {
      public int[] recipe_id_list;

      public ItemGearCallGift()
      {
      }

      public ItemGearCallGift(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.recipe_id_list = ((IEnumerable<object>) json[nameof (recipe_id_list)]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).ToArray<int>();
      }
    }

    [Serializable]
    public class ItemGearCombine : KeyCompare
    {
      public PlayerMaterialGear[] player_material_gears;
      public PlayerItem[] player_items;
      public PlayerUnit[] player_units;
      public Player player;
      public PlayerItem player_item;
      public PlayerCustomDeck[] player_custom_decks;
      public string[] animation_pattern;
      public PlayerMaterialGear player_material_gear;

      public ItemGearCombine()
      {
      }

      public ItemGearCombine(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerMaterialGear> playerMaterialGearList = new List<PlayerMaterialGear>();
        foreach (object json1 in (List<object>) json[nameof (player_material_gears)])
          playerMaterialGearList.Add(json1 == null ? (PlayerMaterialGear) null : new PlayerMaterialGear((Dictionary<string, object>) json1));
        this.player_material_gears = playerMaterialGearList.ToArray();
        SMManager.UpdateList<PlayerMaterialGear>(this.player_material_gears);
        List<PlayerItem> playerItemList = new List<PlayerItem>();
        foreach (object json2 in (List<object>) json[nameof (player_items)])
          playerItemList.Add(json2 == null ? (PlayerItem) null : new PlayerItem((Dictionary<string, object>) json2));
        this.player_items = playerItemList.ToArray();
        SMManager.UpdateList<PlayerItem>(this.player_items);
        List<PlayerUnit> playerUnitList = new List<PlayerUnit>();
        foreach (object json3 in (List<object>) json[nameof (player_units)])
          playerUnitList.Add(json3 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json3));
        this.player_units = playerUnitList.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_units);
        this.player = json[nameof (player)] == null ? (Player) null : new Player((Dictionary<string, object>) json[nameof (player)]);
        SMManager.Change<Player>(this.player);
        this.player_item = json[nameof (player_item)] == null ? (PlayerItem) null : new PlayerItem((Dictionary<string, object>) json[nameof (player_item)]);
        List<PlayerCustomDeck> playerCustomDeckList = new List<PlayerCustomDeck>();
        foreach (object json4 in (List<object>) json[nameof (player_custom_decks)])
          playerCustomDeckList.Add(json4 == null ? (PlayerCustomDeck) null : new PlayerCustomDeck((Dictionary<string, object>) json4));
        this.player_custom_decks = playerCustomDeckList.ToArray();
        SMManager.UpdateList<PlayerCustomDeck>(this.player_custom_decks);
        this.animation_pattern = ((IEnumerable<object>) json[nameof (animation_pattern)]).Select<object, string>((Func<object, string>) (s => (string) s)).ToArray<string>();
        this.player_material_gear = json[nameof (player_material_gear)] == null ? (PlayerMaterialGear) null : new PlayerMaterialGear((Dictionary<string, object>) json[nameof (player_material_gear)]);
        if (json.ContainsKey("player_material_gears:delete"))
          SMManager.DeleteList<PlayerMaterialGear>(((IEnumerable<object>) json["player_material_gears:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
        if (!json.ContainsKey("player_items:delete"))
          return;
        SMManager.DeleteList<PlayerItem>(((IEnumerable<object>) json["player_items:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class ItemGearCombineRecipe : KeyCompare
    {
      public PlayerMaterialGear[] player_material_gears;
      public PlayerItem[] player_items;
      public Player player;
      public PlayerCustomDeck[] player_custom_decks;
      public PlayerMaterialGear player_material_gear;

      public ItemGearCombineRecipe()
      {
      }

      public ItemGearCombineRecipe(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerMaterialGear> playerMaterialGearList = new List<PlayerMaterialGear>();
        foreach (object json1 in (List<object>) json[nameof (player_material_gears)])
          playerMaterialGearList.Add(json1 == null ? (PlayerMaterialGear) null : new PlayerMaterialGear((Dictionary<string, object>) json1));
        this.player_material_gears = playerMaterialGearList.ToArray();
        SMManager.UpdateList<PlayerMaterialGear>(this.player_material_gears);
        List<PlayerItem> playerItemList = new List<PlayerItem>();
        foreach (object json2 in (List<object>) json[nameof (player_items)])
          playerItemList.Add(json2 == null ? (PlayerItem) null : new PlayerItem((Dictionary<string, object>) json2));
        this.player_items = playerItemList.ToArray();
        SMManager.UpdateList<PlayerItem>(this.player_items);
        this.player = json[nameof (player)] == null ? (Player) null : new Player((Dictionary<string, object>) json[nameof (player)]);
        SMManager.Change<Player>(this.player);
        List<PlayerCustomDeck> playerCustomDeckList = new List<PlayerCustomDeck>();
        foreach (object json3 in (List<object>) json[nameof (player_custom_decks)])
          playerCustomDeckList.Add(json3 == null ? (PlayerCustomDeck) null : new PlayerCustomDeck((Dictionary<string, object>) json3));
        this.player_custom_decks = playerCustomDeckList.ToArray();
        SMManager.UpdateList<PlayerCustomDeck>(this.player_custom_decks);
        this.player_material_gear = json[nameof (player_material_gear)] == null ? (PlayerMaterialGear) null : new PlayerMaterialGear((Dictionary<string, object>) json[nameof (player_material_gear)]);
        if (json.ContainsKey("player_material_gears:delete"))
          SMManager.DeleteList<PlayerMaterialGear>(((IEnumerable<object>) json["player_material_gears:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
        if (!json.ContainsKey("player_items:delete"))
          return;
        SMManager.DeleteList<PlayerItem>(((IEnumerable<object>) json["player_items:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class ItemGearCombineRecipeConfirm : KeyCompare
    {
      public int cost_money;
      public Player player;
      public int max_create_num;
      public PlayerMaterialGear[] cost_player_material_gears;
      public PlayerItem[] cost_player_items;

      public ItemGearCombineRecipeConfirm()
      {
      }

      public ItemGearCombineRecipeConfirm(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.cost_money = (int) (long) json[nameof (cost_money)];
        this.player = json[nameof (player)] == null ? (Player) null : new Player((Dictionary<string, object>) json[nameof (player)]);
        this.max_create_num = (int) (long) json[nameof (max_create_num)];
        List<PlayerMaterialGear> playerMaterialGearList = new List<PlayerMaterialGear>();
        foreach (object json1 in (List<object>) json[nameof (cost_player_material_gears)])
          playerMaterialGearList.Add(json1 == null ? (PlayerMaterialGear) null : new PlayerMaterialGear((Dictionary<string, object>) json1));
        this.cost_player_material_gears = playerMaterialGearList.ToArray();
        List<PlayerItem> playerItemList = new List<PlayerItem>();
        foreach (object json2 in (List<object>) json[nameof (cost_player_items)])
          playerItemList.Add(json2 == null ? (PlayerItem) null : new PlayerItem((Dictionary<string, object>) json2));
        this.cost_player_items = playerItemList.ToArray();
      }
    }

    [Serializable]
    public class ItemGearCreateCallGift : KeyCompare
    {
      public int failure_call_gift_count;
      public PlayerMaterialGear[] player_material_gears;
      public int success_call_gift_count;
      public Player player;

      public ItemGearCreateCallGift()
      {
      }

      public ItemGearCreateCallGift(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.failure_call_gift_count = (int) (long) json[nameof (failure_call_gift_count)];
        List<PlayerMaterialGear> playerMaterialGearList = new List<PlayerMaterialGear>();
        foreach (object json1 in (List<object>) json[nameof (player_material_gears)])
          playerMaterialGearList.Add(json1 == null ? (PlayerMaterialGear) null : new PlayerMaterialGear((Dictionary<string, object>) json1));
        this.player_material_gears = playerMaterialGearList.ToArray();
        SMManager.UpdateList<PlayerMaterialGear>(this.player_material_gears);
        this.success_call_gift_count = (int) (long) json[nameof (success_call_gift_count)];
        this.player = json[nameof (player)] == null ? (Player) null : new Player((Dictionary<string, object>) json[nameof (player)]);
        SMManager.Change<Player>(this.player);
        if (!json.ContainsKey("player_material_gears:delete"))
          return;
        SMManager.DeleteList<PlayerMaterialGear>(((IEnumerable<object>) json["player_material_gears:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class ItemGearDrilling : KeyCompare
    {
      public PlayerMythologyGearStatus[] player_mythology_gear_statuses;
      public PlayerMaterialGear[] player_material_gears;
      public PlayerItem[] player_items;
      public Player player;
      public PlayerItem player_item;
      public PlayerCustomDeck[] player_custom_decks;
      public string[] animation_pattern;
      public PlayerMaterialGear player_material_gear;

      public ItemGearDrilling()
      {
      }

      public ItemGearDrilling(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerMythologyGearStatus> mythologyGearStatusList = new List<PlayerMythologyGearStatus>();
        foreach (object json1 in (List<object>) json[nameof (player_mythology_gear_statuses)])
          mythologyGearStatusList.Add(json1 == null ? (PlayerMythologyGearStatus) null : new PlayerMythologyGearStatus((Dictionary<string, object>) json1));
        this.player_mythology_gear_statuses = mythologyGearStatusList.ToArray();
        SMManager.UpdateList<PlayerMythologyGearStatus>(this.player_mythology_gear_statuses);
        List<PlayerMaterialGear> playerMaterialGearList = new List<PlayerMaterialGear>();
        foreach (object json2 in (List<object>) json[nameof (player_material_gears)])
          playerMaterialGearList.Add(json2 == null ? (PlayerMaterialGear) null : new PlayerMaterialGear((Dictionary<string, object>) json2));
        this.player_material_gears = playerMaterialGearList.ToArray();
        SMManager.UpdateList<PlayerMaterialGear>(this.player_material_gears);
        List<PlayerItem> playerItemList = new List<PlayerItem>();
        foreach (object json3 in (List<object>) json[nameof (player_items)])
          playerItemList.Add(json3 == null ? (PlayerItem) null : new PlayerItem((Dictionary<string, object>) json3));
        this.player_items = playerItemList.ToArray();
        SMManager.UpdateList<PlayerItem>(this.player_items);
        this.player = json[nameof (player)] == null ? (Player) null : new Player((Dictionary<string, object>) json[nameof (player)]);
        SMManager.Change<Player>(this.player);
        this.player_item = json[nameof (player_item)] == null ? (PlayerItem) null : new PlayerItem((Dictionary<string, object>) json[nameof (player_item)]);
        List<PlayerCustomDeck> playerCustomDeckList = new List<PlayerCustomDeck>();
        foreach (object json4 in (List<object>) json[nameof (player_custom_decks)])
          playerCustomDeckList.Add(json4 == null ? (PlayerCustomDeck) null : new PlayerCustomDeck((Dictionary<string, object>) json4));
        this.player_custom_decks = playerCustomDeckList.ToArray();
        SMManager.UpdateList<PlayerCustomDeck>(this.player_custom_decks);
        this.animation_pattern = ((IEnumerable<object>) json[nameof (animation_pattern)]).Select<object, string>((Func<object, string>) (s => (string) s)).ToArray<string>();
        this.player_material_gear = json[nameof (player_material_gear)] == null ? (PlayerMaterialGear) null : new PlayerMaterialGear((Dictionary<string, object>) json[nameof (player_material_gear)]);
        if (json.ContainsKey("player_items:delete"))
          SMManager.DeleteList<PlayerItem>(((IEnumerable<object>) json["player_items:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
        if (!json.ContainsKey("player_material_gears:delete"))
          return;
        SMManager.DeleteList<PlayerMaterialGear>(((IEnumerable<object>) json["player_material_gears:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class ItemGearDrillingConfirm : KeyCompare
    {
      public PlayerMaterialGear player_material_gear;
      public PlayerItem player_reisou_item;
      public PlayerItem player_item;
      public int consume_money;
      public PlayerMythologyGearStatus player_mythology_gear_status;

      public ItemGearDrillingConfirm()
      {
      }

      public ItemGearDrillingConfirm(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.player_material_gear = json[nameof (player_material_gear)] == null ? (PlayerMaterialGear) null : new PlayerMaterialGear((Dictionary<string, object>) json[nameof (player_material_gear)]);
        this.player_reisou_item = json[nameof (player_reisou_item)] == null ? (PlayerItem) null : new PlayerItem((Dictionary<string, object>) json[nameof (player_reisou_item)]);
        this.player_item = json[nameof (player_item)] == null ? (PlayerItem) null : new PlayerItem((Dictionary<string, object>) json[nameof (player_item)]);
        this.consume_money = (int) (long) json[nameof (consume_money)];
        this.player_mythology_gear_status = json[nameof (player_mythology_gear_status)] == null ? (PlayerMythologyGearStatus) null : new PlayerMythologyGearStatus((Dictionary<string, object>) json[nameof (player_mythology_gear_status)]);
      }
    }

    [Serializable]
    public class ItemGearExchange : KeyCompare
    {
      public PlayerMaterialGear[] player_material_gears;
      public PlayerItem[] player_items;
      public Player player;
      public PlayerCustomDeck[] player_custom_decks;

      public ItemGearExchange()
      {
      }

      public ItemGearExchange(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerMaterialGear> playerMaterialGearList = new List<PlayerMaterialGear>();
        foreach (object json1 in (List<object>) json[nameof (player_material_gears)])
          playerMaterialGearList.Add(json1 == null ? (PlayerMaterialGear) null : new PlayerMaterialGear((Dictionary<string, object>) json1));
        this.player_material_gears = playerMaterialGearList.ToArray();
        SMManager.UpdateList<PlayerMaterialGear>(this.player_material_gears);
        List<PlayerItem> playerItemList = new List<PlayerItem>();
        foreach (object json2 in (List<object>) json[nameof (player_items)])
          playerItemList.Add(json2 == null ? (PlayerItem) null : new PlayerItem((Dictionary<string, object>) json2));
        this.player_items = playerItemList.ToArray();
        SMManager.UpdateList<PlayerItem>(this.player_items);
        this.player = json[nameof (player)] == null ? (Player) null : new Player((Dictionary<string, object>) json[nameof (player)]);
        SMManager.Change<Player>(this.player);
        List<PlayerCustomDeck> playerCustomDeckList = new List<PlayerCustomDeck>();
        foreach (object json3 in (List<object>) json[nameof (player_custom_decks)])
          playerCustomDeckList.Add(json3 == null ? (PlayerCustomDeck) null : new PlayerCustomDeck((Dictionary<string, object>) json3));
        this.player_custom_decks = playerCustomDeckList.ToArray();
        SMManager.UpdateList<PlayerCustomDeck>(this.player_custom_decks);
        if (json.ContainsKey("player_material_gears:delete"))
          SMManager.DeleteList<PlayerMaterialGear>(((IEnumerable<object>) json["player_material_gears:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
        if (!json.ContainsKey("player_items:delete"))
          return;
        SMManager.DeleteList<PlayerItem>(((IEnumerable<object>) json["player_items:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class ItemGearFavorite : KeyCompare
    {
      public PlayerItem[] player_items;

      public ItemGearFavorite()
      {
      }

      public ItemGearFavorite(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerItem> playerItemList = new List<PlayerItem>();
        foreach (object json1 in (List<object>) json[nameof (player_items)])
          playerItemList.Add(json1 == null ? (PlayerItem) null : new PlayerItem((Dictionary<string, object>) json1));
        this.player_items = playerItemList.ToArray();
        SMManager.UpdateList<PlayerItem>(this.player_items);
      }
    }

    [Serializable]
    public class ItemGearMixer : KeyCompare
    {
      public PlayerMaterialGear[] player_material_gears;
      public PlayerItem[] player_items;
      public PlayerUnit[] player_units;
      public Player player;
      public int reisou_jewel;
      public PlayerCustomDeck[] player_custom_decks;

      public ItemGearMixer()
      {
      }

      public ItemGearMixer(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerMaterialGear> playerMaterialGearList = new List<PlayerMaterialGear>();
        foreach (object json1 in (List<object>) json[nameof (player_material_gears)])
          playerMaterialGearList.Add(json1 == null ? (PlayerMaterialGear) null : new PlayerMaterialGear((Dictionary<string, object>) json1));
        this.player_material_gears = playerMaterialGearList.ToArray();
        SMManager.UpdateList<PlayerMaterialGear>(this.player_material_gears);
        List<PlayerItem> playerItemList = new List<PlayerItem>();
        foreach (object json2 in (List<object>) json[nameof (player_items)])
          playerItemList.Add(json2 == null ? (PlayerItem) null : new PlayerItem((Dictionary<string, object>) json2));
        this.player_items = playerItemList.ToArray();
        SMManager.UpdateList<PlayerItem>(this.player_items);
        List<PlayerUnit> playerUnitList = new List<PlayerUnit>();
        foreach (object json3 in (List<object>) json[nameof (player_units)])
          playerUnitList.Add(json3 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json3));
        this.player_units = playerUnitList.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_units);
        this.player = json[nameof (player)] == null ? (Player) null : new Player((Dictionary<string, object>) json[nameof (player)]);
        SMManager.Change<Player>(this.player);
        this.reisou_jewel = (int) (long) json[nameof (reisou_jewel)];
        List<PlayerCustomDeck> playerCustomDeckList = new List<PlayerCustomDeck>();
        foreach (object json4 in (List<object>) json[nameof (player_custom_decks)])
          playerCustomDeckList.Add(json4 == null ? (PlayerCustomDeck) null : new PlayerCustomDeck((Dictionary<string, object>) json4));
        this.player_custom_decks = playerCustomDeckList.ToArray();
        SMManager.UpdateList<PlayerCustomDeck>(this.player_custom_decks);
        if (json.ContainsKey("player_material_gears:delete"))
          SMManager.DeleteList<PlayerMaterialGear>(((IEnumerable<object>) json["player_material_gears:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
        if (!json.ContainsKey("player_items:delete"))
          return;
        SMManager.DeleteList<PlayerItem>(((IEnumerable<object>) json["player_items:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class ItemGearPoweredRepair : KeyCompare
    {
      public Player player;
      public PlayerItem[] player_items;
      public WebAPI.Response.ItemGearPoweredRepairRepair_results[] repair_results;
      public PlayerUnit[] player_units;

      public ItemGearPoweredRepair()
      {
      }

      public ItemGearPoweredRepair(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.player = json[nameof (player)] == null ? (Player) null : new Player((Dictionary<string, object>) json[nameof (player)]);
        SMManager.Change<Player>(this.player);
        List<PlayerItem> playerItemList = new List<PlayerItem>();
        foreach (object json1 in (List<object>) json[nameof (player_items)])
          playerItemList.Add(json1 == null ? (PlayerItem) null : new PlayerItem((Dictionary<string, object>) json1));
        this.player_items = playerItemList.ToArray();
        SMManager.UpdateList<PlayerItem>(this.player_items);
        List<WebAPI.Response.ItemGearPoweredRepairRepair_results> repairRepairResultsList = new List<WebAPI.Response.ItemGearPoweredRepairRepair_results>();
        foreach (object json2 in (List<object>) json[nameof (repair_results)])
          repairRepairResultsList.Add(json2 == null ? (WebAPI.Response.ItemGearPoweredRepairRepair_results) null : new WebAPI.Response.ItemGearPoweredRepairRepair_results((Dictionary<string, object>) json2));
        this.repair_results = repairRepairResultsList.ToArray();
        List<PlayerUnit> playerUnitList = new List<PlayerUnit>();
        foreach (object json3 in (List<object>) json[nameof (player_units)])
          playerUnitList.Add(json3 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json3));
        this.player_units = playerUnitList.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_units);
        if (!json.ContainsKey("player_items:delete"))
          return;
        SMManager.DeleteList<PlayerItem>(((IEnumerable<object>) json["player_items:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class ItemGearPoweredRepairRepair_results : KeyCompare
    {
      public int status;
      public int player_gear_id;

      public ItemGearPoweredRepairRepair_results()
      {
      }

      public ItemGearPoweredRepairRepair_results(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.status = (int) (long) json[nameof (status)];
        this.player_gear_id = (int) (long) json[nameof (player_gear_id)];
      }
    }

    [Serializable]
    public class ItemGearReisouCreation : KeyCompare
    {
      public Player player;
      public PlayerItem[] player_items;

      public ItemGearReisouCreation()
      {
      }

      public ItemGearReisouCreation(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.player = json[nameof (player)] == null ? (Player) null : new Player((Dictionary<string, object>) json[nameof (player)]);
        SMManager.Change<Player>(this.player);
        List<PlayerItem> playerItemList = new List<PlayerItem>();
        foreach (object json1 in (List<object>) json[nameof (player_items)])
          playerItemList.Add(json1 == null ? (PlayerItem) null : new PlayerItem((Dictionary<string, object>) json1));
        this.player_items = playerItemList.ToArray();
        SMManager.UpdateList<PlayerItem>(this.player_items);
      }
    }

    [Serializable]
    public class ItemGearReisouEquip : KeyCompare
    {
      public Player player;
      public PlayerItem[] player_items;

      public ItemGearReisouEquip()
      {
      }

      public ItemGearReisouEquip(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.player = json[nameof (player)] == null ? (Player) null : new Player((Dictionary<string, object>) json[nameof (player)]);
        SMManager.Change<Player>(this.player);
        List<PlayerItem> playerItemList = new List<PlayerItem>();
        foreach (object json1 in (List<object>) json[nameof (player_items)])
          playerItemList.Add(json1 == null ? (PlayerItem) null : new PlayerItem((Dictionary<string, object>) json1));
        this.player_items = playerItemList.ToArray();
        SMManager.UpdateList<PlayerItem>(this.player_items);
      }
    }

    [Serializable]
    public class ItemGearReisouFusion : KeyCompare
    {
      public PlayerMythologyGearStatus[] player_mythology_gear_statuses;
      public Player player;
      public PlayerItem[] player_items;
      public PlayerCustomDeck[] player_custom_decks;

      public ItemGearReisouFusion()
      {
      }

      public ItemGearReisouFusion(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerMythologyGearStatus> mythologyGearStatusList = new List<PlayerMythologyGearStatus>();
        foreach (object json1 in (List<object>) json[nameof (player_mythology_gear_statuses)])
          mythologyGearStatusList.Add(json1 == null ? (PlayerMythologyGearStatus) null : new PlayerMythologyGearStatus((Dictionary<string, object>) json1));
        this.player_mythology_gear_statuses = mythologyGearStatusList.ToArray();
        SMManager.UpdateList<PlayerMythologyGearStatus>(this.player_mythology_gear_statuses);
        this.player = json[nameof (player)] == null ? (Player) null : new Player((Dictionary<string, object>) json[nameof (player)]);
        SMManager.Change<Player>(this.player);
        List<PlayerItem> playerItemList = new List<PlayerItem>();
        foreach (object json2 in (List<object>) json[nameof (player_items)])
          playerItemList.Add(json2 == null ? (PlayerItem) null : new PlayerItem((Dictionary<string, object>) json2));
        this.player_items = playerItemList.ToArray();
        SMManager.UpdateList<PlayerItem>(this.player_items);
        List<PlayerCustomDeck> playerCustomDeckList = new List<PlayerCustomDeck>();
        foreach (object json3 in (List<object>) json[nameof (player_custom_decks)])
          playerCustomDeckList.Add(json3 == null ? (PlayerCustomDeck) null : new PlayerCustomDeck((Dictionary<string, object>) json3));
        this.player_custom_decks = playerCustomDeckList.ToArray();
        SMManager.UpdateList<PlayerCustomDeck>(this.player_custom_decks);
        if (!json.ContainsKey("player_items:delete"))
          return;
        SMManager.DeleteList<PlayerItem>(((IEnumerable<object>) json["player_items:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class ItemGearRepair : KeyCompare
    {
      public PlayerItem[] player_items;
      public PlayerUnit[] player_units;
      public WebAPI.Response.ItemGearRepairRepair_results[] repair_results;
      public Player player;
      public PlayerCustomDeck[] player_custom_decks;

      public ItemGearRepair()
      {
      }

      public ItemGearRepair(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerItem> playerItemList = new List<PlayerItem>();
        foreach (object json1 in (List<object>) json[nameof (player_items)])
          playerItemList.Add(json1 == null ? (PlayerItem) null : new PlayerItem((Dictionary<string, object>) json1));
        this.player_items = playerItemList.ToArray();
        SMManager.UpdateList<PlayerItem>(this.player_items);
        List<PlayerUnit> playerUnitList = new List<PlayerUnit>();
        foreach (object json2 in (List<object>) json[nameof (player_units)])
          playerUnitList.Add(json2 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json2));
        this.player_units = playerUnitList.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_units);
        List<WebAPI.Response.ItemGearRepairRepair_results> repairRepairResultsList = new List<WebAPI.Response.ItemGearRepairRepair_results>();
        foreach (object json3 in (List<object>) json[nameof (repair_results)])
          repairRepairResultsList.Add(json3 == null ? (WebAPI.Response.ItemGearRepairRepair_results) null : new WebAPI.Response.ItemGearRepairRepair_results((Dictionary<string, object>) json3));
        this.repair_results = repairRepairResultsList.ToArray();
        this.player = json[nameof (player)] == null ? (Player) null : new Player((Dictionary<string, object>) json[nameof (player)]);
        SMManager.Change<Player>(this.player);
        List<PlayerCustomDeck> playerCustomDeckList = new List<PlayerCustomDeck>();
        foreach (object json4 in (List<object>) json[nameof (player_custom_decks)])
          playerCustomDeckList.Add(json4 == null ? (PlayerCustomDeck) null : new PlayerCustomDeck((Dictionary<string, object>) json4));
        this.player_custom_decks = playerCustomDeckList.ToArray();
        SMManager.UpdateList<PlayerCustomDeck>(this.player_custom_decks);
        if (!json.ContainsKey("player_items:delete"))
          return;
        SMManager.DeleteList<PlayerItem>(((IEnumerable<object>) json["player_items:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class ItemGearRepairRepair_results : KeyCompare
    {
      public int status;
      public int player_gear_id;

      public ItemGearRepairRepair_results()
      {
      }

      public ItemGearRepairRepair_results(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.status = (int) (long) json[nameof (status)];
        this.player_gear_id = (int) (long) json[nameof (player_gear_id)];
      }
    }

    [Serializable]
    public class ItemGearRepairList : KeyCompare
    {
      public PlayerItem[] player_items;
      public PlayerUnit[] player_units;
      public WebAPI.Response.ItemGearRepairListRepair_results[] repair_results;
      public Player player;
      public PlayerCustomDeck[] player_custom_decks;

      public ItemGearRepairList()
      {
      }

      public ItemGearRepairList(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerItem> playerItemList = new List<PlayerItem>();
        foreach (object json1 in (List<object>) json[nameof (player_items)])
          playerItemList.Add(json1 == null ? (PlayerItem) null : new PlayerItem((Dictionary<string, object>) json1));
        this.player_items = playerItemList.ToArray();
        SMManager.UpdateList<PlayerItem>(this.player_items);
        List<PlayerUnit> playerUnitList = new List<PlayerUnit>();
        foreach (object json2 in (List<object>) json[nameof (player_units)])
          playerUnitList.Add(json2 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json2));
        this.player_units = playerUnitList.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_units);
        List<WebAPI.Response.ItemGearRepairListRepair_results> listRepairResultsList = new List<WebAPI.Response.ItemGearRepairListRepair_results>();
        foreach (object json3 in (List<object>) json[nameof (repair_results)])
          listRepairResultsList.Add(json3 == null ? (WebAPI.Response.ItemGearRepairListRepair_results) null : new WebAPI.Response.ItemGearRepairListRepair_results((Dictionary<string, object>) json3));
        this.repair_results = listRepairResultsList.ToArray();
        this.player = json[nameof (player)] == null ? (Player) null : new Player((Dictionary<string, object>) json[nameof (player)]);
        SMManager.Change<Player>(this.player);
        List<PlayerCustomDeck> playerCustomDeckList = new List<PlayerCustomDeck>();
        foreach (object json4 in (List<object>) json[nameof (player_custom_decks)])
          playerCustomDeckList.Add(json4 == null ? (PlayerCustomDeck) null : new PlayerCustomDeck((Dictionary<string, object>) json4));
        this.player_custom_decks = playerCustomDeckList.ToArray();
        SMManager.UpdateList<PlayerCustomDeck>(this.player_custom_decks);
        if (!json.ContainsKey("player_items:delete"))
          return;
        SMManager.DeleteList<PlayerItem>(((IEnumerable<object>) json["player_items:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class ItemGearRepairListRepair_results : KeyCompare
    {
      public int status;
      public int player_gear_id;

      public ItemGearRepairListRepair_results()
      {
      }

      public ItemGearRepairListRepair_results(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.status = (int) (long) json[nameof (status)];
        this.player_gear_id = (int) (long) json[nameof (player_gear_id)];
      }
    }

    [Serializable]
    public class ItemSell : KeyCompare
    {
      public PlayerMaterialGear[] player_material_gears;
      public PlayerItem[] player_items;
      public Player player;
      public PlayerCustomDeck[] player_custom_decks;

      public ItemSell()
      {
      }

      public ItemSell(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerMaterialGear> playerMaterialGearList = new List<PlayerMaterialGear>();
        foreach (object json1 in (List<object>) json[nameof (player_material_gears)])
          playerMaterialGearList.Add(json1 == null ? (PlayerMaterialGear) null : new PlayerMaterialGear((Dictionary<string, object>) json1));
        this.player_material_gears = playerMaterialGearList.ToArray();
        SMManager.UpdateList<PlayerMaterialGear>(this.player_material_gears);
        List<PlayerItem> playerItemList = new List<PlayerItem>();
        foreach (object json2 in (List<object>) json[nameof (player_items)])
          playerItemList.Add(json2 == null ? (PlayerItem) null : new PlayerItem((Dictionary<string, object>) json2));
        this.player_items = playerItemList.ToArray();
        SMManager.UpdateList<PlayerItem>(this.player_items);
        this.player = json[nameof (player)] == null ? (Player) null : new Player((Dictionary<string, object>) json[nameof (player)]);
        SMManager.Change<Player>(this.player);
        List<PlayerCustomDeck> playerCustomDeckList = new List<PlayerCustomDeck>();
        foreach (object json3 in (List<object>) json[nameof (player_custom_decks)])
          playerCustomDeckList.Add(json3 == null ? (PlayerCustomDeck) null : new PlayerCustomDeck((Dictionary<string, object>) json3));
        this.player_custom_decks = playerCustomDeckList.ToArray();
        SMManager.UpdateList<PlayerCustomDeck>(this.player_custom_decks);
        if (json.ContainsKey("player_material_gears:delete"))
          SMManager.DeleteList<PlayerMaterialGear>(((IEnumerable<object>) json["player_material_gears:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
        if (!json.ContainsKey("player_items:delete"))
          return;
        SMManager.DeleteList<PlayerItem>(((IEnumerable<object>) json["player_items:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class ItemSupplyDeckEdit : KeyCompare
    {
      public Player player;
      public PlayerItem[] player_items;

      public ItemSupplyDeckEdit()
      {
      }

      public ItemSupplyDeckEdit(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.player = json[nameof (player)] == null ? (Player) null : new Player((Dictionary<string, object>) json[nameof (player)]);
        SMManager.Change<Player>(this.player);
        List<PlayerItem> playerItemList = new List<PlayerItem>();
        foreach (object json1 in (List<object>) json[nameof (player_items)])
          playerItemList.Add(json1 == null ? (PlayerItem) null : new PlayerItem((Dictionary<string, object>) json1));
        this.player_items = playerItemList.ToArray();
        SMManager.UpdateList<PlayerItem>(this.player_items);
        if (!json.ContainsKey("player_items:delete"))
          return;
        SMManager.DeleteList<PlayerItem>(((IEnumerable<object>) json["player_items:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class LoginbonusFill : KeyCompare
    {
      public bool has_fillable_loginbonus;
      public PlayerPresent[] player_presents;
      public WebAPI.Response.LoginbonusFillReceived_reward received_reward;

      public LoginbonusFill()
      {
      }

      public LoginbonusFill(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.has_fillable_loginbonus = (bool) json[nameof (has_fillable_loginbonus)];
        List<PlayerPresent> playerPresentList = new List<PlayerPresent>();
        foreach (object json1 in (List<object>) json[nameof (player_presents)])
          playerPresentList.Add(json1 == null ? (PlayerPresent) null : new PlayerPresent((Dictionary<string, object>) json1));
        this.player_presents = playerPresentList.ToArray();
        SMManager.UpdateList<PlayerPresent>(this.player_presents);
        this.received_reward = json[nameof (received_reward)] == null ? (WebAPI.Response.LoginbonusFillReceived_reward) null : new WebAPI.Response.LoginbonusFillReceived_reward((Dictionary<string, object>) json[nameof (received_reward)]);
        if (!json.ContainsKey("player_presents:delete"))
          return;
        SMManager.DeleteList<PlayerPresent>(((IEnumerable<object>) json["player_presents:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class LoginbonusFillReceived_reward : KeyCompare
    {
      public int reward_quantity;
      public int reward_type_id;
      public int? reward_id;

      public LoginbonusFillReceived_reward()
      {
      }

      public LoginbonusFillReceived_reward(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_quantity = (int) (long) json[nameof (reward_quantity)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
        int? nullable1;
        if (json[nameof (reward_id)] != null)
        {
          long? nullable2 = (long?) json[nameof (reward_id)];
          nullable1 = nullable2.HasValue ? new int?((int) nullable2.GetValueOrDefault()) : new int?();
        }
        else
          nullable1 = new int?();
        this.reward_id = nullable1;
      }
    }

    [Serializable]
    public class LoginbonusTop : KeyCompare
    {
      public int[] received_reward_days;
      public int total_login_days;
      public int login_bonus_id;
      public int max_fill_count;
      public int remain_fill_count;

      public LoginbonusTop()
      {
      }

      public LoginbonusTop(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.received_reward_days = ((IEnumerable<object>) json[nameof (received_reward_days)]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).ToArray<int>();
        this.total_login_days = (int) (long) json[nameof (total_login_days)];
        this.login_bonus_id = (int) (long) json[nameof (login_bonus_id)];
        this.max_fill_count = (int) (long) json[nameof (max_fill_count)];
        this.remain_fill_count = (int) (long) json[nameof (remain_fill_count)];
      }
    }

    [Serializable]
    public class Officialinfo : KeyCompare
    {
      public OfficialInformationArticle[] articles;

      public Officialinfo()
      {
      }

      public Officialinfo(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<OfficialInformationArticle> informationArticleList = new List<OfficialInformationArticle>();
        foreach (object json1 in (List<object>) json[nameof (articles)])
          informationArticleList.Add(json1 == null ? (OfficialInformationArticle) null : new OfficialInformationArticle((Dictionary<string, object>) json1));
        this.articles = informationArticleList.ToArray();
        SMManager.UpdateList<OfficialInformationArticle>(this.articles);
      }
    }

    [Serializable]
    public class OfficialinfoMaintenance : KeyCompare
    {
      public string message_body;
      public bool hardware_maintenance;
      public bool is_maintenance;
      public string message_schedule;

      public OfficialinfoMaintenance()
      {
      }

      public OfficialinfoMaintenance(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.message_body = (string) json[nameof (message_body)];
        this.hardware_maintenance = (bool) json[nameof (hardware_maintenance)];
        this.is_maintenance = (bool) json[nameof (is_maintenance)];
        this.message_schedule = (string) json[nameof (message_schedule)];
      }
    }

    [Serializable]
    public class PaymentbonusList : KeyCompare
    {
      public PlayerPaymentBonusReceiveHistory[] paymentbonus_list;
      public int spend_coins;
      public PaymentBonusPeriod period;

      public PaymentbonusList()
      {
      }

      public PaymentbonusList(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerPaymentBonusReceiveHistory> bonusReceiveHistoryList = new List<PlayerPaymentBonusReceiveHistory>();
        foreach (object json1 in (List<object>) json[nameof (paymentbonus_list)])
          bonusReceiveHistoryList.Add(json1 == null ? (PlayerPaymentBonusReceiveHistory) null : new PlayerPaymentBonusReceiveHistory((Dictionary<string, object>) json1));
        this.paymentbonus_list = bonusReceiveHistoryList.ToArray();
        this.spend_coins = (int) (long) json[nameof (spend_coins)];
        this.period = json[nameof (period)] == null ? (PaymentBonusPeriod) null : new PaymentBonusPeriod((Dictionary<string, object>) json[nameof (period)]);
      }
    }

    [Serializable]
    public class PaymentbonusReceive : KeyCompare
    {
      public bool has_receivable_paymentbonus;
      public PlayerPaymentBonusReceiveHistory[] paymentbonus_list;
      public int spend_coins;
      public PaymentBonusPeriod period;
      public PlayerPresent[] player_presents;

      public PaymentbonusReceive()
      {
      }

      public PaymentbonusReceive(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.has_receivable_paymentbonus = (bool) json[nameof (has_receivable_paymentbonus)];
        List<PlayerPaymentBonusReceiveHistory> bonusReceiveHistoryList = new List<PlayerPaymentBonusReceiveHistory>();
        foreach (object json1 in (List<object>) json[nameof (paymentbonus_list)])
          bonusReceiveHistoryList.Add(json1 == null ? (PlayerPaymentBonusReceiveHistory) null : new PlayerPaymentBonusReceiveHistory((Dictionary<string, object>) json1));
        this.paymentbonus_list = bonusReceiveHistoryList.ToArray();
        this.spend_coins = (int) (long) json[nameof (spend_coins)];
        this.period = json[nameof (period)] == null ? (PaymentBonusPeriod) null : new PaymentBonusPeriod((Dictionary<string, object>) json[nameof (period)]);
        List<PlayerPresent> playerPresentList = new List<PlayerPresent>();
        foreach (object json2 in (List<object>) json[nameof (player_presents)])
          playerPresentList.Add(json2 == null ? (PlayerPresent) null : new PlayerPresent((Dictionary<string, object>) json2));
        this.player_presents = playerPresentList.ToArray();
        SMManager.UpdateList<PlayerPresent>(this.player_presents);
      }
    }

    [Serializable]
    public class PlayerBoot : KeyCompare
    {
      public string application_download_url;
      public bool application_review;
      public string battle_uuid;
      public int continue_count;
      public string dlc_latest_version;
      public bool during_retry_gacha;
      public string game_server_host;
      public int game_server_port;
      public bool is_end_service;
      public bool latest_application;
      public bool player_during_battle;
      public bool player_during_corps_battle;
      public bool player_during_pvp;
      public bool player_during_pvp_result;
      public bool player_during_raid_battle;
      public bool player_during_sea_battle;
      public bool player_during_sea_date;
      public bool player_during_tower_battle;
      public bool player_is_create;
      public string pvp_battle_uuid;
      public string pvp_token;
      public bool sea_is_opened;

      public PlayerBoot()
      {
      }

      public PlayerBoot(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.application_download_url = (string) json[nameof (application_download_url)];
        this.application_review = (bool) json[nameof (application_review)];
        this.battle_uuid = (string) json[nameof (battle_uuid)];
        this.continue_count = (int) (long) json[nameof (continue_count)];
        this.dlc_latest_version = (string) json[nameof (dlc_latest_version)];
        this.during_retry_gacha = (bool) json[nameof (during_retry_gacha)];
        this.game_server_host = (string) json[nameof (game_server_host)];
        this.game_server_port = (int) (long) json[nameof (game_server_port)];
        this.is_end_service = (bool) json[nameof (is_end_service)];
        this.latest_application = (bool) json[nameof (latest_application)];
        this.player_during_battle = (bool) json[nameof (player_during_battle)];
        this.player_during_corps_battle = (bool) json[nameof (player_during_corps_battle)];
        this.player_during_pvp = (bool) json[nameof (player_during_pvp)];
        this.player_during_pvp_result = (bool) json[nameof (player_during_pvp_result)];
        this.player_during_raid_battle = (bool) json[nameof (player_during_raid_battle)];
        this.player_during_sea_battle = (bool) json[nameof (player_during_sea_battle)];
        this.player_during_sea_date = (bool) json[nameof (player_during_sea_date)];
        this.player_during_tower_battle = (bool) json[nameof (player_during_tower_battle)];
        this.player_is_create = (bool) json[nameof (player_is_create)];
        this.pvp_battle_uuid = (string) json[nameof (pvp_battle_uuid)];
        this.pvp_token = (string) json[nameof (pvp_token)];
        this.sea_is_opened = (bool) json[nameof (sea_is_opened)];
      }
    }

    [Serializable]
    public class PlayerBootRelease : KeyCompare
    {
      public string application_download_url;
      public bool application_review;
      public string battle_uuid;
      public int continue_count;
      public string dlc_latest_version;
      public bool during_retry_gacha;
      public string game_server_host;
      public int game_server_port;
      public bool is_end_service;
      public bool latest_application;
      public bool player_during_battle;
      public bool player_during_corps_battle;
      public bool player_during_pvp;
      public bool player_during_pvp_result;
      public bool player_during_raid_battle;
      public bool player_during_sea_battle;
      public bool player_during_sea_date;
      public bool player_during_tower_battle;
      public bool player_is_create;
      public string pvp_battle_uuid;
      public string pvp_token;
      public bool sea_is_opened;

      public PlayerBootRelease()
      {
      }

      public PlayerBootRelease(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.application_download_url = (string) json[nameof (application_download_url)];
        this.application_review = (bool) json[nameof (application_review)];
        this.battle_uuid = (string) json[nameof (battle_uuid)];
        this.continue_count = (int) (long) json[nameof (continue_count)];
        this.dlc_latest_version = (string) json[nameof (dlc_latest_version)];
        this.during_retry_gacha = (bool) json[nameof (during_retry_gacha)];
        this.game_server_host = (string) json[nameof (game_server_host)];
        this.game_server_port = (int) (long) json[nameof (game_server_port)];
        this.is_end_service = (bool) json[nameof (is_end_service)];
        this.latest_application = (bool) json[nameof (latest_application)];
        this.player_during_battle = (bool) json[nameof (player_during_battle)];
        this.player_during_corps_battle = (bool) json[nameof (player_during_corps_battle)];
        this.player_during_pvp = (bool) json[nameof (player_during_pvp)];
        this.player_during_pvp_result = (bool) json[nameof (player_during_pvp_result)];
        this.player_during_raid_battle = (bool) json[nameof (player_during_raid_battle)];
        this.player_during_sea_battle = (bool) json[nameof (player_during_sea_battle)];
        this.player_during_sea_date = (bool) json[nameof (player_during_sea_date)];
        this.player_during_tower_battle = (bool) json[nameof (player_during_tower_battle)];
        this.player_is_create = (bool) json[nameof (player_is_create)];
        this.pvp_battle_uuid = (string) json[nameof (pvp_battle_uuid)];
        this.pvp_token = (string) json[nameof (pvp_token)];
        this.sea_is_opened = (bool) json[nameof (sea_is_opened)];
      }
    }

    [Serializable]
    public class PlayerCommentEdit : KeyCompare
    {
      public Player player;

      public PlayerCommentEdit()
      {
      }

      public PlayerCommentEdit(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.player = json[nameof (player)] == null ? (Player) null : new Player((Dictionary<string, object>) json[nameof (player)]);
        SMManager.Change<Player>(this.player);
      }
    }

    [Serializable]
    public class PlayerDisplayPvpHistoryEdit : KeyCompare
    {
      public DisplayPvPHistory player_detail_pvp_history;

      public PlayerDisplayPvpHistoryEdit()
      {
      }

      public PlayerDisplayPvpHistoryEdit(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.player_detail_pvp_history = json[nameof (player_detail_pvp_history)] == null ? (DisplayPvPHistory) null : new DisplayPvPHistory((Dictionary<string, object>) json[nameof (player_detail_pvp_history)]);
        SMManager.Change<DisplayPvPHistory>(this.player_detail_pvp_history);
      }
    }

    [Serializable]
    public class PlayerHelpers : KeyCompare
    {
      public PlayerHelper[] player_helpers;

      public PlayerHelpers()
      {
      }

      public PlayerHelpers(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerHelper> playerHelperList = new List<PlayerHelper>();
        foreach (object json1 in (List<object>) json[nameof (player_helpers)])
          playerHelperList.Add(json1 == null ? (PlayerHelper) null : new PlayerHelper((Dictionary<string, object>) json1));
        this.player_helpers = playerHelperList.ToArray();
        SMManager.UpdateList<PlayerHelper>(this.player_helpers);
      }
    }

    [Serializable]
    public class PlayerLightUserData : KeyCompare
    {
      public PlayerItem[] player_items;
      public PlayerUnit[] player_units;

      public PlayerLightUserData()
      {
      }

      public PlayerLightUserData(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerItem> playerItemList = new List<PlayerItem>();
        foreach (object json1 in (List<object>) json[nameof (player_items)])
          playerItemList.Add(json1 == null ? (PlayerItem) null : new PlayerItem((Dictionary<string, object>) json1));
        this.player_items = playerItemList.ToArray();
        SMManager.UpdateList<PlayerItem>(this.player_items);
        List<PlayerUnit> playerUnitList = new List<PlayerUnit>();
        foreach (object json2 in (List<object>) json[nameof (player_units)])
          playerUnitList.Add(json2 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json2));
        this.player_units = playerUnitList.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_units);
      }
    }

    [Serializable]
    public class PlayerNameEdit : KeyCompare
    {
      public Player player;

      public PlayerNameEdit()
      {
      }

      public PlayerNameEdit(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.player = json[nameof (player)] == null ? (Player) null : new Player((Dictionary<string, object>) json[nameof (player)]);
        SMManager.Change<Player>(this.player);
      }
    }

    [Serializable]
    public class PlayerSearch : KeyCompare
    {
      public PlayerUnit target_leader_unit;
      public PlayerHelper target_player_helper;
      public Player target_player;

      public PlayerSearch()
      {
      }

      public PlayerSearch(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.target_leader_unit = json[nameof (target_leader_unit)] == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json[nameof (target_leader_unit)]);
        this.target_player_helper = json[nameof (target_player_helper)] == null ? (PlayerHelper) null : new PlayerHelper((Dictionary<string, object>) json[nameof (target_player_helper)]);
        this.target_player = json[nameof (target_player)] == null ? (Player) null : new Player((Dictionary<string, object>) json[nameof (target_player)]);
      }
    }

    [Serializable]
    public class PlayerSignin : KeyCompare
    {
      public PlayerLoginBonus[] player_loginbonuses;
      public DateTime last_signed_in_at;
      public PlayerPresent[] player_presents;

      public PlayerSignin()
      {
      }

      public PlayerSignin(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerLoginBonus> playerLoginBonusList = new List<PlayerLoginBonus>();
        foreach (object json1 in (List<object>) json[nameof (player_loginbonuses)])
          playerLoginBonusList.Add(json1 == null ? (PlayerLoginBonus) null : new PlayerLoginBonus((Dictionary<string, object>) json1));
        this.player_loginbonuses = playerLoginBonusList.ToArray();
        this.last_signed_in_at = DateTime.Parse((string) json[nameof (last_signed_in_at)]);
        List<PlayerPresent> playerPresentList = new List<PlayerPresent>();
        foreach (object json2 in (List<object>) json[nameof (player_presents)])
          playerPresentList.Add(json2 == null ? (PlayerPresent) null : new PlayerPresent((Dictionary<string, object>) json2));
        this.player_presents = playerPresentList.ToArray();
        SMManager.UpdateList<PlayerPresent>(this.player_presents);
        if (!json.ContainsKey("player_presents:delete"))
          return;
        SMManager.DeleteList<PlayerPresent>(((IEnumerable<object>) json["player_presents:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class PlayerSignup : KeyCompare
    {
      public bool is_created;

      public PlayerSignup()
      {
      }

      public PlayerSignup(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.is_created = (bool) json[nameof (is_created)];
      }
    }

    [Serializable]
    public class PlayerStatus : KeyCompare
    {
      public bool is_started;

      public PlayerStatus()
      {
      }

      public PlayerStatus(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.is_started = (bool) json[nameof (is_started)];
      }
    }

    [Serializable]
    public class PresentDelete : KeyCompare
    {
      public PlayerPresent[] player_presents;

      public PresentDelete()
      {
      }

      public PresentDelete(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerPresent> playerPresentList = new List<PlayerPresent>();
        foreach (object json1 in (List<object>) json[nameof (player_presents)])
          playerPresentList.Add(json1 == null ? (PlayerPresent) null : new PlayerPresent((Dictionary<string, object>) json1));
        this.player_presents = playerPresentList.ToArray();
        SMManager.UpdateList<PlayerPresent>(this.player_presents);
        if (!json.ContainsKey("player_presents:delete"))
          return;
        SMManager.DeleteList<PlayerPresent>(((IEnumerable<object>) json["player_presents:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class PresentRead : KeyCompare
    {
      public PlayerGuildFacility[] guild_facilities;
      public PlayerGuildTown[] guild_towns;
      public bool is_success;
      public Player player;
      public PlayerAffiliation player_affiliation;
      public PlayerAwakeSkill[] player_awake_skills;
      public PlayerCommonTicket[] player_common_tickets;
      public PlayerItem[] player_items;
      public PlayerMaterialGear[] player_material_gears;
      public PlayerMaterialUnit[] player_material_units;
      public PlayerPresent[] player_presents;
      public PlayerQuestKey[] player_quest_keys;
      public PlayerRecoveryItem[] player_recovery_items;
      public PlayerSeasonTicket[] player_season_tickets;
      public PlayerUnitTypeTicket[] player_unit_type_tickets;
      public PlayerUnit[] player_units;
      public WebAPI.Response.PresentReadReceived_presents[] received_presents;
      public SeaPlayer sea_player;
      public PlayerSelectTicketSummary[] select_tickets;
      public UnlockQuest[] unlock_quests;

      public PresentRead()
      {
      }

      public PresentRead(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerGuildFacility> playerGuildFacilityList = new List<PlayerGuildFacility>();
        foreach (object json1 in (List<object>) json[nameof (guild_facilities)])
          playerGuildFacilityList.Add(json1 == null ? (PlayerGuildFacility) null : new PlayerGuildFacility((Dictionary<string, object>) json1));
        this.guild_facilities = playerGuildFacilityList.ToArray();
        SMManager.UpdateList<PlayerGuildFacility>(this.guild_facilities);
        List<PlayerGuildTown> playerGuildTownList = new List<PlayerGuildTown>();
        foreach (object json2 in (List<object>) json[nameof (guild_towns)])
          playerGuildTownList.Add(json2 == null ? (PlayerGuildTown) null : new PlayerGuildTown((Dictionary<string, object>) json2));
        this.guild_towns = playerGuildTownList.ToArray();
        SMManager.UpdateList<PlayerGuildTown>(this.guild_towns);
        this.is_success = (bool) json[nameof (is_success)];
        this.player = json[nameof (player)] == null ? (Player) null : new Player((Dictionary<string, object>) json[nameof (player)]);
        SMManager.Change<Player>(this.player);
        this.player_affiliation = json[nameof (player_affiliation)] == null ? (PlayerAffiliation) null : new PlayerAffiliation((Dictionary<string, object>) json[nameof (player_affiliation)]);
        SMManager.Change<PlayerAffiliation>(this.player_affiliation);
        List<PlayerAwakeSkill> playerAwakeSkillList = new List<PlayerAwakeSkill>();
        foreach (object json3 in (List<object>) json[nameof (player_awake_skills)])
          playerAwakeSkillList.Add(json3 == null ? (PlayerAwakeSkill) null : new PlayerAwakeSkill((Dictionary<string, object>) json3));
        this.player_awake_skills = playerAwakeSkillList.ToArray();
        SMManager.UpdateList<PlayerAwakeSkill>(this.player_awake_skills);
        List<PlayerCommonTicket> playerCommonTicketList = new List<PlayerCommonTicket>();
        foreach (object json4 in (List<object>) json[nameof (player_common_tickets)])
          playerCommonTicketList.Add(json4 == null ? (PlayerCommonTicket) null : new PlayerCommonTicket((Dictionary<string, object>) json4));
        this.player_common_tickets = playerCommonTicketList.ToArray();
        SMManager.UpdateList<PlayerCommonTicket>(this.player_common_tickets);
        List<PlayerItem> playerItemList = new List<PlayerItem>();
        foreach (object json5 in (List<object>) json[nameof (player_items)])
          playerItemList.Add(json5 == null ? (PlayerItem) null : new PlayerItem((Dictionary<string, object>) json5));
        this.player_items = playerItemList.ToArray();
        SMManager.UpdateList<PlayerItem>(this.player_items);
        List<PlayerMaterialGear> playerMaterialGearList = new List<PlayerMaterialGear>();
        foreach (object json6 in (List<object>) json[nameof (player_material_gears)])
          playerMaterialGearList.Add(json6 == null ? (PlayerMaterialGear) null : new PlayerMaterialGear((Dictionary<string, object>) json6));
        this.player_material_gears = playerMaterialGearList.ToArray();
        SMManager.UpdateList<PlayerMaterialGear>(this.player_material_gears);
        List<PlayerMaterialUnit> playerMaterialUnitList = new List<PlayerMaterialUnit>();
        foreach (object json7 in (List<object>) json[nameof (player_material_units)])
          playerMaterialUnitList.Add(json7 == null ? (PlayerMaterialUnit) null : new PlayerMaterialUnit((Dictionary<string, object>) json7));
        this.player_material_units = playerMaterialUnitList.ToArray();
        SMManager.UpdateList<PlayerMaterialUnit>(this.player_material_units);
        List<PlayerPresent> playerPresentList = new List<PlayerPresent>();
        foreach (object json8 in (List<object>) json[nameof (player_presents)])
          playerPresentList.Add(json8 == null ? (PlayerPresent) null : new PlayerPresent((Dictionary<string, object>) json8));
        this.player_presents = playerPresentList.ToArray();
        SMManager.UpdateList<PlayerPresent>(this.player_presents);
        List<PlayerQuestKey> playerQuestKeyList = new List<PlayerQuestKey>();
        foreach (object json9 in (List<object>) json[nameof (player_quest_keys)])
          playerQuestKeyList.Add(json9 == null ? (PlayerQuestKey) null : new PlayerQuestKey((Dictionary<string, object>) json9));
        this.player_quest_keys = playerQuestKeyList.ToArray();
        SMManager.UpdateList<PlayerQuestKey>(this.player_quest_keys);
        List<PlayerRecoveryItem> playerRecoveryItemList = new List<PlayerRecoveryItem>();
        foreach (object json10 in (List<object>) json[nameof (player_recovery_items)])
          playerRecoveryItemList.Add(json10 == null ? (PlayerRecoveryItem) null : new PlayerRecoveryItem((Dictionary<string, object>) json10));
        this.player_recovery_items = playerRecoveryItemList.ToArray();
        SMManager.UpdateList<PlayerRecoveryItem>(this.player_recovery_items);
        List<PlayerSeasonTicket> playerSeasonTicketList = new List<PlayerSeasonTicket>();
        bool flag1 = (List<object>) json[nameof (player_season_tickets)] == null;
        if (!flag1)
        {
          foreach (object json11 in (List<object>) json[nameof (player_season_tickets)])
            playerSeasonTicketList.Add(json11 == null ? (PlayerSeasonTicket) null : new PlayerSeasonTicket((Dictionary<string, object>) json11));
        }
        this.player_season_tickets = playerSeasonTicketList.ToArray();
        if (!flag1)
          SMManager.UpdateList<PlayerSeasonTicket>(this.player_season_tickets);
        List<PlayerUnitTypeTicket> playerUnitTypeTicketList = new List<PlayerUnitTypeTicket>();
        bool flag2 = (List<object>) json[nameof (player_unit_type_tickets)] == null;
        if (!flag2)
        {
          foreach (object json12 in (List<object>) json[nameof (player_unit_type_tickets)])
            playerUnitTypeTicketList.Add(json12 == null ? (PlayerUnitTypeTicket) null : new PlayerUnitTypeTicket((Dictionary<string, object>) json12));
        }
        this.player_unit_type_tickets = playerUnitTypeTicketList.ToArray();
        if (!flag2)
          SMManager.UpdateList<PlayerUnitTypeTicket>(this.player_unit_type_tickets);
        List<PlayerUnit> playerUnitList = new List<PlayerUnit>();
        foreach (object json13 in (List<object>) json[nameof (player_units)])
          playerUnitList.Add(json13 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json13));
        this.player_units = playerUnitList.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_units);
        List<WebAPI.Response.PresentReadReceived_presents> receivedPresentsList = new List<WebAPI.Response.PresentReadReceived_presents>();
        foreach (object json14 in (List<object>) json[nameof (received_presents)])
          receivedPresentsList.Add(json14 == null ? (WebAPI.Response.PresentReadReceived_presents) null : new WebAPI.Response.PresentReadReceived_presents((Dictionary<string, object>) json14));
        this.received_presents = receivedPresentsList.ToArray();
        this.sea_player = json[nameof (sea_player)] == null ? (SeaPlayer) null : new SeaPlayer((Dictionary<string, object>) json[nameof (sea_player)]);
        SMManager.Change<SeaPlayer>(this.sea_player);
        List<PlayerSelectTicketSummary> selectTicketSummaryList = new List<PlayerSelectTicketSummary>();
        bool flag3 = (List<object>) json[nameof (select_tickets)] == null;
        if (!flag3)
        {
          foreach (object json15 in (List<object>) json[nameof (select_tickets)])
            selectTicketSummaryList.Add(json15 == null ? (PlayerSelectTicketSummary) null : new PlayerSelectTicketSummary((Dictionary<string, object>) json15));
        }
        this.select_tickets = selectTicketSummaryList.ToArray();
        if (!flag3)
          SMManager.UpdateList<PlayerSelectTicketSummary>(this.select_tickets);
        List<UnlockQuest> unlockQuestList = new List<UnlockQuest>();
        foreach (object json16 in (List<object>) json[nameof (unlock_quests)])
          unlockQuestList.Add(json16 == null ? (UnlockQuest) null : new UnlockQuest((Dictionary<string, object>) json16));
        this.unlock_quests = unlockQuestList.ToArray();
        if (!json.ContainsKey("player_presents:delete"))
          return;
        SMManager.DeleteList<PlayerPresent>(((IEnumerable<object>) json["player_presents:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class PresentReadReceived_presents : KeyCompare
    {
      public int? reward_id;
      public int reward_quantity;
      public int reward_type_id;

      public PresentReadReceived_presents()
      {
      }

      public PresentReadReceived_presents(Dictionary<string, object> json)
      {
        this._hasKey = false;
        int? nullable1;
        if (json[nameof (reward_id)] != null)
        {
          long? nullable2 = (long?) json[nameof (reward_id)];
          nullable1 = nullable2.HasValue ? new int?((int) nullable2.GetValueOrDefault()) : new int?();
        }
        else
          nullable1 = new int?();
        this.reward_id = nullable1;
        this.reward_quantity = (int) (long) json[nameof (reward_quantity)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
      }
    }

    [Serializable]
    public class PresentReadLump : KeyCompare
    {
      public PlayerGuildFacility[] guild_facilities;
      public PlayerGuildTown[] guild_towns;
      public bool is_success;
      public Player player;
      public PlayerAffiliation player_affiliation;
      public PlayerAwakeSkill[] player_awake_skills;
      public PlayerCommonTicket[] player_common_tickets;
      public PlayerItem[] player_items;
      public PlayerMaterialGear[] player_material_gears;
      public PlayerMaterialUnit[] player_material_units;
      public PlayerPresent[] player_presents;
      public PlayerQuestKey[] player_quest_keys;
      public PlayerRecoveryItem[] player_recovery_items;
      public PlayerSeasonTicket[] player_season_tickets;
      public PlayerUnitTypeTicket[] player_unit_type_tickets;
      public PlayerUnit[] player_units;
      public WebAPI.Response.PresentReadLumpReceived_presents[] received_presents;
      public PlayerSelectTicketSummary[] select_tickets;
      public UnlockQuest[] unlock_quests;

      public PresentReadLump()
      {
      }

      public PresentReadLump(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerGuildFacility> playerGuildFacilityList = new List<PlayerGuildFacility>();
        foreach (object json1 in (List<object>) json[nameof (guild_facilities)])
          playerGuildFacilityList.Add(json1 == null ? (PlayerGuildFacility) null : new PlayerGuildFacility((Dictionary<string, object>) json1));
        this.guild_facilities = playerGuildFacilityList.ToArray();
        SMManager.UpdateList<PlayerGuildFacility>(this.guild_facilities);
        List<PlayerGuildTown> playerGuildTownList = new List<PlayerGuildTown>();
        foreach (object json2 in (List<object>) json[nameof (guild_towns)])
          playerGuildTownList.Add(json2 == null ? (PlayerGuildTown) null : new PlayerGuildTown((Dictionary<string, object>) json2));
        this.guild_towns = playerGuildTownList.ToArray();
        SMManager.UpdateList<PlayerGuildTown>(this.guild_towns);
        this.is_success = (bool) json[nameof (is_success)];
        this.player = json[nameof (player)] == null ? (Player) null : new Player((Dictionary<string, object>) json[nameof (player)]);
        SMManager.Change<Player>(this.player);
        this.player_affiliation = json[nameof (player_affiliation)] == null ? (PlayerAffiliation) null : new PlayerAffiliation((Dictionary<string, object>) json[nameof (player_affiliation)]);
        SMManager.Change<PlayerAffiliation>(this.player_affiliation);
        List<PlayerAwakeSkill> playerAwakeSkillList = new List<PlayerAwakeSkill>();
        foreach (object json3 in (List<object>) json[nameof (player_awake_skills)])
          playerAwakeSkillList.Add(json3 == null ? (PlayerAwakeSkill) null : new PlayerAwakeSkill((Dictionary<string, object>) json3));
        this.player_awake_skills = playerAwakeSkillList.ToArray();
        SMManager.UpdateList<PlayerAwakeSkill>(this.player_awake_skills);
        List<PlayerCommonTicket> playerCommonTicketList = new List<PlayerCommonTicket>();
        foreach (object json4 in (List<object>) json[nameof (player_common_tickets)])
          playerCommonTicketList.Add(json4 == null ? (PlayerCommonTicket) null : new PlayerCommonTicket((Dictionary<string, object>) json4));
        this.player_common_tickets = playerCommonTicketList.ToArray();
        SMManager.UpdateList<PlayerCommonTicket>(this.player_common_tickets);
        List<PlayerItem> playerItemList = new List<PlayerItem>();
        foreach (object json5 in (List<object>) json[nameof (player_items)])
          playerItemList.Add(json5 == null ? (PlayerItem) null : new PlayerItem((Dictionary<string, object>) json5));
        this.player_items = playerItemList.ToArray();
        SMManager.UpdateList<PlayerItem>(this.player_items);
        List<PlayerMaterialGear> playerMaterialGearList = new List<PlayerMaterialGear>();
        foreach (object json6 in (List<object>) json[nameof (player_material_gears)])
          playerMaterialGearList.Add(json6 == null ? (PlayerMaterialGear) null : new PlayerMaterialGear((Dictionary<string, object>) json6));
        this.player_material_gears = playerMaterialGearList.ToArray();
        SMManager.UpdateList<PlayerMaterialGear>(this.player_material_gears);
        List<PlayerMaterialUnit> playerMaterialUnitList = new List<PlayerMaterialUnit>();
        foreach (object json7 in (List<object>) json[nameof (player_material_units)])
          playerMaterialUnitList.Add(json7 == null ? (PlayerMaterialUnit) null : new PlayerMaterialUnit((Dictionary<string, object>) json7));
        this.player_material_units = playerMaterialUnitList.ToArray();
        SMManager.UpdateList<PlayerMaterialUnit>(this.player_material_units);
        List<PlayerPresent> playerPresentList = new List<PlayerPresent>();
        foreach (object json8 in (List<object>) json[nameof (player_presents)])
          playerPresentList.Add(json8 == null ? (PlayerPresent) null : new PlayerPresent((Dictionary<string, object>) json8));
        this.player_presents = playerPresentList.ToArray();
        SMManager.UpdateList<PlayerPresent>(this.player_presents);
        List<PlayerQuestKey> playerQuestKeyList = new List<PlayerQuestKey>();
        foreach (object json9 in (List<object>) json[nameof (player_quest_keys)])
          playerQuestKeyList.Add(json9 == null ? (PlayerQuestKey) null : new PlayerQuestKey((Dictionary<string, object>) json9));
        this.player_quest_keys = playerQuestKeyList.ToArray();
        SMManager.UpdateList<PlayerQuestKey>(this.player_quest_keys);
        List<PlayerRecoveryItem> playerRecoveryItemList = new List<PlayerRecoveryItem>();
        foreach (object json10 in (List<object>) json[nameof (player_recovery_items)])
          playerRecoveryItemList.Add(json10 == null ? (PlayerRecoveryItem) null : new PlayerRecoveryItem((Dictionary<string, object>) json10));
        this.player_recovery_items = playerRecoveryItemList.ToArray();
        SMManager.UpdateList<PlayerRecoveryItem>(this.player_recovery_items);
        List<PlayerSeasonTicket> playerSeasonTicketList = new List<PlayerSeasonTicket>();
        bool flag1 = (List<object>) json[nameof (player_season_tickets)] == null;
        if (!flag1)
        {
          foreach (object json11 in (List<object>) json[nameof (player_season_tickets)])
            playerSeasonTicketList.Add(json11 == null ? (PlayerSeasonTicket) null : new PlayerSeasonTicket((Dictionary<string, object>) json11));
        }
        this.player_season_tickets = playerSeasonTicketList.ToArray();
        if (!flag1)
          SMManager.UpdateList<PlayerSeasonTicket>(this.player_season_tickets);
        List<PlayerUnitTypeTicket> playerUnitTypeTicketList = new List<PlayerUnitTypeTicket>();
        bool flag2 = (List<object>) json[nameof (player_unit_type_tickets)] == null;
        if (!flag2)
        {
          foreach (object json12 in (List<object>) json[nameof (player_unit_type_tickets)])
            playerUnitTypeTicketList.Add(json12 == null ? (PlayerUnitTypeTicket) null : new PlayerUnitTypeTicket((Dictionary<string, object>) json12));
        }
        this.player_unit_type_tickets = playerUnitTypeTicketList.ToArray();
        if (!flag2)
          SMManager.UpdateList<PlayerUnitTypeTicket>(this.player_unit_type_tickets);
        List<PlayerUnit> playerUnitList = new List<PlayerUnit>();
        foreach (object json13 in (List<object>) json[nameof (player_units)])
          playerUnitList.Add(json13 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json13));
        this.player_units = playerUnitList.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_units);
        List<WebAPI.Response.PresentReadLumpReceived_presents> receivedPresentsList = new List<WebAPI.Response.PresentReadLumpReceived_presents>();
        foreach (object json14 in (List<object>) json[nameof (received_presents)])
          receivedPresentsList.Add(json14 == null ? (WebAPI.Response.PresentReadLumpReceived_presents) null : new WebAPI.Response.PresentReadLumpReceived_presents((Dictionary<string, object>) json14));
        this.received_presents = receivedPresentsList.ToArray();
        List<PlayerSelectTicketSummary> selectTicketSummaryList = new List<PlayerSelectTicketSummary>();
        bool flag3 = (List<object>) json[nameof (select_tickets)] == null;
        if (!flag3)
        {
          foreach (object json15 in (List<object>) json[nameof (select_tickets)])
            selectTicketSummaryList.Add(json15 == null ? (PlayerSelectTicketSummary) null : new PlayerSelectTicketSummary((Dictionary<string, object>) json15));
        }
        this.select_tickets = selectTicketSummaryList.ToArray();
        if (!flag3)
          SMManager.UpdateList<PlayerSelectTicketSummary>(this.select_tickets);
        List<UnlockQuest> unlockQuestList = new List<UnlockQuest>();
        foreach (object json16 in (List<object>) json[nameof (unlock_quests)])
          unlockQuestList.Add(json16 == null ? (UnlockQuest) null : new UnlockQuest((Dictionary<string, object>) json16));
        this.unlock_quests = unlockQuestList.ToArray();
        if (!json.ContainsKey("player_presents:delete"))
          return;
        SMManager.DeleteList<PlayerPresent>(((IEnumerable<object>) json["player_presents:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class PresentReadLumpReceived_presents : KeyCompare
    {
      public int? reward_id;
      public int reward_quantity;
      public int reward_type_id;

      public PresentReadLumpReceived_presents()
      {
      }

      public PresentReadLumpReceived_presents(Dictionary<string, object> json)
      {
        this._hasKey = false;
        int? nullable1;
        if (json[nameof (reward_id)] != null)
        {
          long? nullable2 = (long?) json[nameof (reward_id)];
          nullable1 = nullable2.HasValue ? new int?((int) nullable2.GetValueOrDefault()) : new int?();
        }
        else
          nullable1 = new int?();
        this.reward_id = nullable1;
        this.reward_quantity = (int) (long) json[nameof (reward_quantity)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
      }
    }

    [Serializable]
    public class PresentUrlPresent : KeyCompare
    {
      public bool is_enabled;
      public WebAPI.Response.PresentUrlPresentReceived_presents[] received_presents;
      public bool is_received;
      public string popup_message;

      public PresentUrlPresent()
      {
      }

      public PresentUrlPresent(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.is_enabled = (bool) json[nameof (is_enabled)];
        List<WebAPI.Response.PresentUrlPresentReceived_presents> receivedPresentsList = new List<WebAPI.Response.PresentUrlPresentReceived_presents>();
        foreach (object json1 in (List<object>) json[nameof (received_presents)])
          receivedPresentsList.Add(json1 == null ? (WebAPI.Response.PresentUrlPresentReceived_presents) null : new WebAPI.Response.PresentUrlPresentReceived_presents((Dictionary<string, object>) json1));
        this.received_presents = receivedPresentsList.ToArray();
        this.is_received = (bool) json[nameof (is_received)];
        this.popup_message = (string) json[nameof (popup_message)];
      }
    }

    [Serializable]
    public class PresentUrlPresentReceived_presents : KeyCompare
    {
      public int reward_quantity;
      public int reward_type_id;
      public int? reward_id;

      public PresentUrlPresentReceived_presents()
      {
      }

      public PresentUrlPresentReceived_presents(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_quantity = (int) (long) json[nameof (reward_quantity)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
        int? nullable1;
        if (json[nameof (reward_id)] != null)
        {
          long? nullable2 = (long?) json[nameof (reward_id)];
          nullable1 = nullable2.HasValue ? new int?((int) nullable2.GetValueOrDefault()) : new int?();
        }
        else
          nullable1 = new int?();
        this.reward_id = nullable1;
      }
    }

    [Serializable]
    public class PvpBoot : KeyCompare
    {
      public DateTime? aggregate_finish_time;
      public bool battle_medal_shop_is_available;
      public int best_class;
      public Bonus[] bonus;
      public WebAPI.Response.PvpBootCampaign_rewards[] campaign_rewards;
      public Campaign[] campaigns;
      public bool class_match_enable;
      public int current_class;
      public int current_rank;
      public bool friend_match_enable;
      public bool has_friends;
      public bool is_battle;
      public bool is_latest_client_version;
      public bool is_season_done;
      public bool is_tutorial;
      public bool is_tutorial_battle_end;
      public int limit_times;
      public DateTime? matches_finish_time;
      public string matching_host;
      public int matching_port;
      public int max_addition_matches;
      public bool medal_shop_is_available;
      public PlayerNextFirstBattleReward next_first_battle_reward;
      public Player player;
      public PlayerDeck[] player_decks;
      public PvPCampaign[] pvp_campaigns;
      public PvPClassRecord pvp_class_record;
      public bool pvp_maintenance;
      public string pvp_maintenance_message;
      public string pvp_maintenance_title;
      public PvPRecord pvp_record;
      public PvPRecord pvp_record_by_friend;
      public bool rank_aggregate;
      public bool rank_done;
      public int ranking;
      public int ranking_pt;
      public int remaining_addition_matches;
      public int remaining_times;
      public RulePeriod rule;
      public int season_remaining_matches;
      public MpStage stage;

      public PvpBoot()
      {
      }

      public PvpBoot(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.aggregate_finish_time = json[nameof (aggregate_finish_time)] == null ? new DateTime?() : new DateTime?(DateTime.Parse((string) json[nameof (aggregate_finish_time)]));
        this.battle_medal_shop_is_available = (bool) json[nameof (battle_medal_shop_is_available)];
        this.best_class = (int) (long) json[nameof (best_class)];
        List<Bonus> bonusList = new List<Bonus>();
        foreach (object json1 in (List<object>) json[nameof (bonus)])
          bonusList.Add(json1 == null ? (Bonus) null : new Bonus((Dictionary<string, object>) json1));
        this.bonus = bonusList.ToArray();
        List<WebAPI.Response.PvpBootCampaign_rewards> bootCampaignRewardsList = new List<WebAPI.Response.PvpBootCampaign_rewards>();
        foreach (object json2 in (List<object>) json[nameof (campaign_rewards)])
          bootCampaignRewardsList.Add(json2 == null ? (WebAPI.Response.PvpBootCampaign_rewards) null : new WebAPI.Response.PvpBootCampaign_rewards((Dictionary<string, object>) json2));
        this.campaign_rewards = bootCampaignRewardsList.ToArray();
        List<Campaign> campaignList = new List<Campaign>();
        foreach (object json3 in (List<object>) json[nameof (campaigns)])
          campaignList.Add(json3 == null ? (Campaign) null : new Campaign((Dictionary<string, object>) json3));
        this.campaigns = campaignList.ToArray();
        this.class_match_enable = (bool) json[nameof (class_match_enable)];
        this.current_class = (int) (long) json[nameof (current_class)];
        this.current_rank = (int) (long) json[nameof (current_rank)];
        this.friend_match_enable = (bool) json[nameof (friend_match_enable)];
        this.has_friends = (bool) json[nameof (has_friends)];
        this.is_battle = (bool) json[nameof (is_battle)];
        this.is_latest_client_version = (bool) json[nameof (is_latest_client_version)];
        this.is_season_done = (bool) json[nameof (is_season_done)];
        this.is_tutorial = (bool) json[nameof (is_tutorial)];
        this.is_tutorial_battle_end = (bool) json[nameof (is_tutorial_battle_end)];
        this.limit_times = (int) (long) json[nameof (limit_times)];
        this.matches_finish_time = json[nameof (matches_finish_time)] == null ? new DateTime?() : new DateTime?(DateTime.Parse((string) json[nameof (matches_finish_time)]));
        this.matching_host = (string) json[nameof (matching_host)];
        this.matching_port = (int) (long) json[nameof (matching_port)];
        this.max_addition_matches = (int) (long) json[nameof (max_addition_matches)];
        this.medal_shop_is_available = (bool) json[nameof (medal_shop_is_available)];
        this.next_first_battle_reward = json[nameof (next_first_battle_reward)] == null ? (PlayerNextFirstBattleReward) null : new PlayerNextFirstBattleReward((Dictionary<string, object>) json[nameof (next_first_battle_reward)]);
        this.player = json[nameof (player)] == null ? (Player) null : new Player((Dictionary<string, object>) json[nameof (player)]);
        SMManager.Change<Player>(this.player);
        List<PlayerDeck> playerDeckList = new List<PlayerDeck>();
        foreach (object json4 in (List<object>) json[nameof (player_decks)])
          playerDeckList.Add(json4 == null ? (PlayerDeck) null : new PlayerDeck((Dictionary<string, object>) json4));
        this.player_decks = playerDeckList.ToArray();
        List<PvPCampaign> pvPcampaignList = new List<PvPCampaign>();
        foreach (object json5 in (List<object>) json[nameof (pvp_campaigns)])
          pvPcampaignList.Add(json5 == null ? (PvPCampaign) null : new PvPCampaign((Dictionary<string, object>) json5));
        this.pvp_campaigns = pvPcampaignList.ToArray();
        this.pvp_class_record = json[nameof (pvp_class_record)] == null ? (PvPClassRecord) null : new PvPClassRecord((Dictionary<string, object>) json[nameof (pvp_class_record)]);
        this.pvp_maintenance = (bool) json[nameof (pvp_maintenance)];
        this.pvp_maintenance_message = (string) json[nameof (pvp_maintenance_message)];
        this.pvp_maintenance_title = (string) json[nameof (pvp_maintenance_title)];
        this.pvp_record = json[nameof (pvp_record)] == null ? (PvPRecord) null : new PvPRecord((Dictionary<string, object>) json[nameof (pvp_record)]);
        SMManager.Change<PvPRecord>(this.pvp_record);
        this.pvp_record_by_friend = json[nameof (pvp_record_by_friend)] == null ? (PvPRecord) null : new PvPRecord((Dictionary<string, object>) json[nameof (pvp_record_by_friend)]);
        SMManager.Change<PvPRecord>(this.pvp_record_by_friend);
        this.rank_aggregate = (bool) json[nameof (rank_aggregate)];
        this.rank_done = (bool) json[nameof (rank_done)];
        this.ranking = (int) (long) json[nameof (ranking)];
        this.ranking_pt = (int) (long) json[nameof (ranking_pt)];
        this.remaining_addition_matches = (int) (long) json[nameof (remaining_addition_matches)];
        this.remaining_times = (int) (long) json[nameof (remaining_times)];
        this.rule = json[nameof (rule)] == null ? (RulePeriod) null : new RulePeriod((Dictionary<string, object>) json[nameof (rule)]);
        this.season_remaining_matches = (int) (long) json[nameof (season_remaining_matches)];
        this.stage = json[nameof (stage)] == null ? (MpStage) null : new MpStage((Dictionary<string, object>) json[nameof (stage)]);
      }
    }

    [Serializable]
    public class PvpBootCampaign_rewards : KeyCompare
    {
      public int campaign_id;
      public bool is_received;
      public int reward_id;
      public int reward_quantity;
      public string reward_title;
      public int reward_type_id;
      public string show_title;

      public PvpBootCampaign_rewards()
      {
      }

      public PvpBootCampaign_rewards(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.campaign_id = (int) (long) json[nameof (campaign_id)];
        this.is_received = (bool) json[nameof (is_received)];
        this.reward_id = (int) (long) json[nameof (reward_id)];
        this.reward_quantity = (int) (long) json[nameof (reward_quantity)];
        this.reward_title = (string) json[nameof (reward_title)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
        this.show_title = (string) json[nameof (show_title)];
      }
    }

    [Serializable]
    public class PvpClassMatchHistory : KeyCompare
    {
      public WebAPI.Response.PvpClassMatchHistoryClass_match_records[] class_match_records;

      public PvpClassMatchHistory()
      {
      }

      public PvpClassMatchHistory(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<WebAPI.Response.PvpClassMatchHistoryClass_match_records> classMatchRecordsList = new List<WebAPI.Response.PvpClassMatchHistoryClass_match_records>();
        foreach (object json1 in (List<object>) json[nameof (class_match_records)])
          classMatchRecordsList.Add(json1 == null ? (WebAPI.Response.PvpClassMatchHistoryClass_match_records) null : new WebAPI.Response.PvpClassMatchHistoryClass_match_records((Dictionary<string, object>) json1));
        this.class_match_records = classMatchRecordsList.ToArray();
      }
    }

    [Serializable]
    public class PvpClassMatchHistoryClass_match_records : KeyCompare
    {
      public PlayerUnit[] target_player_units;
      public DateTime start_at;
      public string battle_uuid;
      public string target_player_pvp_emblem;
      public string battle_result_effect;
      public Player target_player;
      public string battle_result;

      public PvpClassMatchHistoryClass_match_records()
      {
      }

      public PvpClassMatchHistoryClass_match_records(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerUnit> playerUnitList = new List<PlayerUnit>();
        foreach (object json1 in (List<object>) json[nameof (target_player_units)])
          playerUnitList.Add(json1 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json1));
        this.target_player_units = playerUnitList.ToArray();
        this.start_at = DateTime.Parse((string) json[nameof (start_at)]);
        this.battle_uuid = (string) json[nameof (battle_uuid)];
        this.target_player_pvp_emblem = (string) json[nameof (target_player_pvp_emblem)];
        this.battle_result_effect = json[nameof (battle_result_effect)] == null ? (string) null : (string) json[nameof (battle_result_effect)];
        this.target_player = json[nameof (target_player)] == null ? (Player) null : new Player((Dictionary<string, object>) json[nameof (target_player)]);
        this.battle_result = (string) json[nameof (battle_result)];
      }
    }

    [Serializable]
    public class PvpClassMatchHistoryDetail : KeyCompare
    {
      public PlayerAwakeSkill[] target_player_unit_awake_skills;
      public string target_player_pvp_emblem;
      public int target_player_pvp_rank_point;
      public Player player;
      public string player_battle_result;
      public int player_pvp_ranking;
      public int player_pvp_rank_point;
      public PlayerUnit[] target_player_units;
      public PlayerUnit[] player_unit_over_killers;
      public PlayerUnit[] target_player_unit_over_killers;
      public int target_player_battle_result_point;
      public bool is_cpu_battle;
      public int player_battle_result_point;
      public PlayerGearReisouSchema[] target_player_reisou_items;
      public PlayerItem[] target_player_items;
      public DateTime start_at;
      public PlayerUnit[] player_units;
      public WebAPI.Response.PvpClassMatchHistoryDetailTarget_player_unit_pvp_results[] target_player_unit_pvp_results;
      public string player_battle_result_effect;
      public int battle_stage_point;
      public PlayerGearReisouSchema[] player_reisou_items;
      public PlayerAwakeSkill[] player_unit_awake_skills;
      public int target_player_pvp_ranking;
      public PlayerItem[] player_items;
      public string target_player_battle_result_effect;
      public string player_pvp_emblem;
      public WebAPI.Response.PvpClassMatchHistoryDetailPlayer_unit_pvp_results[] player_unit_pvp_results;
      public Player target_player;
      public string target_player_battle_result;

      public PvpClassMatchHistoryDetail()
      {
      }

      public PvpClassMatchHistoryDetail(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerAwakeSkill> playerAwakeSkillList1 = new List<PlayerAwakeSkill>();
        foreach (object json1 in (List<object>) json[nameof (target_player_unit_awake_skills)])
          playerAwakeSkillList1.Add(json1 == null ? (PlayerAwakeSkill) null : new PlayerAwakeSkill((Dictionary<string, object>) json1));
        this.target_player_unit_awake_skills = playerAwakeSkillList1.ToArray();
        this.target_player_pvp_emblem = (string) json[nameof (target_player_pvp_emblem)];
        this.target_player_pvp_rank_point = (int) (long) json[nameof (target_player_pvp_rank_point)];
        this.player = json[nameof (player)] == null ? (Player) null : new Player((Dictionary<string, object>) json[nameof (player)]);
        this.player_battle_result = json[nameof (player_battle_result)] == null ? (string) null : (string) json[nameof (player_battle_result)];
        this.player_pvp_ranking = (int) (long) json[nameof (player_pvp_ranking)];
        this.player_pvp_rank_point = (int) (long) json[nameof (player_pvp_rank_point)];
        List<PlayerUnit> playerUnitList1 = new List<PlayerUnit>();
        foreach (object json2 in (List<object>) json[nameof (target_player_units)])
          playerUnitList1.Add(json2 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json2));
        this.target_player_units = playerUnitList1.ToArray();
        List<PlayerUnit> playerUnitList2 = new List<PlayerUnit>();
        foreach (object json3 in (List<object>) json[nameof (player_unit_over_killers)])
          playerUnitList2.Add(json3 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json3));
        this.player_unit_over_killers = playerUnitList2.ToArray();
        List<PlayerUnit> playerUnitList3 = new List<PlayerUnit>();
        foreach (object json4 in (List<object>) json[nameof (target_player_unit_over_killers)])
          playerUnitList3.Add(json4 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json4));
        this.target_player_unit_over_killers = playerUnitList3.ToArray();
        this.target_player_battle_result_point = (int) (long) json[nameof (target_player_battle_result_point)];
        this.is_cpu_battle = (bool) json[nameof (is_cpu_battle)];
        this.player_battle_result_point = (int) (long) json[nameof (player_battle_result_point)];
        List<PlayerGearReisouSchema> gearReisouSchemaList1 = new List<PlayerGearReisouSchema>();
        foreach (object json5 in (List<object>) json[nameof (target_player_reisou_items)])
          gearReisouSchemaList1.Add(json5 == null ? (PlayerGearReisouSchema) null : new PlayerGearReisouSchema((Dictionary<string, object>) json5));
        this.target_player_reisou_items = gearReisouSchemaList1.ToArray();
        List<PlayerItem> playerItemList1 = new List<PlayerItem>();
        foreach (object json6 in (List<object>) json[nameof (target_player_items)])
          playerItemList1.Add(json6 == null ? (PlayerItem) null : new PlayerItem((Dictionary<string, object>) json6));
        this.target_player_items = playerItemList1.ToArray();
        this.start_at = DateTime.Parse((string) json[nameof (start_at)]);
        List<PlayerUnit> playerUnitList4 = new List<PlayerUnit>();
        foreach (object json7 in (List<object>) json[nameof (player_units)])
          playerUnitList4.Add(json7 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json7));
        this.player_units = playerUnitList4.ToArray();
        List<WebAPI.Response.PvpClassMatchHistoryDetailTarget_player_unit_pvp_results> playerUnitPvpResultsList1 = new List<WebAPI.Response.PvpClassMatchHistoryDetailTarget_player_unit_pvp_results>();
        foreach (object json8 in (List<object>) json[nameof (target_player_unit_pvp_results)])
          playerUnitPvpResultsList1.Add(json8 == null ? (WebAPI.Response.PvpClassMatchHistoryDetailTarget_player_unit_pvp_results) null : new WebAPI.Response.PvpClassMatchHistoryDetailTarget_player_unit_pvp_results((Dictionary<string, object>) json8));
        this.target_player_unit_pvp_results = playerUnitPvpResultsList1.ToArray();
        this.player_battle_result_effect = json[nameof (player_battle_result_effect)] == null ? (string) null : (string) json[nameof (player_battle_result_effect)];
        this.battle_stage_point = (int) (long) json[nameof (battle_stage_point)];
        List<PlayerGearReisouSchema> gearReisouSchemaList2 = new List<PlayerGearReisouSchema>();
        foreach (object json9 in (List<object>) json[nameof (player_reisou_items)])
          gearReisouSchemaList2.Add(json9 == null ? (PlayerGearReisouSchema) null : new PlayerGearReisouSchema((Dictionary<string, object>) json9));
        this.player_reisou_items = gearReisouSchemaList2.ToArray();
        List<PlayerAwakeSkill> playerAwakeSkillList2 = new List<PlayerAwakeSkill>();
        foreach (object json10 in (List<object>) json[nameof (player_unit_awake_skills)])
          playerAwakeSkillList2.Add(json10 == null ? (PlayerAwakeSkill) null : new PlayerAwakeSkill((Dictionary<string, object>) json10));
        this.player_unit_awake_skills = playerAwakeSkillList2.ToArray();
        this.target_player_pvp_ranking = (int) (long) json[nameof (target_player_pvp_ranking)];
        List<PlayerItem> playerItemList2 = new List<PlayerItem>();
        foreach (object json11 in (List<object>) json[nameof (player_items)])
          playerItemList2.Add(json11 == null ? (PlayerItem) null : new PlayerItem((Dictionary<string, object>) json11));
        this.player_items = playerItemList2.ToArray();
        this.target_player_battle_result_effect = json[nameof (target_player_battle_result_effect)] == null ? (string) null : (string) json[nameof (target_player_battle_result_effect)];
        this.player_pvp_emblem = (string) json[nameof (player_pvp_emblem)];
        List<WebAPI.Response.PvpClassMatchHistoryDetailPlayer_unit_pvp_results> playerUnitPvpResultsList2 = new List<WebAPI.Response.PvpClassMatchHistoryDetailPlayer_unit_pvp_results>();
        foreach (object json12 in (List<object>) json[nameof (player_unit_pvp_results)])
          playerUnitPvpResultsList2.Add(json12 == null ? (WebAPI.Response.PvpClassMatchHistoryDetailPlayer_unit_pvp_results) null : new WebAPI.Response.PvpClassMatchHistoryDetailPlayer_unit_pvp_results((Dictionary<string, object>) json12));
        this.player_unit_pvp_results = playerUnitPvpResultsList2.ToArray();
        this.target_player = json[nameof (target_player)] == null ? (Player) null : new Player((Dictionary<string, object>) json[nameof (target_player)]);
        this.target_player_battle_result = json[nameof (target_player_battle_result)] == null ? (string) null : (string) json[nameof (target_player_battle_result)];
      }
    }

    [Serializable]
    public class PvpClassMatchHistoryDetailPlayer_unit_pvp_results : KeyCompare
    {
      public int defeat_count;
      public int point;
      public int dead_count;
      public int duel_count;
      public int exp;
      public int player_unit_id;

      public PvpClassMatchHistoryDetailPlayer_unit_pvp_results()
      {
      }

      public PvpClassMatchHistoryDetailPlayer_unit_pvp_results(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.defeat_count = (int) (long) json[nameof (defeat_count)];
        this.point = (int) (long) json[nameof (point)];
        this.dead_count = (int) (long) json[nameof (dead_count)];
        this.duel_count = (int) (long) json[nameof (duel_count)];
        this.exp = (int) (long) json[nameof (exp)];
        this.player_unit_id = (int) (long) json[nameof (player_unit_id)];
      }
    }

    [Serializable]
    public class PvpClassMatchHistoryDetailTarget_player_unit_pvp_results : KeyCompare
    {
      public int defeat_count;
      public int point;
      public int dead_count;
      public int duel_count;
      public int exp;
      public int player_unit_id;

      public PvpClassMatchHistoryDetailTarget_player_unit_pvp_results()
      {
      }

      public PvpClassMatchHistoryDetailTarget_player_unit_pvp_results(
        Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.defeat_count = (int) (long) json[nameof (defeat_count)];
        this.point = (int) (long) json[nameof (point)];
        this.dead_count = (int) (long) json[nameof (dead_count)];
        this.duel_count = (int) (long) json[nameof (duel_count)];
        this.exp = (int) (long) json[nameof (exp)];
        this.player_unit_id = (int) (long) json[nameof (player_unit_id)];
      }
    }

    [Serializable]
    public class PvpForceClose : KeyCompare
    {
      public bool result;

      public PvpForceClose()
      {
      }

      public PvpForceClose(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.result = (bool) json[nameof (result)];
      }
    }

    [Serializable]
    public class PvpFriend : KeyCompare
    {
      public int ranking;
      public PvPRecord pvp_record;
      public PvPRecord pvp_record_by_friend;
      public bool is_friend;
      public int level;
      public int leader_unit_job_id;
      public string target_player_id;
      public DateTime target_player_last_signed_in_at;
      public int target_player_current_class;
      public int target_player_current_rank;
      public int ranking_point;
      public int current_emblem_id;
      public int leader_unit_id;
      public string target_player_name;
      public int leader_unit_level;
      public bool is_first_battle;

      public PvpFriend()
      {
      }

      public PvpFriend(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.ranking = (int) (long) json[nameof (ranking)];
        this.pvp_record = json[nameof (pvp_record)] == null ? (PvPRecord) null : new PvPRecord((Dictionary<string, object>) json[nameof (pvp_record)]);
        this.pvp_record_by_friend = json[nameof (pvp_record_by_friend)] == null ? (PvPRecord) null : new PvPRecord((Dictionary<string, object>) json[nameof (pvp_record_by_friend)]);
        this.is_friend = (bool) json[nameof (is_friend)];
        this.level = (int) (long) json[nameof (level)];
        this.leader_unit_job_id = (int) (long) json[nameof (leader_unit_job_id)];
        this.target_player_id = (string) json[nameof (target_player_id)];
        this.target_player_last_signed_in_at = DateTime.Parse((string) json[nameof (target_player_last_signed_in_at)]);
        this.target_player_current_class = (int) (long) json[nameof (target_player_current_class)];
        this.target_player_current_rank = (int) (long) json[nameof (target_player_current_rank)];
        this.ranking_point = (int) (long) json[nameof (ranking_point)];
        this.current_emblem_id = (int) (long) json[nameof (current_emblem_id)];
        this.leader_unit_id = (int) (long) json[nameof (leader_unit_id)];
        this.target_player_name = (string) json[nameof (target_player_name)];
        this.leader_unit_level = (int) (long) json[nameof (leader_unit_level)];
        this.is_first_battle = (bool) json[nameof (is_first_battle)];
      }

      public string getClassNameString()
      {
        return MasterData.PvpClassKind[this.target_player_current_class].name;
      }

      public string getRankingString()
      {
        return !Player.Current.IsClassMatchRanking() || this.ranking <= 0 ? Consts.GetInstance().COMMON_NOVALUE : this.ranking.ToLocalizeNumberText();
      }

      public string getRankNameString()
      {
        return MasterData.PvpRankingKind[this.target_player_current_rank].name;
      }

      public string getPointString()
      {
        return !Player.Current.IsClassMatchRanking() ? Consts.GetInstance().COMMON_NOVALUE : this.ranking_point.ToLocalizeNumberText();
      }
    }

    [Serializable]
    public class PvpLiteBoot : KeyCompare
    {
      public bool is_battle;
      public string pvp_maintenance_message;
      public bool pvp_maintenance;
      public string pvp_maintenance_title;
      public Player player;
      public bool is_latest_version;

      public PvpLiteBoot()
      {
      }

      public PvpLiteBoot(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.is_battle = (bool) json[nameof (is_battle)];
        this.pvp_maintenance_message = (string) json[nameof (pvp_maintenance_message)];
        this.pvp_maintenance = (bool) json[nameof (pvp_maintenance)];
        this.pvp_maintenance_title = (string) json[nameof (pvp_maintenance_title)];
        this.player = json[nameof (player)] == null ? (Player) null : new Player((Dictionary<string, object>) json[nameof (player)]);
        SMManager.Change<Player>(this.player);
        this.is_latest_version = (bool) json[nameof (is_latest_version)];
      }
    }

    [Serializable]
    public class PvpNpcForceClose : KeyCompare
    {
      public bool result;

      public PvpNpcForceClose()
      {
      }

      public PvpNpcForceClose(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.result = (bool) json[nameof (result)];
      }
    }

    [Serializable]
    public class PvpOtherRanking : KeyCompare
    {
      public int rank_kind;
      public OtherRankingGroup[] ranking_groups;

      public PvpOtherRanking()
      {
      }

      public PvpOtherRanking(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.rank_kind = (int) (long) json[nameof (rank_kind)];
        List<OtherRankingGroup> otherRankingGroupList = new List<OtherRankingGroup>();
        foreach (object json1 in (List<object>) json[nameof (ranking_groups)])
          otherRankingGroupList.Add(json1 == null ? (OtherRankingGroup) null : new OtherRankingGroup((Dictionary<string, object>) json1));
        this.ranking_groups = otherRankingGroupList.ToArray();
      }
    }

    [Serializable]
    public class PvpPlayerFinish : KeyCompare
    {
      public bool is_battle;
      public string pvp_maintenance_message;
      public int ranking;
      public int reward_money;
      public bool is_tutorial;
      public Player player;
      public bool is_season_done;
      public PvPEnd pvp_finish;
      public WebAPI.Response.PvpPlayerFinishCampaign_next_rewards[] campaign_next_rewards;
      public int current_class;
      public bool target_player_is_friend;
      public bool rank_aggregate;
      public WebAPI.Response.PvpPlayerFinishBonus_rewards[] bonus_rewards;
      public WebAPI.Response.PvpPlayerFinishFirst_battle_rewards[] first_battle_rewards;
      public PlayerUnit[] player_units;
      public Bonus[] bonus;
      public PlayerItem[] player_items;
      public Campaign[] campaigns;
      public int matching_type;
      public WebAPI.Response.PvpPlayerFinishCampaign_rewards[] campaign_rewards;
      public PlayerMaterialUnit[] player_material_units;
      public PlayerPresent[] player_presents;
      public PlayerMaterialGear[] player_material_gears;
      public PlayerCharacterIntimate[] player_character_intimates;
      public PvPRecord pvp_record;
      public PvPRecord pvp_record_by_friend;
      public bool pvp_maintenance;
      public string pvp_maintenance_title;
      public PvPClassRecord pvp_class_record;
      public int current_rank;
      public int ranking_pt;
      public PlayerHelper[] gladiators;

      public PvpPlayerFinish()
      {
      }

      public PvpPlayerFinish(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.is_battle = (bool) json[nameof (is_battle)];
        this.pvp_maintenance_message = (string) json[nameof (pvp_maintenance_message)];
        this.ranking = (int) (long) json[nameof (ranking)];
        this.reward_money = (int) (long) json[nameof (reward_money)];
        this.is_tutorial = (bool) json[nameof (is_tutorial)];
        this.player = json[nameof (player)] == null ? (Player) null : new Player((Dictionary<string, object>) json[nameof (player)]);
        SMManager.Change<Player>(this.player);
        this.is_season_done = (bool) json[nameof (is_season_done)];
        this.pvp_finish = json[nameof (pvp_finish)] == null ? (PvPEnd) null : new PvPEnd((Dictionary<string, object>) json[nameof (pvp_finish)]);
        List<WebAPI.Response.PvpPlayerFinishCampaign_next_rewards> campaignNextRewardsList = new List<WebAPI.Response.PvpPlayerFinishCampaign_next_rewards>();
        foreach (object json1 in (List<object>) json[nameof (campaign_next_rewards)])
          campaignNextRewardsList.Add(json1 == null ? (WebAPI.Response.PvpPlayerFinishCampaign_next_rewards) null : new WebAPI.Response.PvpPlayerFinishCampaign_next_rewards((Dictionary<string, object>) json1));
        this.campaign_next_rewards = campaignNextRewardsList.ToArray();
        this.current_class = (int) (long) json[nameof (current_class)];
        this.target_player_is_friend = (bool) json[nameof (target_player_is_friend)];
        this.rank_aggregate = (bool) json[nameof (rank_aggregate)];
        List<WebAPI.Response.PvpPlayerFinishBonus_rewards> finishBonusRewardsList = new List<WebAPI.Response.PvpPlayerFinishBonus_rewards>();
        foreach (object json2 in (List<object>) json[nameof (bonus_rewards)])
          finishBonusRewardsList.Add(json2 == null ? (WebAPI.Response.PvpPlayerFinishBonus_rewards) null : new WebAPI.Response.PvpPlayerFinishBonus_rewards((Dictionary<string, object>) json2));
        this.bonus_rewards = finishBonusRewardsList.ToArray();
        List<WebAPI.Response.PvpPlayerFinishFirst_battle_rewards> firstBattleRewardsList = new List<WebAPI.Response.PvpPlayerFinishFirst_battle_rewards>();
        foreach (object json3 in (List<object>) json[nameof (first_battle_rewards)])
          firstBattleRewardsList.Add(json3 == null ? (WebAPI.Response.PvpPlayerFinishFirst_battle_rewards) null : new WebAPI.Response.PvpPlayerFinishFirst_battle_rewards((Dictionary<string, object>) json3));
        this.first_battle_rewards = firstBattleRewardsList.ToArray();
        List<PlayerUnit> playerUnitList = new List<PlayerUnit>();
        foreach (object json4 in (List<object>) json[nameof (player_units)])
          playerUnitList.Add(json4 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json4));
        this.player_units = playerUnitList.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_units);
        List<Bonus> bonusList = new List<Bonus>();
        foreach (object json5 in (List<object>) json[nameof (bonus)])
          bonusList.Add(json5 == null ? (Bonus) null : new Bonus((Dictionary<string, object>) json5));
        this.bonus = bonusList.ToArray();
        List<PlayerItem> playerItemList = new List<PlayerItem>();
        foreach (object json6 in (List<object>) json[nameof (player_items)])
          playerItemList.Add(json6 == null ? (PlayerItem) null : new PlayerItem((Dictionary<string, object>) json6));
        this.player_items = playerItemList.ToArray();
        SMManager.UpdateList<PlayerItem>(this.player_items);
        List<Campaign> campaignList = new List<Campaign>();
        foreach (object json7 in (List<object>) json[nameof (campaigns)])
          campaignList.Add(json7 == null ? (Campaign) null : new Campaign((Dictionary<string, object>) json7));
        this.campaigns = campaignList.ToArray();
        this.matching_type = (int) (long) json[nameof (matching_type)];
        List<WebAPI.Response.PvpPlayerFinishCampaign_rewards> finishCampaignRewardsList = new List<WebAPI.Response.PvpPlayerFinishCampaign_rewards>();
        foreach (object json8 in (List<object>) json[nameof (campaign_rewards)])
          finishCampaignRewardsList.Add(json8 == null ? (WebAPI.Response.PvpPlayerFinishCampaign_rewards) null : new WebAPI.Response.PvpPlayerFinishCampaign_rewards((Dictionary<string, object>) json8));
        this.campaign_rewards = finishCampaignRewardsList.ToArray();
        List<PlayerMaterialUnit> playerMaterialUnitList = new List<PlayerMaterialUnit>();
        foreach (object json9 in (List<object>) json[nameof (player_material_units)])
          playerMaterialUnitList.Add(json9 == null ? (PlayerMaterialUnit) null : new PlayerMaterialUnit((Dictionary<string, object>) json9));
        this.player_material_units = playerMaterialUnitList.ToArray();
        SMManager.UpdateList<PlayerMaterialUnit>(this.player_material_units);
        List<PlayerPresent> playerPresentList = new List<PlayerPresent>();
        foreach (object json10 in (List<object>) json[nameof (player_presents)])
          playerPresentList.Add(json10 == null ? (PlayerPresent) null : new PlayerPresent((Dictionary<string, object>) json10));
        this.player_presents = playerPresentList.ToArray();
        SMManager.UpdateList<PlayerPresent>(this.player_presents);
        List<PlayerMaterialGear> playerMaterialGearList = new List<PlayerMaterialGear>();
        foreach (object json11 in (List<object>) json[nameof (player_material_gears)])
          playerMaterialGearList.Add(json11 == null ? (PlayerMaterialGear) null : new PlayerMaterialGear((Dictionary<string, object>) json11));
        this.player_material_gears = playerMaterialGearList.ToArray();
        SMManager.UpdateList<PlayerMaterialGear>(this.player_material_gears);
        List<PlayerCharacterIntimate> characterIntimateList = new List<PlayerCharacterIntimate>();
        foreach (object json12 in (List<object>) json[nameof (player_character_intimates)])
          characterIntimateList.Add(json12 == null ? (PlayerCharacterIntimate) null : new PlayerCharacterIntimate((Dictionary<string, object>) json12));
        this.player_character_intimates = characterIntimateList.ToArray();
        SMManager.UpdateList<PlayerCharacterIntimate>(this.player_character_intimates);
        this.pvp_record = json[nameof (pvp_record)] == null ? (PvPRecord) null : new PvPRecord((Dictionary<string, object>) json[nameof (pvp_record)]);
        this.pvp_record_by_friend = json[nameof (pvp_record_by_friend)] == null ? (PvPRecord) null : new PvPRecord((Dictionary<string, object>) json[nameof (pvp_record_by_friend)]);
        this.pvp_maintenance = (bool) json[nameof (pvp_maintenance)];
        this.pvp_maintenance_title = (string) json[nameof (pvp_maintenance_title)];
        this.pvp_class_record = json[nameof (pvp_class_record)] == null ? (PvPClassRecord) null : new PvPClassRecord((Dictionary<string, object>) json[nameof (pvp_class_record)]);
        this.current_rank = (int) (long) json[nameof (current_rank)];
        this.ranking_pt = (int) (long) json[nameof (ranking_pt)];
        List<PlayerHelper> playerHelperList = new List<PlayerHelper>();
        foreach (object json13 in (List<object>) json[nameof (gladiators)])
          playerHelperList.Add(json13 == null ? (PlayerHelper) null : new PlayerHelper((Dictionary<string, object>) json13));
        this.gladiators = playerHelperList.ToArray();
        if (json.ContainsKey("player_material_gears:delete"))
          SMManager.DeleteList<PlayerMaterialGear>(((IEnumerable<object>) json["player_material_gears:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
        if (json.ContainsKey("player_items:delete"))
          SMManager.DeleteList<PlayerItem>(((IEnumerable<object>) json["player_items:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
        if (!json.ContainsKey("player_presents:delete"))
          return;
        SMManager.DeleteList<PlayerPresent>(((IEnumerable<object>) json["player_presents:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class PvpPlayerFinishCampaign_rewards : KeyCompare
    {
      public int reward_quantity;
      public string show_text2;
      public int reward_type_id;
      public int campaign_id;
      public string show_title;
      public string show_text;
      public int reward_id;

      public PvpPlayerFinishCampaign_rewards()
      {
      }

      public PvpPlayerFinishCampaign_rewards(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_quantity = (int) (long) json[nameof (reward_quantity)];
        this.show_text2 = (string) json[nameof (show_text2)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
        this.campaign_id = (int) (long) json[nameof (campaign_id)];
        this.show_title = (string) json[nameof (show_title)];
        this.show_text = (string) json[nameof (show_text)];
        this.reward_id = (int) (long) json[nameof (reward_id)];
      }
    }

    [Serializable]
    public class PvpPlayerFinishFirst_battle_rewards : KeyCompare
    {
      public int reward_quantity;
      public string show_text2;
      public string show_text;
      public int reward_type_id;
      public int reward_id;

      public PvpPlayerFinishFirst_battle_rewards()
      {
      }

      public PvpPlayerFinishFirst_battle_rewards(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_quantity = (int) (long) json[nameof (reward_quantity)];
        this.show_text2 = (string) json[nameof (show_text2)];
        this.show_text = (string) json[nameof (show_text)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
        this.reward_id = (int) (long) json[nameof (reward_id)];
      }
    }

    [Serializable]
    public class PvpPlayerFinishBonus_rewards : KeyCompare
    {
      public int reward_quantity;
      public int reward_type_id;
      public int reward_id;

      public PvpPlayerFinishBonus_rewards()
      {
      }

      public PvpPlayerFinishBonus_rewards(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_quantity = (int) (long) json[nameof (reward_quantity)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
        this.reward_id = (int) (long) json[nameof (reward_id)];
      }
    }

    [Serializable]
    public class PvpPlayerFinishCampaign_next_rewards : KeyCompare
    {
      public string next_reward_title;
      public int campaign_id;
      public string next_reward_text;

      public PvpPlayerFinishCampaign_next_rewards()
      {
      }

      public PvpPlayerFinishCampaign_next_rewards(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.next_reward_title = (string) json[nameof (next_reward_title)];
        this.campaign_id = (int) (long) json[nameof (campaign_id)];
        this.next_reward_text = (string) json[nameof (next_reward_text)];
      }
    }

    [Serializable]
    public class PvpPlayerNpcFinish : KeyCompare
    {
      public bool is_battle;
      public string pvp_maintenance_message;
      public int ranking;
      public int reward_money;
      public bool is_tutorial;
      public Player player;
      public bool is_season_done;
      public PvPEnd pvp_finish;
      public WebAPI.Response.PvpPlayerNpcFinishCampaign_next_rewards[] campaign_next_rewards;
      public int current_class;
      public bool target_player_is_friend;
      public bool rank_aggregate;
      public WebAPI.Response.PvpPlayerNpcFinishBonus_rewards[] bonus_rewards;
      public WebAPI.Response.PvpPlayerNpcFinishFirst_battle_rewards[] first_battle_rewards;
      public PlayerUnit[] player_units;
      public Bonus[] bonus;
      public PlayerItem[] player_items;
      public Campaign[] campaigns;
      public int matching_type;
      public WebAPI.Response.PvpPlayerNpcFinishCampaign_rewards[] campaign_rewards;
      public PlayerMaterialUnit[] player_material_units;
      public PlayerPresent[] player_presents;
      public PlayerMaterialGear[] player_material_gears;
      public PlayerCharacterIntimate[] player_character_intimates;
      public PvPRecord pvp_record;
      public PvPRecord pvp_record_by_friend;
      public bool pvp_maintenance;
      public string pvp_maintenance_title;
      public PvPClassRecord pvp_class_record;
      public int current_rank;
      public int ranking_pt;
      public PlayerHelper[] gladiators;

      public PvpPlayerNpcFinish()
      {
      }

      public PvpPlayerNpcFinish(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.is_battle = (bool) json[nameof (is_battle)];
        this.pvp_maintenance_message = (string) json[nameof (pvp_maintenance_message)];
        this.ranking = (int) (long) json[nameof (ranking)];
        this.reward_money = (int) (long) json[nameof (reward_money)];
        this.is_tutorial = (bool) json[nameof (is_tutorial)];
        this.player = json[nameof (player)] == null ? (Player) null : new Player((Dictionary<string, object>) json[nameof (player)]);
        SMManager.Change<Player>(this.player);
        this.is_season_done = (bool) json[nameof (is_season_done)];
        this.pvp_finish = json[nameof (pvp_finish)] == null ? (PvPEnd) null : new PvPEnd((Dictionary<string, object>) json[nameof (pvp_finish)]);
        List<WebAPI.Response.PvpPlayerNpcFinishCampaign_next_rewards> campaignNextRewardsList = new List<WebAPI.Response.PvpPlayerNpcFinishCampaign_next_rewards>();
        foreach (object json1 in (List<object>) json[nameof (campaign_next_rewards)])
          campaignNextRewardsList.Add(json1 == null ? (WebAPI.Response.PvpPlayerNpcFinishCampaign_next_rewards) null : new WebAPI.Response.PvpPlayerNpcFinishCampaign_next_rewards((Dictionary<string, object>) json1));
        this.campaign_next_rewards = campaignNextRewardsList.ToArray();
        this.current_class = (int) (long) json[nameof (current_class)];
        this.target_player_is_friend = (bool) json[nameof (target_player_is_friend)];
        this.rank_aggregate = (bool) json[nameof (rank_aggregate)];
        List<WebAPI.Response.PvpPlayerNpcFinishBonus_rewards> finishBonusRewardsList = new List<WebAPI.Response.PvpPlayerNpcFinishBonus_rewards>();
        foreach (object json2 in (List<object>) json[nameof (bonus_rewards)])
          finishBonusRewardsList.Add(json2 == null ? (WebAPI.Response.PvpPlayerNpcFinishBonus_rewards) null : new WebAPI.Response.PvpPlayerNpcFinishBonus_rewards((Dictionary<string, object>) json2));
        this.bonus_rewards = finishBonusRewardsList.ToArray();
        List<WebAPI.Response.PvpPlayerNpcFinishFirst_battle_rewards> firstBattleRewardsList = new List<WebAPI.Response.PvpPlayerNpcFinishFirst_battle_rewards>();
        foreach (object json3 in (List<object>) json[nameof (first_battle_rewards)])
          firstBattleRewardsList.Add(json3 == null ? (WebAPI.Response.PvpPlayerNpcFinishFirst_battle_rewards) null : new WebAPI.Response.PvpPlayerNpcFinishFirst_battle_rewards((Dictionary<string, object>) json3));
        this.first_battle_rewards = firstBattleRewardsList.ToArray();
        List<PlayerUnit> playerUnitList = new List<PlayerUnit>();
        foreach (object json4 in (List<object>) json[nameof (player_units)])
          playerUnitList.Add(json4 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json4));
        this.player_units = playerUnitList.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_units);
        List<Bonus> bonusList = new List<Bonus>();
        foreach (object json5 in (List<object>) json[nameof (bonus)])
          bonusList.Add(json5 == null ? (Bonus) null : new Bonus((Dictionary<string, object>) json5));
        this.bonus = bonusList.ToArray();
        List<PlayerItem> playerItemList = new List<PlayerItem>();
        foreach (object json6 in (List<object>) json[nameof (player_items)])
          playerItemList.Add(json6 == null ? (PlayerItem) null : new PlayerItem((Dictionary<string, object>) json6));
        this.player_items = playerItemList.ToArray();
        SMManager.UpdateList<PlayerItem>(this.player_items);
        List<Campaign> campaignList = new List<Campaign>();
        foreach (object json7 in (List<object>) json[nameof (campaigns)])
          campaignList.Add(json7 == null ? (Campaign) null : new Campaign((Dictionary<string, object>) json7));
        this.campaigns = campaignList.ToArray();
        this.matching_type = (int) (long) json[nameof (matching_type)];
        List<WebAPI.Response.PvpPlayerNpcFinishCampaign_rewards> finishCampaignRewardsList = new List<WebAPI.Response.PvpPlayerNpcFinishCampaign_rewards>();
        foreach (object json8 in (List<object>) json[nameof (campaign_rewards)])
          finishCampaignRewardsList.Add(json8 == null ? (WebAPI.Response.PvpPlayerNpcFinishCampaign_rewards) null : new WebAPI.Response.PvpPlayerNpcFinishCampaign_rewards((Dictionary<string, object>) json8));
        this.campaign_rewards = finishCampaignRewardsList.ToArray();
        List<PlayerMaterialUnit> playerMaterialUnitList = new List<PlayerMaterialUnit>();
        foreach (object json9 in (List<object>) json[nameof (player_material_units)])
          playerMaterialUnitList.Add(json9 == null ? (PlayerMaterialUnit) null : new PlayerMaterialUnit((Dictionary<string, object>) json9));
        this.player_material_units = playerMaterialUnitList.ToArray();
        SMManager.UpdateList<PlayerMaterialUnit>(this.player_material_units);
        List<PlayerPresent> playerPresentList = new List<PlayerPresent>();
        foreach (object json10 in (List<object>) json[nameof (player_presents)])
          playerPresentList.Add(json10 == null ? (PlayerPresent) null : new PlayerPresent((Dictionary<string, object>) json10));
        this.player_presents = playerPresentList.ToArray();
        SMManager.UpdateList<PlayerPresent>(this.player_presents);
        List<PlayerMaterialGear> playerMaterialGearList = new List<PlayerMaterialGear>();
        foreach (object json11 in (List<object>) json[nameof (player_material_gears)])
          playerMaterialGearList.Add(json11 == null ? (PlayerMaterialGear) null : new PlayerMaterialGear((Dictionary<string, object>) json11));
        this.player_material_gears = playerMaterialGearList.ToArray();
        SMManager.UpdateList<PlayerMaterialGear>(this.player_material_gears);
        List<PlayerCharacterIntimate> characterIntimateList = new List<PlayerCharacterIntimate>();
        foreach (object json12 in (List<object>) json[nameof (player_character_intimates)])
          characterIntimateList.Add(json12 == null ? (PlayerCharacterIntimate) null : new PlayerCharacterIntimate((Dictionary<string, object>) json12));
        this.player_character_intimates = characterIntimateList.ToArray();
        SMManager.UpdateList<PlayerCharacterIntimate>(this.player_character_intimates);
        this.pvp_record = json[nameof (pvp_record)] == null ? (PvPRecord) null : new PvPRecord((Dictionary<string, object>) json[nameof (pvp_record)]);
        this.pvp_record_by_friend = json[nameof (pvp_record_by_friend)] == null ? (PvPRecord) null : new PvPRecord((Dictionary<string, object>) json[nameof (pvp_record_by_friend)]);
        this.pvp_maintenance = (bool) json[nameof (pvp_maintenance)];
        this.pvp_maintenance_title = (string) json[nameof (pvp_maintenance_title)];
        this.pvp_class_record = json[nameof (pvp_class_record)] == null ? (PvPClassRecord) null : new PvPClassRecord((Dictionary<string, object>) json[nameof (pvp_class_record)]);
        this.current_rank = (int) (long) json[nameof (current_rank)];
        this.ranking_pt = (int) (long) json[nameof (ranking_pt)];
        List<PlayerHelper> playerHelperList = new List<PlayerHelper>();
        foreach (object json13 in (List<object>) json[nameof (gladiators)])
          playerHelperList.Add(json13 == null ? (PlayerHelper) null : new PlayerHelper((Dictionary<string, object>) json13));
        this.gladiators = playerHelperList.ToArray();
        if (json.ContainsKey("player_material_gears:delete"))
          SMManager.DeleteList<PlayerMaterialGear>(((IEnumerable<object>) json["player_material_gears:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
        if (json.ContainsKey("player_items:delete"))
          SMManager.DeleteList<PlayerItem>(((IEnumerable<object>) json["player_items:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
        if (!json.ContainsKey("player_presents:delete"))
          return;
        SMManager.DeleteList<PlayerPresent>(((IEnumerable<object>) json["player_presents:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }

      public WebAPI.Response.PvpPlayerFinish ConvertToPlayerFinish()
      {
        WebAPI.Response.PvpPlayerFinish playerFinish = new WebAPI.Response.PvpPlayerFinish();
        playerFinish.is_battle = this.is_battle;
        playerFinish.pvp_maintenance_message = this.pvp_maintenance_message;
        playerFinish.ranking = this.ranking;
        playerFinish.reward_money = this.reward_money;
        playerFinish.is_tutorial = this.is_tutorial;
        playerFinish.player = this.player;
        playerFinish.is_season_done = this.is_season_done;
        playerFinish.pvp_finish = this.pvp_finish;
        playerFinish.current_class = this.current_class;
        playerFinish.target_player_is_friend = this.target_player_is_friend;
        playerFinish.rank_aggregate = this.rank_aggregate;
        playerFinish.player_units = this.player_units;
        playerFinish.bonus = this.bonus;
        playerFinish.player_items = this.player_items;
        playerFinish.campaigns = this.campaigns;
        playerFinish.matching_type = this.matching_type;
        playerFinish.player_material_units = this.player_material_units;
        playerFinish.player_presents = this.player_presents;
        playerFinish.player_material_gears = this.player_material_gears;
        playerFinish.player_character_intimates = this.player_character_intimates;
        playerFinish.pvp_record = this.pvp_record;
        playerFinish.pvp_record_by_friend = this.pvp_record_by_friend;
        playerFinish.pvp_maintenance = this.pvp_maintenance;
        playerFinish.pvp_maintenance_title = this.pvp_maintenance_title;
        playerFinish.pvp_class_record = this.pvp_class_record;
        playerFinish.current_rank = this.current_rank;
        playerFinish.ranking_pt = this.ranking_pt;
        playerFinish.gladiators = this.gladiators;
        List<WebAPI.Response.PvpPlayerFinishCampaign_next_rewards> campaignNextRewardsList = new List<WebAPI.Response.PvpPlayerFinishCampaign_next_rewards>();
        foreach (WebAPI.Response.PvpPlayerNpcFinishCampaign_next_rewards campaignNextReward in this.campaign_next_rewards)
          campaignNextRewardsList.Add(campaignNextReward.ConvertToPlayerFinish());
        playerFinish.campaign_next_rewards = campaignNextRewardsList.ToArray();
        List<WebAPI.Response.PvpPlayerFinishBonus_rewards> finishBonusRewardsList = new List<WebAPI.Response.PvpPlayerFinishBonus_rewards>();
        foreach (WebAPI.Response.PvpPlayerNpcFinishBonus_rewards bonusReward in this.bonus_rewards)
          finishBonusRewardsList.Add(bonusReward.ConvertToPlayerFinish());
        playerFinish.bonus_rewards = finishBonusRewardsList.ToArray();
        List<WebAPI.Response.PvpPlayerFinishFirst_battle_rewards> firstBattleRewardsList = new List<WebAPI.Response.PvpPlayerFinishFirst_battle_rewards>();
        foreach (WebAPI.Response.PvpPlayerNpcFinishFirst_battle_rewards firstBattleReward in this.first_battle_rewards)
          firstBattleRewardsList.Add(firstBattleReward.ConvertToPlayerFinish());
        playerFinish.first_battle_rewards = firstBattleRewardsList.ToArray();
        List<WebAPI.Response.PvpPlayerFinishCampaign_rewards> finishCampaignRewardsList = new List<WebAPI.Response.PvpPlayerFinishCampaign_rewards>();
        foreach (WebAPI.Response.PvpPlayerNpcFinishCampaign_rewards campaignReward in this.campaign_rewards)
          finishCampaignRewardsList.Add(campaignReward.ConvertToPlayerFinish());
        playerFinish.campaign_rewards = finishCampaignRewardsList.ToArray();
        return playerFinish;
      }
    }

    [Serializable]
    public class PvpPlayerNpcFinishCampaign_rewards : KeyCompare
    {
      public int reward_quantity;
      public string show_text2;
      public int reward_type_id;
      public int campaign_id;
      public string show_title;
      public string show_text;
      public int reward_id;

      public PvpPlayerNpcFinishCampaign_rewards()
      {
      }

      public PvpPlayerNpcFinishCampaign_rewards(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_quantity = (int) (long) json[nameof (reward_quantity)];
        this.show_text2 = (string) json[nameof (show_text2)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
        this.campaign_id = (int) (long) json[nameof (campaign_id)];
        this.show_title = (string) json[nameof (show_title)];
        this.show_text = (string) json[nameof (show_text)];
        this.reward_id = (int) (long) json[nameof (reward_id)];
      }

      public WebAPI.Response.PvpPlayerFinishCampaign_rewards ConvertToPlayerFinish()
      {
        return new WebAPI.Response.PvpPlayerFinishCampaign_rewards()
        {
          reward_quantity = this.reward_quantity,
          show_text2 = this.show_text2,
          reward_type_id = this.reward_type_id,
          campaign_id = this.campaign_id,
          show_title = this.show_title,
          show_text = this.show_text,
          reward_id = this.reward_id
        };
      }
    }

    [Serializable]
    public class PvpPlayerNpcFinishFirst_battle_rewards : KeyCompare
    {
      public int reward_quantity;
      public string show_text2;
      public string show_text;
      public int reward_type_id;
      public int reward_id;

      public PvpPlayerNpcFinishFirst_battle_rewards()
      {
      }

      public PvpPlayerNpcFinishFirst_battle_rewards(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_quantity = (int) (long) json[nameof (reward_quantity)];
        this.show_text2 = (string) json[nameof (show_text2)];
        this.show_text = (string) json[nameof (show_text)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
        this.reward_id = (int) (long) json[nameof (reward_id)];
      }

      public WebAPI.Response.PvpPlayerFinishFirst_battle_rewards ConvertToPlayerFinish()
      {
        return new WebAPI.Response.PvpPlayerFinishFirst_battle_rewards()
        {
          reward_quantity = this.reward_quantity,
          show_text2 = this.show_text2,
          show_text = this.show_text,
          reward_type_id = this.reward_type_id,
          reward_id = this.reward_id
        };
      }
    }

    [Serializable]
    public class PvpPlayerNpcFinishBonus_rewards : KeyCompare
    {
      public int reward_quantity;
      public int reward_type_id;
      public int reward_id;

      public PvpPlayerNpcFinishBonus_rewards()
      {
      }

      public PvpPlayerNpcFinishBonus_rewards(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_quantity = (int) (long) json[nameof (reward_quantity)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
        this.reward_id = (int) (long) json[nameof (reward_id)];
      }

      public WebAPI.Response.PvpPlayerFinishBonus_rewards ConvertToPlayerFinish()
      {
        return new WebAPI.Response.PvpPlayerFinishBonus_rewards()
        {
          reward_quantity = this.reward_quantity,
          reward_type_id = this.reward_type_id,
          reward_id = this.reward_id
        };
      }
    }

    [Serializable]
    public class PvpPlayerNpcFinishCampaign_next_rewards : KeyCompare
    {
      public string next_reward_title;
      public int campaign_id;
      public string next_reward_text;

      public PvpPlayerNpcFinishCampaign_next_rewards()
      {
      }

      public PvpPlayerNpcFinishCampaign_next_rewards(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.next_reward_title = (string) json[nameof (next_reward_title)];
        this.campaign_id = (int) (long) json[nameof (campaign_id)];
        this.next_reward_text = (string) json[nameof (next_reward_text)];
      }

      public WebAPI.Response.PvpPlayerFinishCampaign_next_rewards ConvertToPlayerFinish()
      {
        return new WebAPI.Response.PvpPlayerFinishCampaign_next_rewards()
        {
          next_reward_title = this.next_reward_title,
          campaign_id = this.campaign_id,
          next_reward_text = this.next_reward_text
        };
      }
    }

    [Serializable]
    public class PvpPlayerNpcStart : KeyCompare
    {
      public PlayerGearReisouSchema[] target_player_reisou_items;
      public PlayerUnit[] player_units;
      public PlayerCharacterIntimate[] player_character_intimates;
      public PlayerCharacterIntimate[] target_player_character_intimates;
      public DateTime battle_start_at;
      public string battle_uuid;
      public Bonus[] bonus;
      public PlayerGearReisouSchema[] player_reisou_items;
      public bool battle_start;
      public PlayerAwakeSkill[] target_player_awake_skills;
      public PlayerItem[] player_items;
      public Player player;
      public PlayerItem[] target_player_items;
      public Player target_player;
      public PlayerUnit[] target_player_units;
      public PlayerAwakeSkill[] player_awake_skills;
      public PlayerUnit[] player_units_over_killers;
      public PlayerUnit[] target_player_units_over_killers;
      public MpStage stage;

      public PvpPlayerNpcStart()
      {
      }

      public PvpPlayerNpcStart(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerGearReisouSchema> gearReisouSchemaList1 = new List<PlayerGearReisouSchema>();
        foreach (object json1 in (List<object>) json[nameof (target_player_reisou_items)])
          gearReisouSchemaList1.Add(json1 == null ? (PlayerGearReisouSchema) null : new PlayerGearReisouSchema((Dictionary<string, object>) json1));
        this.target_player_reisou_items = gearReisouSchemaList1.ToArray();
        List<PlayerUnit> playerUnitList1 = new List<PlayerUnit>();
        foreach (object json2 in (List<object>) json[nameof (player_units)])
          playerUnitList1.Add(json2 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json2));
        this.player_units = playerUnitList1.ToArray();
        List<PlayerCharacterIntimate> characterIntimateList1 = new List<PlayerCharacterIntimate>();
        foreach (object json3 in (List<object>) json[nameof (player_character_intimates)])
          characterIntimateList1.Add(json3 == null ? (PlayerCharacterIntimate) null : new PlayerCharacterIntimate((Dictionary<string, object>) json3));
        this.player_character_intimates = characterIntimateList1.ToArray();
        List<PlayerCharacterIntimate> characterIntimateList2 = new List<PlayerCharacterIntimate>();
        foreach (object json4 in (List<object>) json[nameof (target_player_character_intimates)])
          characterIntimateList2.Add(json4 == null ? (PlayerCharacterIntimate) null : new PlayerCharacterIntimate((Dictionary<string, object>) json4));
        this.target_player_character_intimates = characterIntimateList2.ToArray();
        this.battle_start_at = DateTime.Parse((string) json[nameof (battle_start_at)]);
        this.battle_uuid = (string) json[nameof (battle_uuid)];
        List<Bonus> bonusList = new List<Bonus>();
        foreach (object json5 in (List<object>) json[nameof (bonus)])
          bonusList.Add(json5 == null ? (Bonus) null : new Bonus((Dictionary<string, object>) json5));
        this.bonus = bonusList.ToArray();
        List<PlayerGearReisouSchema> gearReisouSchemaList2 = new List<PlayerGearReisouSchema>();
        foreach (object json6 in (List<object>) json[nameof (player_reisou_items)])
          gearReisouSchemaList2.Add(json6 == null ? (PlayerGearReisouSchema) null : new PlayerGearReisouSchema((Dictionary<string, object>) json6));
        this.player_reisou_items = gearReisouSchemaList2.ToArray();
        this.battle_start = (bool) json[nameof (battle_start)];
        List<PlayerAwakeSkill> playerAwakeSkillList1 = new List<PlayerAwakeSkill>();
        foreach (object json7 in (List<object>) json[nameof (target_player_awake_skills)])
          playerAwakeSkillList1.Add(json7 == null ? (PlayerAwakeSkill) null : new PlayerAwakeSkill((Dictionary<string, object>) json7));
        this.target_player_awake_skills = playerAwakeSkillList1.ToArray();
        List<PlayerItem> playerItemList1 = new List<PlayerItem>();
        foreach (object json8 in (List<object>) json[nameof (player_items)])
          playerItemList1.Add(json8 == null ? (PlayerItem) null : new PlayerItem((Dictionary<string, object>) json8));
        this.player_items = playerItemList1.ToArray();
        this.player = json[nameof (player)] == null ? (Player) null : new Player((Dictionary<string, object>) json[nameof (player)]);
        SMManager.Change<Player>(this.player);
        List<PlayerItem> playerItemList2 = new List<PlayerItem>();
        foreach (object json9 in (List<object>) json[nameof (target_player_items)])
          playerItemList2.Add(json9 == null ? (PlayerItem) null : new PlayerItem((Dictionary<string, object>) json9));
        this.target_player_items = playerItemList2.ToArray();
        this.target_player = json[nameof (target_player)] == null ? (Player) null : new Player((Dictionary<string, object>) json[nameof (target_player)]);
        List<PlayerUnit> playerUnitList2 = new List<PlayerUnit>();
        foreach (object json10 in (List<object>) json[nameof (target_player_units)])
          playerUnitList2.Add(json10 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json10));
        this.target_player_units = playerUnitList2.ToArray();
        List<PlayerAwakeSkill> playerAwakeSkillList2 = new List<PlayerAwakeSkill>();
        foreach (object json11 in (List<object>) json[nameof (player_awake_skills)])
          playerAwakeSkillList2.Add(json11 == null ? (PlayerAwakeSkill) null : new PlayerAwakeSkill((Dictionary<string, object>) json11));
        this.player_awake_skills = playerAwakeSkillList2.ToArray();
        List<PlayerUnit> playerUnitList3 = new List<PlayerUnit>();
        foreach (object json12 in (List<object>) json[nameof (player_units_over_killers)])
          playerUnitList3.Add(json12 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json12));
        this.player_units_over_killers = playerUnitList3.ToArray();
        List<PlayerUnit> playerUnitList4 = new List<PlayerUnit>();
        foreach (object json13 in (List<object>) json[nameof (target_player_units_over_killers)])
          playerUnitList4.Add(json13 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json13));
        this.target_player_units_over_killers = playerUnitList4.ToArray();
        this.stage = json[nameof (stage)] == null ? (MpStage) null : new MpStage((Dictionary<string, object>) json[nameof (stage)]);
      }
    }

    [Serializable]
    public class PvpPlayerStatus : KeyCompare
    {
      public bool has_battle_result;

      public PvpPlayerStatus()
      {
      }

      public PvpPlayerStatus(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.has_battle_result = (bool) json[nameof (has_battle_result)];
      }
    }

    [Serializable]
    public class PvpRanking : KeyCompare
    {
      public bool rank_aggregate;
      public int rank_kind;
      public RankingGroup[] ranking_groups;

      public PvpRanking()
      {
      }

      public PvpRanking(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.rank_aggregate = (bool) json[nameof (rank_aggregate)];
        this.rank_kind = (int) (long) json[nameof (rank_kind)];
        List<RankingGroup> rankingGroupList = new List<RankingGroup>();
        foreach (object json1 in (List<object>) json[nameof (ranking_groups)])
          rankingGroupList.Add(json1 == null ? (RankingGroup) null : new RankingGroup((Dictionary<string, object>) json1));
        this.ranking_groups = rankingGroupList.ToArray();
      }
    }

    [Serializable]
    public class PvpRankingClose : KeyCompare
    {
      public int ranking;
      public PlayerEmblem[] new_emblems;
      public DateTime? finish_time;
      public int term_id;
      public DateTime? start_time;
      public int next_rank;
      public int current_rank;
      public int ranking_pt;
      public WebAPI.Response.PvpRankingCloseRanking_rewards[] ranking_rewards;
      public PlayerPresent[] player_presents;

      public PvpRankingClose()
      {
      }

      public PvpRankingClose(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.ranking = (int) (long) json[nameof (ranking)];
        List<PlayerEmblem> playerEmblemList = new List<PlayerEmblem>();
        foreach (object json1 in (List<object>) json[nameof (new_emblems)])
          playerEmblemList.Add(json1 == null ? (PlayerEmblem) null : new PlayerEmblem((Dictionary<string, object>) json1));
        this.new_emblems = playerEmblemList.ToArray();
        this.finish_time = json[nameof (finish_time)] == null ? new DateTime?() : new DateTime?(DateTime.Parse((string) json[nameof (finish_time)]));
        this.term_id = (int) (long) json[nameof (term_id)];
        this.start_time = json[nameof (start_time)] == null ? new DateTime?() : new DateTime?(DateTime.Parse((string) json[nameof (start_time)]));
        this.next_rank = (int) (long) json[nameof (next_rank)];
        this.current_rank = (int) (long) json[nameof (current_rank)];
        this.ranking_pt = (int) (long) json[nameof (ranking_pt)];
        List<WebAPI.Response.PvpRankingCloseRanking_rewards> closeRankingRewardsList = new List<WebAPI.Response.PvpRankingCloseRanking_rewards>();
        foreach (object json2 in (List<object>) json[nameof (ranking_rewards)])
          closeRankingRewardsList.Add(json2 == null ? (WebAPI.Response.PvpRankingCloseRanking_rewards) null : new WebAPI.Response.PvpRankingCloseRanking_rewards((Dictionary<string, object>) json2));
        this.ranking_rewards = closeRankingRewardsList.ToArray();
        List<PlayerPresent> playerPresentList = new List<PlayerPresent>();
        foreach (object json3 in (List<object>) json[nameof (player_presents)])
          playerPresentList.Add(json3 == null ? (PlayerPresent) null : new PlayerPresent((Dictionary<string, object>) json3));
        this.player_presents = playerPresentList.ToArray();
        SMManager.UpdateList<PlayerPresent>(this.player_presents);
        if (!json.ContainsKey("player_presents:delete"))
          return;
        SMManager.DeleteList<PlayerPresent>(((IEnumerable<object>) json["player_presents:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class PvpRankingCloseRanking_rewards : KeyCompare
    {
      public int reward_quantity;
      public string show_text;
      public int condition_id;
      public int reward_id;
      public int reward_type_id;

      public PvpRankingCloseRanking_rewards()
      {
      }

      public PvpRankingCloseRanking_rewards(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_quantity = (int) (long) json[nameof (reward_quantity)];
        this.show_text = (string) json[nameof (show_text)];
        this.condition_id = (int) (long) json[nameof (condition_id)];
        this.reward_id = (int) (long) json[nameof (reward_id)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
      }
    }

    [Serializable]
    public class PvpResume : KeyCompare
    {
      public PlayerAwakeSkill[] player2_awake_skills;
      public PlayerCharacterIntimate[] player2_character_intimates;
      public PlayerUnit[] player1_units_over_killers;
      public DateTime battle_start_at;
      public string battle_uuid;
      public Bonus[] bonus;
      public PlayerItem[] player1_items;
      public bool battle_start;
      public PlayerCharacterIntimate[] player1_character_intimates;
      public PlayerUnit[] player1_units;
      public Player player2;
      public PlayerAwakeSkill[] player1_awake_skills;
      public PlayerGearReisouSchema[] player2_reisou_items;
      public Player player1;
      public PlayerGearReisouSchema[] player1_reisou_items;
      public PlayerUnit[] player2_units;
      public PlayerUnit[] player2_units_over_killers;
      public int order;
      public PlayerItem[] player2_items;
      public MpStage stage;

      public PvpResume()
      {
      }

      public PvpResume(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerAwakeSkill> playerAwakeSkillList1 = new List<PlayerAwakeSkill>();
        foreach (object json1 in (List<object>) json[nameof (player2_awake_skills)])
          playerAwakeSkillList1.Add(json1 == null ? (PlayerAwakeSkill) null : new PlayerAwakeSkill((Dictionary<string, object>) json1));
        this.player2_awake_skills = playerAwakeSkillList1.ToArray();
        List<PlayerCharacterIntimate> characterIntimateList1 = new List<PlayerCharacterIntimate>();
        foreach (object json2 in (List<object>) json[nameof (player2_character_intimates)])
          characterIntimateList1.Add(json2 == null ? (PlayerCharacterIntimate) null : new PlayerCharacterIntimate((Dictionary<string, object>) json2));
        this.player2_character_intimates = characterIntimateList1.ToArray();
        List<PlayerUnit> playerUnitList1 = new List<PlayerUnit>();
        foreach (object json3 in (List<object>) json[nameof (player1_units_over_killers)])
          playerUnitList1.Add(json3 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json3));
        this.player1_units_over_killers = playerUnitList1.ToArray();
        this.battle_start_at = DateTime.Parse((string) json[nameof (battle_start_at)]);
        this.battle_uuid = (string) json[nameof (battle_uuid)];
        List<Bonus> bonusList = new List<Bonus>();
        foreach (object json4 in (List<object>) json[nameof (bonus)])
          bonusList.Add(json4 == null ? (Bonus) null : new Bonus((Dictionary<string, object>) json4));
        this.bonus = bonusList.ToArray();
        List<PlayerItem> playerItemList1 = new List<PlayerItem>();
        foreach (object json5 in (List<object>) json[nameof (player1_items)])
          playerItemList1.Add(json5 == null ? (PlayerItem) null : new PlayerItem((Dictionary<string, object>) json5));
        this.player1_items = playerItemList1.ToArray();
        this.battle_start = (bool) json[nameof (battle_start)];
        List<PlayerCharacterIntimate> characterIntimateList2 = new List<PlayerCharacterIntimate>();
        foreach (object json6 in (List<object>) json[nameof (player1_character_intimates)])
          characterIntimateList2.Add(json6 == null ? (PlayerCharacterIntimate) null : new PlayerCharacterIntimate((Dictionary<string, object>) json6));
        this.player1_character_intimates = characterIntimateList2.ToArray();
        List<PlayerUnit> playerUnitList2 = new List<PlayerUnit>();
        foreach (object json7 in (List<object>) json[nameof (player1_units)])
          playerUnitList2.Add(json7 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json7));
        this.player1_units = playerUnitList2.ToArray();
        this.player2 = json[nameof (player2)] == null ? (Player) null : new Player((Dictionary<string, object>) json[nameof (player2)]);
        List<PlayerAwakeSkill> playerAwakeSkillList2 = new List<PlayerAwakeSkill>();
        foreach (object json8 in (List<object>) json[nameof (player1_awake_skills)])
          playerAwakeSkillList2.Add(json8 == null ? (PlayerAwakeSkill) null : new PlayerAwakeSkill((Dictionary<string, object>) json8));
        this.player1_awake_skills = playerAwakeSkillList2.ToArray();
        List<PlayerGearReisouSchema> gearReisouSchemaList1 = new List<PlayerGearReisouSchema>();
        foreach (object json9 in (List<object>) json[nameof (player2_reisou_items)])
          gearReisouSchemaList1.Add(json9 == null ? (PlayerGearReisouSchema) null : new PlayerGearReisouSchema((Dictionary<string, object>) json9));
        this.player2_reisou_items = gearReisouSchemaList1.ToArray();
        this.player1 = json[nameof (player1)] == null ? (Player) null : new Player((Dictionary<string, object>) json[nameof (player1)]);
        List<PlayerGearReisouSchema> gearReisouSchemaList2 = new List<PlayerGearReisouSchema>();
        foreach (object json10 in (List<object>) json[nameof (player1_reisou_items)])
          gearReisouSchemaList2.Add(json10 == null ? (PlayerGearReisouSchema) null : new PlayerGearReisouSchema((Dictionary<string, object>) json10));
        this.player1_reisou_items = gearReisouSchemaList2.ToArray();
        List<PlayerUnit> playerUnitList3 = new List<PlayerUnit>();
        foreach (object json11 in (List<object>) json[nameof (player2_units)])
          playerUnitList3.Add(json11 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json11));
        this.player2_units = playerUnitList3.ToArray();
        List<PlayerUnit> playerUnitList4 = new List<PlayerUnit>();
        foreach (object json12 in (List<object>) json[nameof (player2_units_over_killers)])
          playerUnitList4.Add(json12 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json12));
        this.player2_units_over_killers = playerUnitList4.ToArray();
        this.order = (int) (long) json[nameof (order)];
        List<PlayerItem> playerItemList2 = new List<PlayerItem>();
        foreach (object json13 in (List<object>) json[nameof (player2_items)])
          playerItemList2.Add(json13 == null ? (PlayerItem) null : new PlayerItem((Dictionary<string, object>) json13));
        this.player2_items = playerItemList2.ToArray();
        this.stage = json[nameof (stage)] == null ? (MpStage) null : new MpStage((Dictionary<string, object>) json[nameof (stage)]);
      }
    }

    [Serializable]
    public class PvpSeasonClose : KeyCompare
    {
      public WebAPI.Response.PvpSeasonCloseClass_rewards[] class_rewards;
      public PlayerEmblem[] new_emblems;
      public PlayerPresent[] player_presents;

      public PvpSeasonClose()
      {
      }

      public PvpSeasonClose(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<WebAPI.Response.PvpSeasonCloseClass_rewards> closeClassRewardsList = new List<WebAPI.Response.PvpSeasonCloseClass_rewards>();
        foreach (object json1 in (List<object>) json[nameof (class_rewards)])
          closeClassRewardsList.Add(json1 == null ? (WebAPI.Response.PvpSeasonCloseClass_rewards) null : new WebAPI.Response.PvpSeasonCloseClass_rewards((Dictionary<string, object>) json1));
        this.class_rewards = closeClassRewardsList.ToArray();
        List<PlayerEmblem> playerEmblemList = new List<PlayerEmblem>();
        foreach (object json2 in (List<object>) json[nameof (new_emblems)])
          playerEmblemList.Add(json2 == null ? (PlayerEmblem) null : new PlayerEmblem((Dictionary<string, object>) json2));
        this.new_emblems = playerEmblemList.ToArray();
        List<PlayerPresent> playerPresentList = new List<PlayerPresent>();
        foreach (object json3 in (List<object>) json[nameof (player_presents)])
          playerPresentList.Add(json3 == null ? (PlayerPresent) null : new PlayerPresent((Dictionary<string, object>) json3));
        this.player_presents = playerPresentList.ToArray();
        SMManager.UpdateList<PlayerPresent>(this.player_presents);
        if (!json.ContainsKey("player_presents:delete"))
          return;
        SMManager.DeleteList<PlayerPresent>(((IEnumerable<object>) json["player_presents:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class PvpSeasonCloseClass_rewards : KeyCompare
    {
      public int reward_quantity;
      public int reward_type_id;
      public int class_reward_type;
      public string show_text;
      public int class_kind;
      public int reward_id;

      public PvpSeasonCloseClass_rewards()
      {
      }

      public PvpSeasonCloseClass_rewards(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_quantity = (int) (long) json[nameof (reward_quantity)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
        this.class_reward_type = (int) (long) json[nameof (class_reward_type)];
        this.show_text = (string) json[nameof (show_text)];
        this.class_kind = (int) (long) json[nameof (class_kind)];
        this.reward_id = (int) (long) json[nameof (reward_id)];
      }
    }

    [Serializable]
    public class PvpTutorialPlayerFinish : KeyCompare
    {
      public bool is_battle;
      public string pvp_maintenance_message;
      public int ranking;
      public int reward_money;
      public bool is_tutorial;
      public Player player;
      public bool is_season_done;
      public PvPEnd pvp_finish;
      public WebAPI.Response.PvpTutorialPlayerFinishCampaign_next_rewards[] campaign_next_rewards;
      public int current_class;
      public bool target_player_is_friend;
      public bool rank_aggregate;
      public WebAPI.Response.PvpTutorialPlayerFinishBonus_rewards[] bonus_rewards;
      public WebAPI.Response.PvpTutorialPlayerFinishFirst_battle_rewards[] first_battle_rewards;
      public PlayerUnit[] player_units;
      public Bonus[] bonus;
      public PlayerItem[] player_items;
      public Campaign[] campaigns;
      public int matching_type;
      public WebAPI.Response.PvpTutorialPlayerFinishCampaign_rewards[] campaign_rewards;
      public PlayerMaterialUnit[] player_material_units;
      public PlayerPresent[] player_presents;
      public PlayerMaterialGear[] player_material_gears;
      public PlayerCharacterIntimate[] player_character_intimates;
      public PvPRecord pvp_record;
      public PvPRecord pvp_record_by_friend;
      public bool pvp_maintenance;
      public string pvp_maintenance_title;
      public PvPClassRecord pvp_class_record;
      public int current_rank;
      public int ranking_pt;
      public PlayerHelper[] gladiators;

      public PvpTutorialPlayerFinish()
      {
      }

      public PvpTutorialPlayerFinish(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.is_battle = (bool) json[nameof (is_battle)];
        this.pvp_maintenance_message = (string) json[nameof (pvp_maintenance_message)];
        this.ranking = (int) (long) json[nameof (ranking)];
        this.reward_money = (int) (long) json[nameof (reward_money)];
        this.is_tutorial = (bool) json[nameof (is_tutorial)];
        this.player = json[nameof (player)] == null ? (Player) null : new Player((Dictionary<string, object>) json[nameof (player)]);
        SMManager.Change<Player>(this.player);
        this.is_season_done = (bool) json[nameof (is_season_done)];
        this.pvp_finish = json[nameof (pvp_finish)] == null ? (PvPEnd) null : new PvPEnd((Dictionary<string, object>) json[nameof (pvp_finish)]);
        List<WebAPI.Response.PvpTutorialPlayerFinishCampaign_next_rewards> campaignNextRewardsList = new List<WebAPI.Response.PvpTutorialPlayerFinishCampaign_next_rewards>();
        foreach (object json1 in (List<object>) json[nameof (campaign_next_rewards)])
          campaignNextRewardsList.Add(json1 == null ? (WebAPI.Response.PvpTutorialPlayerFinishCampaign_next_rewards) null : new WebAPI.Response.PvpTutorialPlayerFinishCampaign_next_rewards((Dictionary<string, object>) json1));
        this.campaign_next_rewards = campaignNextRewardsList.ToArray();
        this.current_class = (int) (long) json[nameof (current_class)];
        this.target_player_is_friend = (bool) json[nameof (target_player_is_friend)];
        this.rank_aggregate = (bool) json[nameof (rank_aggregate)];
        List<WebAPI.Response.PvpTutorialPlayerFinishBonus_rewards> finishBonusRewardsList = new List<WebAPI.Response.PvpTutorialPlayerFinishBonus_rewards>();
        foreach (object json2 in (List<object>) json[nameof (bonus_rewards)])
          finishBonusRewardsList.Add(json2 == null ? (WebAPI.Response.PvpTutorialPlayerFinishBonus_rewards) null : new WebAPI.Response.PvpTutorialPlayerFinishBonus_rewards((Dictionary<string, object>) json2));
        this.bonus_rewards = finishBonusRewardsList.ToArray();
        List<WebAPI.Response.PvpTutorialPlayerFinishFirst_battle_rewards> firstBattleRewardsList = new List<WebAPI.Response.PvpTutorialPlayerFinishFirst_battle_rewards>();
        foreach (object json3 in (List<object>) json[nameof (first_battle_rewards)])
          firstBattleRewardsList.Add(json3 == null ? (WebAPI.Response.PvpTutorialPlayerFinishFirst_battle_rewards) null : new WebAPI.Response.PvpTutorialPlayerFinishFirst_battle_rewards((Dictionary<string, object>) json3));
        this.first_battle_rewards = firstBattleRewardsList.ToArray();
        List<PlayerUnit> playerUnitList = new List<PlayerUnit>();
        foreach (object json4 in (List<object>) json[nameof (player_units)])
          playerUnitList.Add(json4 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json4));
        this.player_units = playerUnitList.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_units);
        List<Bonus> bonusList = new List<Bonus>();
        foreach (object json5 in (List<object>) json[nameof (bonus)])
          bonusList.Add(json5 == null ? (Bonus) null : new Bonus((Dictionary<string, object>) json5));
        this.bonus = bonusList.ToArray();
        List<PlayerItem> playerItemList = new List<PlayerItem>();
        foreach (object json6 in (List<object>) json[nameof (player_items)])
          playerItemList.Add(json6 == null ? (PlayerItem) null : new PlayerItem((Dictionary<string, object>) json6));
        this.player_items = playerItemList.ToArray();
        SMManager.UpdateList<PlayerItem>(this.player_items);
        List<Campaign> campaignList = new List<Campaign>();
        foreach (object json7 in (List<object>) json[nameof (campaigns)])
          campaignList.Add(json7 == null ? (Campaign) null : new Campaign((Dictionary<string, object>) json7));
        this.campaigns = campaignList.ToArray();
        this.matching_type = (int) (long) json[nameof (matching_type)];
        List<WebAPI.Response.PvpTutorialPlayerFinishCampaign_rewards> finishCampaignRewardsList = new List<WebAPI.Response.PvpTutorialPlayerFinishCampaign_rewards>();
        foreach (object json8 in (List<object>) json[nameof (campaign_rewards)])
          finishCampaignRewardsList.Add(json8 == null ? (WebAPI.Response.PvpTutorialPlayerFinishCampaign_rewards) null : new WebAPI.Response.PvpTutorialPlayerFinishCampaign_rewards((Dictionary<string, object>) json8));
        this.campaign_rewards = finishCampaignRewardsList.ToArray();
        List<PlayerMaterialUnit> playerMaterialUnitList = new List<PlayerMaterialUnit>();
        foreach (object json9 in (List<object>) json[nameof (player_material_units)])
          playerMaterialUnitList.Add(json9 == null ? (PlayerMaterialUnit) null : new PlayerMaterialUnit((Dictionary<string, object>) json9));
        this.player_material_units = playerMaterialUnitList.ToArray();
        SMManager.UpdateList<PlayerMaterialUnit>(this.player_material_units);
        List<PlayerPresent> playerPresentList = new List<PlayerPresent>();
        foreach (object json10 in (List<object>) json[nameof (player_presents)])
          playerPresentList.Add(json10 == null ? (PlayerPresent) null : new PlayerPresent((Dictionary<string, object>) json10));
        this.player_presents = playerPresentList.ToArray();
        SMManager.UpdateList<PlayerPresent>(this.player_presents);
        List<PlayerMaterialGear> playerMaterialGearList = new List<PlayerMaterialGear>();
        foreach (object json11 in (List<object>) json[nameof (player_material_gears)])
          playerMaterialGearList.Add(json11 == null ? (PlayerMaterialGear) null : new PlayerMaterialGear((Dictionary<string, object>) json11));
        this.player_material_gears = playerMaterialGearList.ToArray();
        SMManager.UpdateList<PlayerMaterialGear>(this.player_material_gears);
        List<PlayerCharacterIntimate> characterIntimateList = new List<PlayerCharacterIntimate>();
        foreach (object json12 in (List<object>) json[nameof (player_character_intimates)])
          characterIntimateList.Add(json12 == null ? (PlayerCharacterIntimate) null : new PlayerCharacterIntimate((Dictionary<string, object>) json12));
        this.player_character_intimates = characterIntimateList.ToArray();
        SMManager.UpdateList<PlayerCharacterIntimate>(this.player_character_intimates);
        this.pvp_record = json[nameof (pvp_record)] == null ? (PvPRecord) null : new PvPRecord((Dictionary<string, object>) json[nameof (pvp_record)]);
        this.pvp_record_by_friend = json[nameof (pvp_record_by_friend)] == null ? (PvPRecord) null : new PvPRecord((Dictionary<string, object>) json[nameof (pvp_record_by_friend)]);
        this.pvp_maintenance = (bool) json[nameof (pvp_maintenance)];
        this.pvp_maintenance_title = (string) json[nameof (pvp_maintenance_title)];
        this.pvp_class_record = json[nameof (pvp_class_record)] == null ? (PvPClassRecord) null : new PvPClassRecord((Dictionary<string, object>) json[nameof (pvp_class_record)]);
        this.current_rank = (int) (long) json[nameof (current_rank)];
        this.ranking_pt = (int) (long) json[nameof (ranking_pt)];
        List<PlayerHelper> playerHelperList = new List<PlayerHelper>();
        foreach (object json13 in (List<object>) json[nameof (gladiators)])
          playerHelperList.Add(json13 == null ? (PlayerHelper) null : new PlayerHelper((Dictionary<string, object>) json13));
        this.gladiators = playerHelperList.ToArray();
        if (json.ContainsKey("player_material_gears:delete"))
          SMManager.DeleteList<PlayerMaterialGear>(((IEnumerable<object>) json["player_material_gears:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
        if (json.ContainsKey("player_items:delete"))
          SMManager.DeleteList<PlayerItem>(((IEnumerable<object>) json["player_items:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
        if (!json.ContainsKey("player_presents:delete"))
          return;
        SMManager.DeleteList<PlayerPresent>(((IEnumerable<object>) json["player_presents:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class PvpTutorialPlayerFinishCampaign_rewards : KeyCompare
    {
      public int reward_quantity;
      public string show_text2;
      public int reward_type_id;
      public int campaign_id;
      public string show_title;
      public string show_text;
      public int reward_id;

      public PvpTutorialPlayerFinishCampaign_rewards()
      {
      }

      public PvpTutorialPlayerFinishCampaign_rewards(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_quantity = (int) (long) json[nameof (reward_quantity)];
        this.show_text2 = (string) json[nameof (show_text2)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
        this.campaign_id = (int) (long) json[nameof (campaign_id)];
        this.show_title = (string) json[nameof (show_title)];
        this.show_text = (string) json[nameof (show_text)];
        this.reward_id = (int) (long) json[nameof (reward_id)];
      }
    }

    [Serializable]
    public class PvpTutorialPlayerFinishFirst_battle_rewards : KeyCompare
    {
      public int reward_quantity;
      public string show_text2;
      public string show_text;
      public int reward_type_id;
      public int reward_id;

      public PvpTutorialPlayerFinishFirst_battle_rewards()
      {
      }

      public PvpTutorialPlayerFinishFirst_battle_rewards(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_quantity = (int) (long) json[nameof (reward_quantity)];
        this.show_text2 = (string) json[nameof (show_text2)];
        this.show_text = (string) json[nameof (show_text)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
        this.reward_id = (int) (long) json[nameof (reward_id)];
      }
    }

    [Serializable]
    public class PvpTutorialPlayerFinishBonus_rewards : KeyCompare
    {
      public int reward_quantity;
      public int reward_type_id;
      public int reward_id;

      public PvpTutorialPlayerFinishBonus_rewards()
      {
      }

      public PvpTutorialPlayerFinishBonus_rewards(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_quantity = (int) (long) json[nameof (reward_quantity)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
        this.reward_id = (int) (long) json[nameof (reward_id)];
      }
    }

    [Serializable]
    public class PvpTutorialPlayerFinishCampaign_next_rewards : KeyCompare
    {
      public string next_reward_title;
      public int campaign_id;
      public string next_reward_text;

      public PvpTutorialPlayerFinishCampaign_next_rewards()
      {
      }

      public PvpTutorialPlayerFinishCampaign_next_rewards(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.next_reward_title = (string) json[nameof (next_reward_title)];
        this.campaign_id = (int) (long) json[nameof (campaign_id)];
        this.next_reward_text = (string) json[nameof (next_reward_text)];
      }
    }

    [Serializable]
    public class PvpTutorialProgressFinish : KeyCompare
    {
      public bool tutorial_finish;

      public PvpTutorialProgressFinish()
      {
      }

      public PvpTutorialProgressFinish(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.tutorial_finish = (bool) json[nameof (tutorial_finish)];
      }
    }

    [Serializable]
    public class QuestCorpsBattleFinish : KeyCompare
    {
      public WebAPI.Response.QuestCorpsBattleFinishDrop_gear_entities[] drop_gear_entities;
      public WebAPI.Response.QuestCorpsBattleFinishDrop_unit_type_ticket_entities[] drop_unit_type_ticket_entities;
      public PlayerCorps[] player_corps_list;
      public Player player;
      public PlayerQuestKey[] player_quest_keys;
      public WebAPI.Response.QuestCorpsBattleFinishStage_clear_rewards[] stage_clear_rewards;
      public WebAPI.Response.QuestCorpsBattleFinishDrop_common_ticket_entities[] drop_common_ticket_entities;
      public int[] clear_mission_ids;
      public PlayerAwakeSkill[] player_awake_skills;
      public PlayerCommonTicket[] player_common_tickets;
      public Player before_player;
      public PlayerUnit[] player_units;
      public PlayerUnitTypeTicket[] player_unit_type_tickets;
      public WebAPI.Response.QuestCorpsBattleFinishDrop_unit_ticket_entities[] drop_unit_ticket_entities;
      public WebAPI.Response.QuestCorpsBattleFinishDrop_material_unit_entities[] drop_material_unit_entities;
      public PlayerItem[] player_items;
      public PlayerCorpsDeck[] player_corps_decks;
      public PlayerMaterialUnit[] player_material_units;
      public PlayerPresent[] player_presents;
      public PlayerMaterialGear[] player_material_gears;
      public WebAPI.Response.QuestCorpsBattleFinishDrop_material_gear_entities[] drop_material_gear_entities;
      public WebAPI.Response.QuestCorpsBattleFinishDrop_unit_entities[] drop_unit_entities;
      public WebAPI.Response.QuestCorpsBattleFinishDrop_quest_key_entities[] drop_quest_key_entities;
      public PlayerCharacterIntimate[] player_character_intimates;
      public WebAPI.Response.QuestCorpsBattleFinishDrop_supply_entities[] drop_supply_entities;
      public WebAPI.Response.QuestCorpsBattleFinishDrop_gacha_ticket_entities[] drop_gacha_ticket_entities;

      public QuestCorpsBattleFinish()
      {
      }

      public QuestCorpsBattleFinish(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<WebAPI.Response.QuestCorpsBattleFinishDrop_gear_entities> dropGearEntitiesList = new List<WebAPI.Response.QuestCorpsBattleFinishDrop_gear_entities>();
        foreach (object json1 in (List<object>) json[nameof (drop_gear_entities)])
          dropGearEntitiesList.Add(json1 == null ? (WebAPI.Response.QuestCorpsBattleFinishDrop_gear_entities) null : new WebAPI.Response.QuestCorpsBattleFinishDrop_gear_entities((Dictionary<string, object>) json1));
        this.drop_gear_entities = dropGearEntitiesList.ToArray();
        List<WebAPI.Response.QuestCorpsBattleFinishDrop_unit_type_ticket_entities> typeTicketEntitiesList = new List<WebAPI.Response.QuestCorpsBattleFinishDrop_unit_type_ticket_entities>();
        foreach (object json2 in (List<object>) json[nameof (drop_unit_type_ticket_entities)])
          typeTicketEntitiesList.Add(json2 == null ? (WebAPI.Response.QuestCorpsBattleFinishDrop_unit_type_ticket_entities) null : new WebAPI.Response.QuestCorpsBattleFinishDrop_unit_type_ticket_entities((Dictionary<string, object>) json2));
        this.drop_unit_type_ticket_entities = typeTicketEntitiesList.ToArray();
        List<PlayerCorps> playerCorpsList = new List<PlayerCorps>();
        foreach (object json3 in (List<object>) json[nameof (player_corps_list)])
          playerCorpsList.Add(json3 == null ? (PlayerCorps) null : new PlayerCorps((Dictionary<string, object>) json3));
        this.player_corps_list = playerCorpsList.ToArray();
        SMManager.UpdateList<PlayerCorps>(this.player_corps_list);
        this.player = json[nameof (player)] == null ? (Player) null : new Player((Dictionary<string, object>) json[nameof (player)]);
        SMManager.Change<Player>(this.player);
        List<PlayerQuestKey> playerQuestKeyList = new List<PlayerQuestKey>();
        foreach (object json4 in (List<object>) json[nameof (player_quest_keys)])
          playerQuestKeyList.Add(json4 == null ? (PlayerQuestKey) null : new PlayerQuestKey((Dictionary<string, object>) json4));
        this.player_quest_keys = playerQuestKeyList.ToArray();
        SMManager.UpdateList<PlayerQuestKey>(this.player_quest_keys);
        List<WebAPI.Response.QuestCorpsBattleFinishStage_clear_rewards> stageClearRewardsList = new List<WebAPI.Response.QuestCorpsBattleFinishStage_clear_rewards>();
        foreach (object json5 in (List<object>) json[nameof (stage_clear_rewards)])
          stageClearRewardsList.Add(json5 == null ? (WebAPI.Response.QuestCorpsBattleFinishStage_clear_rewards) null : new WebAPI.Response.QuestCorpsBattleFinishStage_clear_rewards((Dictionary<string, object>) json5));
        this.stage_clear_rewards = stageClearRewardsList.ToArray();
        List<WebAPI.Response.QuestCorpsBattleFinishDrop_common_ticket_entities> commonTicketEntitiesList = new List<WebAPI.Response.QuestCorpsBattleFinishDrop_common_ticket_entities>();
        foreach (object json6 in (List<object>) json[nameof (drop_common_ticket_entities)])
          commonTicketEntitiesList.Add(json6 == null ? (WebAPI.Response.QuestCorpsBattleFinishDrop_common_ticket_entities) null : new WebAPI.Response.QuestCorpsBattleFinishDrop_common_ticket_entities((Dictionary<string, object>) json6));
        this.drop_common_ticket_entities = commonTicketEntitiesList.ToArray();
        this.clear_mission_ids = ((IEnumerable<object>) json[nameof (clear_mission_ids)]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).ToArray<int>();
        List<PlayerAwakeSkill> playerAwakeSkillList = new List<PlayerAwakeSkill>();
        foreach (object json7 in (List<object>) json[nameof (player_awake_skills)])
          playerAwakeSkillList.Add(json7 == null ? (PlayerAwakeSkill) null : new PlayerAwakeSkill((Dictionary<string, object>) json7));
        this.player_awake_skills = playerAwakeSkillList.ToArray();
        SMManager.UpdateList<PlayerAwakeSkill>(this.player_awake_skills);
        List<PlayerCommonTicket> playerCommonTicketList = new List<PlayerCommonTicket>();
        foreach (object json8 in (List<object>) json[nameof (player_common_tickets)])
          playerCommonTicketList.Add(json8 == null ? (PlayerCommonTicket) null : new PlayerCommonTicket((Dictionary<string, object>) json8));
        this.player_common_tickets = playerCommonTicketList.ToArray();
        SMManager.UpdateList<PlayerCommonTicket>(this.player_common_tickets);
        this.before_player = json[nameof (before_player)] == null ? (Player) null : new Player((Dictionary<string, object>) json[nameof (before_player)]);
        List<PlayerUnit> playerUnitList = new List<PlayerUnit>();
        foreach (object json9 in (List<object>) json[nameof (player_units)])
          playerUnitList.Add(json9 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json9));
        this.player_units = playerUnitList.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_units);
        List<PlayerUnitTypeTicket> playerUnitTypeTicketList = new List<PlayerUnitTypeTicket>();
        foreach (object json10 in (List<object>) json[nameof (player_unit_type_tickets)])
          playerUnitTypeTicketList.Add(json10 == null ? (PlayerUnitTypeTicket) null : new PlayerUnitTypeTicket((Dictionary<string, object>) json10));
        this.player_unit_type_tickets = playerUnitTypeTicketList.ToArray();
        SMManager.UpdateList<PlayerUnitTypeTicket>(this.player_unit_type_tickets);
        List<WebAPI.Response.QuestCorpsBattleFinishDrop_unit_ticket_entities> unitTicketEntitiesList = new List<WebAPI.Response.QuestCorpsBattleFinishDrop_unit_ticket_entities>();
        foreach (object json11 in (List<object>) json[nameof (drop_unit_ticket_entities)])
          unitTicketEntitiesList.Add(json11 == null ? (WebAPI.Response.QuestCorpsBattleFinishDrop_unit_ticket_entities) null : new WebAPI.Response.QuestCorpsBattleFinishDrop_unit_ticket_entities((Dictionary<string, object>) json11));
        this.drop_unit_ticket_entities = unitTicketEntitiesList.ToArray();
        List<WebAPI.Response.QuestCorpsBattleFinishDrop_material_unit_entities> materialUnitEntitiesList = new List<WebAPI.Response.QuestCorpsBattleFinishDrop_material_unit_entities>();
        foreach (object json12 in (List<object>) json[nameof (drop_material_unit_entities)])
          materialUnitEntitiesList.Add(json12 == null ? (WebAPI.Response.QuestCorpsBattleFinishDrop_material_unit_entities) null : new WebAPI.Response.QuestCorpsBattleFinishDrop_material_unit_entities((Dictionary<string, object>) json12));
        this.drop_material_unit_entities = materialUnitEntitiesList.ToArray();
        List<PlayerItem> playerItemList = new List<PlayerItem>();
        foreach (object json13 in (List<object>) json[nameof (player_items)])
          playerItemList.Add(json13 == null ? (PlayerItem) null : new PlayerItem((Dictionary<string, object>) json13));
        this.player_items = playerItemList.ToArray();
        SMManager.UpdateList<PlayerItem>(this.player_items);
        List<PlayerCorpsDeck> playerCorpsDeckList = new List<PlayerCorpsDeck>();
        foreach (object json14 in (List<object>) json[nameof (player_corps_decks)])
          playerCorpsDeckList.Add(json14 == null ? (PlayerCorpsDeck) null : new PlayerCorpsDeck((Dictionary<string, object>) json14));
        this.player_corps_decks = playerCorpsDeckList.ToArray();
        SMManager.UpdateList<PlayerCorpsDeck>(this.player_corps_decks);
        List<PlayerMaterialUnit> playerMaterialUnitList = new List<PlayerMaterialUnit>();
        foreach (object json15 in (List<object>) json[nameof (player_material_units)])
          playerMaterialUnitList.Add(json15 == null ? (PlayerMaterialUnit) null : new PlayerMaterialUnit((Dictionary<string, object>) json15));
        this.player_material_units = playerMaterialUnitList.ToArray();
        SMManager.UpdateList<PlayerMaterialUnit>(this.player_material_units);
        List<PlayerPresent> playerPresentList = new List<PlayerPresent>();
        foreach (object json16 in (List<object>) json[nameof (player_presents)])
          playerPresentList.Add(json16 == null ? (PlayerPresent) null : new PlayerPresent((Dictionary<string, object>) json16));
        this.player_presents = playerPresentList.ToArray();
        SMManager.UpdateList<PlayerPresent>(this.player_presents);
        List<PlayerMaterialGear> playerMaterialGearList = new List<PlayerMaterialGear>();
        foreach (object json17 in (List<object>) json[nameof (player_material_gears)])
          playerMaterialGearList.Add(json17 == null ? (PlayerMaterialGear) null : new PlayerMaterialGear((Dictionary<string, object>) json17));
        this.player_material_gears = playerMaterialGearList.ToArray();
        SMManager.UpdateList<PlayerMaterialGear>(this.player_material_gears);
        List<WebAPI.Response.QuestCorpsBattleFinishDrop_material_gear_entities> materialGearEntitiesList = new List<WebAPI.Response.QuestCorpsBattleFinishDrop_material_gear_entities>();
        foreach (object json18 in (List<object>) json[nameof (drop_material_gear_entities)])
          materialGearEntitiesList.Add(json18 == null ? (WebAPI.Response.QuestCorpsBattleFinishDrop_material_gear_entities) null : new WebAPI.Response.QuestCorpsBattleFinishDrop_material_gear_entities((Dictionary<string, object>) json18));
        this.drop_material_gear_entities = materialGearEntitiesList.ToArray();
        List<WebAPI.Response.QuestCorpsBattleFinishDrop_unit_entities> dropUnitEntitiesList = new List<WebAPI.Response.QuestCorpsBattleFinishDrop_unit_entities>();
        foreach (object json19 in (List<object>) json[nameof (drop_unit_entities)])
          dropUnitEntitiesList.Add(json19 == null ? (WebAPI.Response.QuestCorpsBattleFinishDrop_unit_entities) null : new WebAPI.Response.QuestCorpsBattleFinishDrop_unit_entities((Dictionary<string, object>) json19));
        this.drop_unit_entities = dropUnitEntitiesList.ToArray();
        List<WebAPI.Response.QuestCorpsBattleFinishDrop_quest_key_entities> questKeyEntitiesList = new List<WebAPI.Response.QuestCorpsBattleFinishDrop_quest_key_entities>();
        foreach (object json20 in (List<object>) json[nameof (drop_quest_key_entities)])
          questKeyEntitiesList.Add(json20 == null ? (WebAPI.Response.QuestCorpsBattleFinishDrop_quest_key_entities) null : new WebAPI.Response.QuestCorpsBattleFinishDrop_quest_key_entities((Dictionary<string, object>) json20));
        this.drop_quest_key_entities = questKeyEntitiesList.ToArray();
        List<PlayerCharacterIntimate> characterIntimateList = new List<PlayerCharacterIntimate>();
        foreach (object json21 in (List<object>) json[nameof (player_character_intimates)])
          characterIntimateList.Add(json21 == null ? (PlayerCharacterIntimate) null : new PlayerCharacterIntimate((Dictionary<string, object>) json21));
        this.player_character_intimates = characterIntimateList.ToArray();
        SMManager.UpdateList<PlayerCharacterIntimate>(this.player_character_intimates);
        List<WebAPI.Response.QuestCorpsBattleFinishDrop_supply_entities> dropSupplyEntitiesList = new List<WebAPI.Response.QuestCorpsBattleFinishDrop_supply_entities>();
        foreach (object json22 in (List<object>) json[nameof (drop_supply_entities)])
          dropSupplyEntitiesList.Add(json22 == null ? (WebAPI.Response.QuestCorpsBattleFinishDrop_supply_entities) null : new WebAPI.Response.QuestCorpsBattleFinishDrop_supply_entities((Dictionary<string, object>) json22));
        this.drop_supply_entities = dropSupplyEntitiesList.ToArray();
        List<WebAPI.Response.QuestCorpsBattleFinishDrop_gacha_ticket_entities> gachaTicketEntitiesList = new List<WebAPI.Response.QuestCorpsBattleFinishDrop_gacha_ticket_entities>();
        foreach (object json23 in (List<object>) json[nameof (drop_gacha_ticket_entities)])
          gachaTicketEntitiesList.Add(json23 == null ? (WebAPI.Response.QuestCorpsBattleFinishDrop_gacha_ticket_entities) null : new WebAPI.Response.QuestCorpsBattleFinishDrop_gacha_ticket_entities((Dictionary<string, object>) json23));
        this.drop_gacha_ticket_entities = gachaTicketEntitiesList.ToArray();
        if (json.ContainsKey("player_material_gears:delete"))
          SMManager.DeleteList<PlayerMaterialGear>(((IEnumerable<object>) json["player_material_gears:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
        if (json.ContainsKey("player_presents:delete"))
          SMManager.DeleteList<PlayerPresent>(((IEnumerable<object>) json["player_presents:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
        if (!json.ContainsKey("player_items:delete"))
          return;
        SMManager.DeleteList<PlayerItem>(((IEnumerable<object>) json["player_items:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class QuestCorpsBattleFinishDrop_gacha_ticket_entities : KeyCompare
    {
      public int reward_quantity;
      public bool is_new;
      public int? reward_id;
      public int reward_type_id;

      public QuestCorpsBattleFinishDrop_gacha_ticket_entities()
      {
      }

      public QuestCorpsBattleFinishDrop_gacha_ticket_entities(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_quantity = (int) (long) json[nameof (reward_quantity)];
        this.is_new = (bool) json[nameof (is_new)];
        int? nullable1;
        if (json[nameof (reward_id)] != null)
        {
          long? nullable2 = (long?) json[nameof (reward_id)];
          nullable1 = nullable2.HasValue ? new int?((int) nullable2.GetValueOrDefault()) : new int?();
        }
        else
          nullable1 = new int?();
        this.reward_id = nullable1;
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
      }
    }

    [Serializable]
    public class QuestCorpsBattleFinishDrop_supply_entities : KeyCompare
    {
      public int reward_quantity;
      public bool is_new;
      public int? reward_id;
      public int reward_type_id;

      public QuestCorpsBattleFinishDrop_supply_entities()
      {
      }

      public QuestCorpsBattleFinishDrop_supply_entities(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_quantity = (int) (long) json[nameof (reward_quantity)];
        this.is_new = (bool) json[nameof (is_new)];
        int? nullable1;
        if (json[nameof (reward_id)] != null)
        {
          long? nullable2 = (long?) json[nameof (reward_id)];
          nullable1 = nullable2.HasValue ? new int?((int) nullable2.GetValueOrDefault()) : new int?();
        }
        else
          nullable1 = new int?();
        this.reward_id = nullable1;
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
      }
    }

    [Serializable]
    public class QuestCorpsBattleFinishDrop_quest_key_entities : KeyCompare
    {
      public int reward_quantity;
      public bool is_new;
      public int? reward_id;
      public int reward_type_id;

      public QuestCorpsBattleFinishDrop_quest_key_entities()
      {
      }

      public QuestCorpsBattleFinishDrop_quest_key_entities(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_quantity = (int) (long) json[nameof (reward_quantity)];
        this.is_new = (bool) json[nameof (is_new)];
        int? nullable1;
        if (json[nameof (reward_id)] != null)
        {
          long? nullable2 = (long?) json[nameof (reward_id)];
          nullable1 = nullable2.HasValue ? new int?((int) nullable2.GetValueOrDefault()) : new int?();
        }
        else
          nullable1 = new int?();
        this.reward_id = nullable1;
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
      }
    }

    [Serializable]
    public class QuestCorpsBattleFinishDrop_unit_entities : KeyCompare
    {
      public int reward_quantity;
      public bool is_new;
      public int? reward_id;
      public int reward_type_id;

      public QuestCorpsBattleFinishDrop_unit_entities()
      {
      }

      public QuestCorpsBattleFinishDrop_unit_entities(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_quantity = (int) (long) json[nameof (reward_quantity)];
        this.is_new = (bool) json[nameof (is_new)];
        int? nullable1;
        if (json[nameof (reward_id)] != null)
        {
          long? nullable2 = (long?) json[nameof (reward_id)];
          nullable1 = nullable2.HasValue ? new int?((int) nullable2.GetValueOrDefault()) : new int?();
        }
        else
          nullable1 = new int?();
        this.reward_id = nullable1;
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
      }
    }

    [Serializable]
    public class QuestCorpsBattleFinishDrop_material_gear_entities : KeyCompare
    {
      public int reward_quantity;
      public bool is_new;
      public int? reward_id;
      public int reward_type_id;

      public QuestCorpsBattleFinishDrop_material_gear_entities()
      {
      }

      public QuestCorpsBattleFinishDrop_material_gear_entities(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_quantity = (int) (long) json[nameof (reward_quantity)];
        this.is_new = (bool) json[nameof (is_new)];
        int? nullable1;
        if (json[nameof (reward_id)] != null)
        {
          long? nullable2 = (long?) json[nameof (reward_id)];
          nullable1 = nullable2.HasValue ? new int?((int) nullable2.GetValueOrDefault()) : new int?();
        }
        else
          nullable1 = new int?();
        this.reward_id = nullable1;
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
      }
    }

    [Serializable]
    public class QuestCorpsBattleFinishDrop_material_unit_entities : KeyCompare
    {
      public int reward_quantity;
      public bool is_new;
      public int? reward_id;
      public int reward_type_id;

      public QuestCorpsBattleFinishDrop_material_unit_entities()
      {
      }

      public QuestCorpsBattleFinishDrop_material_unit_entities(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_quantity = (int) (long) json[nameof (reward_quantity)];
        this.is_new = (bool) json[nameof (is_new)];
        int? nullable1;
        if (json[nameof (reward_id)] != null)
        {
          long? nullable2 = (long?) json[nameof (reward_id)];
          nullable1 = nullable2.HasValue ? new int?((int) nullable2.GetValueOrDefault()) : new int?();
        }
        else
          nullable1 = new int?();
        this.reward_id = nullable1;
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
      }
    }

    [Serializable]
    public class QuestCorpsBattleFinishDrop_unit_ticket_entities : KeyCompare
    {
      public int reward_quantity;
      public bool is_new;
      public int? reward_id;
      public int reward_type_id;

      public QuestCorpsBattleFinishDrop_unit_ticket_entities()
      {
      }

      public QuestCorpsBattleFinishDrop_unit_ticket_entities(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_quantity = (int) (long) json[nameof (reward_quantity)];
        this.is_new = (bool) json[nameof (is_new)];
        int? nullable1;
        if (json[nameof (reward_id)] != null)
        {
          long? nullable2 = (long?) json[nameof (reward_id)];
          nullable1 = nullable2.HasValue ? new int?((int) nullable2.GetValueOrDefault()) : new int?();
        }
        else
          nullable1 = new int?();
        this.reward_id = nullable1;
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
      }
    }

    [Serializable]
    public class QuestCorpsBattleFinishDrop_common_ticket_entities : KeyCompare
    {
      public int reward_quantity;
      public bool is_new;
      public int? reward_id;
      public int reward_type_id;

      public QuestCorpsBattleFinishDrop_common_ticket_entities()
      {
      }

      public QuestCorpsBattleFinishDrop_common_ticket_entities(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_quantity = (int) (long) json[nameof (reward_quantity)];
        this.is_new = (bool) json[nameof (is_new)];
        int? nullable1;
        if (json[nameof (reward_id)] != null)
        {
          long? nullable2 = (long?) json[nameof (reward_id)];
          nullable1 = nullable2.HasValue ? new int?((int) nullable2.GetValueOrDefault()) : new int?();
        }
        else
          nullable1 = new int?();
        this.reward_id = nullable1;
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
      }
    }

    [Serializable]
    public class QuestCorpsBattleFinishStage_clear_rewards : KeyCompare
    {
      public int reward_quantity;
      public int id;
      public int reward_id;
      public int reward_type_id;

      public QuestCorpsBattleFinishStage_clear_rewards()
      {
      }

      public QuestCorpsBattleFinishStage_clear_rewards(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_quantity = (int) (long) json[nameof (reward_quantity)];
        this.id = (int) (long) json[nameof (id)];
        this.reward_id = (int) (long) json[nameof (reward_id)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
      }
    }

    [Serializable]
    public class QuestCorpsBattleFinishDrop_unit_type_ticket_entities : KeyCompare
    {
      public int reward_quantity;
      public bool is_new;
      public int? reward_id;
      public int reward_type_id;

      public QuestCorpsBattleFinishDrop_unit_type_ticket_entities()
      {
      }

      public QuestCorpsBattleFinishDrop_unit_type_ticket_entities(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_quantity = (int) (long) json[nameof (reward_quantity)];
        this.is_new = (bool) json[nameof (is_new)];
        int? nullable1;
        if (json[nameof (reward_id)] != null)
        {
          long? nullable2 = (long?) json[nameof (reward_id)];
          nullable1 = nullable2.HasValue ? new int?((int) nullable2.GetValueOrDefault()) : new int?();
        }
        else
          nullable1 = new int?();
        this.reward_id = nullable1;
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
      }
    }

    [Serializable]
    public class QuestCorpsBattleFinishDrop_gear_entities : KeyCompare
    {
      public int reward_quantity;
      public bool is_new;
      public int? reward_id;
      public int reward_type_id;

      public QuestCorpsBattleFinishDrop_gear_entities()
      {
      }

      public QuestCorpsBattleFinishDrop_gear_entities(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_quantity = (int) (long) json[nameof (reward_quantity)];
        this.is_new = (bool) json[nameof (is_new)];
        int? nullable1;
        if (json[nameof (reward_id)] != null)
        {
          long? nullable2 = (long?) json[nameof (reward_id)];
          nullable1 = nullable2.HasValue ? new int?((int) nullable2.GetValueOrDefault()) : new int?();
        }
        else
          nullable1 = new int?();
        this.reward_id = nullable1;
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
      }
    }

    [Serializable]
    public class QuestCorpsBattleForceClose : KeyCompare
    {
      public QuestCorpsBattleForceClose()
      {
      }

      public QuestCorpsBattleForceClose(Dictionary<string, object> json) => this._hasKey = false;
    }

    [Serializable]
    public class QuestCorpsBattleResume : KeyCompare
    {
      public WebAPI.Response.QuestCorpsBattleResumeEnemy_items[] enemy_items;
      public int quest_type;
      public PlayerCorpsStage player_corps_stage;
      public PlayerCorpsDeck player_corps_deck;
      public string battle_uuid;

      public QuestCorpsBattleResume()
      {
      }

      public QuestCorpsBattleResume(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<WebAPI.Response.QuestCorpsBattleResumeEnemy_items> resumeEnemyItemsList = new List<WebAPI.Response.QuestCorpsBattleResumeEnemy_items>();
        foreach (object json1 in (List<object>) json[nameof (enemy_items)])
          resumeEnemyItemsList.Add(json1 == null ? (WebAPI.Response.QuestCorpsBattleResumeEnemy_items) null : new WebAPI.Response.QuestCorpsBattleResumeEnemy_items((Dictionary<string, object>) json1));
        this.enemy_items = resumeEnemyItemsList.ToArray();
        this.quest_type = (int) (long) json[nameof (quest_type)];
        this.player_corps_stage = json[nameof (player_corps_stage)] == null ? (PlayerCorpsStage) null : new PlayerCorpsStage((Dictionary<string, object>) json[nameof (player_corps_stage)]);
        this.player_corps_deck = json[nameof (player_corps_deck)] == null ? (PlayerCorpsDeck) null : new PlayerCorpsDeck((Dictionary<string, object>) json[nameof (player_corps_deck)]);
        this.battle_uuid = (string) json[nameof (battle_uuid)];
      }
    }

    [Serializable]
    public class QuestCorpsBattleResumeEnemy_items : KeyCompare
    {
      public int reward_quantity;
      public int id;
      public int reward_id;
      public int reward_type_id;

      public QuestCorpsBattleResumeEnemy_items()
      {
      }

      public QuestCorpsBattleResumeEnemy_items(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_quantity = (int) (long) json[nameof (reward_quantity)];
        this.id = (int) (long) json[nameof (id)];
        this.reward_id = (int) (long) json[nameof (reward_id)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
      }
    }

    [Serializable]
    public class QuestCorpsBattleStart : KeyCompare
    {
      public WebAPI.Response.QuestCorpsBattleStartEnemy_items[] enemy_items;
      public int quest_type;
      public PlayerCorpsStage player_corps_stage;
      public PlayerCorpsDeck player_corps_deck;
      public string battle_uuid;

      public QuestCorpsBattleStart()
      {
      }

      public QuestCorpsBattleStart(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<WebAPI.Response.QuestCorpsBattleStartEnemy_items> battleStartEnemyItemsList = new List<WebAPI.Response.QuestCorpsBattleStartEnemy_items>();
        foreach (object json1 in (List<object>) json[nameof (enemy_items)])
          battleStartEnemyItemsList.Add(json1 == null ? (WebAPI.Response.QuestCorpsBattleStartEnemy_items) null : new WebAPI.Response.QuestCorpsBattleStartEnemy_items((Dictionary<string, object>) json1));
        this.enemy_items = battleStartEnemyItemsList.ToArray();
        this.quest_type = (int) (long) json[nameof (quest_type)];
        this.player_corps_stage = json[nameof (player_corps_stage)] == null ? (PlayerCorpsStage) null : new PlayerCorpsStage((Dictionary<string, object>) json[nameof (player_corps_stage)]);
        this.player_corps_deck = json[nameof (player_corps_deck)] == null ? (PlayerCorpsDeck) null : new PlayerCorpsDeck((Dictionary<string, object>) json[nameof (player_corps_deck)]);
        this.battle_uuid = (string) json[nameof (battle_uuid)];
      }
    }

    [Serializable]
    public class QuestCorpsBattleStartEnemy_items : KeyCompare
    {
      public int reward_quantity;
      public int id;
      public int reward_id;
      public int reward_type_id;

      public QuestCorpsBattleStartEnemy_items()
      {
      }

      public QuestCorpsBattleStartEnemy_items(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_quantity = (int) (long) json[nameof (reward_quantity)];
        this.id = (int) (long) json[nameof (id)];
        this.reward_id = (int) (long) json[nameof (reward_id)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
      }
    }

    [Serializable]
    public class QuestCorpsDeckEdit : KeyCompare
    {
      public PlayerCorpsDeck[] player_corps_decks;

      public QuestCorpsDeckEdit()
      {
      }

      public QuestCorpsDeckEdit(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerCorpsDeck> playerCorpsDeckList = new List<PlayerCorpsDeck>();
        foreach (object json1 in (List<object>) json[nameof (player_corps_decks)])
          playerCorpsDeckList.Add(json1 == null ? (PlayerCorpsDeck) null : new PlayerCorpsDeck((Dictionary<string, object>) json1));
        this.player_corps_decks = playerCorpsDeckList.ToArray();
        SMManager.UpdateList<PlayerCorpsDeck>(this.player_corps_decks);
      }
    }

    [Serializable]
    public class QuestCorpsEntry : KeyCompare
    {
      public PlayerItem[] player_items;
      public int[] corps_player_unit_ids;
      public PlayerCorps[] player_corps_list;
      public PlayerUnit[] player_units;

      public QuestCorpsEntry()
      {
      }

      public QuestCorpsEntry(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerItem> playerItemList = new List<PlayerItem>();
        foreach (object json1 in (List<object>) json[nameof (player_items)])
          playerItemList.Add(json1 == null ? (PlayerItem) null : new PlayerItem((Dictionary<string, object>) json1));
        this.player_items = playerItemList.ToArray();
        SMManager.UpdateList<PlayerItem>(this.player_items);
        this.corps_player_unit_ids = ((IEnumerable<object>) json[nameof (corps_player_unit_ids)]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).ToArray<int>();
        List<PlayerCorps> playerCorpsList = new List<PlayerCorps>();
        foreach (object json2 in (List<object>) json[nameof (player_corps_list)])
          playerCorpsList.Add(json2 == null ? (PlayerCorps) null : new PlayerCorps((Dictionary<string, object>) json2));
        this.player_corps_list = playerCorpsList.ToArray();
        SMManager.UpdateList<PlayerCorps>(this.player_corps_list);
        List<PlayerUnit> playerUnitList = new List<PlayerUnit>();
        foreach (object json3 in (List<object>) json[nameof (player_units)])
          playerUnitList.Add(json3 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json3));
        this.player_units = playerUnitList.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_units);
        if (!json.ContainsKey("player_items:delete"))
          return;
        SMManager.DeleteList<PlayerItem>(((IEnumerable<object>) json["player_items:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class QuestCorpsReset : KeyCompare
    {
      public PlayerItem[] player_items;
      public int[] corps_player_unit_ids;
      public PlayerCorps[] player_corps_list;
      public PlayerUnit[] player_units;

      public QuestCorpsReset()
      {
      }

      public QuestCorpsReset(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerItem> playerItemList = new List<PlayerItem>();
        foreach (object json1 in (List<object>) json[nameof (player_items)])
          playerItemList.Add(json1 == null ? (PlayerItem) null : new PlayerItem((Dictionary<string, object>) json1));
        this.player_items = playerItemList.ToArray();
        SMManager.UpdateList<PlayerItem>(this.player_items);
        this.corps_player_unit_ids = ((IEnumerable<object>) json[nameof (corps_player_unit_ids)]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).ToArray<int>();
        List<PlayerCorps> playerCorpsList = new List<PlayerCorps>();
        foreach (object json2 in (List<object>) json[nameof (player_corps_list)])
          playerCorpsList.Add(json2 == null ? (PlayerCorps) null : new PlayerCorps((Dictionary<string, object>) json2));
        this.player_corps_list = playerCorpsList.ToArray();
        SMManager.UpdateList<PlayerCorps>(this.player_corps_list);
        List<PlayerUnit> playerUnitList = new List<PlayerUnit>();
        foreach (object json3 in (List<object>) json[nameof (player_units)])
          playerUnitList.Add(json3 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json3));
        this.player_units = playerUnitList.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_units);
        if (!json.ContainsKey("player_items:delete"))
          return;
        SMManager.DeleteList<PlayerItem>(((IEnumerable<object>) json["player_items:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class QuestCorpsTop : KeyCompare
    {
      public PlayerCorpsDeck[] player_corps_decks;
      public PlayerCorps[] player_corps_list;

      public QuestCorpsTop()
      {
      }

      public QuestCorpsTop(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerCorpsDeck> playerCorpsDeckList = new List<PlayerCorpsDeck>();
        foreach (object json1 in (List<object>) json[nameof (player_corps_decks)])
          playerCorpsDeckList.Add(json1 == null ? (PlayerCorpsDeck) null : new PlayerCorpsDeck((Dictionary<string, object>) json1));
        this.player_corps_decks = playerCorpsDeckList.ToArray();
        SMManager.UpdateList<PlayerCorpsDeck>(this.player_corps_decks);
        List<PlayerCorps> playerCorpsList = new List<PlayerCorps>();
        foreach (object json2 in (List<object>) json[nameof (player_corps_list)])
          playerCorpsList.Add(json2 == null ? (PlayerCorps) null : new PlayerCorps((Dictionary<string, object>) json2));
        this.player_corps_list = playerCorpsList.ToArray();
        SMManager.UpdateList<PlayerCorps>(this.player_corps_list);
      }
    }

    [Serializable]
    public class QuestHistoryExtra : KeyCompare
    {
      public int[] cleared_quest_s_ids;
      public int[] cleared_tower_stage_ids;
      public int[] cleared_guildraid_quest_s_ids;

      public QuestHistoryExtra()
      {
      }

      public QuestHistoryExtra(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.cleared_quest_s_ids = ((IEnumerable<object>) json[nameof (cleared_quest_s_ids)]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).ToArray<int>();
        this.cleared_tower_stage_ids = ((IEnumerable<object>) json[nameof (cleared_tower_stage_ids)]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).ToArray<int>();
        this.cleared_guildraid_quest_s_ids = ((IEnumerable<object>) json[nameof (cleared_guildraid_quest_s_ids)]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).ToArray<int>();
      }
    }

    [Serializable]
    public class QuestkeyIndex : KeyCompare
    {
      public PlayerQuestGate[] quest_gates;
      public PlayerExtraQuestS[] player_extra_quests;
      public PlayerQuestKey[] player_quest_keys;

      public QuestkeyIndex()
      {
      }

      public QuestkeyIndex(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerQuestGate> playerQuestGateList = new List<PlayerQuestGate>();
        foreach (object json1 in (List<object>) json[nameof (quest_gates)])
          playerQuestGateList.Add(json1 == null ? (PlayerQuestGate) null : new PlayerQuestGate((Dictionary<string, object>) json1));
        this.quest_gates = playerQuestGateList.ToArray();
        SMManager.UpdateList<PlayerQuestGate>(this.quest_gates);
        List<PlayerExtraQuestS> playerExtraQuestSList = new List<PlayerExtraQuestS>();
        foreach (object json2 in (List<object>) json[nameof (player_extra_quests)])
          playerExtraQuestSList.Add(json2 == null ? (PlayerExtraQuestS) null : new PlayerExtraQuestS((Dictionary<string, object>) json2));
        this.player_extra_quests = playerExtraQuestSList.ToArray();
        SMManager.UpdateList<PlayerExtraQuestS>(this.player_extra_quests);
        List<PlayerQuestKey> playerQuestKeyList = new List<PlayerQuestKey>();
        foreach (object json3 in (List<object>) json[nameof (player_quest_keys)])
          playerQuestKeyList.Add(json3 == null ? (PlayerQuestKey) null : new PlayerQuestKey((Dictionary<string, object>) json3));
        this.player_quest_keys = playerQuestKeyList.ToArray();
        SMManager.UpdateList<PlayerQuestKey>(this.player_quest_keys);
      }
    }

    [Serializable]
    public class QuestkeySpend : KeyCompare
    {
      public QuestKeyGate[] quest_key_gates;
      public PlayerQuestKey[] player_quest_keys;

      public QuestkeySpend()
      {
      }

      public QuestkeySpend(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<QuestKeyGate> questKeyGateList = new List<QuestKeyGate>();
        foreach (object json1 in (List<object>) json[nameof (quest_key_gates)])
          questKeyGateList.Add(json1 == null ? (QuestKeyGate) null : new QuestKeyGate((Dictionary<string, object>) json1));
        this.quest_key_gates = questKeyGateList.ToArray();
        SMManager.UpdateList<QuestKeyGate>(this.quest_key_gates);
        List<PlayerQuestKey> playerQuestKeyList = new List<PlayerQuestKey>();
        foreach (object json2 in (List<object>) json[nameof (player_quest_keys)])
          playerQuestKeyList.Add(json2 == null ? (PlayerQuestKey) null : new PlayerQuestKey((Dictionary<string, object>) json2));
        this.player_quest_keys = playerQuestKeyList.ToArray();
        SMManager.UpdateList<PlayerQuestKey>(this.player_quest_keys);
      }
    }

    [Serializable]
    public class QuestLimitationCharacter : KeyCompare
    {
      public QuestLimitationBase[] limitations;
      public PlayerCustomDeck[] limitation_player_custom_decks;
      public PlayerDeck[] limitation_player_decks;

      public QuestLimitationCharacter()
      {
      }

      public QuestLimitationCharacter(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<QuestLimitationBase> questLimitationBaseList = new List<QuestLimitationBase>();
        foreach (object json1 in (List<object>) json[nameof (limitations)])
          questLimitationBaseList.Add(json1 == null ? (QuestLimitationBase) null : new QuestLimitationBase((Dictionary<string, object>) json1));
        this.limitations = questLimitationBaseList.ToArray();
        List<PlayerCustomDeck> playerCustomDeckList = new List<PlayerCustomDeck>();
        foreach (object json2 in (List<object>) json[nameof (limitation_player_custom_decks)])
          playerCustomDeckList.Add(json2 == null ? (PlayerCustomDeck) null : new PlayerCustomDeck((Dictionary<string, object>) json2));
        this.limitation_player_custom_decks = playerCustomDeckList.ToArray();
        List<PlayerDeck> playerDeckList = new List<PlayerDeck>();
        foreach (object json3 in (List<object>) json[nameof (limitation_player_decks)])
          playerDeckList.Add(json3 == null ? (PlayerDeck) null : new PlayerDeck((Dictionary<string, object>) json3));
        this.limitation_player_decks = playerDeckList.ToArray();
      }
    }

    [Serializable]
    public class QuestLimitationExtra : KeyCompare
    {
      public QuestLimitationBase[] limitations;
      public PlayerCustomDeck[] limitation_player_custom_decks;
      public PlayerDeck[] limitation_player_decks;

      public QuestLimitationExtra()
      {
      }

      public QuestLimitationExtra(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<QuestLimitationBase> questLimitationBaseList = new List<QuestLimitationBase>();
        foreach (object json1 in (List<object>) json[nameof (limitations)])
          questLimitationBaseList.Add(json1 == null ? (QuestLimitationBase) null : new QuestLimitationBase((Dictionary<string, object>) json1));
        this.limitations = questLimitationBaseList.ToArray();
        List<PlayerCustomDeck> playerCustomDeckList = new List<PlayerCustomDeck>();
        foreach (object json2 in (List<object>) json[nameof (limitation_player_custom_decks)])
          playerCustomDeckList.Add(json2 == null ? (PlayerCustomDeck) null : new PlayerCustomDeck((Dictionary<string, object>) json2));
        this.limitation_player_custom_decks = playerCustomDeckList.ToArray();
        List<PlayerDeck> playerDeckList = new List<PlayerDeck>();
        foreach (object json3 in (List<object>) json[nameof (limitation_player_decks)])
          playerDeckList.Add(json3 == null ? (PlayerDeck) null : new PlayerDeck((Dictionary<string, object>) json3));
        this.limitation_player_decks = playerDeckList.ToArray();
      }
    }

    [Serializable]
    public class QuestLimitationHarmony : KeyCompare
    {
      public QuestLimitationBase[] limitations;
      public PlayerCustomDeck[] limitation_player_custom_decks;
      public PlayerDeck[] limitation_player_decks;

      public QuestLimitationHarmony()
      {
      }

      public QuestLimitationHarmony(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<QuestLimitationBase> questLimitationBaseList = new List<QuestLimitationBase>();
        foreach (object json1 in (List<object>) json[nameof (limitations)])
          questLimitationBaseList.Add(json1 == null ? (QuestLimitationBase) null : new QuestLimitationBase((Dictionary<string, object>) json1));
        this.limitations = questLimitationBaseList.ToArray();
        List<PlayerCustomDeck> playerCustomDeckList = new List<PlayerCustomDeck>();
        foreach (object json2 in (List<object>) json[nameof (limitation_player_custom_decks)])
          playerCustomDeckList.Add(json2 == null ? (PlayerCustomDeck) null : new PlayerCustomDeck((Dictionary<string, object>) json2));
        this.limitation_player_custom_decks = playerCustomDeckList.ToArray();
        List<PlayerDeck> playerDeckList = new List<PlayerDeck>();
        foreach (object json3 in (List<object>) json[nameof (limitation_player_decks)])
          playerDeckList.Add(json3 == null ? (PlayerDeck) null : new PlayerDeck((Dictionary<string, object>) json3));
        this.limitation_player_decks = playerDeckList.ToArray();
      }
    }

    [Serializable]
    public class QuestLimitationStory : KeyCompare
    {
      public QuestLimitationBase[] limitations;
      public PlayerCustomDeck[] limitation_player_custom_decks;
      public PlayerDeck[] limitation_player_decks;

      public QuestLimitationStory()
      {
      }

      public QuestLimitationStory(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<QuestLimitationBase> questLimitationBaseList = new List<QuestLimitationBase>();
        foreach (object json1 in (List<object>) json[nameof (limitations)])
          questLimitationBaseList.Add(json1 == null ? (QuestLimitationBase) null : new QuestLimitationBase((Dictionary<string, object>) json1));
        this.limitations = questLimitationBaseList.ToArray();
        List<PlayerCustomDeck> playerCustomDeckList = new List<PlayerCustomDeck>();
        foreach (object json2 in (List<object>) json[nameof (limitation_player_custom_decks)])
          playerCustomDeckList.Add(json2 == null ? (PlayerCustomDeck) null : new PlayerCustomDeck((Dictionary<string, object>) json2));
        this.limitation_player_custom_decks = playerCustomDeckList.ToArray();
        List<PlayerDeck> playerDeckList = new List<PlayerDeck>();
        foreach (object json3 in (List<object>) json[nameof (limitation_player_decks)])
          playerDeckList.Add(json3 == null ? (PlayerDeck) null : new PlayerDeck((Dictionary<string, object>) json3));
        this.limitation_player_decks = playerDeckList.ToArray();
      }
    }

    [Serializable]
    public class QuestProgressCharacter : KeyCompare
    {
      public WebAPI.Response.QuestProgressCharacterHarmony_quest_s_lost_aps[] harmony_quest_s_lost_aps;
      public WebAPI.Response.QuestProgressCharacterCharacter_quest_s_lost_aps[] character_quest_s_lost_aps;
      public PlayerCharacterQuestS[] player_character_quests;
      public PlayerHarmonyQuestM[] harmonies;
      public PlayerCharacterQuestM[] characters;
      public PlayerHarmonyQuestS[] player_harmony_quests;

      public QuestProgressCharacter()
      {
      }

      public QuestProgressCharacter(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<WebAPI.Response.QuestProgressCharacterHarmony_quest_s_lost_aps> harmonyQuestSLostApsList = new List<WebAPI.Response.QuestProgressCharacterHarmony_quest_s_lost_aps>();
        foreach (object json1 in (List<object>) json[nameof (harmony_quest_s_lost_aps)])
          harmonyQuestSLostApsList.Add(json1 == null ? (WebAPI.Response.QuestProgressCharacterHarmony_quest_s_lost_aps) null : new WebAPI.Response.QuestProgressCharacterHarmony_quest_s_lost_aps((Dictionary<string, object>) json1));
        this.harmony_quest_s_lost_aps = harmonyQuestSLostApsList.ToArray();
        List<WebAPI.Response.QuestProgressCharacterCharacter_quest_s_lost_aps> characterQuestSLostApsList = new List<WebAPI.Response.QuestProgressCharacterCharacter_quest_s_lost_aps>();
        foreach (object json2 in (List<object>) json[nameof (character_quest_s_lost_aps)])
          characterQuestSLostApsList.Add(json2 == null ? (WebAPI.Response.QuestProgressCharacterCharacter_quest_s_lost_aps) null : new WebAPI.Response.QuestProgressCharacterCharacter_quest_s_lost_aps((Dictionary<string, object>) json2));
        this.character_quest_s_lost_aps = characterQuestSLostApsList.ToArray();
        List<PlayerCharacterQuestS> playerCharacterQuestSList = new List<PlayerCharacterQuestS>();
        foreach (object json3 in (List<object>) json[nameof (player_character_quests)])
          playerCharacterQuestSList.Add(json3 == null ? (PlayerCharacterQuestS) null : new PlayerCharacterQuestS((Dictionary<string, object>) json3));
        this.player_character_quests = playerCharacterQuestSList.ToArray();
        SMManager.UpdateList<PlayerCharacterQuestS>(this.player_character_quests);
        List<PlayerHarmonyQuestM> playerHarmonyQuestMList = new List<PlayerHarmonyQuestM>();
        foreach (object json4 in (List<object>) json[nameof (harmonies)])
          playerHarmonyQuestMList.Add(json4 == null ? (PlayerHarmonyQuestM) null : new PlayerHarmonyQuestM((Dictionary<string, object>) json4));
        this.harmonies = playerHarmonyQuestMList.ToArray();
        SMManager.UpdateList<PlayerHarmonyQuestM>(this.harmonies);
        List<PlayerCharacterQuestM> playerCharacterQuestMList = new List<PlayerCharacterQuestM>();
        foreach (object json5 in (List<object>) json[nameof (characters)])
          playerCharacterQuestMList.Add(json5 == null ? (PlayerCharacterQuestM) null : new PlayerCharacterQuestM((Dictionary<string, object>) json5));
        this.characters = playerCharacterQuestMList.ToArray();
        SMManager.UpdateList<PlayerCharacterQuestM>(this.characters);
        List<PlayerHarmonyQuestS> playerHarmonyQuestSList = new List<PlayerHarmonyQuestS>();
        foreach (object json6 in (List<object>) json[nameof (player_harmony_quests)])
          playerHarmonyQuestSList.Add(json6 == null ? (PlayerHarmonyQuestS) null : new PlayerHarmonyQuestS((Dictionary<string, object>) json6));
        this.player_harmony_quests = playerHarmonyQuestSList.ToArray();
        SMManager.UpdateList<PlayerHarmonyQuestS>(this.player_harmony_quests);
      }
    }

    [Serializable]
    public class QuestProgressCharacterCharacter_quest_s_lost_aps : KeyCompare
    {
      public int lost_ap;
      public int quest_s_id;

      public QuestProgressCharacterCharacter_quest_s_lost_aps()
      {
      }

      public QuestProgressCharacterCharacter_quest_s_lost_aps(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.lost_ap = (int) (long) json[nameof (lost_ap)];
        this.quest_s_id = (int) (long) json[nameof (quest_s_id)];
      }
    }

    [Serializable]
    public class QuestProgressCharacterHarmony_quest_s_lost_aps : KeyCompare
    {
      public int lost_ap;
      public int quest_s_id;

      public QuestProgressCharacterHarmony_quest_s_lost_aps()
      {
      }

      public QuestProgressCharacterHarmony_quest_s_lost_aps(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.lost_ap = (int) (long) json[nameof (lost_ap)];
        this.quest_s_id = (int) (long) json[nameof (quest_s_id)];
      }
    }

    [Serializable]
    public class QuestProgressExtra : KeyCompare
    {
      public int[] corps_no_entry_ids;
      public EventInfo[] event_infos;
      public ExtraQuestEntryCondition[] extra_no_entry_conditions;
      public DateTime player_created_at;
      public PlayerExtraQuestS[] player_extra_quests;
      public PlayerQuestGate[] quest_gates;
      public QuestScoreCampaignProgress[] score_campaigns;
      public int[] sort_categories;
      public QuestExtraTimetable timetable;
      public TowerQuestEntryCondition[] tower_no_entry_conditions;
      public SM.TowerPeriod[] tower_periods;

      public QuestProgressExtra()
      {
      }

      public QuestProgressExtra(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.corps_no_entry_ids = ((IEnumerable<object>) json[nameof (corps_no_entry_ids)]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).ToArray<int>();
        List<EventInfo> eventInfoList = new List<EventInfo>();
        foreach (object json1 in (List<object>) json[nameof (event_infos)])
          eventInfoList.Add(json1 == null ? (EventInfo) null : new EventInfo((Dictionary<string, object>) json1));
        this.event_infos = eventInfoList.ToArray();
        SMManager.UpdateList<EventInfo>(this.event_infos);
        List<ExtraQuestEntryCondition> questEntryConditionList1 = new List<ExtraQuestEntryCondition>();
        foreach (object json2 in (List<object>) json[nameof (extra_no_entry_conditions)])
          questEntryConditionList1.Add(json2 == null ? (ExtraQuestEntryCondition) null : new ExtraQuestEntryCondition((Dictionary<string, object>) json2));
        this.extra_no_entry_conditions = questEntryConditionList1.ToArray();
        SMManager.UpdateList<ExtraQuestEntryCondition>(this.extra_no_entry_conditions);
        this.player_created_at = DateTime.Parse((string) json[nameof (player_created_at)]);
        List<PlayerExtraQuestS> playerExtraQuestSList = new List<PlayerExtraQuestS>();
        foreach (object json3 in (List<object>) json[nameof (player_extra_quests)])
          playerExtraQuestSList.Add(json3 == null ? (PlayerExtraQuestS) null : new PlayerExtraQuestS((Dictionary<string, object>) json3));
        this.player_extra_quests = playerExtraQuestSList.ToArray();
        SMManager.UpdateList<PlayerExtraQuestS>(this.player_extra_quests);
        List<PlayerQuestGate> playerQuestGateList = new List<PlayerQuestGate>();
        foreach (object json4 in (List<object>) json[nameof (quest_gates)])
          playerQuestGateList.Add(json4 == null ? (PlayerQuestGate) null : new PlayerQuestGate((Dictionary<string, object>) json4));
        this.quest_gates = playerQuestGateList.ToArray();
        SMManager.UpdateList<PlayerQuestGate>(this.quest_gates);
        List<QuestScoreCampaignProgress> campaignProgressList = new List<QuestScoreCampaignProgress>();
        foreach (object json5 in (List<object>) json[nameof (score_campaigns)])
          campaignProgressList.Add(json5 == null ? (QuestScoreCampaignProgress) null : new QuestScoreCampaignProgress((Dictionary<string, object>) json5));
        this.score_campaigns = campaignProgressList.ToArray();
        SMManager.UpdateList<QuestScoreCampaignProgress>(this.score_campaigns);
        this.sort_categories = ((IEnumerable<object>) json[nameof (sort_categories)]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).ToArray<int>();
        this.timetable = json[nameof (timetable)] == null ? (QuestExtraTimetable) null : new QuestExtraTimetable((Dictionary<string, object>) json[nameof (timetable)]);
        SMManager.Change<QuestExtraTimetable>(this.timetable);
        List<TowerQuestEntryCondition> questEntryConditionList2 = new List<TowerQuestEntryCondition>();
        foreach (object json6 in (List<object>) json[nameof (tower_no_entry_conditions)])
          questEntryConditionList2.Add(json6 == null ? (TowerQuestEntryCondition) null : new TowerQuestEntryCondition((Dictionary<string, object>) json6));
        this.tower_no_entry_conditions = questEntryConditionList2.ToArray();
        SMManager.UpdateList<TowerQuestEntryCondition>(this.tower_no_entry_conditions);
        List<SM.TowerPeriod> towerPeriodList = new List<SM.TowerPeriod>();
        foreach (object json7 in (List<object>) json[nameof (tower_periods)])
          towerPeriodList.Add(json7 == null ? (SM.TowerPeriod) null : new SM.TowerPeriod((Dictionary<string, object>) json7));
        this.tower_periods = towerPeriodList.ToArray();
        SMManager.UpdateList<SM.TowerPeriod>(this.tower_periods);
      }
    }

    [Serializable]
    public class QuestProgressGuildraid : KeyCompare
    {
      public PlayerGuildRaidQuestS[] player_guildraid_quests;

      public QuestProgressGuildraid()
      {
      }

      public QuestProgressGuildraid(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerGuildRaidQuestS> playerGuildRaidQuestSList = new List<PlayerGuildRaidQuestS>();
        foreach (object json1 in (List<object>) json[nameof (player_guildraid_quests)])
          playerGuildRaidQuestSList.Add(json1 == null ? (PlayerGuildRaidQuestS) null : new PlayerGuildRaidQuestS((Dictionary<string, object>) json1));
        this.player_guildraid_quests = playerGuildRaidQuestSList.ToArray();
        SMManager.UpdateList<PlayerGuildRaidQuestS>(this.player_guildraid_quests);
      }
    }

    [Serializable]
    public class QuestProgressHarmony : KeyCompare
    {
      public PlayerHarmonyQuestM[] harmonies;
      public PlayerHarmonyQuestS[] player_harmony_quests;

      public QuestProgressHarmony()
      {
      }

      public QuestProgressHarmony(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerHarmonyQuestM> playerHarmonyQuestMList = new List<PlayerHarmonyQuestM>();
        foreach (object json1 in (List<object>) json[nameof (harmonies)])
          playerHarmonyQuestMList.Add(json1 == null ? (PlayerHarmonyQuestM) null : new PlayerHarmonyQuestM((Dictionary<string, object>) json1));
        this.harmonies = playerHarmonyQuestMList.ToArray();
        SMManager.UpdateList<PlayerHarmonyQuestM>(this.harmonies);
        List<PlayerHarmonyQuestS> playerHarmonyQuestSList = new List<PlayerHarmonyQuestS>();
        foreach (object json2 in (List<object>) json[nameof (player_harmony_quests)])
          playerHarmonyQuestSList.Add(json2 == null ? (PlayerHarmonyQuestS) null : new PlayerHarmonyQuestS((Dictionary<string, object>) json2));
        this.player_harmony_quests = playerHarmonyQuestSList.ToArray();
        SMManager.UpdateList<PlayerHarmonyQuestS>(this.player_harmony_quests);
      }
    }

    [Serializable]
    public class QuestProgressLimited : KeyCompare
    {
      public PlayerExtraQuestS[] player_extra_quests;

      public QuestProgressLimited()
      {
      }

      public QuestProgressLimited(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerExtraQuestS> playerExtraQuestSList = new List<PlayerExtraQuestS>();
        foreach (object json1 in (List<object>) json[nameof (player_extra_quests)])
          playerExtraQuestSList.Add(json1 == null ? (PlayerExtraQuestS) null : new PlayerExtraQuestS((Dictionary<string, object>) json1));
        this.player_extra_quests = playerExtraQuestSList.ToArray();
        SMManager.UpdateList<PlayerExtraQuestS>(this.player_extra_quests);
      }
    }

    [Serializable]
    public class QuestProgressSea : KeyCompare
    {
      public PlayerSeaQuestS[] player_sea_quests;

      public QuestProgressSea()
      {
      }

      public QuestProgressSea(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerSeaQuestS> playerSeaQuestSList = new List<PlayerSeaQuestS>();
        foreach (object json1 in (List<object>) json[nameof (player_sea_quests)])
          playerSeaQuestSList.Add(json1 == null ? (PlayerSeaQuestS) null : new PlayerSeaQuestS((Dictionary<string, object>) json1));
        this.player_sea_quests = playerSeaQuestSList.ToArray();
        SMManager.UpdateList<PlayerSeaQuestS>(this.player_sea_quests);
      }
    }

    [Serializable]
    public class QuestProgressStory : KeyCompare
    {
      public PlayerStoryQuestS[] player_story_quests;

      public QuestProgressStory()
      {
      }

      public QuestProgressStory(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerStoryQuestS> playerStoryQuestSList = new List<PlayerStoryQuestS>();
        foreach (object json1 in (List<object>) json[nameof (player_story_quests)])
          playerStoryQuestSList.Add(json1 == null ? (PlayerStoryQuestS) null : new PlayerStoryQuestS((Dictionary<string, object>) json1));
        this.player_story_quests = playerStoryQuestSList.ToArray();
      }
    }

    [Serializable]
    public class QuestRankingExtra : KeyCompare
    {
      public QuestScoreRankingPlayer[] ranking;
      public QuestScoreRankingPlayer my_ranking;

      public QuestRankingExtra()
      {
      }

      public QuestRankingExtra(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<QuestScoreRankingPlayer> scoreRankingPlayerList = new List<QuestScoreRankingPlayer>();
        foreach (object json1 in (List<object>) json[nameof (ranking)])
          scoreRankingPlayerList.Add(json1 == null ? (QuestScoreRankingPlayer) null : new QuestScoreRankingPlayer((Dictionary<string, object>) json1));
        this.ranking = scoreRankingPlayerList.ToArray();
        this.my_ranking = json[nameof (my_ranking)] == null ? (QuestScoreRankingPlayer) null : new QuestScoreRankingPlayer((Dictionary<string, object>) json[nameof (my_ranking)]);
      }
    }

    [Serializable]
    public class QuestscoreReward : KeyCompare
    {
      public WebAPI.Response.QuestscoreRewardRewards[] rewards;
      public bool already_received;
      public PlayerPresent[] player_presents;
      public QuestScoreCampaignProgress[] score_campaigns;

      public QuestscoreReward()
      {
      }

      public QuestscoreReward(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<WebAPI.Response.QuestscoreRewardRewards> questscoreRewardRewardsList = new List<WebAPI.Response.QuestscoreRewardRewards>();
        foreach (object json1 in (List<object>) json[nameof (rewards)])
          questscoreRewardRewardsList.Add(json1 == null ? (WebAPI.Response.QuestscoreRewardRewards) null : new WebAPI.Response.QuestscoreRewardRewards((Dictionary<string, object>) json1));
        this.rewards = questscoreRewardRewardsList.ToArray();
        this.already_received = (bool) json[nameof (already_received)];
        List<PlayerPresent> playerPresentList = new List<PlayerPresent>();
        foreach (object json2 in (List<object>) json[nameof (player_presents)])
          playerPresentList.Add(json2 == null ? (PlayerPresent) null : new PlayerPresent((Dictionary<string, object>) json2));
        this.player_presents = playerPresentList.ToArray();
        SMManager.UpdateList<PlayerPresent>(this.player_presents);
        List<QuestScoreCampaignProgress> campaignProgressList = new List<QuestScoreCampaignProgress>();
        foreach (object json3 in (List<object>) json[nameof (score_campaigns)])
          campaignProgressList.Add(json3 == null ? (QuestScoreCampaignProgress) null : new QuestScoreCampaignProgress((Dictionary<string, object>) json3));
        this.score_campaigns = campaignProgressList.ToArray();
        SMManager.UpdateList<QuestScoreCampaignProgress>(this.score_campaigns);
        if (!json.ContainsKey("player_presents:delete"))
          return;
        SMManager.DeleteList<PlayerPresent>(((IEnumerable<object>) json["player_presents:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class QuestscoreRewardRewards : KeyCompare
    {
      public int reward_quantity;
      public int ranking_group_id;
      public int reward_type_id;
      public int? reward_id;

      public QuestscoreRewardRewards()
      {
      }

      public QuestscoreRewardRewards(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_quantity = (int) (long) json[nameof (reward_quantity)];
        this.ranking_group_id = (int) (long) json[nameof (ranking_group_id)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
        int? nullable1;
        if (json[nameof (reward_id)] != null)
        {
          long? nullable2 = (long?) json[nameof (reward_id)];
          nullable1 = nullable2.HasValue ? new int?((int) nullable2.GetValueOrDefault()) : new int?();
        }
        else
          nullable1 = new int?();
        this.reward_id = nullable1;
      }
    }

    [Serializable]
    public class RecoveryItemRecovery : KeyCompare
    {
      public Player player;
      public PlayerRecoveryItem[] player_recovery_items;

      public RecoveryItemRecovery()
      {
      }

      public RecoveryItemRecovery(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.player = json[nameof (player)] == null ? (Player) null : new Player((Dictionary<string, object>) json[nameof (player)]);
        SMManager.Change<Player>(this.player);
        List<PlayerRecoveryItem> playerRecoveryItemList = new List<PlayerRecoveryItem>();
        foreach (object json1 in (List<object>) json[nameof (player_recovery_items)])
          playerRecoveryItemList.Add(json1 == null ? (PlayerRecoveryItem) null : new PlayerRecoveryItem((Dictionary<string, object>) json1));
        this.player_recovery_items = playerRecoveryItemList.ToArray();
        SMManager.UpdateList<PlayerRecoveryItem>(this.player_recovery_items);
      }
    }

    [Serializable]
    public class RentalunitEditRentalUnit : KeyCompare
    {
      public PlayerRentalPlayerUnitIds rental_player_unit_ids;

      public RentalunitEditRentalUnit()
      {
      }

      public RentalunitEditRentalUnit(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.rental_player_unit_ids = json[nameof (rental_player_unit_ids)] == null ? (PlayerRentalPlayerUnitIds) null : new PlayerRentalPlayerUnitIds((Dictionary<string, object>) json[nameof (rental_player_unit_ids)]);
        SMManager.Change<PlayerRentalPlayerUnitIds>(this.rental_player_unit_ids);
      }
    }

    [Serializable]
    public class RentalunitRentalUnit : KeyCompare
    {
      public PlayerHelper[] player_helpers;

      public RentalunitRentalUnit()
      {
      }

      public RentalunitRentalUnit(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerHelper> playerHelperList = new List<PlayerHelper>();
        foreach (object json1 in (List<object>) json[nameof (player_helpers)])
          playerHelperList.Add(json1 == null ? (PlayerHelper) null : new PlayerHelper((Dictionary<string, object>) json1));
        this.player_helpers = playerHelperList.ToArray();
      }
    }

    [Serializable]
    public class ReviewCancel : KeyCompare
    {
      public bool is_success;

      public ReviewCancel()
      {
      }

      public ReviewCancel(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.is_success = (bool) json[nameof (is_success)];
      }
    }

    [Serializable]
    public class ReviewContribute : KeyCompare
    {
      public bool is_success;

      public ReviewContribute()
      {
      }

      public ReviewContribute(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.is_success = (bool) json[nameof (is_success)];
      }
    }

    [Serializable]
    public class Roulette : KeyCompare
    {
      public RouletteModule[] roulette_modules;

      public Roulette()
      {
      }

      public Roulette(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<RouletteModule> rouletteModuleList = new List<RouletteModule>();
        foreach (object json1 in (List<object>) json[nameof (roulette_modules)])
          rouletteModuleList.Add(json1 == null ? (RouletteModule) null : new RouletteModule((Dictionary<string, object>) json1));
        this.roulette_modules = rouletteModuleList.ToArray();
      }
    }

    [Serializable]
    public class RouletteR001FreePay : KeyCompare
    {
      public Player player;
      public WebAPI.Response.RouletteR001FreePayResult[] result;
      public int[] animation_pattern;
      public PlayerPresent[] player_presents;
      public bool can_roulette;

      public RouletteR001FreePay()
      {
      }

      public RouletteR001FreePay(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.player = json[nameof (player)] == null ? (Player) null : new Player((Dictionary<string, object>) json[nameof (player)]);
        SMManager.Change<Player>(this.player);
        List<WebAPI.Response.RouletteR001FreePayResult> r001FreePayResultList = new List<WebAPI.Response.RouletteR001FreePayResult>();
        foreach (object json1 in (List<object>) json[nameof (result)])
          r001FreePayResultList.Add(json1 == null ? (WebAPI.Response.RouletteR001FreePayResult) null : new WebAPI.Response.RouletteR001FreePayResult((Dictionary<string, object>) json1));
        this.result = r001FreePayResultList.ToArray();
        this.animation_pattern = ((IEnumerable<object>) json[nameof (animation_pattern)]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).ToArray<int>();
        List<PlayerPresent> playerPresentList = new List<PlayerPresent>();
        foreach (object json2 in (List<object>) json[nameof (player_presents)])
          playerPresentList.Add(json2 == null ? (PlayerPresent) null : new PlayerPresent((Dictionary<string, object>) json2));
        this.player_presents = playerPresentList.ToArray();
        SMManager.UpdateList<PlayerPresent>(this.player_presents);
        this.can_roulette = (bool) json[nameof (can_roulette)];
        if (!json.ContainsKey("player_presents:delete"))
          return;
        SMManager.DeleteList<PlayerPresent>(((IEnumerable<object>) json["player_presents:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class RouletteR001FreePayResult : KeyCompare
    {
      public int reward_result_quantity;
      public int deck_entity_id;
      public bool is_new;
      public int reward_type_id;
      public int reward_result_id;

      public RouletteR001FreePayResult()
      {
      }

      public RouletteR001FreePayResult(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_result_quantity = (int) (long) json[nameof (reward_result_quantity)];
        this.deck_entity_id = (int) (long) json[nameof (deck_entity_id)];
        this.is_new = (bool) json[nameof (is_new)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
        this.reward_result_id = (int) (long) json[nameof (reward_result_id)];
      }
    }

    [Serializable]
    public class RpcMasterdataList : KeyCompare
    {
      public WebAPI.Response.RpcMasterdataListVersions[] versions;

      public RpcMasterdataList()
      {
      }

      public RpcMasterdataList(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<WebAPI.Response.RpcMasterdataListVersions> masterdataListVersionsList = new List<WebAPI.Response.RpcMasterdataListVersions>();
        foreach (object json1 in (List<object>) json[nameof (versions)])
          masterdataListVersionsList.Add(json1 == null ? (WebAPI.Response.RpcMasterdataListVersions) null : new WebAPI.Response.RpcMasterdataListVersions((Dictionary<string, object>) json1));
        this.versions = masterdataListVersionsList.ToArray();
      }
    }

    [Serializable]
    public class RpcMasterdataListVersions : KeyCompare
    {
      public string dlc_version;
      public DateTime created_at;
      public DateTime updated_at;
      public string platform;
      public string masterdata_version;
      public string client_version;
      public string application_version;
      public bool is_maintenance;

      public RpcMasterdataListVersions()
      {
      }

      public RpcMasterdataListVersions(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.dlc_version = (string) json[nameof (dlc_version)];
        this.created_at = DateTime.Parse((string) json[nameof (created_at)]);
        this.updated_at = DateTime.Parse((string) json[nameof (updated_at)]);
        this.platform = (string) json[nameof (platform)];
        this.masterdata_version = (string) json[nameof (masterdata_version)];
        this.client_version = (string) json[nameof (client_version)];
        this.application_version = (string) json[nameof (application_version)];
        this.is_maintenance = (bool) json[nameof (is_maintenance)];
      }
    }

    [Serializable]
    public class RpcMasterdataQuery : KeyCompare
    {
      public string dlc_version;
      public DateTime created_at;
      public DateTime updated_at;
      public string platform;
      public string masterdata_version;
      public string client_version;
      public string application_version;
      public bool is_maintenance;

      public RpcMasterdataQuery()
      {
      }

      public RpcMasterdataQuery(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.dlc_version = (string) json[nameof (dlc_version)];
        this.created_at = DateTime.Parse((string) json[nameof (created_at)]);
        this.updated_at = DateTime.Parse((string) json[nameof (updated_at)]);
        this.platform = (string) json[nameof (platform)];
        this.masterdata_version = (string) json[nameof (masterdata_version)];
        this.client_version = (string) json[nameof (client_version)];
        this.application_version = (string) json[nameof (application_version)];
        this.is_maintenance = (bool) json[nameof (is_maintenance)];
      }
    }

    [Serializable]
    public class RpcReviewEnvConnect : KeyCompare
    {
      public bool dlc_connect;
      public bool app_connect;

      public RpcReviewEnvConnect()
      {
      }

      public RpcReviewEnvConnect(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.dlc_connect = (bool) json[nameof (dlc_connect)];
        this.app_connect = (bool) json[nameof (app_connect)];
      }
    }

    [Serializable]
    public class SeaAlbumIndex : KeyCompare
    {
      public PlayerAlbum[] player_album;

      public SeaAlbumIndex()
      {
      }

      public SeaAlbumIndex(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerAlbum> playerAlbumList = new List<PlayerAlbum>();
        foreach (object json1 in (List<object>) json[nameof (player_album)])
          playerAlbumList.Add(json1 == null ? (PlayerAlbum) null : new PlayerAlbum((Dictionary<string, object>) json1));
        this.player_album = playerAlbumList.ToArray();
        SMManager.UpdateList<PlayerAlbum>(this.player_album);
      }
    }

    [Serializable]
    public class SeaAlbumOpen : KeyCompare
    {
      public PlayerAlbum[] player_album;

      public SeaAlbumOpen()
      {
      }

      public SeaAlbumOpen(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerAlbum> playerAlbumList = new List<PlayerAlbum>();
        foreach (object json1 in (List<object>) json[nameof (player_album)])
          playerAlbumList.Add(json1 == null ? (PlayerAlbum) null : new PlayerAlbum((Dictionary<string, object>) json1));
        this.player_album = playerAlbumList.ToArray();
        SMManager.UpdateList<PlayerAlbum>(this.player_album);
      }
    }

    [Serializable]
    public class SeaAlbumReceiveReward : KeyCompare
    {
      public Player player;
      public PlayerAlbum[] player_album;
      public bool is_receive;

      public SeaAlbumReceiveReward()
      {
      }

      public SeaAlbumReceiveReward(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.player = json[nameof (player)] == null ? (Player) null : new Player((Dictionary<string, object>) json[nameof (player)]);
        SMManager.Change<Player>(this.player);
        List<PlayerAlbum> playerAlbumList = new List<PlayerAlbum>();
        foreach (object json1 in (List<object>) json[nameof (player_album)])
          playerAlbumList.Add(json1 == null ? (PlayerAlbum) null : new PlayerAlbum((Dictionary<string, object>) json1));
        this.player_album = playerAlbumList.ToArray();
        SMManager.UpdateList<PlayerAlbum>(this.player_album);
        this.is_receive = (bool) json[nameof (is_receive)];
      }
    }

    [Serializable]
    public class SeaBattleFinish : KeyCompare
    {
      public PlayerMaterialGear[] player_material_gears;
      public PlayerCharacterIntimate[] player_character_intimates;
      public bool unread_talk_messages;
      public PlayerUnit[] player_units;
      public PlayerUnitTypeTicket[] player_unit_type_tickets;
      public PlayerSeaQuestS[] player_sea_quests;
      public PlayerItem[] player_items;
      public PlayerMissionHistory[] player_mission_histories;
      public Player player;
      public QuestScoreBonusTimetable[] questscore_bonus_timetable;
      public BattleEnd battle_finish;
      public PlayerAwakeSkill[] player_awake_skills;
      public SeaPlayerHelper[] player_sea_helpers;
      public PlayerMaterialUnit[] player_material_units;
      public PlayerPresent[] player_presents;
      public PlayerQuestKey[] player_quest_keys;

      public SeaBattleFinish()
      {
      }

      public SeaBattleFinish(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerMaterialGear> playerMaterialGearList = new List<PlayerMaterialGear>();
        foreach (object json1 in (List<object>) json[nameof (player_material_gears)])
          playerMaterialGearList.Add(json1 == null ? (PlayerMaterialGear) null : new PlayerMaterialGear((Dictionary<string, object>) json1));
        this.player_material_gears = playerMaterialGearList.ToArray();
        SMManager.UpdateList<PlayerMaterialGear>(this.player_material_gears);
        List<PlayerCharacterIntimate> characterIntimateList = new List<PlayerCharacterIntimate>();
        foreach (object json2 in (List<object>) json[nameof (player_character_intimates)])
          characterIntimateList.Add(json2 == null ? (PlayerCharacterIntimate) null : new PlayerCharacterIntimate((Dictionary<string, object>) json2));
        this.player_character_intimates = characterIntimateList.ToArray();
        SMManager.UpdateList<PlayerCharacterIntimate>(this.player_character_intimates);
        this.unread_talk_messages = (bool) json[nameof (unread_talk_messages)];
        List<PlayerUnit> playerUnitList = new List<PlayerUnit>();
        foreach (object json3 in (List<object>) json[nameof (player_units)])
          playerUnitList.Add(json3 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json3));
        this.player_units = playerUnitList.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_units);
        List<PlayerUnitTypeTicket> playerUnitTypeTicketList = new List<PlayerUnitTypeTicket>();
        foreach (object json4 in (List<object>) json[nameof (player_unit_type_tickets)])
          playerUnitTypeTicketList.Add(json4 == null ? (PlayerUnitTypeTicket) null : new PlayerUnitTypeTicket((Dictionary<string, object>) json4));
        this.player_unit_type_tickets = playerUnitTypeTicketList.ToArray();
        SMManager.UpdateList<PlayerUnitTypeTicket>(this.player_unit_type_tickets);
        List<PlayerSeaQuestS> playerSeaQuestSList = new List<PlayerSeaQuestS>();
        foreach (object json5 in (List<object>) json[nameof (player_sea_quests)])
          playerSeaQuestSList.Add(json5 == null ? (PlayerSeaQuestS) null : new PlayerSeaQuestS((Dictionary<string, object>) json5));
        this.player_sea_quests = playerSeaQuestSList.ToArray();
        SMManager.UpdateList<PlayerSeaQuestS>(this.player_sea_quests);
        List<PlayerItem> playerItemList = new List<PlayerItem>();
        foreach (object json6 in (List<object>) json[nameof (player_items)])
          playerItemList.Add(json6 == null ? (PlayerItem) null : new PlayerItem((Dictionary<string, object>) json6));
        this.player_items = playerItemList.ToArray();
        SMManager.UpdateList<PlayerItem>(this.player_items);
        List<PlayerMissionHistory> playerMissionHistoryList = new List<PlayerMissionHistory>();
        foreach (object json7 in (List<object>) json[nameof (player_mission_histories)])
          playerMissionHistoryList.Add(json7 == null ? (PlayerMissionHistory) null : new PlayerMissionHistory((Dictionary<string, object>) json7));
        this.player_mission_histories = playerMissionHistoryList.ToArray();
        SMManager.UpdateList<PlayerMissionHistory>(this.player_mission_histories);
        this.player = json[nameof (player)] == null ? (Player) null : new Player((Dictionary<string, object>) json[nameof (player)]);
        SMManager.Change<Player>(this.player);
        List<QuestScoreBonusTimetable> scoreBonusTimetableList = new List<QuestScoreBonusTimetable>();
        foreach (object json8 in (List<object>) json[nameof (questscore_bonus_timetable)])
          scoreBonusTimetableList.Add(json8 == null ? (QuestScoreBonusTimetable) null : new QuestScoreBonusTimetable((Dictionary<string, object>) json8));
        this.questscore_bonus_timetable = scoreBonusTimetableList.ToArray();
        SMManager.UpdateList<QuestScoreBonusTimetable>(this.questscore_bonus_timetable);
        this.battle_finish = json[nameof (battle_finish)] == null ? (BattleEnd) null : new BattleEnd((Dictionary<string, object>) json[nameof (battle_finish)]);
        SMManager.Change<BattleEnd>(this.battle_finish);
        List<PlayerAwakeSkill> playerAwakeSkillList = new List<PlayerAwakeSkill>();
        foreach (object json9 in (List<object>) json[nameof (player_awake_skills)])
          playerAwakeSkillList.Add(json9 == null ? (PlayerAwakeSkill) null : new PlayerAwakeSkill((Dictionary<string, object>) json9));
        this.player_awake_skills = playerAwakeSkillList.ToArray();
        SMManager.UpdateList<PlayerAwakeSkill>(this.player_awake_skills);
        List<SeaPlayerHelper> seaPlayerHelperList = new List<SeaPlayerHelper>();
        foreach (object json10 in (List<object>) json[nameof (player_sea_helpers)])
          seaPlayerHelperList.Add(json10 == null ? (SeaPlayerHelper) null : new SeaPlayerHelper((Dictionary<string, object>) json10));
        this.player_sea_helpers = seaPlayerHelperList.ToArray();
        SMManager.UpdateList<SeaPlayerHelper>(this.player_sea_helpers);
        List<PlayerMaterialUnit> playerMaterialUnitList = new List<PlayerMaterialUnit>();
        foreach (object json11 in (List<object>) json[nameof (player_material_units)])
          playerMaterialUnitList.Add(json11 == null ? (PlayerMaterialUnit) null : new PlayerMaterialUnit((Dictionary<string, object>) json11));
        this.player_material_units = playerMaterialUnitList.ToArray();
        SMManager.UpdateList<PlayerMaterialUnit>(this.player_material_units);
        List<PlayerPresent> playerPresentList = new List<PlayerPresent>();
        foreach (object json12 in (List<object>) json[nameof (player_presents)])
          playerPresentList.Add(json12 == null ? (PlayerPresent) null : new PlayerPresent((Dictionary<string, object>) json12));
        this.player_presents = playerPresentList.ToArray();
        SMManager.UpdateList<PlayerPresent>(this.player_presents);
        List<PlayerQuestKey> playerQuestKeyList = new List<PlayerQuestKey>();
        foreach (object json13 in (List<object>) json[nameof (player_quest_keys)])
          playerQuestKeyList.Add(json13 == null ? (PlayerQuestKey) null : new PlayerQuestKey((Dictionary<string, object>) json13));
        this.player_quest_keys = playerQuestKeyList.ToArray();
        SMManager.UpdateList<PlayerQuestKey>(this.player_quest_keys);
        if (json.ContainsKey("player_material_gears:delete"))
          SMManager.DeleteList<PlayerMaterialGear>(((IEnumerable<object>) json["player_material_gears:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
        if (json.ContainsKey("player_items:delete"))
          SMManager.DeleteList<PlayerItem>(((IEnumerable<object>) json["player_items:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
        if (!json.ContainsKey("player_presents:delete"))
          return;
        SMManager.DeleteList<PlayerPresent>(((IEnumerable<object>) json["player_presents:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class SeaBattleQuestDetail : KeyCompare
    {
      public WebAPI.Response.SeaBattleQuestDetailDrop_items[] drop_items;
      public bool drop_info_display_flag;
      public WebAPI.Response.SeaBattleQuestDetailEnemy_info_list enemy_info_list;
      public string quest_name;
      public string recommend_strength;

      public SeaBattleQuestDetail()
      {
      }

      public SeaBattleQuestDetail(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<WebAPI.Response.SeaBattleQuestDetailDrop_items> questDetailDropItemsList = new List<WebAPI.Response.SeaBattleQuestDetailDrop_items>();
        foreach (object json1 in (List<object>) json[nameof (drop_items)])
          questDetailDropItemsList.Add(json1 == null ? (WebAPI.Response.SeaBattleQuestDetailDrop_items) null : new WebAPI.Response.SeaBattleQuestDetailDrop_items((Dictionary<string, object>) json1));
        this.drop_items = questDetailDropItemsList.ToArray();
        this.drop_info_display_flag = (bool) json[nameof (drop_info_display_flag)];
        this.enemy_info_list = json[nameof (enemy_info_list)] == null ? (WebAPI.Response.SeaBattleQuestDetailEnemy_info_list) null : new WebAPI.Response.SeaBattleQuestDetailEnemy_info_list((Dictionary<string, object>) json[nameof (enemy_info_list)]);
        this.quest_name = (string) json[nameof (quest_name)];
        this.recommend_strength = (string) json[nameof (recommend_strength)];
      }
    }

    [Serializable]
    public class SeaBattleQuestDetailEnemy_info_list : KeyCompare
    {
      public WebAPI.Response.SeaBattleQuestDetailEnemy_info_listUnit_list[] unit_list;
      public int[] kind_ids;

      public SeaBattleQuestDetailEnemy_info_list()
      {
      }

      public SeaBattleQuestDetailEnemy_info_list(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<WebAPI.Response.SeaBattleQuestDetailEnemy_info_listUnit_list> infoListUnitListList = new List<WebAPI.Response.SeaBattleQuestDetailEnemy_info_listUnit_list>();
        foreach (object json1 in (List<object>) json[nameof (unit_list)])
          infoListUnitListList.Add(json1 == null ? (WebAPI.Response.SeaBattleQuestDetailEnemy_info_listUnit_list) null : new WebAPI.Response.SeaBattleQuestDetailEnemy_info_listUnit_list((Dictionary<string, object>) json1));
        this.unit_list = infoListUnitListList.ToArray();
        this.kind_ids = ((IEnumerable<object>) json[nameof (kind_ids)]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).ToArray<int>();
      }
    }

    [Serializable]
    public class SeaBattleQuestDetailEnemy_info_listUnit_list : KeyCompare
    {
      public int[] skill_ids;
      public WebAPI.Response.SeaBattleQuestDetailEnemy_info_listUnit_listGear gear;
      public int unit_id;

      public SeaBattleQuestDetailEnemy_info_listUnit_list()
      {
      }

      public SeaBattleQuestDetailEnemy_info_listUnit_list(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.skill_ids = ((IEnumerable<object>) json[nameof (skill_ids)]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).ToArray<int>();
        this.gear = json[nameof (gear)] == null ? (WebAPI.Response.SeaBattleQuestDetailEnemy_info_listUnit_listGear) null : new WebAPI.Response.SeaBattleQuestDetailEnemy_info_listUnit_listGear((Dictionary<string, object>) json[nameof (gear)]);
        this.unit_id = (int) (long) json[nameof (unit_id)];
      }
    }

    [Serializable]
    public class SeaBattleQuestDetailEnemy_info_listUnit_listGear : KeyCompare
    {
      public int gear_id;
      public int rank;

      public SeaBattleQuestDetailEnemy_info_listUnit_listGear()
      {
      }

      public SeaBattleQuestDetailEnemy_info_listUnit_listGear(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.gear_id = (int) (long) json[nameof (gear_id)];
        this.rank = (int) (long) json[nameof (rank)];
      }
    }

    [Serializable]
    public class SeaBattleQuestDetailDrop_items : KeyCompare
    {
      public int reward_quantity;
      public int id;
      public int reward_id;
      public int reward_type_id;

      public SeaBattleQuestDetailDrop_items()
      {
      }

      public SeaBattleQuestDetailDrop_items(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_quantity = (int) (long) json[nameof (reward_quantity)];
        this.id = (int) (long) json[nameof (id)];
        this.reward_id = (int) (long) json[nameof (reward_id)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
      }
    }

    [Serializable]
    public class SeaBattleStart : KeyCompare
    {
      public WebAPI.Response.SeaBattleStartPanel_item[] panel_item;
      public Player player;
      public int quest_type;
      public WebAPI.Response.SeaBattleStartUser_deck_enemy_item[] user_deck_enemy_item;
      public PlayerItem[] helper_player_gears;
      public PlayerUnit[] helper_player_unit_over_killers;
      public PlayerUnit[] helper_player_units;
      public string support_player_id;
      public int quest_loop_count;
      public PlayerItem[] user_deck_gears;
      public WebAPI.Response.SeaBattleStartEnemy_item[] enemy_item;
      public int player_unit_id;
      public int deck_type_id;
      public bool battle_start;
      public string battle_uuid;
      public PlayerAwakeSkill[] helper_player_awake_skills;
      public int support_player_unit_id;
      public int[] user_deck_enemy;
      public PlayerUnit[] user_deck_units;
      public int[] panel;
      public int[] enemy;
      public PlayerGearReisouSchema[] helper_player_reisou_gears;
      public int[] guest_ids;
      public SeaPlayerHelper[] helpers;
      public int deck_number;
      public int quest_s_id;

      public SeaBattleStart()
      {
      }

      public SeaBattleStart(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<WebAPI.Response.SeaBattleStartPanel_item> battleStartPanelItemList = new List<WebAPI.Response.SeaBattleStartPanel_item>();
        foreach (object json1 in (List<object>) json[nameof (panel_item)])
          battleStartPanelItemList.Add(json1 == null ? (WebAPI.Response.SeaBattleStartPanel_item) null : new WebAPI.Response.SeaBattleStartPanel_item((Dictionary<string, object>) json1));
        this.panel_item = battleStartPanelItemList.ToArray();
        this.player = json[nameof (player)] == null ? (Player) null : new Player((Dictionary<string, object>) json[nameof (player)]);
        SMManager.Change<Player>(this.player);
        this.quest_type = (int) (long) json[nameof (quest_type)];
        List<WebAPI.Response.SeaBattleStartUser_deck_enemy_item> userDeckEnemyItemList = new List<WebAPI.Response.SeaBattleStartUser_deck_enemy_item>();
        foreach (object json2 in (List<object>) json[nameof (user_deck_enemy_item)])
          userDeckEnemyItemList.Add(json2 == null ? (WebAPI.Response.SeaBattleStartUser_deck_enemy_item) null : new WebAPI.Response.SeaBattleStartUser_deck_enemy_item((Dictionary<string, object>) json2));
        this.user_deck_enemy_item = userDeckEnemyItemList.ToArray();
        List<PlayerItem> playerItemList1 = new List<PlayerItem>();
        foreach (object json3 in (List<object>) json[nameof (helper_player_gears)])
          playerItemList1.Add(json3 == null ? (PlayerItem) null : new PlayerItem((Dictionary<string, object>) json3));
        this.helper_player_gears = playerItemList1.ToArray();
        List<PlayerUnit> playerUnitList1 = new List<PlayerUnit>();
        foreach (object json4 in (List<object>) json[nameof (helper_player_unit_over_killers)])
          playerUnitList1.Add(json4 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json4));
        this.helper_player_unit_over_killers = playerUnitList1.ToArray();
        List<PlayerUnit> playerUnitList2 = new List<PlayerUnit>();
        foreach (object json5 in (List<object>) json[nameof (helper_player_units)])
          playerUnitList2.Add(json5 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json5));
        this.helper_player_units = playerUnitList2.ToArray();
        this.support_player_id = json[nameof (support_player_id)] == null ? (string) null : (string) json[nameof (support_player_id)];
        this.quest_loop_count = (int) (long) json[nameof (quest_loop_count)];
        List<PlayerItem> playerItemList2 = new List<PlayerItem>();
        foreach (object json6 in (List<object>) json[nameof (user_deck_gears)])
          playerItemList2.Add(json6 == null ? (PlayerItem) null : new PlayerItem((Dictionary<string, object>) json6));
        this.user_deck_gears = playerItemList2.ToArray();
        List<WebAPI.Response.SeaBattleStartEnemy_item> battleStartEnemyItemList = new List<WebAPI.Response.SeaBattleStartEnemy_item>();
        foreach (object json7 in (List<object>) json[nameof (enemy_item)])
          battleStartEnemyItemList.Add(json7 == null ? (WebAPI.Response.SeaBattleStartEnemy_item) null : new WebAPI.Response.SeaBattleStartEnemy_item((Dictionary<string, object>) json7));
        this.enemy_item = battleStartEnemyItemList.ToArray();
        this.player_unit_id = (int) (long) json[nameof (player_unit_id)];
        this.deck_type_id = (int) (long) json[nameof (deck_type_id)];
        this.battle_start = (bool) json[nameof (battle_start)];
        this.battle_uuid = (string) json[nameof (battle_uuid)];
        List<PlayerAwakeSkill> playerAwakeSkillList = new List<PlayerAwakeSkill>();
        foreach (object json8 in (List<object>) json[nameof (helper_player_awake_skills)])
          playerAwakeSkillList.Add(json8 == null ? (PlayerAwakeSkill) null : new PlayerAwakeSkill((Dictionary<string, object>) json8));
        this.helper_player_awake_skills = playerAwakeSkillList.ToArray();
        this.support_player_unit_id = (int) (long) json[nameof (support_player_unit_id)];
        this.user_deck_enemy = ((IEnumerable<object>) json[nameof (user_deck_enemy)]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).ToArray<int>();
        List<PlayerUnit> playerUnitList3 = new List<PlayerUnit>();
        foreach (object json9 in (List<object>) json[nameof (user_deck_units)])
          playerUnitList3.Add(json9 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json9));
        this.user_deck_units = playerUnitList3.ToArray();
        this.panel = ((IEnumerable<object>) json[nameof (panel)]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).ToArray<int>();
        this.enemy = ((IEnumerable<object>) json[nameof (enemy)]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).ToArray<int>();
        List<PlayerGearReisouSchema> gearReisouSchemaList = new List<PlayerGearReisouSchema>();
        foreach (object json10 in (List<object>) json[nameof (helper_player_reisou_gears)])
          gearReisouSchemaList.Add(json10 == null ? (PlayerGearReisouSchema) null : new PlayerGearReisouSchema((Dictionary<string, object>) json10));
        this.helper_player_reisou_gears = gearReisouSchemaList.ToArray();
        this.guest_ids = ((IEnumerable<object>) json[nameof (guest_ids)]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).ToArray<int>();
        List<SeaPlayerHelper> seaPlayerHelperList = new List<SeaPlayerHelper>();
        foreach (object json11 in (List<object>) json[nameof (helpers)])
          seaPlayerHelperList.Add(json11 == null ? (SeaPlayerHelper) null : new SeaPlayerHelper((Dictionary<string, object>) json11));
        this.helpers = seaPlayerHelperList.ToArray();
        this.deck_number = (int) (long) json[nameof (deck_number)];
        this.quest_s_id = (int) (long) json[nameof (quest_s_id)];
      }
    }

    [Serializable]
    public class SeaBattleStartEnemy_item : KeyCompare
    {
      public int reward_quantity;
      public int id;
      public int reward_id;
      public int reward_type_id;

      public SeaBattleStartEnemy_item()
      {
      }

      public SeaBattleStartEnemy_item(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_quantity = (int) (long) json[nameof (reward_quantity)];
        this.id = (int) (long) json[nameof (id)];
        this.reward_id = (int) (long) json[nameof (reward_id)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
      }
    }

    [Serializable]
    public class SeaBattleStartUser_deck_enemy_item : KeyCompare
    {
      public int reward_quantity;
      public int id;
      public int reward_id;
      public int reward_type_id;

      public SeaBattleStartUser_deck_enemy_item()
      {
      }

      public SeaBattleStartUser_deck_enemy_item(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_quantity = (int) (long) json[nameof (reward_quantity)];
        this.id = (int) (long) json[nameof (id)];
        this.reward_id = (int) (long) json[nameof (reward_id)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
      }
    }

    [Serializable]
    public class SeaBattleStartPanel_item : KeyCompare
    {
      public int reward_quantity;
      public int id;
      public int reward_id;
      public int reward_type_id;

      public SeaBattleStartPanel_item()
      {
      }

      public SeaBattleStartPanel_item(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_quantity = (int) (long) json[nameof (reward_quantity)];
        this.id = (int) (long) json[nameof (id)];
        this.reward_id = (int) (long) json[nameof (reward_id)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
      }
    }

    [Serializable]
    public class SeaCallConclusion : KeyCompare
    {
      public Player player;
      public PlayerCallLetter[] player_call_letters;
      public PlayerTalkMessage[] messages;
      public PlayerMaterialGear[] player_material_gears;

      public SeaCallConclusion()
      {
      }

      public SeaCallConclusion(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.player = json[nameof (player)] == null ? (Player) null : new Player((Dictionary<string, object>) json[nameof (player)]);
        SMManager.Change<Player>(this.player);
        List<PlayerCallLetter> playerCallLetterList = new List<PlayerCallLetter>();
        foreach (object json1 in (List<object>) json[nameof (player_call_letters)])
          playerCallLetterList.Add(json1 == null ? (PlayerCallLetter) null : new PlayerCallLetter((Dictionary<string, object>) json1));
        this.player_call_letters = playerCallLetterList.ToArray();
        SMManager.UpdateList<PlayerCallLetter>(this.player_call_letters);
        List<PlayerTalkMessage> playerTalkMessageList = new List<PlayerTalkMessage>();
        foreach (object json2 in (List<object>) json[nameof (messages)])
          playerTalkMessageList.Add(json2 == null ? (PlayerTalkMessage) null : new PlayerTalkMessage((Dictionary<string, object>) json2));
        this.messages = playerTalkMessageList.ToArray();
        List<PlayerMaterialGear> playerMaterialGearList = new List<PlayerMaterialGear>();
        foreach (object json3 in (List<object>) json[nameof (player_material_gears)])
          playerMaterialGearList.Add(json3 == null ? (PlayerMaterialGear) null : new PlayerMaterialGear((Dictionary<string, object>) json3));
        this.player_material_gears = playerMaterialGearList.ToArray();
        SMManager.UpdateList<PlayerMaterialGear>(this.player_material_gears);
        if (!json.ContainsKey("player_material_gears:delete"))
          return;
        SMManager.DeleteList<PlayerMaterialGear>(((IEnumerable<object>) json["player_material_gears:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class SeaCallDateCondition : KeyCompare
    {
      public PlayerTalkMessageCondition conditions;

      public SeaCallDateCondition()
      {
      }

      public SeaCallDateCondition(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.conditions = json[nameof (conditions)] == null ? (PlayerTalkMessageCondition) null : new PlayerTalkMessageCondition((Dictionary<string, object>) json[nameof (conditions)]);
      }
    }

    [Serializable]
    public class SeaCallDivorce : KeyCompare
    {
      public Player player;
      public PlayerCallLetter[] player_call_letters;
      public PlayerMaterialGear[] player_material_gears;

      public SeaCallDivorce()
      {
      }

      public SeaCallDivorce(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.player = json[nameof (player)] == null ? (Player) null : new Player((Dictionary<string, object>) json[nameof (player)]);
        SMManager.Change<Player>(this.player);
        List<PlayerCallLetter> playerCallLetterList = new List<PlayerCallLetter>();
        foreach (object json1 in (List<object>) json[nameof (player_call_letters)])
          playerCallLetterList.Add(json1 == null ? (PlayerCallLetter) null : new PlayerCallLetter((Dictionary<string, object>) json1));
        this.player_call_letters = playerCallLetterList.ToArray();
        SMManager.UpdateList<PlayerCallLetter>(this.player_call_letters);
        List<PlayerMaterialGear> playerMaterialGearList = new List<PlayerMaterialGear>();
        foreach (object json2 in (List<object>) json[nameof (player_material_gears)])
          playerMaterialGearList.Add(json2 == null ? (PlayerMaterialGear) null : new PlayerMaterialGear((Dictionary<string, object>) json2));
        this.player_material_gears = playerMaterialGearList.ToArray();
        SMManager.UpdateList<PlayerMaterialGear>(this.player_material_gears);
        if (!json.ContainsKey("player_material_gears:delete"))
          return;
        SMManager.DeleteList<PlayerMaterialGear>(((IEnumerable<object>) json["player_material_gears:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class SeaCallMakeletter : KeyCompare
    {
      public PlayerTalkMessage latest_talk_message;
      public PlayerCallLetter[] player_call_letters;

      public SeaCallMakeletter()
      {
      }

      public SeaCallMakeletter(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.latest_talk_message = json[nameof (latest_talk_message)] == null ? (PlayerTalkMessage) null : new PlayerTalkMessage((Dictionary<string, object>) json[nameof (latest_talk_message)]);
        List<PlayerCallLetter> playerCallLetterList = new List<PlayerCallLetter>();
        foreach (object json1 in (List<object>) json[nameof (player_call_letters)])
          playerCallLetterList.Add(json1 == null ? (PlayerCallLetter) null : new PlayerCallLetter((Dictionary<string, object>) json1));
        this.player_call_letters = playerCallLetterList.ToArray();
        SMManager.UpdateList<PlayerCallLetter>(this.player_call_letters);
      }
    }

    [Serializable]
    public class SeaDateChoice : KeyCompare
    {
      public int happening_id;
      public int[] script_ids;
      public int _date_flow;
      public int quiz_id;

      public SeaDateDateFlow date_flow
      {
        get
        {
          if (!Enum.IsDefined(typeof (SeaDateDateFlow), (object) this._date_flow))
            Debug.LogError((object) ("Key not Found: MasterDataTable.SeaDateDateFlow[" + (object) this._date_flow + "]"));
          return (SeaDateDateFlow) this._date_flow;
        }
      }

      public SeaDateChoice()
      {
      }

      public SeaDateChoice(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.happening_id = (int) (long) json[nameof (happening_id)];
        this.script_ids = ((IEnumerable<object>) json[nameof (script_ids)]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).ToArray<int>();
        this._date_flow = (int) (long) json[nameof (date_flow)];
        this.quiz_id = (int) (long) json[nameof (quiz_id)];
      }
    }

    [Serializable]
    public class SeaDateFinish : KeyCompare
    {
      public PlayerUnit[] player_units;
      public PlayerCallLetter[] player_call_letters;
      public float trust_up;
      public PlayerAwakeSkill[] player_awake_skills;
      public PlayerTalkMessage latest_talk_message;
      public GainTrustResult gain_trust_result;

      public SeaDateFinish()
      {
      }

      public SeaDateFinish(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerUnit> playerUnitList = new List<PlayerUnit>();
        foreach (object json1 in (List<object>) json[nameof (player_units)])
          playerUnitList.Add(json1 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json1));
        this.player_units = playerUnitList.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_units);
        List<PlayerCallLetter> playerCallLetterList = new List<PlayerCallLetter>();
        foreach (object json2 in (List<object>) json[nameof (player_call_letters)])
          playerCallLetterList.Add(json2 == null ? (PlayerCallLetter) null : new PlayerCallLetter((Dictionary<string, object>) json2));
        this.player_call_letters = playerCallLetterList.ToArray();
        SMManager.UpdateList<PlayerCallLetter>(this.player_call_letters);
        this.trust_up = (float) (double) json[nameof (trust_up)];
        List<PlayerAwakeSkill> playerAwakeSkillList = new List<PlayerAwakeSkill>();
        foreach (object json3 in (List<object>) json[nameof (player_awake_skills)])
          playerAwakeSkillList.Add(json3 == null ? (PlayerAwakeSkill) null : new PlayerAwakeSkill((Dictionary<string, object>) json3));
        this.player_awake_skills = playerAwakeSkillList.ToArray();
        SMManager.UpdateList<PlayerAwakeSkill>(this.player_awake_skills);
        this.latest_talk_message = json[nameof (latest_talk_message)] == null ? (PlayerTalkMessage) null : new PlayerTalkMessage((Dictionary<string, object>) json[nameof (latest_talk_message)]);
        this.gain_trust_result = json[nameof (gain_trust_result)] == null ? (GainTrustResult) null : new GainTrustResult((Dictionary<string, object>) json[nameof (gain_trust_result)]);
      }
    }

    [Serializable]
    public class SeaDateForceClose : KeyCompare
    {
      public bool is_success;

      public SeaDateForceClose()
      {
      }

      public SeaDateForceClose(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.is_success = (bool) json[nameof (is_success)];
      }
    }

    [Serializable]
    public class SeaDateResume : KeyCompare
    {
      public int happening_id;
      public int[] script_ids;
      public int _spot;
      public int _time_zone;
      public int _date_flow;
      public int quiz_id;
      public DateTime started_at;
      public int player_unit_id;

      public SeaDateDateSpot spot
      {
        get
        {
          if (MasterData.SeaDateDateSpot.ContainsKey(this._spot))
            return MasterData.SeaDateDateSpot[this._spot];
          Debug.LogError((object) ("Key not Found: MasterData.SeaDateDateSpot[" + (object) this._spot + "]"));
          return (SeaDateDateSpot) null;
        }
      }

      public SeaHomeTimeZone time_zone
      {
        get
        {
          if (MasterData.SeaHomeTimeZone.ContainsKey(this._time_zone))
            return MasterData.SeaHomeTimeZone[this._time_zone];
          Debug.LogError((object) ("Key not Found: MasterData.SeaHomeTimeZone[" + (object) this._time_zone + "]"));
          return (SeaHomeTimeZone) null;
        }
      }

      public SeaDateDateFlow date_flow
      {
        get
        {
          if (!Enum.IsDefined(typeof (SeaDateDateFlow), (object) this._date_flow))
            Debug.LogError((object) ("Key not Found: MasterDataTable.SeaDateDateFlow[" + (object) this._date_flow + "]"));
          return (SeaDateDateFlow) this._date_flow;
        }
      }

      public SeaDateResume()
      {
      }

      public SeaDateResume(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.happening_id = (int) (long) json[nameof (happening_id)];
        this.script_ids = ((IEnumerable<object>) json[nameof (script_ids)]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).ToArray<int>();
        this._spot = (int) (long) json[nameof (spot)];
        this._time_zone = (int) (long) json[nameof (time_zone)];
        this._date_flow = (int) (long) json[nameof (date_flow)];
        this.quiz_id = (int) (long) json[nameof (quiz_id)];
        this.started_at = DateTime.Parse((string) json[nameof (started_at)]);
        this.player_unit_id = (int) (long) json[nameof (player_unit_id)];
      }
    }

    [Serializable]
    public class SeaDateStart : KeyCompare
    {
      public int happening_id;
      public int[] script_ids;
      public int _date_flow;
      public int quiz_id;
      public SeaPlayer sea_player;

      public SeaDateDateFlow date_flow
      {
        get
        {
          if (!Enum.IsDefined(typeof (SeaDateDateFlow), (object) this._date_flow))
            Debug.LogError((object) ("Key not Found: MasterDataTable.SeaDateDateFlow[" + (object) this._date_flow + "]"));
          return (SeaDateDateFlow) this._date_flow;
        }
      }

      public SeaDateStart()
      {
      }

      public SeaDateStart(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.happening_id = (int) (long) json[nameof (happening_id)];
        this.script_ids = ((IEnumerable<object>) json[nameof (script_ids)]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).ToArray<int>();
        this._date_flow = (int) (long) json[nameof (date_flow)];
        this.quiz_id = (int) (long) json[nameof (quiz_id)];
        this.sea_player = json[nameof (sea_player)] == null ? (SeaPlayer) null : new SeaPlayer((Dictionary<string, object>) json[nameof (sea_player)]);
        SMManager.Change<SeaPlayer>(this.sea_player);
      }
    }

    [Serializable]
    public class SeaDeckEdit : KeyCompare
    {
      public PlayerSeaDeck[] player_sea_decks;

      public SeaDeckEdit()
      {
      }

      public SeaDeckEdit(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerSeaDeck> playerSeaDeckList = new List<PlayerSeaDeck>();
        foreach (object json1 in (List<object>) json[nameof (player_sea_decks)])
          playerSeaDeckList.Add(json1 == null ? (PlayerSeaDeck) null : new PlayerSeaDeck((Dictionary<string, object>) json1));
        this.player_sea_decks = playerSeaDeckList.ToArray();
        SMManager.UpdateList<PlayerSeaDeck>(this.player_sea_decks);
      }
    }

    [Serializable]
    public class SeaFriendStatus : KeyCompare
    {
      public PlayerUnit target_leader_unit;
      public PlayerGearReisouSchema[] target_player_reisou_items;
      public PlayerItem[] target_player_items;
      public PlayerAwakeSkill[] target_player_awake_skills;
      public PlayerUnit[] target_leader_unit_over_killers;

      public SeaFriendStatus()
      {
      }

      public SeaFriendStatus(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.target_leader_unit = json[nameof (target_leader_unit)] == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json[nameof (target_leader_unit)]);
        List<PlayerGearReisouSchema> gearReisouSchemaList = new List<PlayerGearReisouSchema>();
        foreach (object json1 in (List<object>) json[nameof (target_player_reisou_items)])
          gearReisouSchemaList.Add(json1 == null ? (PlayerGearReisouSchema) null : new PlayerGearReisouSchema((Dictionary<string, object>) json1));
        this.target_player_reisou_items = gearReisouSchemaList.ToArray();
        List<PlayerItem> playerItemList = new List<PlayerItem>();
        foreach (object json2 in (List<object>) json[nameof (target_player_items)])
          playerItemList.Add(json2 == null ? (PlayerItem) null : new PlayerItem((Dictionary<string, object>) json2));
        this.target_player_items = playerItemList.ToArray();
        List<PlayerAwakeSkill> playerAwakeSkillList = new List<PlayerAwakeSkill>();
        foreach (object json3 in (List<object>) json[nameof (target_player_awake_skills)])
          playerAwakeSkillList.Add(json3 == null ? (PlayerAwakeSkill) null : new PlayerAwakeSkill((Dictionary<string, object>) json3));
        this.target_player_awake_skills = playerAwakeSkillList.ToArray();
        List<PlayerUnit> playerUnitList = new List<PlayerUnit>();
        foreach (object json4 in (List<object>) json[nameof (target_leader_unit_over_killers)])
          playerUnitList.Add(json4 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json4));
        this.target_leader_unit_over_killers = playerUnitList.ToArray();
      }
    }

    [Serializable]
    public class SeaPresentGive : KeyCompare
    {
      public PlayerMaterialGear[] player_material_gears;
      public PlayerUnit[] player_units;
      public PlayerCallLetter[] player_call_letters;
      public PlayerAwakeSkill[] player_awake_skills;
      public PlayerTalkMessage latest_talk_message;
      public bool is_success;
      public GainTrustResult gain_trust_result;

      public SeaPresentGive()
      {
      }

      public SeaPresentGive(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerMaterialGear> playerMaterialGearList = new List<PlayerMaterialGear>();
        foreach (object json1 in (List<object>) json[nameof (player_material_gears)])
          playerMaterialGearList.Add(json1 == null ? (PlayerMaterialGear) null : new PlayerMaterialGear((Dictionary<string, object>) json1));
        this.player_material_gears = playerMaterialGearList.ToArray();
        SMManager.UpdateList<PlayerMaterialGear>(this.player_material_gears);
        List<PlayerUnit> playerUnitList = new List<PlayerUnit>();
        foreach (object json2 in (List<object>) json[nameof (player_units)])
          playerUnitList.Add(json2 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json2));
        this.player_units = playerUnitList.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_units);
        List<PlayerCallLetter> playerCallLetterList = new List<PlayerCallLetter>();
        foreach (object json3 in (List<object>) json[nameof (player_call_letters)])
          playerCallLetterList.Add(json3 == null ? (PlayerCallLetter) null : new PlayerCallLetter((Dictionary<string, object>) json3));
        this.player_call_letters = playerCallLetterList.ToArray();
        SMManager.UpdateList<PlayerCallLetter>(this.player_call_letters);
        List<PlayerAwakeSkill> playerAwakeSkillList = new List<PlayerAwakeSkill>();
        foreach (object json4 in (List<object>) json[nameof (player_awake_skills)])
          playerAwakeSkillList.Add(json4 == null ? (PlayerAwakeSkill) null : new PlayerAwakeSkill((Dictionary<string, object>) json4));
        this.player_awake_skills = playerAwakeSkillList.ToArray();
        SMManager.UpdateList<PlayerAwakeSkill>(this.player_awake_skills);
        this.latest_talk_message = json[nameof (latest_talk_message)] == null ? (PlayerTalkMessage) null : new PlayerTalkMessage((Dictionary<string, object>) json[nameof (latest_talk_message)]);
        this.is_success = (bool) json[nameof (is_success)];
        this.gain_trust_result = json[nameof (gain_trust_result)] == null ? (GainTrustResult) null : new GainTrustResult((Dictionary<string, object>) json[nameof (gain_trust_result)]);
        if (!json.ContainsKey("player_material_gears:delete"))
          return;
        SMManager.DeleteList<PlayerMaterialGear>(((IEnumerable<object>) json["player_material_gears:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class SeasonticketIndex : KeyCompare
    {
      public PlayerSeasonTicket[] player_season_tickets;

      public SeasonticketIndex()
      {
      }

      public SeasonticketIndex(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerSeasonTicket> playerSeasonTicketList = new List<PlayerSeasonTicket>();
        foreach (object json1 in (List<object>) json[nameof (player_season_tickets)])
          playerSeasonTicketList.Add(json1 == null ? (PlayerSeasonTicket) null : new PlayerSeasonTicket((Dictionary<string, object>) json1));
        this.player_season_tickets = playerSeasonTicketList.ToArray();
        SMManager.UpdateList<PlayerSeasonTicket>(this.player_season_tickets);
      }
    }

    [Serializable]
    public class SeasonticketSpend : KeyCompare
    {
      public PlayerSeasonTicket[] player_season_tickets;

      public SeasonticketSpend()
      {
      }

      public SeasonticketSpend(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerSeasonTicket> playerSeasonTicketList = new List<PlayerSeasonTicket>();
        foreach (object json1 in (List<object>) json[nameof (player_season_tickets)])
          playerSeasonTicketList.Add(json1 == null ? (PlayerSeasonTicket) null : new PlayerSeasonTicket((Dictionary<string, object>) json1));
        this.player_season_tickets = playerSeasonTicketList.ToArray();
        SMManager.UpdateList<PlayerSeasonTicket>(this.player_season_tickets);
      }
    }

    [Serializable]
    public class SeaStartUp : KeyCompare
    {
      public int[] gettable_piece_same_character_ids;
      public DateTime last_signed_in_at;
      public PlayerTalkMessage latest_talk_message;
      public Player player;
      public LevelRewardSchemaMixin[] player_achieve_level_rewards;
      public PlayerCallLetter[] player_call_letters;
      public PlayerCharacterIntimate[] player_character_intimates;
      public PlayerItem[] player_items;
      public PlayerLoginBonus[] player_loginbonuses;
      public PlayerPresent[] player_presents;
      public PlayerSeaDeck[] player_sea_decks;
      public SeaPlayerHelper[] player_sea_helpers;
      public PlayerSeaQuestS[] player_sea_quests;
      public PlayerUnitReservesCount player_unit_reserves_count;
      public PlayerUnit[] player_units;
      public SeaPlayer sea_player;
      public TowerQuestEntryCondition[] tower_no_entry_conditions;
      public SM.TowerPeriod[] tower_periods;

      public SeaStartUp()
      {
      }

      public SeaStartUp(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.gettable_piece_same_character_ids = ((IEnumerable<object>) json[nameof (gettable_piece_same_character_ids)]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).ToArray<int>();
        this.last_signed_in_at = DateTime.Parse((string) json[nameof (last_signed_in_at)]);
        this.latest_talk_message = json[nameof (latest_talk_message)] == null ? (PlayerTalkMessage) null : new PlayerTalkMessage((Dictionary<string, object>) json[nameof (latest_talk_message)]);
        this.player = json[nameof (player)] == null ? (Player) null : new Player((Dictionary<string, object>) json[nameof (player)]);
        SMManager.Change<Player>(this.player);
        List<LevelRewardSchemaMixin> rewardSchemaMixinList = new List<LevelRewardSchemaMixin>();
        foreach (object json1 in (List<object>) json[nameof (player_achieve_level_rewards)])
          rewardSchemaMixinList.Add(json1 == null ? (LevelRewardSchemaMixin) null : new LevelRewardSchemaMixin((Dictionary<string, object>) json1));
        this.player_achieve_level_rewards = rewardSchemaMixinList.ToArray();
        List<PlayerCallLetter> playerCallLetterList = new List<PlayerCallLetter>();
        foreach (object json2 in (List<object>) json[nameof (player_call_letters)])
          playerCallLetterList.Add(json2 == null ? (PlayerCallLetter) null : new PlayerCallLetter((Dictionary<string, object>) json2));
        this.player_call_letters = playerCallLetterList.ToArray();
        SMManager.UpdateList<PlayerCallLetter>(this.player_call_letters);
        List<PlayerCharacterIntimate> characterIntimateList = new List<PlayerCharacterIntimate>();
        foreach (object json3 in (List<object>) json[nameof (player_character_intimates)])
          characterIntimateList.Add(json3 == null ? (PlayerCharacterIntimate) null : new PlayerCharacterIntimate((Dictionary<string, object>) json3));
        this.player_character_intimates = characterIntimateList.ToArray();
        SMManager.UpdateList<PlayerCharacterIntimate>(this.player_character_intimates);
        List<PlayerItem> playerItemList = new List<PlayerItem>();
        foreach (object json4 in (List<object>) json[nameof (player_items)])
          playerItemList.Add(json4 == null ? (PlayerItem) null : new PlayerItem((Dictionary<string, object>) json4));
        this.player_items = playerItemList.ToArray();
        SMManager.UpdateList<PlayerItem>(this.player_items);
        List<PlayerLoginBonus> playerLoginBonusList = new List<PlayerLoginBonus>();
        foreach (object json5 in (List<object>) json[nameof (player_loginbonuses)])
          playerLoginBonusList.Add(json5 == null ? (PlayerLoginBonus) null : new PlayerLoginBonus((Dictionary<string, object>) json5));
        this.player_loginbonuses = playerLoginBonusList.ToArray();
        List<PlayerPresent> playerPresentList = new List<PlayerPresent>();
        foreach (object json6 in (List<object>) json[nameof (player_presents)])
          playerPresentList.Add(json6 == null ? (PlayerPresent) null : new PlayerPresent((Dictionary<string, object>) json6));
        this.player_presents = playerPresentList.ToArray();
        SMManager.UpdateList<PlayerPresent>(this.player_presents);
        List<PlayerSeaDeck> playerSeaDeckList = new List<PlayerSeaDeck>();
        foreach (object json7 in (List<object>) json[nameof (player_sea_decks)])
          playerSeaDeckList.Add(json7 == null ? (PlayerSeaDeck) null : new PlayerSeaDeck((Dictionary<string, object>) json7));
        this.player_sea_decks = playerSeaDeckList.ToArray();
        SMManager.UpdateList<PlayerSeaDeck>(this.player_sea_decks);
        List<SeaPlayerHelper> seaPlayerHelperList = new List<SeaPlayerHelper>();
        foreach (object json8 in (List<object>) json[nameof (player_sea_helpers)])
          seaPlayerHelperList.Add(json8 == null ? (SeaPlayerHelper) null : new SeaPlayerHelper((Dictionary<string, object>) json8));
        this.player_sea_helpers = seaPlayerHelperList.ToArray();
        SMManager.UpdateList<SeaPlayerHelper>(this.player_sea_helpers);
        List<PlayerSeaQuestS> playerSeaQuestSList = new List<PlayerSeaQuestS>();
        foreach (object json9 in (List<object>) json[nameof (player_sea_quests)])
          playerSeaQuestSList.Add(json9 == null ? (PlayerSeaQuestS) null : new PlayerSeaQuestS((Dictionary<string, object>) json9));
        this.player_sea_quests = playerSeaQuestSList.ToArray();
        SMManager.UpdateList<PlayerSeaQuestS>(this.player_sea_quests);
        this.player_unit_reserves_count = json[nameof (player_unit_reserves_count)] == null ? (PlayerUnitReservesCount) null : new PlayerUnitReservesCount((Dictionary<string, object>) json[nameof (player_unit_reserves_count)]);
        if (this.player_unit_reserves_count != null)
          SMManager.Change<PlayerUnitReservesCount>(this.player_unit_reserves_count);
        List<PlayerUnit> playerUnitList = new List<PlayerUnit>();
        foreach (object json10 in (List<object>) json[nameof (player_units)])
          playerUnitList.Add(json10 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json10));
        this.player_units = playerUnitList.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_units);
        this.sea_player = json[nameof (sea_player)] == null ? (SeaPlayer) null : new SeaPlayer((Dictionary<string, object>) json[nameof (sea_player)]);
        SMManager.Change<SeaPlayer>(this.sea_player);
        List<TowerQuestEntryCondition> questEntryConditionList = new List<TowerQuestEntryCondition>();
        foreach (object json11 in (List<object>) json[nameof (tower_no_entry_conditions)])
          questEntryConditionList.Add(json11 == null ? (TowerQuestEntryCondition) null : new TowerQuestEntryCondition((Dictionary<string, object>) json11));
        this.tower_no_entry_conditions = questEntryConditionList.ToArray();
        SMManager.UpdateList<TowerQuestEntryCondition>(this.tower_no_entry_conditions);
        List<SM.TowerPeriod> towerPeriodList = new List<SM.TowerPeriod>();
        foreach (object json12 in (List<object>) json[nameof (tower_periods)])
          towerPeriodList.Add(json12 == null ? (SM.TowerPeriod) null : new SM.TowerPeriod((Dictionary<string, object>) json12));
        this.tower_periods = towerPeriodList.ToArray();
        SMManager.UpdateList<SM.TowerPeriod>(this.tower_periods);
        if (!json.ContainsKey("player_presents:delete"))
          return;
        SMManager.DeleteList<PlayerPresent>(((IEnumerable<object>) json["player_presents:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class SeaStartUp2 : KeyCompare
    {
      public int[] active_boost_period_id_list;
      public OfficialInformationArticle[] articles;
      public PlayerAwakeStatePlayerUnitIds awake_state_player_unit_ids;
      public DateTime? battle_medal_shop_latest_start_time;
      public int[] boost_type_id_list;
      public bool can_roulette;
      public int challenge_point;
      public CoinBonus[] coin_bonuses;
      public int[] corps_period_ids;
      public int[] corps_player_unit_ids;
      public Period[] event_info;
      public UnitBonus[] event_unit_bonuses;
      public ExploreDeck[] explore_decks;
      public ExploreProgress explore_progress;
      public string[] favorite_friend_list;
      public DateTime? gacha_latest_start_time;
      public int[] gettable_piece_same_character_ids;
      public SM.GuildSignal guild_signal;
      public bool has_buyable_newbie_packs;
      public bool has_exchangeable_subcoin;
      public bool has_fillable_loginbonus;
      public bool has_near_dead_subcoin;
      public bool has_receivable_paymentbonus;
      public bool has_receivable_rewards;
      public HotDealInfo[] hotdeal_info;
      public bool is_active_paymentbonus;
      public bool is_open_colosseum_campaign;
      public bool is_open_pvp_campaign;
      public bool is_open_roulette;
      public LastPlayPlayerStoryQuestSIds last_play_story_quest_s_ids;
      public DateTime last_signed_in_at;
      public PlayerTalkMessage latest_talk_message;
      public LimitShopInfo[] limit_shop_infos;
      public DateTime? medal_shop_latest_start_time;
      public DateTime? money_shop_latest_start_time;
      public OfficialInformationPopup officialinfo_popup;
      public int[] opened_equip_number_player_unit_ids;
      public Player player;
      public LevelRewardSchemaMixin[] player_achieve_level_rewards;
      public PlayerAffiliation player_affiliation;
      public PlayerAwakeSkill[] player_awake_skills;
      public PlayerCallLetter[] player_call_letters;
      public PlayerCharacterIntimate[] player_character_intimates;
      public PlayerCommonTicket[] player_common_tickets;
      public PlayerCustomDeck[] player_custom_decks;
      public PlayerDeck[] player_decks;
      public DisplayPvPHistory player_detail_pvp_history;
      public PlayerItem[] player_items;
      public PlayerLoginBonus[] player_loginbonuses;
      public PlayerMaterialGear[] player_material_gears;
      public PlayerMaterialUnit[] player_material_units;
      public PlayerMissionHistory[] player_mission_histories;
      public PlayerMythologyGearStatus[] player_mythology_gear_statuses;
      public PlayerPresent[] player_presents;
      public PlayerQuestKey[] player_quest_keys;
      public PlayerRecoveryItem[] player_recovery_items;
      public PlayerSeaDeck[] player_sea_decks;
      public SeaPlayerHelper[] player_sea_helpers;
      public PlayerSeaQuestS[] player_sea_quests;
      public PlayerSeasonTicket[] player_season_tickets;
      public PlayerStoryQuestS[] player_story_quests;
      public PlayerUnitReservesCount player_unit_reserves_count;
      public PlayerUnitTypeTicket[] player_unit_type_tickets;
      public PlayerUnit[] player_units;
      public QuestScoreBonusTimetable[] questscore_bonus_timetable;
      public DateTime? raid_medal_shop_latest_start_time;
      public int received_friend_request_count;
      public PlayerRentalPlayerUnitIds rental_player_unit_ids;
      public QuestScoreCampaignProgress[] score_campaigns;
      public SeaPlayer sea_player;
      public PlayerSelectTicketSummary[] select_tickets;
      public DateTime? slot_latest_start_time;
      public int[] story_playback_event_ids;
      public DateTime? subcoin_shop_latest_start_time;
      public TowerQuestEntryCondition[] tower_no_entry_conditions;
      public SM.TowerPeriod[] tower_periods;
      public PlayerTransmigrateMemoryPlayerUnitIds transmigrate_memory_player_unit_ids;
      public bool unread_talk_messages;

      public SeaStartUp2()
      {
      }

      public SeaStartUp2(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.active_boost_period_id_list = ((IEnumerable<object>) json[nameof (active_boost_period_id_list)]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).ToArray<int>();
        List<OfficialInformationArticle> informationArticleList = new List<OfficialInformationArticle>();
        foreach (object json1 in (List<object>) json[nameof (articles)])
          informationArticleList.Add(json1 == null ? (OfficialInformationArticle) null : new OfficialInformationArticle((Dictionary<string, object>) json1));
        this.articles = informationArticleList.ToArray();
        SMManager.UpdateList<OfficialInformationArticle>(this.articles);
        this.awake_state_player_unit_ids = json[nameof (awake_state_player_unit_ids)] == null ? (PlayerAwakeStatePlayerUnitIds) null : new PlayerAwakeStatePlayerUnitIds((Dictionary<string, object>) json[nameof (awake_state_player_unit_ids)]);
        SMManager.Change<PlayerAwakeStatePlayerUnitIds>(this.awake_state_player_unit_ids);
        this.battle_medal_shop_latest_start_time = json[nameof (battle_medal_shop_latest_start_time)] == null ? new DateTime?() : new DateTime?(DateTime.Parse((string) json[nameof (battle_medal_shop_latest_start_time)]));
        this.boost_type_id_list = ((IEnumerable<object>) json[nameof (boost_type_id_list)]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).ToArray<int>();
        this.can_roulette = (bool) json[nameof (can_roulette)];
        this.challenge_point = (int) (long) json[nameof (challenge_point)];
        List<CoinBonus> coinBonusList = new List<CoinBonus>();
        foreach (object json2 in (List<object>) json[nameof (coin_bonuses)])
          coinBonusList.Add(json2 == null ? (CoinBonus) null : new CoinBonus((Dictionary<string, object>) json2));
        this.coin_bonuses = coinBonusList.ToArray();
        SMManager.UpdateList<CoinBonus>(this.coin_bonuses);
        this.corps_period_ids = ((IEnumerable<object>) json[nameof (corps_period_ids)]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).ToArray<int>();
        this.corps_player_unit_ids = ((IEnumerable<object>) json[nameof (corps_player_unit_ids)]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).ToArray<int>();
        List<Period> periodList = new List<Period>();
        foreach (object json3 in (List<object>) json[nameof (event_info)])
          periodList.Add(json3 == null ? (Period) null : new Period((Dictionary<string, object>) json3));
        this.event_info = periodList.ToArray();
        SMManager.UpdateList<Period>(this.event_info);
        List<UnitBonus> unitBonusList = new List<UnitBonus>();
        foreach (object json4 in (List<object>) json[nameof (event_unit_bonuses)])
          unitBonusList.Add(json4 == null ? (UnitBonus) null : new UnitBonus((Dictionary<string, object>) json4));
        this.event_unit_bonuses = unitBonusList.ToArray();
        SMManager.UpdateList<UnitBonus>(this.event_unit_bonuses);
        List<ExploreDeck> exploreDeckList = new List<ExploreDeck>();
        foreach (object json5 in (List<object>) json[nameof (explore_decks)])
          exploreDeckList.Add(json5 == null ? (ExploreDeck) null : new ExploreDeck((Dictionary<string, object>) json5));
        this.explore_decks = exploreDeckList.ToArray();
        SMManager.UpdateList<ExploreDeck>(this.explore_decks);
        this.explore_progress = json[nameof (explore_progress)] == null ? (ExploreProgress) null : new ExploreProgress((Dictionary<string, object>) json[nameof (explore_progress)]);
        SMManager.Change<ExploreProgress>(this.explore_progress);
        this.favorite_friend_list = ((IEnumerable<object>) json[nameof (favorite_friend_list)]).Select<object, string>((Func<object, string>) (s => (string) s)).ToArray<string>();
        this.gacha_latest_start_time = json[nameof (gacha_latest_start_time)] == null ? new DateTime?() : new DateTime?(DateTime.Parse((string) json[nameof (gacha_latest_start_time)]));
        this.gettable_piece_same_character_ids = ((IEnumerable<object>) json[nameof (gettable_piece_same_character_ids)]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).ToArray<int>();
        this.guild_signal = json[nameof (guild_signal)] == null ? (SM.GuildSignal) null : new SM.GuildSignal((Dictionary<string, object>) json[nameof (guild_signal)]);
        SMManager.Change<SM.GuildSignal>(this.guild_signal);
        this.has_buyable_newbie_packs = (bool) json[nameof (has_buyable_newbie_packs)];
        this.has_exchangeable_subcoin = (bool) json[nameof (has_exchangeable_subcoin)];
        this.has_fillable_loginbonus = (bool) json[nameof (has_fillable_loginbonus)];
        this.has_near_dead_subcoin = (bool) json[nameof (has_near_dead_subcoin)];
        this.has_receivable_paymentbonus = (bool) json[nameof (has_receivable_paymentbonus)];
        this.has_receivable_rewards = (bool) json[nameof (has_receivable_rewards)];
        List<HotDealInfo> hotDealInfoList = new List<HotDealInfo>();
        foreach (object json6 in (List<object>) json[nameof (hotdeal_info)])
          hotDealInfoList.Add(json6 == null ? (HotDealInfo) null : new HotDealInfo((Dictionary<string, object>) json6));
        this.hotdeal_info = hotDealInfoList.ToArray();
        this.is_active_paymentbonus = (bool) json[nameof (is_active_paymentbonus)];
        this.is_open_colosseum_campaign = (bool) json[nameof (is_open_colosseum_campaign)];
        this.is_open_pvp_campaign = (bool) json[nameof (is_open_pvp_campaign)];
        this.is_open_roulette = (bool) json[nameof (is_open_roulette)];
        this.last_play_story_quest_s_ids = json[nameof (last_play_story_quest_s_ids)] == null ? (LastPlayPlayerStoryQuestSIds) null : new LastPlayPlayerStoryQuestSIds((Dictionary<string, object>) json[nameof (last_play_story_quest_s_ids)]);
        SMManager.Change<LastPlayPlayerStoryQuestSIds>(this.last_play_story_quest_s_ids);
        this.last_signed_in_at = DateTime.Parse((string) json[nameof (last_signed_in_at)]);
        this.latest_talk_message = json[nameof (latest_talk_message)] == null ? (PlayerTalkMessage) null : new PlayerTalkMessage((Dictionary<string, object>) json[nameof (latest_talk_message)]);
        List<LimitShopInfo> limitShopInfoList = new List<LimitShopInfo>();
        foreach (object json7 in (List<object>) json[nameof (limit_shop_infos)])
          limitShopInfoList.Add(json7 == null ? (LimitShopInfo) null : new LimitShopInfo((Dictionary<string, object>) json7));
        this.limit_shop_infos = limitShopInfoList.ToArray();
        this.medal_shop_latest_start_time = json[nameof (medal_shop_latest_start_time)] == null ? new DateTime?() : new DateTime?(DateTime.Parse((string) json[nameof (medal_shop_latest_start_time)]));
        this.money_shop_latest_start_time = json[nameof (money_shop_latest_start_time)] == null ? new DateTime?() : new DateTime?(DateTime.Parse((string) json[nameof (money_shop_latest_start_time)]));
        this.officialinfo_popup = json[nameof (officialinfo_popup)] == null ? (OfficialInformationPopup) null : new OfficialInformationPopup((Dictionary<string, object>) json[nameof (officialinfo_popup)]);
        this.opened_equip_number_player_unit_ids = ((IEnumerable<object>) json[nameof (opened_equip_number_player_unit_ids)]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).ToArray<int>();
        this.player = json[nameof (player)] == null ? (Player) null : new Player((Dictionary<string, object>) json[nameof (player)]);
        SMManager.Change<Player>(this.player);
        List<LevelRewardSchemaMixin> rewardSchemaMixinList = new List<LevelRewardSchemaMixin>();
        foreach (object json8 in (List<object>) json[nameof (player_achieve_level_rewards)])
          rewardSchemaMixinList.Add(json8 == null ? (LevelRewardSchemaMixin) null : new LevelRewardSchemaMixin((Dictionary<string, object>) json8));
        this.player_achieve_level_rewards = rewardSchemaMixinList.ToArray();
        this.player_affiliation = json[nameof (player_affiliation)] == null ? (PlayerAffiliation) null : new PlayerAffiliation((Dictionary<string, object>) json[nameof (player_affiliation)]);
        SMManager.Change<PlayerAffiliation>(this.player_affiliation);
        List<PlayerAwakeSkill> playerAwakeSkillList = new List<PlayerAwakeSkill>();
        foreach (object json9 in (List<object>) json[nameof (player_awake_skills)])
          playerAwakeSkillList.Add(json9 == null ? (PlayerAwakeSkill) null : new PlayerAwakeSkill((Dictionary<string, object>) json9));
        this.player_awake_skills = playerAwakeSkillList.ToArray();
        SMManager.UpdateList<PlayerAwakeSkill>(this.player_awake_skills, true);
        List<PlayerCallLetter> playerCallLetterList = new List<PlayerCallLetter>();
        foreach (object json10 in (List<object>) json[nameof (player_call_letters)])
          playerCallLetterList.Add(json10 == null ? (PlayerCallLetter) null : new PlayerCallLetter((Dictionary<string, object>) json10));
        this.player_call_letters = playerCallLetterList.ToArray();
        SMManager.UpdateList<PlayerCallLetter>(this.player_call_letters);
        List<PlayerCharacterIntimate> characterIntimateList = new List<PlayerCharacterIntimate>();
        foreach (object json11 in (List<object>) json[nameof (player_character_intimates)])
          characterIntimateList.Add(json11 == null ? (PlayerCharacterIntimate) null : new PlayerCharacterIntimate((Dictionary<string, object>) json11));
        this.player_character_intimates = characterIntimateList.ToArray();
        SMManager.UpdateList<PlayerCharacterIntimate>(this.player_character_intimates, true);
        List<PlayerCommonTicket> playerCommonTicketList = new List<PlayerCommonTicket>();
        foreach (object json12 in (List<object>) json[nameof (player_common_tickets)])
          playerCommonTicketList.Add(json12 == null ? (PlayerCommonTicket) null : new PlayerCommonTicket((Dictionary<string, object>) json12));
        this.player_common_tickets = playerCommonTicketList.ToArray();
        SMManager.UpdateList<PlayerCommonTicket>(this.player_common_tickets);
        List<PlayerCustomDeck> playerCustomDeckList = new List<PlayerCustomDeck>();
        foreach (object json13 in (List<object>) json[nameof (player_custom_decks)])
          playerCustomDeckList.Add(json13 == null ? (PlayerCustomDeck) null : new PlayerCustomDeck((Dictionary<string, object>) json13));
        this.player_custom_decks = playerCustomDeckList.ToArray();
        SMManager.UpdateList<PlayerCustomDeck>(this.player_custom_decks);
        List<PlayerDeck> playerDeckList = new List<PlayerDeck>();
        foreach (object json14 in (List<object>) json[nameof (player_decks)])
          playerDeckList.Add(json14 == null ? (PlayerDeck) null : new PlayerDeck((Dictionary<string, object>) json14));
        this.player_decks = playerDeckList.ToArray();
        SMManager.UpdateList<PlayerDeck>(this.player_decks);
        this.player_detail_pvp_history = json[nameof (player_detail_pvp_history)] == null ? (DisplayPvPHistory) null : new DisplayPvPHistory((Dictionary<string, object>) json[nameof (player_detail_pvp_history)]);
        SMManager.Change<DisplayPvPHistory>(this.player_detail_pvp_history);
        List<PlayerItem> playerItemList = new List<PlayerItem>();
        foreach (object json15 in (List<object>) json[nameof (player_items)])
          playerItemList.Add(json15 == null ? (PlayerItem) null : new PlayerItem((Dictionary<string, object>) json15));
        this.player_items = playerItemList.ToArray();
        SMManager.UpdateList<PlayerItem>(this.player_items, true);
        List<PlayerLoginBonus> playerLoginBonusList = new List<PlayerLoginBonus>();
        foreach (object json16 in (List<object>) json[nameof (player_loginbonuses)])
          playerLoginBonusList.Add(json16 == null ? (PlayerLoginBonus) null : new PlayerLoginBonus((Dictionary<string, object>) json16));
        this.player_loginbonuses = playerLoginBonusList.ToArray();
        List<PlayerMaterialGear> playerMaterialGearList = new List<PlayerMaterialGear>();
        foreach (object json17 in (List<object>) json[nameof (player_material_gears)])
          playerMaterialGearList.Add(json17 == null ? (PlayerMaterialGear) null : new PlayerMaterialGear((Dictionary<string, object>) json17));
        this.player_material_gears = playerMaterialGearList.ToArray();
        SMManager.UpdateList<PlayerMaterialGear>(this.player_material_gears, true);
        List<PlayerMaterialUnit> playerMaterialUnitList = new List<PlayerMaterialUnit>();
        foreach (object json18 in (List<object>) json[nameof (player_material_units)])
          playerMaterialUnitList.Add(json18 == null ? (PlayerMaterialUnit) null : new PlayerMaterialUnit((Dictionary<string, object>) json18));
        this.player_material_units = playerMaterialUnitList.ToArray();
        SMManager.UpdateList<PlayerMaterialUnit>(this.player_material_units, true);
        List<PlayerMissionHistory> playerMissionHistoryList = new List<PlayerMissionHistory>();
        foreach (object json19 in (List<object>) json[nameof (player_mission_histories)])
          playerMissionHistoryList.Add(json19 == null ? (PlayerMissionHistory) null : new PlayerMissionHistory((Dictionary<string, object>) json19));
        this.player_mission_histories = playerMissionHistoryList.ToArray();
        SMManager.UpdateList<PlayerMissionHistory>(this.player_mission_histories);
        List<PlayerMythologyGearStatus> mythologyGearStatusList = new List<PlayerMythologyGearStatus>();
        foreach (object json20 in (List<object>) json[nameof (player_mythology_gear_statuses)])
          mythologyGearStatusList.Add(json20 == null ? (PlayerMythologyGearStatus) null : new PlayerMythologyGearStatus((Dictionary<string, object>) json20));
        this.player_mythology_gear_statuses = mythologyGearStatusList.ToArray();
        SMManager.UpdateList<PlayerMythologyGearStatus>(this.player_mythology_gear_statuses);
        List<PlayerPresent> playerPresentList = new List<PlayerPresent>();
        foreach (object json21 in (List<object>) json[nameof (player_presents)])
          playerPresentList.Add(json21 == null ? (PlayerPresent) null : new PlayerPresent((Dictionary<string, object>) json21));
        this.player_presents = playerPresentList.ToArray();
        SMManager.UpdateList<PlayerPresent>(this.player_presents, true);
        List<PlayerQuestKey> playerQuestKeyList = new List<PlayerQuestKey>();
        foreach (object json22 in (List<object>) json[nameof (player_quest_keys)])
          playerQuestKeyList.Add(json22 == null ? (PlayerQuestKey) null : new PlayerQuestKey((Dictionary<string, object>) json22));
        this.player_quest_keys = playerQuestKeyList.ToArray();
        SMManager.UpdateList<PlayerQuestKey>(this.player_quest_keys);
        List<PlayerRecoveryItem> playerRecoveryItemList = new List<PlayerRecoveryItem>();
        foreach (object json23 in (List<object>) json[nameof (player_recovery_items)])
          playerRecoveryItemList.Add(json23 == null ? (PlayerRecoveryItem) null : new PlayerRecoveryItem((Dictionary<string, object>) json23));
        this.player_recovery_items = playerRecoveryItemList.ToArray();
        SMManager.UpdateList<PlayerRecoveryItem>(this.player_recovery_items);
        List<PlayerSeaDeck> playerSeaDeckList = new List<PlayerSeaDeck>();
        foreach (object json24 in (List<object>) json[nameof (player_sea_decks)])
          playerSeaDeckList.Add(json24 == null ? (PlayerSeaDeck) null : new PlayerSeaDeck((Dictionary<string, object>) json24));
        this.player_sea_decks = playerSeaDeckList.ToArray();
        SMManager.UpdateList<PlayerSeaDeck>(this.player_sea_decks);
        List<SeaPlayerHelper> seaPlayerHelperList = new List<SeaPlayerHelper>();
        foreach (object json25 in (List<object>) json[nameof (player_sea_helpers)])
          seaPlayerHelperList.Add(json25 == null ? (SeaPlayerHelper) null : new SeaPlayerHelper((Dictionary<string, object>) json25));
        this.player_sea_helpers = seaPlayerHelperList.ToArray();
        SMManager.UpdateList<SeaPlayerHelper>(this.player_sea_helpers);
        List<PlayerSeaQuestS> playerSeaQuestSList = new List<PlayerSeaQuestS>();
        foreach (object json26 in (List<object>) json[nameof (player_sea_quests)])
          playerSeaQuestSList.Add(json26 == null ? (PlayerSeaQuestS) null : new PlayerSeaQuestS((Dictionary<string, object>) json26));
        this.player_sea_quests = playerSeaQuestSList.ToArray();
        SMManager.UpdateList<PlayerSeaQuestS>(this.player_sea_quests);
        List<PlayerSeasonTicket> playerSeasonTicketList = new List<PlayerSeasonTicket>();
        foreach (object json27 in (List<object>) json[nameof (player_season_tickets)])
          playerSeasonTicketList.Add(json27 == null ? (PlayerSeasonTicket) null : new PlayerSeasonTicket((Dictionary<string, object>) json27));
        this.player_season_tickets = playerSeasonTicketList.ToArray();
        SMManager.UpdateList<PlayerSeasonTicket>(this.player_season_tickets);
        List<PlayerStoryQuestS> playerStoryQuestSList = new List<PlayerStoryQuestS>();
        foreach (object json28 in (List<object>) json[nameof (player_story_quests)])
          playerStoryQuestSList.Add(json28 == null ? (PlayerStoryQuestS) null : new PlayerStoryQuestS((Dictionary<string, object>) json28));
        this.player_story_quests = playerStoryQuestSList.ToArray();
        SMManager.UpdateList<PlayerStoryQuestS>(this.player_story_quests);
        this.player_unit_reserves_count = json[nameof (player_unit_reserves_count)] == null ? (PlayerUnitReservesCount) null : new PlayerUnitReservesCount((Dictionary<string, object>) json[nameof (player_unit_reserves_count)]);
        SMManager.Change<PlayerUnitReservesCount>(this.player_unit_reserves_count);
        List<PlayerUnitTypeTicket> playerUnitTypeTicketList = new List<PlayerUnitTypeTicket>();
        foreach (object json29 in (List<object>) json[nameof (player_unit_type_tickets)])
          playerUnitTypeTicketList.Add(json29 == null ? (PlayerUnitTypeTicket) null : new PlayerUnitTypeTicket((Dictionary<string, object>) json29));
        this.player_unit_type_tickets = playerUnitTypeTicketList.ToArray();
        SMManager.UpdateList<PlayerUnitTypeTicket>(this.player_unit_type_tickets);
        List<PlayerUnit> playerUnitList = new List<PlayerUnit>();
        foreach (object json30 in (List<object>) json[nameof (player_units)])
          playerUnitList.Add(json30 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json30));
        this.player_units = playerUnitList.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_units, true);
        List<QuestScoreBonusTimetable> scoreBonusTimetableList = new List<QuestScoreBonusTimetable>();
        foreach (object json31 in (List<object>) json[nameof (questscore_bonus_timetable)])
          scoreBonusTimetableList.Add(json31 == null ? (QuestScoreBonusTimetable) null : new QuestScoreBonusTimetable((Dictionary<string, object>) json31));
        this.questscore_bonus_timetable = scoreBonusTimetableList.ToArray();
        SMManager.UpdateList<QuestScoreBonusTimetable>(this.questscore_bonus_timetable);
        this.raid_medal_shop_latest_start_time = json[nameof (raid_medal_shop_latest_start_time)] == null ? new DateTime?() : new DateTime?(DateTime.Parse((string) json[nameof (raid_medal_shop_latest_start_time)]));
        this.received_friend_request_count = (int) (long) json[nameof (received_friend_request_count)];
        this.rental_player_unit_ids = json[nameof (rental_player_unit_ids)] == null ? (PlayerRentalPlayerUnitIds) null : new PlayerRentalPlayerUnitIds((Dictionary<string, object>) json[nameof (rental_player_unit_ids)]);
        SMManager.Change<PlayerRentalPlayerUnitIds>(this.rental_player_unit_ids);
        List<QuestScoreCampaignProgress> campaignProgressList = new List<QuestScoreCampaignProgress>();
        foreach (object json32 in (List<object>) json[nameof (score_campaigns)])
          campaignProgressList.Add(json32 == null ? (QuestScoreCampaignProgress) null : new QuestScoreCampaignProgress((Dictionary<string, object>) json32));
        this.score_campaigns = campaignProgressList.ToArray();
        SMManager.UpdateList<QuestScoreCampaignProgress>(this.score_campaigns);
        this.sea_player = json[nameof (sea_player)] == null ? (SeaPlayer) null : new SeaPlayer((Dictionary<string, object>) json[nameof (sea_player)]);
        SMManager.Change<SeaPlayer>(this.sea_player);
        List<PlayerSelectTicketSummary> selectTicketSummaryList = new List<PlayerSelectTicketSummary>();
        foreach (object json33 in (List<object>) json[nameof (select_tickets)])
          selectTicketSummaryList.Add(json33 == null ? (PlayerSelectTicketSummary) null : new PlayerSelectTicketSummary((Dictionary<string, object>) json33));
        this.select_tickets = selectTicketSummaryList.ToArray();
        SMManager.UpdateList<PlayerSelectTicketSummary>(this.select_tickets);
        this.slot_latest_start_time = json[nameof (slot_latest_start_time)] == null ? new DateTime?() : new DateTime?(DateTime.Parse((string) json[nameof (slot_latest_start_time)]));
        this.story_playback_event_ids = ((IEnumerable<object>) json[nameof (story_playback_event_ids)]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).ToArray<int>();
        this.subcoin_shop_latest_start_time = json[nameof (subcoin_shop_latest_start_time)] == null ? new DateTime?() : new DateTime?(DateTime.Parse((string) json[nameof (subcoin_shop_latest_start_time)]));
        List<TowerQuestEntryCondition> questEntryConditionList = new List<TowerQuestEntryCondition>();
        foreach (object json34 in (List<object>) json[nameof (tower_no_entry_conditions)])
          questEntryConditionList.Add(json34 == null ? (TowerQuestEntryCondition) null : new TowerQuestEntryCondition((Dictionary<string, object>) json34));
        this.tower_no_entry_conditions = questEntryConditionList.ToArray();
        SMManager.UpdateList<TowerQuestEntryCondition>(this.tower_no_entry_conditions);
        List<SM.TowerPeriod> towerPeriodList = new List<SM.TowerPeriod>();
        foreach (object json35 in (List<object>) json[nameof (tower_periods)])
          towerPeriodList.Add(json35 == null ? (SM.TowerPeriod) null : new SM.TowerPeriod((Dictionary<string, object>) json35));
        this.tower_periods = towerPeriodList.ToArray();
        SMManager.UpdateList<SM.TowerPeriod>(this.tower_periods);
        this.transmigrate_memory_player_unit_ids = json[nameof (transmigrate_memory_player_unit_ids)] == null ? (PlayerTransmigrateMemoryPlayerUnitIds) null : new PlayerTransmigrateMemoryPlayerUnitIds((Dictionary<string, object>) json[nameof (transmigrate_memory_player_unit_ids)]);
        SMManager.Change<PlayerTransmigrateMemoryPlayerUnitIds>(this.transmigrate_memory_player_unit_ids);
        this.unread_talk_messages = (bool) json[nameof (unread_talk_messages)];
        if (!json.ContainsKey("player_presents:delete"))
          return;
        SMManager.DeleteList<PlayerPresent>(((IEnumerable<object>) json["player_presents:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class SeaTalkGift : KeyCompare
    {
      public PlayerMaterialGear[] player_material_gears;
      public PlayerCallLetter[] player_call_letters;
      public PlayerTalkMessage[] messages;
      public PlayerCallMission[] missions;

      public SeaTalkGift()
      {
      }

      public SeaTalkGift(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerMaterialGear> playerMaterialGearList = new List<PlayerMaterialGear>();
        foreach (object json1 in (List<object>) json[nameof (player_material_gears)])
          playerMaterialGearList.Add(json1 == null ? (PlayerMaterialGear) null : new PlayerMaterialGear((Dictionary<string, object>) json1));
        this.player_material_gears = playerMaterialGearList.ToArray();
        SMManager.UpdateList<PlayerMaterialGear>(this.player_material_gears);
        List<PlayerCallLetter> playerCallLetterList = new List<PlayerCallLetter>();
        foreach (object json2 in (List<object>) json[nameof (player_call_letters)])
          playerCallLetterList.Add(json2 == null ? (PlayerCallLetter) null : new PlayerCallLetter((Dictionary<string, object>) json2));
        this.player_call_letters = playerCallLetterList.ToArray();
        SMManager.UpdateList<PlayerCallLetter>(this.player_call_letters);
        List<PlayerTalkMessage> playerTalkMessageList = new List<PlayerTalkMessage>();
        foreach (object json3 in (List<object>) json[nameof (messages)])
          playerTalkMessageList.Add(json3 == null ? (PlayerTalkMessage) null : new PlayerTalkMessage((Dictionary<string, object>) json3));
        this.messages = playerTalkMessageList.ToArray();
        List<PlayerCallMission> playerCallMissionList = new List<PlayerCallMission>();
        foreach (object json4 in (List<object>) json[nameof (missions)])
          playerCallMissionList.Add(json4 == null ? (PlayerCallMission) null : new PlayerCallMission((Dictionary<string, object>) json4));
        this.missions = playerCallMissionList.ToArray();
        if (!json.ContainsKey("player_material_gears:delete"))
          return;
        SMManager.DeleteList<PlayerMaterialGear>(((IEnumerable<object>) json["player_material_gears:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class SeaTalkMessage : KeyCompare
    {
      public int last_index;
      public PlayerTalkMessage[] messages;
      public PlayerCallMission[] missions;
      public PlayerCallLetter[] player_call_letters;

      public SeaTalkMessage()
      {
      }

      public SeaTalkMessage(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.last_index = (int) (long) json[nameof (last_index)];
        List<PlayerTalkMessage> playerTalkMessageList = new List<PlayerTalkMessage>();
        foreach (object json1 in (List<object>) json[nameof (messages)])
          playerTalkMessageList.Add(json1 == null ? (PlayerTalkMessage) null : new PlayerTalkMessage((Dictionary<string, object>) json1));
        this.messages = playerTalkMessageList.ToArray();
        List<PlayerCallMission> playerCallMissionList = new List<PlayerCallMission>();
        foreach (object json2 in (List<object>) json[nameof (missions)])
          playerCallMissionList.Add(json2 == null ? (PlayerCallMission) null : new PlayerCallMission((Dictionary<string, object>) json2));
        this.missions = playerCallMissionList.ToArray();
        List<PlayerCallLetter> playerCallLetterList = new List<PlayerCallLetter>();
        foreach (object json3 in (List<object>) json[nameof (player_call_letters)])
          playerCallLetterList.Add(json3 == null ? (PlayerCallLetter) null : new PlayerCallLetter((Dictionary<string, object>) json3));
        this.player_call_letters = playerCallLetterList.ToArray();
        SMManager.UpdateList<PlayerCallLetter>(this.player_call_letters);
      }
    }

    [Serializable]
    public class SeaTalkPartner : KeyCompare
    {
      public PlayerTalkPartner[] partners;

      public SeaTalkPartner()
      {
      }

      public SeaTalkPartner(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerTalkPartner> playerTalkPartnerList = new List<PlayerTalkPartner>();
        foreach (object json1 in (List<object>) json[nameof (partners)])
          playerTalkPartnerList.Add(json1 == null ? (PlayerTalkPartner) null : new PlayerTalkPartner((Dictionary<string, object>) json1));
        this.partners = playerTalkPartnerList.ToArray();
      }
    }

    [Serializable]
    public class SeaTalkReceive : KeyCompare
    {
      public PlayerCallMissionReward[] rewards;
      public PlayerCallMission[] missions;

      public SeaTalkReceive()
      {
      }

      public SeaTalkReceive(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerCallMissionReward> callMissionRewardList = new List<PlayerCallMissionReward>();
        foreach (object json1 in (List<object>) json[nameof (rewards)])
          callMissionRewardList.Add(json1 == null ? (PlayerCallMissionReward) null : new PlayerCallMissionReward((Dictionary<string, object>) json1));
        this.rewards = callMissionRewardList.ToArray();
        List<PlayerCallMission> playerCallMissionList = new List<PlayerCallMission>();
        foreach (object json2 in (List<object>) json[nameof (missions)])
          playerCallMissionList.Add(json2 == null ? (PlayerCallMission) null : new PlayerCallMission((Dictionary<string, object>) json2));
        this.missions = playerCallMissionList.ToArray();
      }
    }

    [Serializable]
    public class SeaTalkReply : KeyCompare
    {
      public PlayerCallLetter[] player_call_letters;
      public PlayerTalkMessage[] messages;

      public SeaTalkReply()
      {
      }

      public SeaTalkReply(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerCallLetter> playerCallLetterList = new List<PlayerCallLetter>();
        foreach (object json1 in (List<object>) json[nameof (player_call_letters)])
          playerCallLetterList.Add(json1 == null ? (PlayerCallLetter) null : new PlayerCallLetter((Dictionary<string, object>) json1));
        this.player_call_letters = playerCallLetterList.ToArray();
        SMManager.UpdateList<PlayerCallLetter>(this.player_call_letters);
        List<PlayerTalkMessage> playerTalkMessageList = new List<PlayerTalkMessage>();
        foreach (object json2 in (List<object>) json[nameof (messages)])
          playerTalkMessageList.Add(json2 == null ? (PlayerTalkMessage) null : new PlayerTalkMessage((Dictionary<string, object>) json2));
        this.messages = playerTalkMessageList.ToArray();
      }
    }

    [Serializable]
    public class SelectticketSpend : KeyCompare
    {
      public PlayerMaterialGear[] player_material_gears;
      public PlayerItem[] player_items;
      public SM.SelectTicket[] update_select_tickets;
      public PlayerUnit[] player_units;
      public PlayerUnitTypeTicket[] player_unit_type_tickets;
      public bool is_new;
      public UnlockQuest[] unlock_quests;
      public Player player;
      public PlayerAwakeSkill[] player_awake_skills;
      public PlayerSelectTicketSummary[] select_tickets;
      public PlayerMaterialUnit[] player_material_units;
      public PlayerQuestKey[] player_quest_keys;

      public SelectticketSpend()
      {
      }

      public SelectticketSpend(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerMaterialGear> playerMaterialGearList = new List<PlayerMaterialGear>();
        bool flag1 = (List<object>) json[nameof (player_material_gears)] == null;
        if (!flag1)
        {
          foreach (object json1 in (List<object>) json[nameof (player_material_gears)])
            playerMaterialGearList.Add(json1 == null ? (PlayerMaterialGear) null : new PlayerMaterialGear((Dictionary<string, object>) json1));
        }
        this.player_material_gears = playerMaterialGearList.ToArray();
        if (!flag1)
          SMManager.UpdateList<PlayerMaterialGear>(this.player_material_gears);
        List<PlayerItem> playerItemList = new List<PlayerItem>();
        bool flag2 = (List<object>) json[nameof (player_items)] == null;
        if (!flag2)
        {
          foreach (object json2 in (List<object>) json[nameof (player_items)])
            playerItemList.Add(json2 == null ? (PlayerItem) null : new PlayerItem((Dictionary<string, object>) json2));
        }
        this.player_items = playerItemList.ToArray();
        if (!flag2)
          SMManager.UpdateList<PlayerItem>(this.player_items);
        List<SM.SelectTicket> selectTicketList = new List<SM.SelectTicket>();
        bool flag3 = (List<object>) json[nameof (update_select_tickets)] == null;
        if (!flag3)
        {
          foreach (object json3 in (List<object>) json[nameof (update_select_tickets)])
            selectTicketList.Add(json3 == null ? (SM.SelectTicket) null : new SM.SelectTicket((Dictionary<string, object>) json3));
        }
        this.update_select_tickets = selectTicketList.ToArray();
        if (!flag3)
          SMManager.UpdateList<SM.SelectTicket>(this.update_select_tickets);
        List<PlayerUnit> playerUnitList = new List<PlayerUnit>();
        bool flag4 = (List<object>) json[nameof (player_units)] == null;
        if (!flag4)
        {
          foreach (object json4 in (List<object>) json[nameof (player_units)])
            playerUnitList.Add(json4 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json4));
        }
        this.player_units = playerUnitList.ToArray();
        if (!flag4)
          SMManager.UpdateList<PlayerUnit>(this.player_units);
        List<PlayerUnitTypeTicket> playerUnitTypeTicketList = new List<PlayerUnitTypeTicket>();
        bool flag5 = (List<object>) json[nameof (player_unit_type_tickets)] == null;
        if (!flag5)
        {
          foreach (object json5 in (List<object>) json[nameof (player_unit_type_tickets)])
            playerUnitTypeTicketList.Add(json5 == null ? (PlayerUnitTypeTicket) null : new PlayerUnitTypeTicket((Dictionary<string, object>) json5));
        }
        this.player_unit_type_tickets = playerUnitTypeTicketList.ToArray();
        if (!flag5)
          SMManager.UpdateList<PlayerUnitTypeTicket>(this.player_unit_type_tickets);
        this.is_new = (bool) json[nameof (is_new)];
        List<UnlockQuest> unlockQuestList = new List<UnlockQuest>();
        foreach (object json6 in (List<object>) json[nameof (unlock_quests)])
          unlockQuestList.Add(json6 == null ? (UnlockQuest) null : new UnlockQuest((Dictionary<string, object>) json6));
        this.unlock_quests = unlockQuestList.ToArray();
        this.player = json[nameof (player)] == null ? (Player) null : new Player((Dictionary<string, object>) json[nameof (player)]);
        SMManager.Change<Player>(this.player);
        List<PlayerAwakeSkill> playerAwakeSkillList = new List<PlayerAwakeSkill>();
        bool flag6 = (List<object>) json[nameof (player_awake_skills)] == null;
        if (!flag6)
        {
          foreach (object json7 in (List<object>) json[nameof (player_awake_skills)])
            playerAwakeSkillList.Add(json7 == null ? (PlayerAwakeSkill) null : new PlayerAwakeSkill((Dictionary<string, object>) json7));
        }
        this.player_awake_skills = playerAwakeSkillList.ToArray();
        if (!flag6)
          SMManager.UpdateList<PlayerAwakeSkill>(this.player_awake_skills);
        List<PlayerSelectTicketSummary> selectTicketSummaryList = new List<PlayerSelectTicketSummary>();
        foreach (object json8 in (List<object>) json[nameof (select_tickets)])
          selectTicketSummaryList.Add(json8 == null ? (PlayerSelectTicketSummary) null : new PlayerSelectTicketSummary((Dictionary<string, object>) json8));
        this.select_tickets = selectTicketSummaryList.ToArray();
        SMManager.UpdateList<PlayerSelectTicketSummary>(this.select_tickets);
        List<PlayerMaterialUnit> playerMaterialUnitList = new List<PlayerMaterialUnit>();
        bool flag7 = (List<object>) json[nameof (player_material_units)] == null;
        if (!flag7)
        {
          foreach (object json9 in (List<object>) json[nameof (player_material_units)])
            playerMaterialUnitList.Add(json9 == null ? (PlayerMaterialUnit) null : new PlayerMaterialUnit((Dictionary<string, object>) json9));
        }
        this.player_material_units = playerMaterialUnitList.ToArray();
        if (!flag7)
          SMManager.UpdateList<PlayerMaterialUnit>(this.player_material_units);
        List<PlayerQuestKey> playerQuestKeyList = new List<PlayerQuestKey>();
        bool flag8 = (List<object>) json[nameof (player_quest_keys)] == null;
        if (!flag8)
        {
          foreach (object json10 in (List<object>) json[nameof (player_quest_keys)])
            playerQuestKeyList.Add(json10 == null ? (PlayerQuestKey) null : new PlayerQuestKey((Dictionary<string, object>) json10));
        }
        this.player_quest_keys = playerQuestKeyList.ToArray();
        if (flag8)
          return;
        SMManager.UpdateList<PlayerQuestKey>(this.player_quest_keys);
      }
    }

    [Serializable]
    public class ShopBuy : KeyCompare
    {
      public PlayerSelectTicketSummary[] select_tickets;
      public PlayerMaterialGear[] player_material_gears;
      public PlayerCommonTicket[] player_common_tickets;
      public int challenge_point;
      public PlayerGuildFacility[] guild_facilities;
      public SM.SelectTicket[] update_select_tickets;
      public PlayerUnitTypeTicket[] player_unit_type_tickets;
      public PlayerAffiliation player_affiliation;
      public WebAPI.Response.ShopBuyAfter after;
      public PlayerItem[] player_items;
      public PlayerSeasonTicket[] player_season_tickets;
      public PlayerRecoveryItem[] player_recovery_items;
      public Player player;
      public PlayerUnit[] player_units;
      public PlayerGuildTown[] guild_towns;
      public Shop[] shops;
      public PlayerMaterialUnit[] player_material_units;
      public PlayerPresent[] player_presents;
      public PlayerQuestKey[] player_quest_keys;
      public WebAPI.Response.ShopBuyBefore before;

      public ShopBuy()
      {
      }

      public ShopBuy(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerSelectTicketSummary> selectTicketSummaryList = new List<PlayerSelectTicketSummary>();
        foreach (object json1 in (List<object>) json[nameof (select_tickets)])
          selectTicketSummaryList.Add(json1 == null ? (PlayerSelectTicketSummary) null : new PlayerSelectTicketSummary((Dictionary<string, object>) json1));
        this.select_tickets = selectTicketSummaryList.ToArray();
        SMManager.UpdateList<PlayerSelectTicketSummary>(this.select_tickets);
        List<PlayerMaterialGear> playerMaterialGearList = new List<PlayerMaterialGear>();
        foreach (object json2 in (List<object>) json[nameof (player_material_gears)])
          playerMaterialGearList.Add(json2 == null ? (PlayerMaterialGear) null : new PlayerMaterialGear((Dictionary<string, object>) json2));
        this.player_material_gears = playerMaterialGearList.ToArray();
        SMManager.UpdateList<PlayerMaterialGear>(this.player_material_gears);
        List<PlayerCommonTicket> playerCommonTicketList = new List<PlayerCommonTicket>();
        foreach (object json3 in (List<object>) json[nameof (player_common_tickets)])
          playerCommonTicketList.Add(json3 == null ? (PlayerCommonTicket) null : new PlayerCommonTicket((Dictionary<string, object>) json3));
        this.player_common_tickets = playerCommonTicketList.ToArray();
        SMManager.UpdateList<PlayerCommonTicket>(this.player_common_tickets);
        this.challenge_point = (int) (long) json[nameof (challenge_point)];
        List<SM.SelectTicket> selectTicketList = new List<SM.SelectTicket>();
        foreach (object json4 in (List<object>) json[nameof (update_select_tickets)])
          selectTicketList.Add(json4 == null ? (SM.SelectTicket) null : new SM.SelectTicket((Dictionary<string, object>) json4));
        this.update_select_tickets = selectTicketList.ToArray();
        SMManager.UpdateList<SM.SelectTicket>(this.update_select_tickets);
        List<PlayerGuildFacility> playerGuildFacilityList = new List<PlayerGuildFacility>();
        foreach (object json5 in (List<object>) json[nameof (guild_facilities)])
          playerGuildFacilityList.Add(json5 == null ? (PlayerGuildFacility) null : new PlayerGuildFacility((Dictionary<string, object>) json5));
        this.guild_facilities = playerGuildFacilityList.ToArray();
        SMManager.UpdateList<PlayerGuildFacility>(this.guild_facilities);
        List<PlayerUnitTypeTicket> playerUnitTypeTicketList = new List<PlayerUnitTypeTicket>();
        foreach (object json6 in (List<object>) json[nameof (player_unit_type_tickets)])
          playerUnitTypeTicketList.Add(json6 == null ? (PlayerUnitTypeTicket) null : new PlayerUnitTypeTicket((Dictionary<string, object>) json6));
        this.player_unit_type_tickets = playerUnitTypeTicketList.ToArray();
        SMManager.UpdateList<PlayerUnitTypeTicket>(this.player_unit_type_tickets);
        this.player_affiliation = json[nameof (player_affiliation)] == null ? (PlayerAffiliation) null : new PlayerAffiliation((Dictionary<string, object>) json[nameof (player_affiliation)]);
        SMManager.Change<PlayerAffiliation>(this.player_affiliation);
        this.after = json[nameof (after)] == null ? (WebAPI.Response.ShopBuyAfter) null : new WebAPI.Response.ShopBuyAfter((Dictionary<string, object>) json[nameof (after)]);
        List<PlayerItem> playerItemList = new List<PlayerItem>();
        foreach (object json7 in (List<object>) json[nameof (player_items)])
          playerItemList.Add(json7 == null ? (PlayerItem) null : new PlayerItem((Dictionary<string, object>) json7));
        this.player_items = playerItemList.ToArray();
        SMManager.UpdateList<PlayerItem>(this.player_items);
        List<PlayerSeasonTicket> playerSeasonTicketList = new List<PlayerSeasonTicket>();
        foreach (object json8 in (List<object>) json[nameof (player_season_tickets)])
          playerSeasonTicketList.Add(json8 == null ? (PlayerSeasonTicket) null : new PlayerSeasonTicket((Dictionary<string, object>) json8));
        this.player_season_tickets = playerSeasonTicketList.ToArray();
        SMManager.UpdateList<PlayerSeasonTicket>(this.player_season_tickets);
        List<PlayerRecoveryItem> playerRecoveryItemList = new List<PlayerRecoveryItem>();
        foreach (object json9 in (List<object>) json[nameof (player_recovery_items)])
          playerRecoveryItemList.Add(json9 == null ? (PlayerRecoveryItem) null : new PlayerRecoveryItem((Dictionary<string, object>) json9));
        this.player_recovery_items = playerRecoveryItemList.ToArray();
        SMManager.UpdateList<PlayerRecoveryItem>(this.player_recovery_items);
        this.player = json[nameof (player)] == null ? (Player) null : new Player((Dictionary<string, object>) json[nameof (player)]);
        SMManager.Change<Player>(this.player);
        List<PlayerUnit> playerUnitList = new List<PlayerUnit>();
        foreach (object json10 in (List<object>) json[nameof (player_units)])
          playerUnitList.Add(json10 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json10));
        this.player_units = playerUnitList.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_units);
        List<PlayerGuildTown> playerGuildTownList = new List<PlayerGuildTown>();
        foreach (object json11 in (List<object>) json[nameof (guild_towns)])
          playerGuildTownList.Add(json11 == null ? (PlayerGuildTown) null : new PlayerGuildTown((Dictionary<string, object>) json11));
        this.guild_towns = playerGuildTownList.ToArray();
        SMManager.UpdateList<PlayerGuildTown>(this.guild_towns);
        List<Shop> shopList = new List<Shop>();
        foreach (object json12 in (List<object>) json[nameof (shops)])
          shopList.Add(json12 == null ? (Shop) null : new Shop((Dictionary<string, object>) json12));
        this.shops = shopList.ToArray();
        SMManager.UpdateList<Shop>(this.shops);
        List<PlayerMaterialUnit> playerMaterialUnitList = new List<PlayerMaterialUnit>();
        foreach (object json13 in (List<object>) json[nameof (player_material_units)])
          playerMaterialUnitList.Add(json13 == null ? (PlayerMaterialUnit) null : new PlayerMaterialUnit((Dictionary<string, object>) json13));
        this.player_material_units = playerMaterialUnitList.ToArray();
        SMManager.UpdateList<PlayerMaterialUnit>(this.player_material_units);
        List<PlayerPresent> playerPresentList = new List<PlayerPresent>();
        foreach (object json14 in (List<object>) json[nameof (player_presents)])
          playerPresentList.Add(json14 == null ? (PlayerPresent) null : new PlayerPresent((Dictionary<string, object>) json14));
        this.player_presents = playerPresentList.ToArray();
        SMManager.UpdateList<PlayerPresent>(this.player_presents);
        List<PlayerQuestKey> playerQuestKeyList = new List<PlayerQuestKey>();
        foreach (object json15 in (List<object>) json[nameof (player_quest_keys)])
          playerQuestKeyList.Add(json15 == null ? (PlayerQuestKey) null : new PlayerQuestKey((Dictionary<string, object>) json15));
        this.player_quest_keys = playerQuestKeyList.ToArray();
        SMManager.UpdateList<PlayerQuestKey>(this.player_quest_keys);
        this.before = json[nameof (before)] == null ? (WebAPI.Response.ShopBuyBefore) null : new WebAPI.Response.ShopBuyBefore((Dictionary<string, object>) json[nameof (before)]);
        if (!json.ContainsKey("player_presents:delete"))
          return;
        SMManager.DeleteList<PlayerPresent>(((IEnumerable<object>) json["player_presents:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class ShopBuyBefore : KeyCompare
    {
      public int coin;
      public PlayerBattleMedal[] battle_medals;
      public int guild_medal;
      public int money;
      public int tower_medal;
      public int battle_medal;
      public int raid_medal;
      public PlayerCommonTicket[] common_tickets;
      public int medal;

      public ShopBuyBefore()
      {
      }

      public ShopBuyBefore(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.coin = (int) (long) json[nameof (coin)];
        List<PlayerBattleMedal> playerBattleMedalList = new List<PlayerBattleMedal>();
        foreach (object json1 in (List<object>) json[nameof (battle_medals)])
          playerBattleMedalList.Add(json1 == null ? (PlayerBattleMedal) null : new PlayerBattleMedal((Dictionary<string, object>) json1));
        this.battle_medals = playerBattleMedalList.ToArray();
        this.guild_medal = (int) (long) json[nameof (guild_medal)];
        this.money = (int) (long) json[nameof (money)];
        this.tower_medal = (int) (long) json[nameof (tower_medal)];
        this.battle_medal = (int) (long) json[nameof (battle_medal)];
        this.raid_medal = (int) (long) json[nameof (raid_medal)];
        List<PlayerCommonTicket> playerCommonTicketList = new List<PlayerCommonTicket>();
        foreach (object json2 in (List<object>) json[nameof (common_tickets)])
          playerCommonTicketList.Add(json2 == null ? (PlayerCommonTicket) null : new PlayerCommonTicket((Dictionary<string, object>) json2));
        this.common_tickets = playerCommonTicketList.ToArray();
        this.medal = (int) (long) json[nameof (medal)];
      }
    }

    [Serializable]
    public class ShopBuyAfter : KeyCompare
    {
      public int coin;
      public PlayerBattleMedal[] battle_medals;
      public int guild_medal;
      public int money;
      public int tower_medal;
      public int battle_medal;
      public int raid_medal;
      public PlayerCommonTicket[] common_tickets;
      public int medal;

      public ShopBuyAfter()
      {
      }

      public ShopBuyAfter(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.coin = (int) (long) json[nameof (coin)];
        List<PlayerBattleMedal> playerBattleMedalList = new List<PlayerBattleMedal>();
        foreach (object json1 in (List<object>) json[nameof (battle_medals)])
          playerBattleMedalList.Add(json1 == null ? (PlayerBattleMedal) null : new PlayerBattleMedal((Dictionary<string, object>) json1));
        this.battle_medals = playerBattleMedalList.ToArray();
        this.guild_medal = (int) (long) json[nameof (guild_medal)];
        this.money = (int) (long) json[nameof (money)];
        this.tower_medal = (int) (long) json[nameof (tower_medal)];
        this.battle_medal = (int) (long) json[nameof (battle_medal)];
        this.raid_medal = (int) (long) json[nameof (raid_medal)];
        List<PlayerCommonTicket> playerCommonTicketList = new List<PlayerCommonTicket>();
        foreach (object json2 in (List<object>) json[nameof (common_tickets)])
          playerCommonTicketList.Add(json2 == null ? (PlayerCommonTicket) null : new PlayerCommonTicket((Dictionary<string, object>) json2));
        this.common_tickets = playerCommonTicketList.ToArray();
        this.medal = (int) (long) json[nameof (medal)];
      }
    }

    [Serializable]
    public class ShopStatus : KeyCompare
    {
      public PlayerCommonTicket[] player_common_tickets;
      public int challenge_point;
      public PlayerBattleMedal[] battle_medals;
      public CoinBonus[] coin_bonuses;
      public int challenge_point_max;
      public SM.SelectTicket[] select_tickets;
      public LimitedShopBanner[] shop_banners;
      public Shop[] shops;

      public ShopStatus()
      {
      }

      public ShopStatus(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerCommonTicket> playerCommonTicketList = new List<PlayerCommonTicket>();
        foreach (object json1 in (List<object>) json[nameof (player_common_tickets)])
          playerCommonTicketList.Add(json1 == null ? (PlayerCommonTicket) null : new PlayerCommonTicket((Dictionary<string, object>) json1));
        this.player_common_tickets = playerCommonTicketList.ToArray();
        SMManager.UpdateList<PlayerCommonTicket>(this.player_common_tickets);
        this.challenge_point = (int) (long) json[nameof (challenge_point)];
        List<PlayerBattleMedal> playerBattleMedalList = new List<PlayerBattleMedal>();
        foreach (object json2 in (List<object>) json[nameof (battle_medals)])
          playerBattleMedalList.Add(json2 == null ? (PlayerBattleMedal) null : new PlayerBattleMedal((Dictionary<string, object>) json2));
        this.battle_medals = playerBattleMedalList.ToArray();
        SMManager.UpdateList<PlayerBattleMedal>(this.battle_medals);
        List<CoinBonus> coinBonusList = new List<CoinBonus>();
        foreach (object json3 in (List<object>) json[nameof (coin_bonuses)])
          coinBonusList.Add(json3 == null ? (CoinBonus) null : new CoinBonus((Dictionary<string, object>) json3));
        this.coin_bonuses = coinBonusList.ToArray();
        SMManager.UpdateList<CoinBonus>(this.coin_bonuses);
        this.challenge_point_max = (int) (long) json[nameof (challenge_point_max)];
        List<SM.SelectTicket> selectTicketList = new List<SM.SelectTicket>();
        foreach (object json4 in (List<object>) json[nameof (select_tickets)])
          selectTicketList.Add(json4 == null ? (SM.SelectTicket) null : new SM.SelectTicket((Dictionary<string, object>) json4));
        this.select_tickets = selectTicketList.ToArray();
        SMManager.UpdateList<SM.SelectTicket>(this.select_tickets);
        List<LimitedShopBanner> limitedShopBannerList = new List<LimitedShopBanner>();
        foreach (object json5 in (List<object>) json[nameof (shop_banners)])
          limitedShopBannerList.Add(json5 == null ? (LimitedShopBanner) null : new LimitedShopBanner((Dictionary<string, object>) json5));
        this.shop_banners = limitedShopBannerList.ToArray();
        List<Shop> shopList = new List<Shop>();
        foreach (object json6 in (List<object>) json[nameof (shops)])
          shopList.Add(json6 == null ? (Shop) null : new Shop((Dictionary<string, object>) json6));
        this.shops = shopList.ToArray();
        SMManager.UpdateList<Shop>(this.shops);
      }
    }

    [Serializable]
    public class Slot : KeyCompare
    {
      public SlotModule[] slot_modules;

      public Slot()
      {
      }

      public Slot(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<SlotModule> slotModuleList = new List<SlotModule>();
        foreach (object json1 in (List<object>) json[nameof (slot_modules)])
          slotModuleList.Add(json1 == null ? (SlotModule) null : new SlotModule((Dictionary<string, object>) json1));
        this.slot_modules = slotModuleList.ToArray();
        SMManager.UpdateList<SlotModule>(this.slot_modules);
      }
    }

    [Serializable]
    public class SlotS001MedalPay : KeyCompare
    {
      public PlayerMaterialGear[] player_material_gears;
      public PlayerItem[] player_items;
      public PlayerUnit[] player_units;
      public int[] result_reel_index;
      public Player player;
      public WebAPI.Response.SlotS001MedalPayResult[] result;
      public int[] animation_pattern;
      public PlayerMaterialUnit[] player_material_units;
      public PlayerPresent[] player_presents;
      public PlayerQuestKey[] player_quest_keys;

      public SlotS001MedalPay()
      {
      }

      public SlotS001MedalPay(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerMaterialGear> playerMaterialGearList = new List<PlayerMaterialGear>();
        foreach (object json1 in (List<object>) json[nameof (player_material_gears)])
          playerMaterialGearList.Add(json1 == null ? (PlayerMaterialGear) null : new PlayerMaterialGear((Dictionary<string, object>) json1));
        this.player_material_gears = playerMaterialGearList.ToArray();
        SMManager.UpdateList<PlayerMaterialGear>(this.player_material_gears);
        List<PlayerItem> playerItemList = new List<PlayerItem>();
        foreach (object json2 in (List<object>) json[nameof (player_items)])
          playerItemList.Add(json2 == null ? (PlayerItem) null : new PlayerItem((Dictionary<string, object>) json2));
        this.player_items = playerItemList.ToArray();
        SMManager.UpdateList<PlayerItem>(this.player_items);
        List<PlayerUnit> playerUnitList = new List<PlayerUnit>();
        foreach (object json3 in (List<object>) json[nameof (player_units)])
          playerUnitList.Add(json3 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json3));
        this.player_units = playerUnitList.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_units);
        this.result_reel_index = ((IEnumerable<object>) json[nameof (result_reel_index)]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).ToArray<int>();
        this.player = json[nameof (player)] == null ? (Player) null : new Player((Dictionary<string, object>) json[nameof (player)]);
        SMManager.Change<Player>(this.player);
        List<WebAPI.Response.SlotS001MedalPayResult> s001MedalPayResultList = new List<WebAPI.Response.SlotS001MedalPayResult>();
        foreach (object json4 in (List<object>) json[nameof (result)])
          s001MedalPayResultList.Add(json4 == null ? (WebAPI.Response.SlotS001MedalPayResult) null : new WebAPI.Response.SlotS001MedalPayResult((Dictionary<string, object>) json4));
        this.result = s001MedalPayResultList.ToArray();
        this.animation_pattern = ((IEnumerable<object>) json[nameof (animation_pattern)]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).ToArray<int>();
        List<PlayerMaterialUnit> playerMaterialUnitList = new List<PlayerMaterialUnit>();
        foreach (object json5 in (List<object>) json[nameof (player_material_units)])
          playerMaterialUnitList.Add(json5 == null ? (PlayerMaterialUnit) null : new PlayerMaterialUnit((Dictionary<string, object>) json5));
        this.player_material_units = playerMaterialUnitList.ToArray();
        SMManager.UpdateList<PlayerMaterialUnit>(this.player_material_units);
        List<PlayerPresent> playerPresentList = new List<PlayerPresent>();
        foreach (object json6 in (List<object>) json[nameof (player_presents)])
          playerPresentList.Add(json6 == null ? (PlayerPresent) null : new PlayerPresent((Dictionary<string, object>) json6));
        this.player_presents = playerPresentList.ToArray();
        SMManager.UpdateList<PlayerPresent>(this.player_presents);
        List<PlayerQuestKey> playerQuestKeyList = new List<PlayerQuestKey>();
        foreach (object json7 in (List<object>) json[nameof (player_quest_keys)])
          playerQuestKeyList.Add(json7 == null ? (PlayerQuestKey) null : new PlayerQuestKey((Dictionary<string, object>) json7));
        this.player_quest_keys = playerQuestKeyList.ToArray();
        SMManager.UpdateList<PlayerQuestKey>(this.player_quest_keys);
        if (!json.ContainsKey("player_presents:delete"))
          return;
        SMManager.DeleteList<PlayerPresent>(((IEnumerable<object>) json["player_presents:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class SlotS001MedalPayResult : KeyCompare
    {
      public int rarity_id;
      public int reward_result_quantity;
      public bool is_new;
      public int reward_type_id;
      public int reward_result_id;

      public SlotS001MedalPayResult()
      {
      }

      public SlotS001MedalPayResult(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.rarity_id = (int) (long) json[nameof (rarity_id)];
        this.reward_result_quantity = (int) (long) json[nameof (reward_result_quantity)];
        this.is_new = (bool) json[nameof (is_new)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
        this.reward_result_id = (int) (long) json[nameof (reward_result_id)];
      }
    }

    [Serializable]
    public class TowerBattleFinish : KeyCompare
    {
      public WebAPI.Response.TowerBattleFinishDrop_gear_entities[] drop_gear_entities;
      public int tower_id;
      public int finish_unit_death_score;
      public int finish_unit_death_count;
      public PlayerQuestKey[] player_quest_keys;
      public int finish_overkill_damage;
      public int finish_turn_count;
      public WebAPI.Response.TowerBattleFinishStage_clear_rewards[] stage_clear_rewards;
      public int floor;
      public WebAPI.Response.TowerBattleFinishDrop_common_ticket_entities[] drop_common_ticket_entities;
      public WebAPI.Response.TowerBattleFinishDrop_material_unit_entities[] drop_material_unit_entities;
      public WebAPI.Response.TowerBattleFinishDrop_unit_type_ticket_entities[] drop_unit_type_ticket_entities;
      public int finish_overkill_score;
      public PlayerUnit[] player_units;
      public WebAPI.Response.TowerBattleFinishDrop_unit_ticket_entities[] drop_unit_ticket_entities;
      public PlayerItem[] player_items;
      public int period_id;
      public int finish_turn_score;
      public PlayerMaterialUnit[] player_material_units;
      public PlayerPresent[] player_presents;
      public PlayerMaterialGear[] player_material_gears;
      public WebAPI.Response.TowerBattleFinishDrop_material_gear_entities[] drop_material_gear_entities;
      public WebAPI.Response.TowerBattleFinishDrop_unit_entities[] drop_unit_entities;
      public WebAPI.Response.TowerBattleFinishDrop_quest_key_entities[] drop_quest_key_entities;
      public PlayerCharacterIntimate[] player_character_intimates;
      public WebAPI.Response.TowerBattleFinishDrop_supply_entities[] drop_supply_entities;
      public WebAPI.Response.TowerBattleFinishDrop_gacha_ticket_entities[] drop_gacha_ticket_entities;

      public TowerBattleFinish()
      {
      }

      public TowerBattleFinish(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<WebAPI.Response.TowerBattleFinishDrop_gear_entities> dropGearEntitiesList = new List<WebAPI.Response.TowerBattleFinishDrop_gear_entities>();
        foreach (object json1 in (List<object>) json[nameof (drop_gear_entities)])
          dropGearEntitiesList.Add(json1 == null ? (WebAPI.Response.TowerBattleFinishDrop_gear_entities) null : new WebAPI.Response.TowerBattleFinishDrop_gear_entities((Dictionary<string, object>) json1));
        this.drop_gear_entities = dropGearEntitiesList.ToArray();
        this.tower_id = (int) (long) json[nameof (tower_id)];
        this.finish_unit_death_score = (int) (long) json[nameof (finish_unit_death_score)];
        this.finish_unit_death_count = (int) (long) json[nameof (finish_unit_death_count)];
        List<PlayerQuestKey> playerQuestKeyList = new List<PlayerQuestKey>();
        foreach (object json2 in (List<object>) json[nameof (player_quest_keys)])
          playerQuestKeyList.Add(json2 == null ? (PlayerQuestKey) null : new PlayerQuestKey((Dictionary<string, object>) json2));
        this.player_quest_keys = playerQuestKeyList.ToArray();
        SMManager.UpdateList<PlayerQuestKey>(this.player_quest_keys);
        this.finish_overkill_damage = (int) (long) json[nameof (finish_overkill_damage)];
        this.finish_turn_count = (int) (long) json[nameof (finish_turn_count)];
        List<WebAPI.Response.TowerBattleFinishStage_clear_rewards> stageClearRewardsList = new List<WebAPI.Response.TowerBattleFinishStage_clear_rewards>();
        foreach (object json3 in (List<object>) json[nameof (stage_clear_rewards)])
          stageClearRewardsList.Add(json3 == null ? (WebAPI.Response.TowerBattleFinishStage_clear_rewards) null : new WebAPI.Response.TowerBattleFinishStage_clear_rewards((Dictionary<string, object>) json3));
        this.stage_clear_rewards = stageClearRewardsList.ToArray();
        this.floor = (int) (long) json[nameof (floor)];
        List<WebAPI.Response.TowerBattleFinishDrop_common_ticket_entities> commonTicketEntitiesList = new List<WebAPI.Response.TowerBattleFinishDrop_common_ticket_entities>();
        foreach (object json4 in (List<object>) json[nameof (drop_common_ticket_entities)])
          commonTicketEntitiesList.Add(json4 == null ? (WebAPI.Response.TowerBattleFinishDrop_common_ticket_entities) null : new WebAPI.Response.TowerBattleFinishDrop_common_ticket_entities((Dictionary<string, object>) json4));
        this.drop_common_ticket_entities = commonTicketEntitiesList.ToArray();
        List<WebAPI.Response.TowerBattleFinishDrop_material_unit_entities> materialUnitEntitiesList = new List<WebAPI.Response.TowerBattleFinishDrop_material_unit_entities>();
        foreach (object json5 in (List<object>) json[nameof (drop_material_unit_entities)])
          materialUnitEntitiesList.Add(json5 == null ? (WebAPI.Response.TowerBattleFinishDrop_material_unit_entities) null : new WebAPI.Response.TowerBattleFinishDrop_material_unit_entities((Dictionary<string, object>) json5));
        this.drop_material_unit_entities = materialUnitEntitiesList.ToArray();
        List<WebAPI.Response.TowerBattleFinishDrop_unit_type_ticket_entities> typeTicketEntitiesList = new List<WebAPI.Response.TowerBattleFinishDrop_unit_type_ticket_entities>();
        foreach (object json6 in (List<object>) json[nameof (drop_unit_type_ticket_entities)])
          typeTicketEntitiesList.Add(json6 == null ? (WebAPI.Response.TowerBattleFinishDrop_unit_type_ticket_entities) null : new WebAPI.Response.TowerBattleFinishDrop_unit_type_ticket_entities((Dictionary<string, object>) json6));
        this.drop_unit_type_ticket_entities = typeTicketEntitiesList.ToArray();
        this.finish_overkill_score = (int) (long) json[nameof (finish_overkill_score)];
        List<PlayerUnit> playerUnitList = new List<PlayerUnit>();
        foreach (object json7 in (List<object>) json[nameof (player_units)])
          playerUnitList.Add(json7 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json7));
        this.player_units = playerUnitList.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_units);
        List<WebAPI.Response.TowerBattleFinishDrop_unit_ticket_entities> unitTicketEntitiesList = new List<WebAPI.Response.TowerBattleFinishDrop_unit_ticket_entities>();
        foreach (object json8 in (List<object>) json[nameof (drop_unit_ticket_entities)])
          unitTicketEntitiesList.Add(json8 == null ? (WebAPI.Response.TowerBattleFinishDrop_unit_ticket_entities) null : new WebAPI.Response.TowerBattleFinishDrop_unit_ticket_entities((Dictionary<string, object>) json8));
        this.drop_unit_ticket_entities = unitTicketEntitiesList.ToArray();
        List<PlayerItem> playerItemList = new List<PlayerItem>();
        foreach (object json9 in (List<object>) json[nameof (player_items)])
          playerItemList.Add(json9 == null ? (PlayerItem) null : new PlayerItem((Dictionary<string, object>) json9));
        this.player_items = playerItemList.ToArray();
        SMManager.UpdateList<PlayerItem>(this.player_items);
        this.period_id = (int) (long) json[nameof (period_id)];
        this.finish_turn_score = (int) (long) json[nameof (finish_turn_score)];
        List<PlayerMaterialUnit> playerMaterialUnitList = new List<PlayerMaterialUnit>();
        foreach (object json10 in (List<object>) json[nameof (player_material_units)])
          playerMaterialUnitList.Add(json10 == null ? (PlayerMaterialUnit) null : new PlayerMaterialUnit((Dictionary<string, object>) json10));
        this.player_material_units = playerMaterialUnitList.ToArray();
        SMManager.UpdateList<PlayerMaterialUnit>(this.player_material_units);
        List<PlayerPresent> playerPresentList = new List<PlayerPresent>();
        foreach (object json11 in (List<object>) json[nameof (player_presents)])
          playerPresentList.Add(json11 == null ? (PlayerPresent) null : new PlayerPresent((Dictionary<string, object>) json11));
        this.player_presents = playerPresentList.ToArray();
        SMManager.UpdateList<PlayerPresent>(this.player_presents);
        List<PlayerMaterialGear> playerMaterialGearList = new List<PlayerMaterialGear>();
        foreach (object json12 in (List<object>) json[nameof (player_material_gears)])
          playerMaterialGearList.Add(json12 == null ? (PlayerMaterialGear) null : new PlayerMaterialGear((Dictionary<string, object>) json12));
        this.player_material_gears = playerMaterialGearList.ToArray();
        SMManager.UpdateList<PlayerMaterialGear>(this.player_material_gears);
        List<WebAPI.Response.TowerBattleFinishDrop_material_gear_entities> materialGearEntitiesList = new List<WebAPI.Response.TowerBattleFinishDrop_material_gear_entities>();
        foreach (object json13 in (List<object>) json[nameof (drop_material_gear_entities)])
          materialGearEntitiesList.Add(json13 == null ? (WebAPI.Response.TowerBattleFinishDrop_material_gear_entities) null : new WebAPI.Response.TowerBattleFinishDrop_material_gear_entities((Dictionary<string, object>) json13));
        this.drop_material_gear_entities = materialGearEntitiesList.ToArray();
        List<WebAPI.Response.TowerBattleFinishDrop_unit_entities> dropUnitEntitiesList = new List<WebAPI.Response.TowerBattleFinishDrop_unit_entities>();
        foreach (object json14 in (List<object>) json[nameof (drop_unit_entities)])
          dropUnitEntitiesList.Add(json14 == null ? (WebAPI.Response.TowerBattleFinishDrop_unit_entities) null : new WebAPI.Response.TowerBattleFinishDrop_unit_entities((Dictionary<string, object>) json14));
        this.drop_unit_entities = dropUnitEntitiesList.ToArray();
        List<WebAPI.Response.TowerBattleFinishDrop_quest_key_entities> questKeyEntitiesList = new List<WebAPI.Response.TowerBattleFinishDrop_quest_key_entities>();
        foreach (object json15 in (List<object>) json[nameof (drop_quest_key_entities)])
          questKeyEntitiesList.Add(json15 == null ? (WebAPI.Response.TowerBattleFinishDrop_quest_key_entities) null : new WebAPI.Response.TowerBattleFinishDrop_quest_key_entities((Dictionary<string, object>) json15));
        this.drop_quest_key_entities = questKeyEntitiesList.ToArray();
        List<PlayerCharacterIntimate> characterIntimateList = new List<PlayerCharacterIntimate>();
        foreach (object json16 in (List<object>) json[nameof (player_character_intimates)])
          characterIntimateList.Add(json16 == null ? (PlayerCharacterIntimate) null : new PlayerCharacterIntimate((Dictionary<string, object>) json16));
        this.player_character_intimates = characterIntimateList.ToArray();
        SMManager.UpdateList<PlayerCharacterIntimate>(this.player_character_intimates);
        List<WebAPI.Response.TowerBattleFinishDrop_supply_entities> dropSupplyEntitiesList = new List<WebAPI.Response.TowerBattleFinishDrop_supply_entities>();
        foreach (object json17 in (List<object>) json[nameof (drop_supply_entities)])
          dropSupplyEntitiesList.Add(json17 == null ? (WebAPI.Response.TowerBattleFinishDrop_supply_entities) null : new WebAPI.Response.TowerBattleFinishDrop_supply_entities((Dictionary<string, object>) json17));
        this.drop_supply_entities = dropSupplyEntitiesList.ToArray();
        List<WebAPI.Response.TowerBattleFinishDrop_gacha_ticket_entities> gachaTicketEntitiesList = new List<WebAPI.Response.TowerBattleFinishDrop_gacha_ticket_entities>();
        foreach (object json18 in (List<object>) json[nameof (drop_gacha_ticket_entities)])
          gachaTicketEntitiesList.Add(json18 == null ? (WebAPI.Response.TowerBattleFinishDrop_gacha_ticket_entities) null : new WebAPI.Response.TowerBattleFinishDrop_gacha_ticket_entities((Dictionary<string, object>) json18));
        this.drop_gacha_ticket_entities = gachaTicketEntitiesList.ToArray();
        if (json.ContainsKey("player_material_gears:delete"))
          SMManager.DeleteList<PlayerMaterialGear>(((IEnumerable<object>) json["player_material_gears:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
        if (json.ContainsKey("player_items:delete"))
          SMManager.DeleteList<PlayerItem>(((IEnumerable<object>) json["player_items:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
        if (!json.ContainsKey("player_presents:delete"))
          return;
        SMManager.DeleteList<PlayerPresent>(((IEnumerable<object>) json["player_presents:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class TowerBattleFinishDrop_gacha_ticket_entities : KeyCompare
    {
      public int reward_quantity;
      public bool is_new;
      public int? reward_id;
      public int reward_type_id;

      public TowerBattleFinishDrop_gacha_ticket_entities()
      {
      }

      public TowerBattleFinishDrop_gacha_ticket_entities(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_quantity = (int) (long) json[nameof (reward_quantity)];
        this.is_new = (bool) json[nameof (is_new)];
        int? nullable1;
        if (json[nameof (reward_id)] != null)
        {
          long? nullable2 = (long?) json[nameof (reward_id)];
          nullable1 = nullable2.HasValue ? new int?((int) nullable2.GetValueOrDefault()) : new int?();
        }
        else
          nullable1 = new int?();
        this.reward_id = nullable1;
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
      }
    }

    [Serializable]
    public class TowerBattleFinishDrop_supply_entities : KeyCompare
    {
      public int reward_quantity;
      public bool is_new;
      public int? reward_id;
      public int reward_type_id;

      public TowerBattleFinishDrop_supply_entities()
      {
      }

      public TowerBattleFinishDrop_supply_entities(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_quantity = (int) (long) json[nameof (reward_quantity)];
        this.is_new = (bool) json[nameof (is_new)];
        int? nullable1;
        if (json[nameof (reward_id)] != null)
        {
          long? nullable2 = (long?) json[nameof (reward_id)];
          nullable1 = nullable2.HasValue ? new int?((int) nullable2.GetValueOrDefault()) : new int?();
        }
        else
          nullable1 = new int?();
        this.reward_id = nullable1;
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
      }
    }

    [Serializable]
    public class TowerBattleFinishDrop_quest_key_entities : KeyCompare
    {
      public int reward_quantity;
      public bool is_new;
      public int? reward_id;
      public int reward_type_id;

      public TowerBattleFinishDrop_quest_key_entities()
      {
      }

      public TowerBattleFinishDrop_quest_key_entities(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_quantity = (int) (long) json[nameof (reward_quantity)];
        this.is_new = (bool) json[nameof (is_new)];
        int? nullable1;
        if (json[nameof (reward_id)] != null)
        {
          long? nullable2 = (long?) json[nameof (reward_id)];
          nullable1 = nullable2.HasValue ? new int?((int) nullable2.GetValueOrDefault()) : new int?();
        }
        else
          nullable1 = new int?();
        this.reward_id = nullable1;
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
      }
    }

    [Serializable]
    public class TowerBattleFinishDrop_unit_entities : KeyCompare
    {
      public int reward_quantity;
      public bool is_new;
      public int? reward_id;
      public int reward_type_id;

      public TowerBattleFinishDrop_unit_entities()
      {
      }

      public TowerBattleFinishDrop_unit_entities(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_quantity = (int) (long) json[nameof (reward_quantity)];
        this.is_new = (bool) json[nameof (is_new)];
        int? nullable1;
        if (json[nameof (reward_id)] != null)
        {
          long? nullable2 = (long?) json[nameof (reward_id)];
          nullable1 = nullable2.HasValue ? new int?((int) nullable2.GetValueOrDefault()) : new int?();
        }
        else
          nullable1 = new int?();
        this.reward_id = nullable1;
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
      }
    }

    [Serializable]
    public class TowerBattleFinishDrop_material_gear_entities : KeyCompare
    {
      public int reward_quantity;
      public bool is_new;
      public int? reward_id;
      public int reward_type_id;

      public TowerBattleFinishDrop_material_gear_entities()
      {
      }

      public TowerBattleFinishDrop_material_gear_entities(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_quantity = (int) (long) json[nameof (reward_quantity)];
        this.is_new = (bool) json[nameof (is_new)];
        int? nullable1;
        if (json[nameof (reward_id)] != null)
        {
          long? nullable2 = (long?) json[nameof (reward_id)];
          nullable1 = nullable2.HasValue ? new int?((int) nullable2.GetValueOrDefault()) : new int?();
        }
        else
          nullable1 = new int?();
        this.reward_id = nullable1;
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
      }
    }

    [Serializable]
    public class TowerBattleFinishDrop_unit_ticket_entities : KeyCompare
    {
      public int reward_quantity;
      public bool is_new;
      public int? reward_id;
      public int reward_type_id;

      public TowerBattleFinishDrop_unit_ticket_entities()
      {
      }

      public TowerBattleFinishDrop_unit_ticket_entities(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_quantity = (int) (long) json[nameof (reward_quantity)];
        this.is_new = (bool) json[nameof (is_new)];
        int? nullable1;
        if (json[nameof (reward_id)] != null)
        {
          long? nullable2 = (long?) json[nameof (reward_id)];
          nullable1 = nullable2.HasValue ? new int?((int) nullable2.GetValueOrDefault()) : new int?();
        }
        else
          nullable1 = new int?();
        this.reward_id = nullable1;
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
      }
    }

    [Serializable]
    public class TowerBattleFinishDrop_unit_type_ticket_entities : KeyCompare
    {
      public int reward_quantity;
      public bool is_new;
      public int? reward_id;
      public int reward_type_id;

      public TowerBattleFinishDrop_unit_type_ticket_entities()
      {
      }

      public TowerBattleFinishDrop_unit_type_ticket_entities(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_quantity = (int) (long) json[nameof (reward_quantity)];
        this.is_new = (bool) json[nameof (is_new)];
        int? nullable1;
        if (json[nameof (reward_id)] != null)
        {
          long? nullable2 = (long?) json[nameof (reward_id)];
          nullable1 = nullable2.HasValue ? new int?((int) nullable2.GetValueOrDefault()) : new int?();
        }
        else
          nullable1 = new int?();
        this.reward_id = nullable1;
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
      }
    }

    [Serializable]
    public class TowerBattleFinishDrop_material_unit_entities : KeyCompare
    {
      public int reward_quantity;
      public bool is_new;
      public int? reward_id;
      public int reward_type_id;

      public TowerBattleFinishDrop_material_unit_entities()
      {
      }

      public TowerBattleFinishDrop_material_unit_entities(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_quantity = (int) (long) json[nameof (reward_quantity)];
        this.is_new = (bool) json[nameof (is_new)];
        int? nullable1;
        if (json[nameof (reward_id)] != null)
        {
          long? nullable2 = (long?) json[nameof (reward_id)];
          nullable1 = nullable2.HasValue ? new int?((int) nullable2.GetValueOrDefault()) : new int?();
        }
        else
          nullable1 = new int?();
        this.reward_id = nullable1;
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
      }
    }

    [Serializable]
    public class TowerBattleFinishDrop_common_ticket_entities : KeyCompare
    {
      public int reward_quantity;
      public bool is_new;
      public int? reward_id;
      public int reward_type_id;

      public TowerBattleFinishDrop_common_ticket_entities()
      {
      }

      public TowerBattleFinishDrop_common_ticket_entities(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_quantity = (int) (long) json[nameof (reward_quantity)];
        this.is_new = (bool) json[nameof (is_new)];
        int? nullable1;
        if (json[nameof (reward_id)] != null)
        {
          long? nullable2 = (long?) json[nameof (reward_id)];
          nullable1 = nullable2.HasValue ? new int?((int) nullable2.GetValueOrDefault()) : new int?();
        }
        else
          nullable1 = new int?();
        this.reward_id = nullable1;
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
      }
    }

    [Serializable]
    public class TowerBattleFinishStage_clear_rewards : KeyCompare
    {
      public int reward_quantity;
      public int id;
      public int reward_id;
      public int reward_type_id;

      public TowerBattleFinishStage_clear_rewards()
      {
      }

      public TowerBattleFinishStage_clear_rewards(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_quantity = (int) (long) json[nameof (reward_quantity)];
        this.id = (int) (long) json[nameof (id)];
        this.reward_id = (int) (long) json[nameof (reward_id)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
      }
    }

    [Serializable]
    public class TowerBattleFinishDrop_gear_entities : KeyCompare
    {
      public int reward_quantity;
      public bool is_new;
      public int? reward_id;
      public int reward_type_id;

      public TowerBattleFinishDrop_gear_entities()
      {
      }

      public TowerBattleFinishDrop_gear_entities(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_quantity = (int) (long) json[nameof (reward_quantity)];
        this.is_new = (bool) json[nameof (is_new)];
        int? nullable1;
        if (json[nameof (reward_id)] != null)
        {
          long? nullable2 = (long?) json[nameof (reward_id)];
          nullable1 = nullable2.HasValue ? new int?((int) nullable2.GetValueOrDefault()) : new int?();
        }
        else
          nullable1 = new int?();
        this.reward_id = nullable1;
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
      }
    }

    [Serializable]
    public class TowerBattleForceClose : KeyCompare
    {
      public TowerBattleForceClose()
      {
      }

      public TowerBattleForceClose(Dictionary<string, object> json) => this._hasKey = false;
    }

    [Serializable]
    public class TowerBattleResume : KeyCompare
    {
      public int tower_id;
      public int floor;
      public string battle_uuid;
      public int completed_count;
      public TowerDeckUnit[] tower_deck_units;
      public int quest_type;
      public Player player;
      public int period_id;
      public WebAPI.Response.TowerBattleResumeEnemy_items[] enemy_items;
      public TowerEnemy[] enemies;

      public TowerBattleResume()
      {
      }

      public TowerBattleResume(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.tower_id = (int) (long) json[nameof (tower_id)];
        this.floor = (int) (long) json[nameof (floor)];
        this.battle_uuid = (string) json[nameof (battle_uuid)];
        this.completed_count = (int) (long) json[nameof (completed_count)];
        List<TowerDeckUnit> towerDeckUnitList = new List<TowerDeckUnit>();
        foreach (object json1 in (List<object>) json[nameof (tower_deck_units)])
          towerDeckUnitList.Add(json1 == null ? (TowerDeckUnit) null : new TowerDeckUnit((Dictionary<string, object>) json1));
        this.tower_deck_units = towerDeckUnitList.ToArray();
        this.quest_type = (int) (long) json[nameof (quest_type)];
        this.player = json[nameof (player)] == null ? (Player) null : new Player((Dictionary<string, object>) json[nameof (player)]);
        SMManager.Change<Player>(this.player);
        this.period_id = (int) (long) json[nameof (period_id)];
        List<WebAPI.Response.TowerBattleResumeEnemy_items> resumeEnemyItemsList = new List<WebAPI.Response.TowerBattleResumeEnemy_items>();
        foreach (object json2 in (List<object>) json[nameof (enemy_items)])
          resumeEnemyItemsList.Add(json2 == null ? (WebAPI.Response.TowerBattleResumeEnemy_items) null : new WebAPI.Response.TowerBattleResumeEnemy_items((Dictionary<string, object>) json2));
        this.enemy_items = resumeEnemyItemsList.ToArray();
        List<TowerEnemy> towerEnemyList = new List<TowerEnemy>();
        foreach (object json3 in (List<object>) json[nameof (enemies)])
          towerEnemyList.Add(json3 == null ? (TowerEnemy) null : new TowerEnemy((Dictionary<string, object>) json3));
        this.enemies = towerEnemyList.ToArray();
      }
    }

    [Serializable]
    public class TowerBattleResumeEnemy_items : KeyCompare
    {
      public int reward_quantity;
      public int id;
      public int reward_id;
      public int reward_type_id;

      public TowerBattleResumeEnemy_items()
      {
      }

      public TowerBattleResumeEnemy_items(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_quantity = (int) (long) json[nameof (reward_quantity)];
        this.id = (int) (long) json[nameof (id)];
        this.reward_id = (int) (long) json[nameof (reward_id)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
      }
    }

    [Serializable]
    public class TowerBattleRetire : KeyCompare
    {
      public TowerBattleRetire()
      {
      }

      public TowerBattleRetire(Dictionary<string, object> json) => this._hasKey = false;
    }

    [Serializable]
    public class TowerBattleStart : KeyCompare
    {
      public int tower_id;
      public int floor;
      public string battle_uuid;
      public int completed_count;
      public TowerDeckUnit[] tower_deck_units;
      public int quest_type;
      public Player player;
      public int period_id;
      public WebAPI.Response.TowerBattleStartEnemy_items[] enemy_items;
      public TowerEnemy[] enemies;

      public TowerBattleStart()
      {
      }

      public TowerBattleStart(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.tower_id = (int) (long) json[nameof (tower_id)];
        this.floor = (int) (long) json[nameof (floor)];
        this.battle_uuid = (string) json[nameof (battle_uuid)];
        this.completed_count = (int) (long) json[nameof (completed_count)];
        List<TowerDeckUnit> towerDeckUnitList = new List<TowerDeckUnit>();
        foreach (object json1 in (List<object>) json[nameof (tower_deck_units)])
          towerDeckUnitList.Add(json1 == null ? (TowerDeckUnit) null : new TowerDeckUnit((Dictionary<string, object>) json1));
        this.tower_deck_units = towerDeckUnitList.ToArray();
        this.quest_type = (int) (long) json[nameof (quest_type)];
        this.player = json[nameof (player)] == null ? (Player) null : new Player((Dictionary<string, object>) json[nameof (player)]);
        SMManager.Change<Player>(this.player);
        this.period_id = (int) (long) json[nameof (period_id)];
        List<WebAPI.Response.TowerBattleStartEnemy_items> battleStartEnemyItemsList = new List<WebAPI.Response.TowerBattleStartEnemy_items>();
        foreach (object json2 in (List<object>) json[nameof (enemy_items)])
          battleStartEnemyItemsList.Add(json2 == null ? (WebAPI.Response.TowerBattleStartEnemy_items) null : new WebAPI.Response.TowerBattleStartEnemy_items((Dictionary<string, object>) json2));
        this.enemy_items = battleStartEnemyItemsList.ToArray();
        List<TowerEnemy> towerEnemyList = new List<TowerEnemy>();
        foreach (object json3 in (List<object>) json[nameof (enemies)])
          towerEnemyList.Add(json3 == null ? (TowerEnemy) null : new TowerEnemy((Dictionary<string, object>) json3));
        this.enemies = towerEnemyList.ToArray();
      }
    }

    [Serializable]
    public class TowerBattleStartEnemy_items : KeyCompare
    {
      public int reward_quantity;
      public int id;
      public int reward_id;
      public int reward_type_id;

      public TowerBattleStartEnemy_items()
      {
      }

      public TowerBattleStartEnemy_items(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_quantity = (int) (long) json[nameof (reward_quantity)];
        this.id = (int) (long) json[nameof (id)];
        this.reward_id = (int) (long) json[nameof (reward_id)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
      }
    }

    [Serializable]
    public class TowerDeckEdit : KeyCompare
    {
      public TowerDeck tower_deck;

      public TowerDeckEdit()
      {
      }

      public TowerDeckEdit(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.tower_deck = json[nameof (tower_deck)] == null ? (TowerDeck) null : new TowerDeck((Dictionary<string, object>) json[nameof (tower_deck)]);
        SMManager.Change<TowerDeck>(this.tower_deck);
      }
    }

    [Serializable]
    public class TowerEntry : KeyCompare
    {
      public Player player;
      public PlayerItem[] player_items;
      public PlayerUnit[] player_units;

      public TowerEntry()
      {
      }

      public TowerEntry(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.player = json[nameof (player)] == null ? (Player) null : new Player((Dictionary<string, object>) json[nameof (player)]);
        SMManager.Change<Player>(this.player);
        List<PlayerItem> playerItemList = new List<PlayerItem>();
        foreach (object json1 in (List<object>) json[nameof (player_items)])
          playerItemList.Add(json1 == null ? (PlayerItem) null : new PlayerItem((Dictionary<string, object>) json1));
        this.player_items = playerItemList.ToArray();
        SMManager.UpdateList<PlayerItem>(this.player_items);
        List<PlayerUnit> playerUnitList = new List<PlayerUnit>();
        foreach (object json2 in (List<object>) json[nameof (player_units)])
          playerUnitList.Add(json2 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json2));
        this.player_units = playerUnitList.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_units);
        if (!json.ContainsKey("player_items:delete"))
          return;
        SMManager.DeleteList<PlayerItem>(((IEnumerable<object>) json["player_items:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class TowerReassign : KeyCompare
    {
      public Player player;
      public PlayerItem[] player_items;
      public PlayerUnit[] player_units;

      public TowerReassign()
      {
      }

      public TowerReassign(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.player = json[nameof (player)] == null ? (Player) null : new Player((Dictionary<string, object>) json[nameof (player)]);
        SMManager.Change<Player>(this.player);
        List<PlayerItem> playerItemList = new List<PlayerItem>();
        foreach (object json1 in (List<object>) json[nameof (player_items)])
          playerItemList.Add(json1 == null ? (PlayerItem) null : new PlayerItem((Dictionary<string, object>) json1));
        this.player_items = playerItemList.ToArray();
        SMManager.UpdateList<PlayerItem>(this.player_items);
        List<PlayerUnit> playerUnitList = new List<PlayerUnit>();
        foreach (object json2 in (List<object>) json[nameof (player_units)])
          playerUnitList.Add(json2 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json2));
        this.player_units = playerUnitList.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_units);
        if (!json.ContainsKey("player_items:delete"))
          return;
        SMManager.DeleteList<PlayerItem>(((IEnumerable<object>) json["player_items:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class TowerRestart : KeyCompare
    {
      public Player player;
      public PlayerItem[] player_items;
      public PlayerUnit[] player_units;

      public TowerRestart()
      {
      }

      public TowerRestart(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.player = json[nameof (player)] == null ? (Player) null : new Player((Dictionary<string, object>) json[nameof (player)]);
        SMManager.Change<Player>(this.player);
        List<PlayerItem> playerItemList = new List<PlayerItem>();
        foreach (object json1 in (List<object>) json[nameof (player_items)])
          playerItemList.Add(json1 == null ? (PlayerItem) null : new PlayerItem((Dictionary<string, object>) json1));
        this.player_items = playerItemList.ToArray();
        SMManager.UpdateList<PlayerItem>(this.player_items);
        List<PlayerUnit> playerUnitList = new List<PlayerUnit>();
        foreach (object json2 in (List<object>) json[nameof (player_units)])
          playerUnitList.Add(json2 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json2));
        this.player_units = playerUnitList.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_units);
        if (!json.ContainsKey("player_items:delete"))
          return;
        SMManager.DeleteList<PlayerItem>(((IEnumerable<object>) json["player_items:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class TowerScoreDetail : KeyCompare
    {
      public int tower_id;
      public WebAPI.Response.TowerScoreDetailTower_scores[] tower_scores;
      public int period_id;

      public TowerScoreDetail()
      {
      }

      public TowerScoreDetail(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.tower_id = (int) (long) json[nameof (tower_id)];
        List<WebAPI.Response.TowerScoreDetailTower_scores> detailTowerScoresList = new List<WebAPI.Response.TowerScoreDetailTower_scores>();
        foreach (object json1 in (List<object>) json[nameof (tower_scores)])
          detailTowerScoresList.Add(json1 == null ? (WebAPI.Response.TowerScoreDetailTower_scores) null : new WebAPI.Response.TowerScoreDetailTower_scores((Dictionary<string, object>) json1));
        this.tower_scores = detailTowerScoresList.ToArray();
        this.period_id = (int) (long) json[nameof (period_id)];
      }
    }

    [Serializable]
    public class TowerScoreDetailTower_scores : KeyCompare
    {
      public bool is_new_damage;
      public int floor;
      public int overkill_damage;
      public bool is_new_technical;
      public bool is_new_speed;
      public int technical_score;
      public int speed_score;
      public int turn_count;
      public int damage_score;
      public int unit_death_count;

      public TowerScoreDetailTower_scores()
      {
      }

      public TowerScoreDetailTower_scores(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.is_new_damage = (bool) json[nameof (is_new_damage)];
        this.floor = (int) (long) json[nameof (floor)];
        this.overkill_damage = (int) (long) json[nameof (overkill_damage)];
        this.is_new_technical = (bool) json[nameof (is_new_technical)];
        this.is_new_speed = (bool) json[nameof (is_new_speed)];
        this.technical_score = (int) (long) json[nameof (technical_score)];
        this.speed_score = (int) (long) json[nameof (speed_score)];
        this.turn_count = (int) (long) json[nameof (turn_count)];
        this.damage_score = (int) (long) json[nameof (damage_score)];
        this.unit_death_count = (int) (long) json[nameof (unit_death_count)];
      }
    }

    [Serializable]
    public class TowerScoreRankingDamage : KeyCompare
    {
      public WebAPI.Response.TowerScoreRankingDamageDamage_rankings[] damage_rankings;
      public WebAPI.Response.TowerScoreRankingDamagePlayer_score player_score;
      public int period_id;
      public int tower_id;

      public TowerScoreRankingDamage()
      {
      }

      public TowerScoreRankingDamage(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<WebAPI.Response.TowerScoreRankingDamageDamage_rankings> damageDamageRankingsList = new List<WebAPI.Response.TowerScoreRankingDamageDamage_rankings>();
        foreach (object json1 in (List<object>) json[nameof (damage_rankings)])
          damageDamageRankingsList.Add(json1 == null ? (WebAPI.Response.TowerScoreRankingDamageDamage_rankings) null : new WebAPI.Response.TowerScoreRankingDamageDamage_rankings((Dictionary<string, object>) json1));
        this.damage_rankings = damageDamageRankingsList.ToArray();
        this.player_score = json[nameof (player_score)] == null ? (WebAPI.Response.TowerScoreRankingDamagePlayer_score) null : new WebAPI.Response.TowerScoreRankingDamagePlayer_score((Dictionary<string, object>) json[nameof (player_score)]);
        this.period_id = (int) (long) json[nameof (period_id)];
        this.tower_id = (int) (long) json[nameof (tower_id)];
      }
    }

    [Serializable]
    public class TowerScoreRankingDamagePlayer_score : KeyCompare
    {
      public int? damage_ranking_rank;
      public int damage_ranking_score;

      public TowerScoreRankingDamagePlayer_score()
      {
      }

      public TowerScoreRankingDamagePlayer_score(Dictionary<string, object> json)
      {
        this._hasKey = false;
        int? nullable1;
        if (json[nameof (damage_ranking_rank)] != null)
        {
          long? nullable2 = (long?) json[nameof (damage_ranking_rank)];
          nullable1 = nullable2.HasValue ? new int?((int) nullable2.GetValueOrDefault()) : new int?();
        }
        else
          nullable1 = new int?();
        this.damage_ranking_rank = nullable1;
        this.damage_ranking_score = (int) (long) json[nameof (damage_ranking_score)];
      }
    }

    [Serializable]
    public class TowerScoreRankingDamageDamage_rankings : KeyCompare
    {
      public string player_name;
      public int player_level;
      public int leader_unit_job_id;
      public int rank;
      public int score;
      public int player_emblem_id;
      public int leader_unit_id;
      public int leader_unit_level;

      public TowerScoreRankingDamageDamage_rankings()
      {
      }

      public TowerScoreRankingDamageDamage_rankings(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.player_name = (string) json[nameof (player_name)];
        this.player_level = (int) (long) json[nameof (player_level)];
        this.leader_unit_job_id = (int) (long) json[nameof (leader_unit_job_id)];
        this.rank = (int) (long) json[nameof (rank)];
        this.score = (int) (long) json[nameof (score)];
        this.player_emblem_id = (int) (long) json[nameof (player_emblem_id)];
        this.leader_unit_id = (int) (long) json[nameof (leader_unit_id)];
        this.leader_unit_level = (int) (long) json[nameof (leader_unit_level)];
      }
    }

    [Serializable]
    public class TowerScoreRankingSpeed : KeyCompare
    {
      public WebAPI.Response.TowerScoreRankingSpeedPlayer_score player_score;
      public int tower_id;
      public WebAPI.Response.TowerScoreRankingSpeedSpeed_rankings[] speed_rankings;
      public int period_id;

      public TowerScoreRankingSpeed()
      {
      }

      public TowerScoreRankingSpeed(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.player_score = json[nameof (player_score)] == null ? (WebAPI.Response.TowerScoreRankingSpeedPlayer_score) null : new WebAPI.Response.TowerScoreRankingSpeedPlayer_score((Dictionary<string, object>) json[nameof (player_score)]);
        this.tower_id = (int) (long) json[nameof (tower_id)];
        List<WebAPI.Response.TowerScoreRankingSpeedSpeed_rankings> speedSpeedRankingsList = new List<WebAPI.Response.TowerScoreRankingSpeedSpeed_rankings>();
        foreach (object json1 in (List<object>) json[nameof (speed_rankings)])
          speedSpeedRankingsList.Add(json1 == null ? (WebAPI.Response.TowerScoreRankingSpeedSpeed_rankings) null : new WebAPI.Response.TowerScoreRankingSpeedSpeed_rankings((Dictionary<string, object>) json1));
        this.speed_rankings = speedSpeedRankingsList.ToArray();
        this.period_id = (int) (long) json[nameof (period_id)];
      }
    }

    [Serializable]
    public class TowerScoreRankingSpeedSpeed_rankings : KeyCompare
    {
      public string player_name;
      public int player_level;
      public int leader_unit_job_id;
      public int rank;
      public int score;
      public int player_emblem_id;
      public int leader_unit_id;
      public int leader_unit_level;

      public TowerScoreRankingSpeedSpeed_rankings()
      {
      }

      public TowerScoreRankingSpeedSpeed_rankings(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.player_name = (string) json[nameof (player_name)];
        this.player_level = (int) (long) json[nameof (player_level)];
        this.leader_unit_job_id = (int) (long) json[nameof (leader_unit_job_id)];
        this.rank = (int) (long) json[nameof (rank)];
        this.score = (int) (long) json[nameof (score)];
        this.player_emblem_id = (int) (long) json[nameof (player_emblem_id)];
        this.leader_unit_id = (int) (long) json[nameof (leader_unit_id)];
        this.leader_unit_level = (int) (long) json[nameof (leader_unit_level)];
      }
    }

    [Serializable]
    public class TowerScoreRankingSpeedPlayer_score : KeyCompare
    {
      public int? speed_ranking_rank;
      public int speed_ranking_score;

      public TowerScoreRankingSpeedPlayer_score()
      {
      }

      public TowerScoreRankingSpeedPlayer_score(Dictionary<string, object> json)
      {
        this._hasKey = false;
        int? nullable1;
        if (json[nameof (speed_ranking_rank)] != null)
        {
          long? nullable2 = (long?) json[nameof (speed_ranking_rank)];
          nullable1 = nullable2.HasValue ? new int?((int) nullable2.GetValueOrDefault()) : new int?();
        }
        else
          nullable1 = new int?();
        this.speed_ranking_rank = nullable1;
        this.speed_ranking_score = (int) (long) json[nameof (speed_ranking_score)];
      }
    }

    [Serializable]
    public class TowerScoreRankingTechnical : KeyCompare
    {
      public WebAPI.Response.TowerScoreRankingTechnicalPlayer_score player_score;
      public int tower_id;
      public int period_id;
      public WebAPI.Response.TowerScoreRankingTechnicalTechnical_rankings[] technical_rankings;

      public TowerScoreRankingTechnical()
      {
      }

      public TowerScoreRankingTechnical(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.player_score = json[nameof (player_score)] == null ? (WebAPI.Response.TowerScoreRankingTechnicalPlayer_score) null : new WebAPI.Response.TowerScoreRankingTechnicalPlayer_score((Dictionary<string, object>) json[nameof (player_score)]);
        this.tower_id = (int) (long) json[nameof (tower_id)];
        this.period_id = (int) (long) json[nameof (period_id)];
        List<WebAPI.Response.TowerScoreRankingTechnicalTechnical_rankings> technicalRankingsList = new List<WebAPI.Response.TowerScoreRankingTechnicalTechnical_rankings>();
        foreach (object json1 in (List<object>) json[nameof (technical_rankings)])
          technicalRankingsList.Add(json1 == null ? (WebAPI.Response.TowerScoreRankingTechnicalTechnical_rankings) null : new WebAPI.Response.TowerScoreRankingTechnicalTechnical_rankings((Dictionary<string, object>) json1));
        this.technical_rankings = technicalRankingsList.ToArray();
      }
    }

    [Serializable]
    public class TowerScoreRankingTechnicalTechnical_rankings : KeyCompare
    {
      public string player_name;
      public int player_level;
      public int leader_unit_job_id;
      public int rank;
      public int score;
      public int player_emblem_id;
      public int leader_unit_id;
      public int leader_unit_level;

      public TowerScoreRankingTechnicalTechnical_rankings()
      {
      }

      public TowerScoreRankingTechnicalTechnical_rankings(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.player_name = (string) json[nameof (player_name)];
        this.player_level = (int) (long) json[nameof (player_level)];
        this.leader_unit_job_id = (int) (long) json[nameof (leader_unit_job_id)];
        this.rank = (int) (long) json[nameof (rank)];
        this.score = (int) (long) json[nameof (score)];
        this.player_emblem_id = (int) (long) json[nameof (player_emblem_id)];
        this.leader_unit_id = (int) (long) json[nameof (leader_unit_id)];
        this.leader_unit_level = (int) (long) json[nameof (leader_unit_level)];
      }
    }

    [Serializable]
    public class TowerScoreRankingTechnicalPlayer_score : KeyCompare
    {
      public int technical_ranking_score;
      public int? technical_ranking_rank;

      public TowerScoreRankingTechnicalPlayer_score()
      {
      }

      public TowerScoreRankingTechnicalPlayer_score(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.technical_ranking_score = (int) (long) json[nameof (technical_ranking_score)];
        int? nullable1;
        if (json[nameof (technical_ranking_rank)] != null)
        {
          long? nullable2 = (long?) json[nameof (technical_ranking_rank)];
          nullable1 = nullable2.HasValue ? new int?((int) nullable2.GetValueOrDefault()) : new int?();
        }
        else
          nullable1 = new int?();
        this.technical_ranking_rank = nullable1;
      }
    }

    [Serializable]
    public class TowerShopTop : KeyCompare
    {
      public SM.SelectTicket[] select_tickets;
      public Shop[] shops;

      public TowerShopTop()
      {
      }

      public TowerShopTop(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<SM.SelectTicket> selectTicketList = new List<SM.SelectTicket>();
        foreach (object json1 in (List<object>) json[nameof (select_tickets)])
          selectTicketList.Add(json1 == null ? (SM.SelectTicket) null : new SM.SelectTicket((Dictionary<string, object>) json1));
        this.select_tickets = selectTicketList.ToArray();
        SMManager.UpdateList<SM.SelectTicket>(this.select_tickets);
        List<Shop> shopList = new List<Shop>();
        foreach (object json2 in (List<object>) json[nameof (shops)])
          shopList.Add(json2 == null ? (Shop) null : new Shop((Dictionary<string, object>) json2));
        this.shops = shopList.ToArray();
        SMManager.UpdateList<Shop>(this.shops);
      }
    }

    [Serializable]
    public class TowerTop : KeyCompare
    {
      public TowerProgress tower_progress;
      public TowerPlayer tower_player;
      public TowerDeckUnit[] tower_deck_units;
      public bool has_new_best_score;
      public bool is_completed_last_floor;

      public TowerTop()
      {
      }

      public TowerTop(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.tower_progress = json[nameof (tower_progress)] == null ? (TowerProgress) null : new TowerProgress((Dictionary<string, object>) json[nameof (tower_progress)]);
        this.tower_player = json[nameof (tower_player)] == null ? (TowerPlayer) null : new TowerPlayer((Dictionary<string, object>) json[nameof (tower_player)]);
        List<TowerDeckUnit> towerDeckUnitList = new List<TowerDeckUnit>();
        foreach (object json1 in (List<object>) json[nameof (tower_deck_units)])
          towerDeckUnitList.Add(json1 == null ? (TowerDeckUnit) null : new TowerDeckUnit((Dictionary<string, object>) json1));
        this.tower_deck_units = towerDeckUnitList.ToArray();
        this.has_new_best_score = (bool) json[nameof (has_new_best_score)];
        this.is_completed_last_floor = (bool) json[nameof (is_completed_last_floor)];
      }
    }

    [Serializable]
    public class TutorialTutorialRagnarokResume : KeyCompare
    {
      public PlayerMaterialGear[] player_material_gears;
      public PlayerItem[] player_items;
      public PlayerUnit after_levelup1_player_unit;
      public PlayerUnit[] player_units;
      public PlayerDeck[] player_decks;
      public PlayerUnit after_transmigrate_player_unit;
      public PlayerUnit after_levelup2_player_unit;
      public Player player;
      public PlayerMaterialUnit[] player_material_units;

      public TutorialTutorialRagnarokResume()
      {
      }

      public TutorialTutorialRagnarokResume(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerMaterialGear> playerMaterialGearList = new List<PlayerMaterialGear>();
        foreach (object json1 in (List<object>) json[nameof (player_material_gears)])
          playerMaterialGearList.Add(json1 == null ? (PlayerMaterialGear) null : new PlayerMaterialGear((Dictionary<string, object>) json1));
        this.player_material_gears = playerMaterialGearList.ToArray();
        SMManager.UpdateList<PlayerMaterialGear>(this.player_material_gears);
        List<PlayerItem> playerItemList = new List<PlayerItem>();
        foreach (object json2 in (List<object>) json[nameof (player_items)])
          playerItemList.Add(json2 == null ? (PlayerItem) null : new PlayerItem((Dictionary<string, object>) json2));
        this.player_items = playerItemList.ToArray();
        SMManager.UpdateList<PlayerItem>(this.player_items);
        this.after_levelup1_player_unit = json[nameof (after_levelup1_player_unit)] == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json[nameof (after_levelup1_player_unit)]);
        List<PlayerUnit> playerUnitList = new List<PlayerUnit>();
        foreach (object json3 in (List<object>) json[nameof (player_units)])
          playerUnitList.Add(json3 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json3));
        this.player_units = playerUnitList.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_units);
        List<PlayerDeck> playerDeckList = new List<PlayerDeck>();
        foreach (object json4 in (List<object>) json[nameof (player_decks)])
          playerDeckList.Add(json4 == null ? (PlayerDeck) null : new PlayerDeck((Dictionary<string, object>) json4));
        this.player_decks = playerDeckList.ToArray();
        SMManager.UpdateList<PlayerDeck>(this.player_decks);
        this.after_transmigrate_player_unit = json[nameof (after_transmigrate_player_unit)] == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json[nameof (after_transmigrate_player_unit)]);
        this.after_levelup2_player_unit = json[nameof (after_levelup2_player_unit)] == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json[nameof (after_levelup2_player_unit)]);
        this.player = json[nameof (player)] == null ? (Player) null : new Player((Dictionary<string, object>) json[nameof (player)]);
        SMManager.Change<Player>(this.player);
        List<PlayerMaterialUnit> playerMaterialUnitList = new List<PlayerMaterialUnit>();
        foreach (object json5 in (List<object>) json[nameof (player_material_units)])
          playerMaterialUnitList.Add(json5 == null ? (PlayerMaterialUnit) null : new PlayerMaterialUnit((Dictionary<string, object>) json5));
        this.player_material_units = playerMaterialUnitList.ToArray();
        SMManager.UpdateList<PlayerMaterialUnit>(this.player_material_units);
      }
    }

    [Serializable]
    public class TutorialTutorialResume : KeyCompare
    {
      public PlayerMaterialGear[] player_material_gears;
      public PlayerItem[] player_items;
      public PlayerUnit[] player_units;
      public PlayerDeck[] player_decks;
      public Player player;
      public PlayerMaterialUnit[] player_material_units;

      public TutorialTutorialResume()
      {
      }

      public TutorialTutorialResume(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerMaterialGear> playerMaterialGearList = new List<PlayerMaterialGear>();
        foreach (object json1 in (List<object>) json[nameof (player_material_gears)])
          playerMaterialGearList.Add(json1 == null ? (PlayerMaterialGear) null : new PlayerMaterialGear((Dictionary<string, object>) json1));
        this.player_material_gears = playerMaterialGearList.ToArray();
        SMManager.UpdateList<PlayerMaterialGear>(this.player_material_gears);
        List<PlayerItem> playerItemList = new List<PlayerItem>();
        foreach (object json2 in (List<object>) json[nameof (player_items)])
          playerItemList.Add(json2 == null ? (PlayerItem) null : new PlayerItem((Dictionary<string, object>) json2));
        this.player_items = playerItemList.ToArray();
        SMManager.UpdateList<PlayerItem>(this.player_items);
        List<PlayerUnit> playerUnitList = new List<PlayerUnit>();
        foreach (object json3 in (List<object>) json[nameof (player_units)])
          playerUnitList.Add(json3 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json3));
        this.player_units = playerUnitList.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_units);
        List<PlayerDeck> playerDeckList = new List<PlayerDeck>();
        foreach (object json4 in (List<object>) json[nameof (player_decks)])
          playerDeckList.Add(json4 == null ? (PlayerDeck) null : new PlayerDeck((Dictionary<string, object>) json4));
        this.player_decks = playerDeckList.ToArray();
        SMManager.UpdateList<PlayerDeck>(this.player_decks);
        this.player = json[nameof (player)] == null ? (Player) null : new Player((Dictionary<string, object>) json[nameof (player)]);
        SMManager.Change<Player>(this.player);
        List<PlayerMaterialUnit> playerMaterialUnitList = new List<PlayerMaterialUnit>();
        foreach (object json5 in (List<object>) json[nameof (player_material_units)])
          playerMaterialUnitList.Add(json5 == null ? (PlayerMaterialUnit) null : new PlayerMaterialUnit((Dictionary<string, object>) json5));
        this.player_material_units = playerMaterialUnitList.ToArray();
        SMManager.UpdateList<PlayerMaterialUnit>(this.player_material_units);
      }
    }

    [Serializable]
    public class TutorialTutorialValid : KeyCompare
    {
      public bool is_valid;

      public TutorialTutorialValid()
      {
      }

      public TutorialTutorialValid(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.is_valid = (bool) json[nameof (is_valid)];
      }
    }

    [Serializable]
    public class UnitAcquireGearQuest : KeyCompare
    {
      public int[] sea_quest_s_ids;
      public int[] story_quest_s_ids;
      public int[] extra_quest_s_ids;
      public PlayerSeaQuestS[] player_sea_quests;
      public PlayerSeaDeck[] player_sea_decks;
      public PlayerExtraQuestS[] player_extra_quests;
      public SeaPlayerHelper[] player_sea_helpers;
      public SeaPlayer sea_player;

      public UnitAcquireGearQuest()
      {
      }

      public UnitAcquireGearQuest(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.sea_quest_s_ids = ((IEnumerable<object>) json[nameof (sea_quest_s_ids)]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).ToArray<int>();
        this.story_quest_s_ids = ((IEnumerable<object>) json[nameof (story_quest_s_ids)]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).ToArray<int>();
        this.extra_quest_s_ids = ((IEnumerable<object>) json[nameof (extra_quest_s_ids)]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).ToArray<int>();
        List<PlayerSeaQuestS> playerSeaQuestSList = new List<PlayerSeaQuestS>();
        foreach (object json1 in (List<object>) json[nameof (player_sea_quests)])
          playerSeaQuestSList.Add(json1 == null ? (PlayerSeaQuestS) null : new PlayerSeaQuestS((Dictionary<string, object>) json1));
        this.player_sea_quests = playerSeaQuestSList.ToArray();
        SMManager.UpdateList<PlayerSeaQuestS>(this.player_sea_quests);
        List<PlayerSeaDeck> playerSeaDeckList = new List<PlayerSeaDeck>();
        foreach (object json2 in (List<object>) json[nameof (player_sea_decks)])
          playerSeaDeckList.Add(json2 == null ? (PlayerSeaDeck) null : new PlayerSeaDeck((Dictionary<string, object>) json2));
        this.player_sea_decks = playerSeaDeckList.ToArray();
        SMManager.UpdateList<PlayerSeaDeck>(this.player_sea_decks);
        List<PlayerExtraQuestS> playerExtraQuestSList = new List<PlayerExtraQuestS>();
        foreach (object json3 in (List<object>) json[nameof (player_extra_quests)])
          playerExtraQuestSList.Add(json3 == null ? (PlayerExtraQuestS) null : new PlayerExtraQuestS((Dictionary<string, object>) json3));
        this.player_extra_quests = playerExtraQuestSList.ToArray();
        SMManager.UpdateList<PlayerExtraQuestS>(this.player_extra_quests);
        List<SeaPlayerHelper> seaPlayerHelperList = new List<SeaPlayerHelper>();
        foreach (object json4 in (List<object>) json[nameof (player_sea_helpers)])
          seaPlayerHelperList.Add(json4 == null ? (SeaPlayerHelper) null : new SeaPlayerHelper((Dictionary<string, object>) json4));
        this.player_sea_helpers = seaPlayerHelperList.ToArray();
        SMManager.UpdateList<SeaPlayerHelper>(this.player_sea_helpers);
        this.sea_player = json[nameof (sea_player)] == null ? (SeaPlayer) null : new SeaPlayer((Dictionary<string, object>) json[nameof (sea_player)]);
        if (this.sea_player == null)
          return;
        SMManager.Change<SeaPlayer>(this.sea_player);
      }
    }

    [Serializable]
    public class UnitBuildup : KeyCompare
    {
      public int increment_medal;
      public Player player;
      public PlayerMaterialUnit[] player_material_units;
      public PlayerUnit[] player_units;

      public UnitBuildup()
      {
      }

      public UnitBuildup(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.increment_medal = (int) (long) json[nameof (increment_medal)];
        this.player = json[nameof (player)] == null ? (Player) null : new Player((Dictionary<string, object>) json[nameof (player)]);
        SMManager.Change<Player>(this.player);
        List<PlayerMaterialUnit> playerMaterialUnitList = new List<PlayerMaterialUnit>();
        foreach (object json1 in (List<object>) json[nameof (player_material_units)])
          playerMaterialUnitList.Add(json1 == null ? (PlayerMaterialUnit) null : new PlayerMaterialUnit((Dictionary<string, object>) json1));
        this.player_material_units = playerMaterialUnitList.ToArray();
        SMManager.UpdateList<PlayerMaterialUnit>(this.player_material_units);
        List<PlayerUnit> playerUnitList = new List<PlayerUnit>();
        foreach (object json2 in (List<object>) json[nameof (player_units)])
          playerUnitList.Add(json2 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json2));
        this.player_units = playerUnitList.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_units);
        if (!json.ContainsKey("player_material_units:delete"))
          return;
        SMManager.DeleteList<PlayerMaterialUnit>(((IEnumerable<object>) json["player_material_units:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class UnitBulkEquip : KeyCompare
    {
      public PlayerUnit[] player_units;

      public UnitBulkEquip()
      {
      }

      public UnitBulkEquip(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerUnit> playerUnitList = new List<PlayerUnit>();
        foreach (object json1 in (List<object>) json[nameof (player_units)])
          playerUnitList.Add(json1 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json1));
        this.player_units = playerUnitList.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_units);
      }
    }

    [Serializable]
    public class UnitCompose : KeyCompare
    {
      public PlayerAwakeStatePlayerUnitIds awake_state_player_unit_ids;
      public int[] corps_player_unit_ids;
      public GainTrustResult gain_trust_result;
      public int increment_medal;
      public bool is_success;
      public Player player;
      public PlayerAwakeSkill[] player_awake_skills;
      public PlayerCustomDeck[] player_custom_decks;
      public PlayerItem[] player_items;
      public PlayerMaterialGear[] player_material_gears;
      public PlayerMaterialUnit[] player_material_units;
      public PlayerUnit[] player_units;
      public PlayerTransmigrateMemoryPlayerUnitIds transmigrate_memory_player_unit_ids;
      public UnlockQuest[] unlock_quests;

      public UnitCompose()
      {
      }

      public UnitCompose(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.awake_state_player_unit_ids = json[nameof (awake_state_player_unit_ids)] == null ? (PlayerAwakeStatePlayerUnitIds) null : new PlayerAwakeStatePlayerUnitIds((Dictionary<string, object>) json[nameof (awake_state_player_unit_ids)]);
        SMManager.Change<PlayerAwakeStatePlayerUnitIds>(this.awake_state_player_unit_ids);
        this.corps_player_unit_ids = ((IEnumerable<object>) json[nameof (corps_player_unit_ids)]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).ToArray<int>();
        this.gain_trust_result = json[nameof (gain_trust_result)] == null ? (GainTrustResult) null : new GainTrustResult((Dictionary<string, object>) json[nameof (gain_trust_result)]);
        this.increment_medal = (int) (long) json[nameof (increment_medal)];
        this.is_success = (bool) json[nameof (is_success)];
        this.player = json[nameof (player)] == null ? (Player) null : new Player((Dictionary<string, object>) json[nameof (player)]);
        SMManager.Change<Player>(this.player);
        List<PlayerAwakeSkill> playerAwakeSkillList = new List<PlayerAwakeSkill>();
        foreach (object json1 in (List<object>) json[nameof (player_awake_skills)])
          playerAwakeSkillList.Add(json1 == null ? (PlayerAwakeSkill) null : new PlayerAwakeSkill((Dictionary<string, object>) json1));
        this.player_awake_skills = playerAwakeSkillList.ToArray();
        SMManager.UpdateList<PlayerAwakeSkill>(this.player_awake_skills);
        List<PlayerCustomDeck> playerCustomDeckList = new List<PlayerCustomDeck>();
        foreach (object json2 in (List<object>) json[nameof (player_custom_decks)])
          playerCustomDeckList.Add(json2 == null ? (PlayerCustomDeck) null : new PlayerCustomDeck((Dictionary<string, object>) json2));
        this.player_custom_decks = playerCustomDeckList.ToArray();
        SMManager.UpdateList<PlayerCustomDeck>(this.player_custom_decks);
        List<PlayerItem> playerItemList = new List<PlayerItem>();
        foreach (object json3 in (List<object>) json[nameof (player_items)])
          playerItemList.Add(json3 == null ? (PlayerItem) null : new PlayerItem((Dictionary<string, object>) json3));
        this.player_items = playerItemList.ToArray();
        SMManager.UpdateList<PlayerItem>(this.player_items);
        List<PlayerMaterialGear> playerMaterialGearList = new List<PlayerMaterialGear>();
        foreach (object json4 in (List<object>) json[nameof (player_material_gears)])
          playerMaterialGearList.Add(json4 == null ? (PlayerMaterialGear) null : new PlayerMaterialGear((Dictionary<string, object>) json4));
        this.player_material_gears = playerMaterialGearList.ToArray();
        SMManager.UpdateList<PlayerMaterialGear>(this.player_material_gears);
        List<PlayerMaterialUnit> playerMaterialUnitList = new List<PlayerMaterialUnit>();
        foreach (object json5 in (List<object>) json[nameof (player_material_units)])
          playerMaterialUnitList.Add(json5 == null ? (PlayerMaterialUnit) null : new PlayerMaterialUnit((Dictionary<string, object>) json5));
        this.player_material_units = playerMaterialUnitList.ToArray();
        SMManager.UpdateList<PlayerMaterialUnit>(this.player_material_units);
        List<PlayerUnit> playerUnitList = new List<PlayerUnit>();
        foreach (object json6 in (List<object>) json[nameof (player_units)])
          playerUnitList.Add(json6 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json6));
        this.player_units = playerUnitList.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_units);
        this.transmigrate_memory_player_unit_ids = json[nameof (transmigrate_memory_player_unit_ids)] == null ? (PlayerTransmigrateMemoryPlayerUnitIds) null : new PlayerTransmigrateMemoryPlayerUnitIds((Dictionary<string, object>) json[nameof (transmigrate_memory_player_unit_ids)]);
        SMManager.Change<PlayerTransmigrateMemoryPlayerUnitIds>(this.transmigrate_memory_player_unit_ids);
        List<UnlockQuest> unlockQuestList = new List<UnlockQuest>();
        foreach (object json7 in (List<object>) json[nameof (unlock_quests)])
          unlockQuestList.Add(json7 == null ? (UnlockQuest) null : new UnlockQuest((Dictionary<string, object>) json7));
        this.unlock_quests = unlockQuestList.ToArray();
        if (json.ContainsKey("player_material_gears:delete"))
          SMManager.DeleteList<PlayerMaterialGear>(((IEnumerable<object>) json["player_material_gears:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
        if (json.ContainsKey("player_units:delete"))
          SMManager.DeleteList<PlayerUnit>(((IEnumerable<object>) json["player_units:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
        if (!json.ContainsKey("player_material_units:delete"))
          return;
        SMManager.DeleteList<PlayerMaterialUnit>(((IEnumerable<object>) json["player_material_units:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class UnitDegenerate : KeyCompare
    {
      public PlayerAwakeStatePlayerUnitIds awake_state_player_unit_ids;
      public int[] corps_player_unit_ids;
      public Player player;
      public PlayerCustomDeck[] player_custom_decks;
      public PlayerMaterialUnit[] player_material_units;
      public PlayerUnit[] player_units;
      public PlayerTransmigrateMemoryPlayerUnitIds transmigrate_memory_player_unit_ids;

      public UnitDegenerate()
      {
      }

      public UnitDegenerate(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.awake_state_player_unit_ids = json[nameof (awake_state_player_unit_ids)] == null ? (PlayerAwakeStatePlayerUnitIds) null : new PlayerAwakeStatePlayerUnitIds((Dictionary<string, object>) json[nameof (awake_state_player_unit_ids)]);
        SMManager.Change<PlayerAwakeStatePlayerUnitIds>(this.awake_state_player_unit_ids);
        this.corps_player_unit_ids = ((IEnumerable<object>) json[nameof (corps_player_unit_ids)]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).ToArray<int>();
        this.player = json[nameof (player)] == null ? (Player) null : new Player((Dictionary<string, object>) json[nameof (player)]);
        SMManager.Change<Player>(this.player);
        List<PlayerCustomDeck> playerCustomDeckList = new List<PlayerCustomDeck>();
        foreach (object json1 in (List<object>) json[nameof (player_custom_decks)])
          playerCustomDeckList.Add(json1 == null ? (PlayerCustomDeck) null : new PlayerCustomDeck((Dictionary<string, object>) json1));
        this.player_custom_decks = playerCustomDeckList.ToArray();
        SMManager.UpdateList<PlayerCustomDeck>(this.player_custom_decks);
        List<PlayerMaterialUnit> playerMaterialUnitList = new List<PlayerMaterialUnit>();
        foreach (object json2 in (List<object>) json[nameof (player_material_units)])
          playerMaterialUnitList.Add(json2 == null ? (PlayerMaterialUnit) null : new PlayerMaterialUnit((Dictionary<string, object>) json2));
        this.player_material_units = playerMaterialUnitList.ToArray();
        SMManager.UpdateList<PlayerMaterialUnit>(this.player_material_units);
        List<PlayerUnit> playerUnitList = new List<PlayerUnit>();
        foreach (object json3 in (List<object>) json[nameof (player_units)])
          playerUnitList.Add(json3 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json3));
        this.player_units = playerUnitList.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_units);
        this.transmigrate_memory_player_unit_ids = json[nameof (transmigrate_memory_player_unit_ids)] == null ? (PlayerTransmigrateMemoryPlayerUnitIds) null : new PlayerTransmigrateMemoryPlayerUnitIds((Dictionary<string, object>) json[nameof (transmigrate_memory_player_unit_ids)]);
        SMManager.Change<PlayerTransmigrateMemoryPlayerUnitIds>(this.transmigrate_memory_player_unit_ids);
        if (!json.ContainsKey("player_material_units:delete"))
          return;
        SMManager.DeleteList<PlayerMaterialUnit>(((IEnumerable<object>) json["player_material_units:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class UnitDeleteTransmigrateMemory : KeyCompare
    {
      public PlayerTransmigrateMemoryPlayerUnitIds transmigrate_memory_player_unit_ids;

      public UnitDeleteTransmigrateMemory()
      {
      }

      public UnitDeleteTransmigrateMemory(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.transmigrate_memory_player_unit_ids = json[nameof (transmigrate_memory_player_unit_ids)] == null ? (PlayerTransmigrateMemoryPlayerUnitIds) null : new PlayerTransmigrateMemoryPlayerUnitIds((Dictionary<string, object>) json[nameof (transmigrate_memory_player_unit_ids)]);
        SMManager.Change<PlayerTransmigrateMemoryPlayerUnitIds>(this.transmigrate_memory_player_unit_ids);
      }
    }

    [Serializable]
    public class UnitEquip : KeyCompare
    {
      public Player player;
      public PlayerItem[] player_items;
      public PlayerUnit[] player_units;

      public UnitEquip()
      {
      }

      public UnitEquip(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.player = json[nameof (player)] == null ? (Player) null : new Player((Dictionary<string, object>) json[nameof (player)]);
        SMManager.Change<Player>(this.player);
        List<PlayerItem> playerItemList = new List<PlayerItem>();
        foreach (object json1 in (List<object>) json[nameof (player_items)])
          playerItemList.Add(json1 == null ? (PlayerItem) null : new PlayerItem((Dictionary<string, object>) json1));
        this.player_items = playerItemList.ToArray();
        SMManager.UpdateList<PlayerItem>(this.player_items);
        List<PlayerUnit> playerUnitList = new List<PlayerUnit>();
        foreach (object json2 in (List<object>) json[nameof (player_units)])
          playerUnitList.Add(json2 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json2));
        this.player_units = playerUnitList.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_units);
      }
    }

    [Serializable]
    public class UnitEvolution : KeyCompare
    {
      public PlayerAwakeStatePlayerUnitIds awake_state_player_unit_ids;
      public int[] corps_player_unit_ids;
      public bool is_new;
      public Player player;
      public PlayerCustomDeck[] player_custom_decks;
      public PlayerMaterialUnit[] player_material_units;
      public PlayerUnit[] player_units;
      public PlayerTransmigrateMemoryPlayerUnitIds transmigrate_memory_player_unit_ids;
      public UnlockQuest[] unlock_quests;

      public UnitEvolution()
      {
      }

      public UnitEvolution(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.awake_state_player_unit_ids = json[nameof (awake_state_player_unit_ids)] == null ? (PlayerAwakeStatePlayerUnitIds) null : new PlayerAwakeStatePlayerUnitIds((Dictionary<string, object>) json[nameof (awake_state_player_unit_ids)]);
        SMManager.Change<PlayerAwakeStatePlayerUnitIds>(this.awake_state_player_unit_ids);
        this.corps_player_unit_ids = ((IEnumerable<object>) json[nameof (corps_player_unit_ids)]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).ToArray<int>();
        this.is_new = (bool) json[nameof (is_new)];
        this.player = json[nameof (player)] == null ? (Player) null : new Player((Dictionary<string, object>) json[nameof (player)]);
        SMManager.Change<Player>(this.player);
        List<PlayerCustomDeck> playerCustomDeckList = new List<PlayerCustomDeck>();
        foreach (object json1 in (List<object>) json[nameof (player_custom_decks)])
          playerCustomDeckList.Add(json1 == null ? (PlayerCustomDeck) null : new PlayerCustomDeck((Dictionary<string, object>) json1));
        this.player_custom_decks = playerCustomDeckList.ToArray();
        SMManager.UpdateList<PlayerCustomDeck>(this.player_custom_decks);
        List<PlayerMaterialUnit> playerMaterialUnitList = new List<PlayerMaterialUnit>();
        foreach (object json2 in (List<object>) json[nameof (player_material_units)])
          playerMaterialUnitList.Add(json2 == null ? (PlayerMaterialUnit) null : new PlayerMaterialUnit((Dictionary<string, object>) json2));
        this.player_material_units = playerMaterialUnitList.ToArray();
        SMManager.UpdateList<PlayerMaterialUnit>(this.player_material_units);
        List<PlayerUnit> playerUnitList = new List<PlayerUnit>();
        foreach (object json3 in (List<object>) json[nameof (player_units)])
          playerUnitList.Add(json3 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json3));
        this.player_units = playerUnitList.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_units);
        this.transmigrate_memory_player_unit_ids = json[nameof (transmigrate_memory_player_unit_ids)] == null ? (PlayerTransmigrateMemoryPlayerUnitIds) null : new PlayerTransmigrateMemoryPlayerUnitIds((Dictionary<string, object>) json[nameof (transmigrate_memory_player_unit_ids)]);
        SMManager.Change<PlayerTransmigrateMemoryPlayerUnitIds>(this.transmigrate_memory_player_unit_ids);
        List<UnlockQuest> unlockQuestList = new List<UnlockQuest>();
        foreach (object json4 in (List<object>) json[nameof (unlock_quests)])
          unlockQuestList.Add(json4 == null ? (UnlockQuest) null : new UnlockQuest((Dictionary<string, object>) json4));
        this.unlock_quests = unlockQuestList.ToArray();
        if (json.ContainsKey("player_units:delete"))
          SMManager.DeleteList<PlayerUnit>(((IEnumerable<object>) json["player_units:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
        if (!json.ContainsKey("player_material_units:delete"))
          return;
        SMManager.DeleteList<PlayerMaterialUnit>(((IEnumerable<object>) json["player_material_units:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class UnitEvolutionParameter : KeyCompare
    {
      public PlayerUnit[] target_player_units;
      public int gvg_deck_cost_over_status;
      public PlayerMaterialUnit[] target_player_material_units;

      public UnitEvolutionParameter()
      {
      }

      public UnitEvolutionParameter(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerUnit> playerUnitList = new List<PlayerUnit>();
        foreach (object json1 in (List<object>) json[nameof (target_player_units)])
          playerUnitList.Add(json1 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json1));
        this.target_player_units = playerUnitList.ToArray();
        this.gvg_deck_cost_over_status = (int) (long) json[nameof (gvg_deck_cost_over_status)];
        List<PlayerMaterialUnit> playerMaterialUnitList = new List<PlayerMaterialUnit>();
        foreach (object json2 in (List<object>) json[nameof (target_player_material_units)])
          playerMaterialUnitList.Add(json2 == null ? (PlayerMaterialUnit) null : new PlayerMaterialUnit((Dictionary<string, object>) json2));
        this.target_player_material_units = playerMaterialUnitList.ToArray();
      }
    }

    [Serializable]
    public class UnitFavorite : KeyCompare
    {
      public PlayerUnit[] player_units;

      public UnitFavorite()
      {
      }

      public UnitFavorite(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerUnit> playerUnitList = new List<PlayerUnit>();
        foreach (object json1 in (List<object>) json[nameof (player_units)])
          playerUnitList.Add(json1 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json1));
        this.player_units = playerUnitList.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_units);
      }
    }

    [Serializable]
    public class UnitJobchange : KeyCompare
    {
      public PlayerTransmigrateMemoryPlayerUnitIds transmigrate_memory_player_unit_ids;
      public PlayerUnit[] player_units;
      public bool is_new;
      public Player player;
      public PlayerMaterialUnit[] player_material_units;

      public UnitJobchange()
      {
      }

      public UnitJobchange(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.transmigrate_memory_player_unit_ids = json[nameof (transmigrate_memory_player_unit_ids)] == null ? (PlayerTransmigrateMemoryPlayerUnitIds) null : new PlayerTransmigrateMemoryPlayerUnitIds((Dictionary<string, object>) json[nameof (transmigrate_memory_player_unit_ids)]);
        SMManager.Change<PlayerTransmigrateMemoryPlayerUnitIds>(this.transmigrate_memory_player_unit_ids);
        List<PlayerUnit> playerUnitList = new List<PlayerUnit>();
        foreach (object json1 in (List<object>) json[nameof (player_units)])
          playerUnitList.Add(json1 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json1));
        this.player_units = playerUnitList.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_units);
        this.is_new = (bool) json[nameof (is_new)];
        this.player = json[nameof (player)] == null ? (Player) null : new Player((Dictionary<string, object>) json[nameof (player)]);
        SMManager.Change<Player>(this.player);
        List<PlayerMaterialUnit> playerMaterialUnitList = new List<PlayerMaterialUnit>();
        foreach (object json2 in (List<object>) json[nameof (player_material_units)])
          playerMaterialUnitList.Add(json2 == null ? (PlayerMaterialUnit) null : new PlayerMaterialUnit((Dictionary<string, object>) json2));
        this.player_material_units = playerMaterialUnitList.ToArray();
        SMManager.UpdateList<PlayerMaterialUnit>(this.player_material_units);
        if (!json.ContainsKey("player_material_units:delete"))
          return;
        SMManager.DeleteList<PlayerMaterialUnit>(((IEnumerable<object>) json["player_material_units:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class UnitListTransmigrateMemory : KeyCompare
    {
      public PlayerUnitTransMigrateMemoryList transmigrate_memory;

      public UnitListTransmigrateMemory()
      {
      }

      public UnitListTransmigrateMemory(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.transmigrate_memory = json[nameof (transmigrate_memory)] == null ? (PlayerUnitTransMigrateMemoryList) null : new PlayerUnitTransMigrateMemoryList((Dictionary<string, object>) json[nameof (transmigrate_memory)]);
        SMManager.Change<PlayerUnitTransMigrateMemoryList>(this.transmigrate_memory);
      }
    }

    [Serializable]
    public class UnitLumpCompose : KeyCompare
    {
      public PlayerAwakeStatePlayerUnitIds awake_state_player_unit_ids;
      public int[] corps_player_unit_ids;
      public GainTrustResult[] gain_trust_results;
      public int increment_medal;
      public bool[] is_successes;
      public Player player;
      public PlayerAwakeSkill[] player_awake_skills;
      public PlayerCustomDeck[] player_custom_decks;
      public PlayerItem[] player_items;
      public PlayerMaterialUnit[] player_material_units;
      public PlayerUnit[] player_units;
      public PlayerTransmigrateMemoryPlayerUnitIds transmigrate_memory_player_unit_ids;
      public UnlockQuest[] unlock_quests;

      public UnitLumpCompose()
      {
      }

      public UnitLumpCompose(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.awake_state_player_unit_ids = json[nameof (awake_state_player_unit_ids)] == null ? (PlayerAwakeStatePlayerUnitIds) null : new PlayerAwakeStatePlayerUnitIds((Dictionary<string, object>) json[nameof (awake_state_player_unit_ids)]);
        SMManager.Change<PlayerAwakeStatePlayerUnitIds>(this.awake_state_player_unit_ids);
        this.corps_player_unit_ids = ((IEnumerable<object>) json[nameof (corps_player_unit_ids)]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).ToArray<int>();
        List<GainTrustResult> gainTrustResultList = new List<GainTrustResult>();
        foreach (object json1 in (List<object>) json[nameof (gain_trust_results)])
          gainTrustResultList.Add(json1 == null ? (GainTrustResult) null : new GainTrustResult((Dictionary<string, object>) json1));
        this.gain_trust_results = gainTrustResultList.ToArray();
        this.increment_medal = (int) (long) json[nameof (increment_medal)];
        this.is_successes = ((IEnumerable<object>) json[nameof (is_successes)]).Select<object, bool>((Func<object, bool>) (s => (bool) s)).ToArray<bool>();
        this.player = json[nameof (player)] == null ? (Player) null : new Player((Dictionary<string, object>) json[nameof (player)]);
        SMManager.Change<Player>(this.player);
        List<PlayerAwakeSkill> playerAwakeSkillList = new List<PlayerAwakeSkill>();
        foreach (object json2 in (List<object>) json[nameof (player_awake_skills)])
          playerAwakeSkillList.Add(json2 == null ? (PlayerAwakeSkill) null : new PlayerAwakeSkill((Dictionary<string, object>) json2));
        this.player_awake_skills = playerAwakeSkillList.ToArray();
        SMManager.UpdateList<PlayerAwakeSkill>(this.player_awake_skills);
        List<PlayerCustomDeck> playerCustomDeckList = new List<PlayerCustomDeck>();
        foreach (object json3 in (List<object>) json[nameof (player_custom_decks)])
          playerCustomDeckList.Add(json3 == null ? (PlayerCustomDeck) null : new PlayerCustomDeck((Dictionary<string, object>) json3));
        this.player_custom_decks = playerCustomDeckList.ToArray();
        SMManager.UpdateList<PlayerCustomDeck>(this.player_custom_decks);
        List<PlayerItem> playerItemList = new List<PlayerItem>();
        foreach (object json4 in (List<object>) json[nameof (player_items)])
          playerItemList.Add(json4 == null ? (PlayerItem) null : new PlayerItem((Dictionary<string, object>) json4));
        this.player_items = playerItemList.ToArray();
        SMManager.UpdateList<PlayerItem>(this.player_items);
        List<PlayerMaterialUnit> playerMaterialUnitList = new List<PlayerMaterialUnit>();
        foreach (object json5 in (List<object>) json[nameof (player_material_units)])
          playerMaterialUnitList.Add(json5 == null ? (PlayerMaterialUnit) null : new PlayerMaterialUnit((Dictionary<string, object>) json5));
        this.player_material_units = playerMaterialUnitList.ToArray();
        SMManager.UpdateList<PlayerMaterialUnit>(this.player_material_units);
        List<PlayerUnit> playerUnitList = new List<PlayerUnit>();
        foreach (object json6 in (List<object>) json[nameof (player_units)])
          playerUnitList.Add(json6 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json6));
        this.player_units = playerUnitList.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_units);
        this.transmigrate_memory_player_unit_ids = json[nameof (transmigrate_memory_player_unit_ids)] == null ? (PlayerTransmigrateMemoryPlayerUnitIds) null : new PlayerTransmigrateMemoryPlayerUnitIds((Dictionary<string, object>) json[nameof (transmigrate_memory_player_unit_ids)]);
        SMManager.Change<PlayerTransmigrateMemoryPlayerUnitIds>(this.transmigrate_memory_player_unit_ids);
        List<UnlockQuest> unlockQuestList = new List<UnlockQuest>();
        foreach (object json7 in (List<object>) json[nameof (unlock_quests)])
          unlockQuestList.Add(json7 == null ? (UnlockQuest) null : new UnlockQuest((Dictionary<string, object>) json7));
        this.unlock_quests = unlockQuestList.ToArray();
        if (!json.ContainsKey("player_units:delete"))
          return;
        SMManager.DeleteList<PlayerUnit>(((IEnumerable<object>) json["player_units:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class UnitOpenGearEquipNumber : KeyCompare
    {
      public PlayerMaterialGear[] player_material_gears;

      public UnitOpenGearEquipNumber()
      {
      }

      public UnitOpenGearEquipNumber(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerMaterialGear> playerMaterialGearList = new List<PlayerMaterialGear>();
        foreach (object json1 in (List<object>) json[nameof (player_material_gears)])
          playerMaterialGearList.Add(json1 == null ? (PlayerMaterialGear) null : new PlayerMaterialGear((Dictionary<string, object>) json1));
        this.player_material_gears = playerMaterialGearList.ToArray();
        SMManager.UpdateList<PlayerMaterialGear>(this.player_material_gears);
        if (!json.ContainsKey("player_material_gears:delete"))
          return;
        SMManager.DeleteList<PlayerMaterialGear>(((IEnumerable<object>) json["player_material_gears:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class UnitPreviewInheritance : KeyCompare
    {
      public WebAPI.Response.UnitPreviewInheritancePreview_inheritance preview_inheritance;

      public UnitPreviewInheritance()
      {
      }

      public UnitPreviewInheritance(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.preview_inheritance = json[nameof (preview_inheritance)] == null ? (WebAPI.Response.UnitPreviewInheritancePreview_inheritance) null : new WebAPI.Response.UnitPreviewInheritancePreview_inheritance((Dictionary<string, object>) json[nameof (preview_inheritance)]);
      }
    }

    [Serializable]
    public class UnitPreviewInheritancePreview_inheritance : KeyCompare
    {
      public int dexterity;
      public int agility;
      public int strength;
      public int intelligence;
      public int hp;
      public int mind;
      public int lucky;
      public int vitality;

      public UnitPreviewInheritancePreview_inheritance()
      {
      }

      public UnitPreviewInheritancePreview_inheritance(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.dexterity = (int) (long) json[nameof (dexterity)];
        this.agility = (int) (long) json[nameof (agility)];
        this.strength = (int) (long) json[nameof (strength)];
        this.intelligence = (int) (long) json[nameof (intelligence)];
        this.hp = (int) (long) json[nameof (hp)];
        this.mind = (int) (long) json[nameof (mind)];
        this.lucky = (int) (long) json[nameof (lucky)];
        this.vitality = (int) (long) json[nameof (vitality)];
      }
    }

    [Serializable]
    public class UnitPreviewJob : KeyCompare
    {
      public WebAPI.Response.UnitPreviewJobJob_abilities[] job_abilities;
      public int[] changed_job_ids;

      public UnitPreviewJob()
      {
      }

      public UnitPreviewJob(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<WebAPI.Response.UnitPreviewJobJob_abilities> previewJobJobAbilitiesList = new List<WebAPI.Response.UnitPreviewJobJob_abilities>();
        foreach (object json1 in (List<object>) json[nameof (job_abilities)])
          previewJobJobAbilitiesList.Add(json1 == null ? (WebAPI.Response.UnitPreviewJobJob_abilities) null : new WebAPI.Response.UnitPreviewJobJob_abilities((Dictionary<string, object>) json1));
        this.job_abilities = previewJobJobAbilitiesList.ToArray();
        this.changed_job_ids = ((IEnumerable<object>) json[nameof (changed_job_ids)]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).ToArray<int>();
      }
    }

    [Serializable]
    public class UnitPreviewJobJob_abilities : KeyCompare
    {
      public int job_ability_id;
      public int skill_id;
      public int level;

      public UnitPreviewJobJob_abilities()
      {
      }

      public UnitPreviewJobJob_abilities(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.job_ability_id = (int) (long) json[nameof (job_ability_id)];
        this.skill_id = (int) (long) json[nameof (skill_id)];
        this.level = (int) (long) json[nameof (level)];
      }
    }

    [Serializable]
    public class UnitReleaseFrameOverKillers : KeyCompare
    {
      public Player player;
      public PlayerMaterialUnit[] player_material_units;
      public PlayerUnit[] player_units;

      public UnitReleaseFrameOverKillers()
      {
      }

      public UnitReleaseFrameOverKillers(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.player = json[nameof (player)] == null ? (Player) null : new Player((Dictionary<string, object>) json[nameof (player)]);
        SMManager.Change<Player>(this.player);
        List<PlayerMaterialUnit> playerMaterialUnitList = new List<PlayerMaterialUnit>();
        foreach (object json1 in (List<object>) json[nameof (player_material_units)])
          playerMaterialUnitList.Add(json1 == null ? (PlayerMaterialUnit) null : new PlayerMaterialUnit((Dictionary<string, object>) json1));
        this.player_material_units = playerMaterialUnitList.ToArray();
        SMManager.UpdateList<PlayerMaterialUnit>(this.player_material_units);
        List<PlayerUnit> playerUnitList = new List<PlayerUnit>();
        foreach (object json2 in (List<object>) json[nameof (player_units)])
          playerUnitList.Add(json2 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json2));
        this.player_units = playerUnitList.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_units);
        if (!json.ContainsKey("player_material_units:delete"))
          return;
        SMManager.DeleteList<PlayerMaterialUnit>(((IEnumerable<object>) json["player_material_units:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class UnitRemoveOverKillers : KeyCompare
    {
      public PlayerUnit[] player_units;

      public UnitRemoveOverKillers()
      {
      }

      public UnitRemoveOverKillers(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerUnit> playerUnitList = new List<PlayerUnit>();
        foreach (object json1 in (List<object>) json[nameof (player_units)])
          playerUnitList.Add(json1 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json1));
        this.player_units = playerUnitList.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_units);
      }
    }

    [Serializable]
    public class UnitReservesAdd : KeyCompare
    {
      public PlayerTransmigrateMemoryPlayerUnitIds transmigrate_memory_player_unit_ids;
      public PlayerUnit[] player_units;
      public PlayerUnitReservesCount player_unit_reserves_count;
      public PlayerCustomDeck[] player_custom_decks;

      public UnitReservesAdd()
      {
      }

      public UnitReservesAdd(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.transmigrate_memory_player_unit_ids = json[nameof (transmigrate_memory_player_unit_ids)] == null ? (PlayerTransmigrateMemoryPlayerUnitIds) null : new PlayerTransmigrateMemoryPlayerUnitIds((Dictionary<string, object>) json[nameof (transmigrate_memory_player_unit_ids)]);
        SMManager.Change<PlayerTransmigrateMemoryPlayerUnitIds>(this.transmigrate_memory_player_unit_ids);
        List<PlayerUnit> playerUnitList = new List<PlayerUnit>();
        foreach (object json1 in (List<object>) json[nameof (player_units)])
          playerUnitList.Add(json1 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json1));
        this.player_units = playerUnitList.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_units);
        this.player_unit_reserves_count = json[nameof (player_unit_reserves_count)] == null ? (PlayerUnitReservesCount) null : new PlayerUnitReservesCount((Dictionary<string, object>) json[nameof (player_unit_reserves_count)]);
        SMManager.Change<PlayerUnitReservesCount>(this.player_unit_reserves_count);
        List<PlayerCustomDeck> playerCustomDeckList = new List<PlayerCustomDeck>();
        foreach (object json2 in (List<object>) json[nameof (player_custom_decks)])
          playerCustomDeckList.Add(json2 == null ? (PlayerCustomDeck) null : new PlayerCustomDeck((Dictionary<string, object>) json2));
        this.player_custom_decks = playerCustomDeckList.ToArray();
        SMManager.UpdateList<PlayerCustomDeck>(this.player_custom_decks);
        if (!json.ContainsKey("player_units:delete"))
          return;
        SMManager.DeleteList<PlayerUnit>(((IEnumerable<object>) json["player_units:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class UnitReservesCount : KeyCompare
    {
      public PlayerUnitReservesCount player_unit_reserves_count;

      public UnitReservesCount()
      {
      }

      public UnitReservesCount(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.player_unit_reserves_count = json[nameof (player_unit_reserves_count)] == null ? (PlayerUnitReservesCount) null : new PlayerUnitReservesCount((Dictionary<string, object>) json[nameof (player_unit_reserves_count)]);
        SMManager.Change<PlayerUnitReservesCount>(this.player_unit_reserves_count);
      }
    }

    [Serializable]
    public class UnitReservesFavorite : KeyCompare
    {
      public PlayerUnit[] player_units;

      public UnitReservesFavorite()
      {
      }

      public UnitReservesFavorite(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerUnit> playerUnitList = new List<PlayerUnit>();
        foreach (object json1 in (List<object>) json[nameof (player_units)])
          playerUnitList.Add(json1 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json1));
        this.player_units = playerUnitList.ToArray();
      }
    }

    [Serializable]
    public class UnitReservesIndex : KeyCompare
    {
      public PlayerUnit[] player_units;

      public UnitReservesIndex()
      {
      }

      public UnitReservesIndex(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerUnit> playerUnitList = new List<PlayerUnit>();
        foreach (object json1 in (List<object>) json[nameof (player_units)])
          playerUnitList.Add(json1 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json1));
        this.player_units = playerUnitList.ToArray();
      }
    }

    [Serializable]
    public class UnitReservesRestore : KeyCompare
    {
      public PlayerUnitReservesCount player_unit_reserves_count;
      public PlayerUnit[] player_units;

      public UnitReservesRestore()
      {
      }

      public UnitReservesRestore(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.player_unit_reserves_count = json[nameof (player_unit_reserves_count)] == null ? (PlayerUnitReservesCount) null : new PlayerUnitReservesCount((Dictionary<string, object>) json[nameof (player_unit_reserves_count)]);
        SMManager.Change<PlayerUnitReservesCount>(this.player_unit_reserves_count);
        List<PlayerUnit> playerUnitList = new List<PlayerUnit>();
        foreach (object json1 in (List<object>) json[nameof (player_units)])
          playerUnitList.Add(json1 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json1));
        this.player_units = playerUnitList.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_units);
      }
    }

    [Serializable]
    public class UnitReservesSell : KeyCompare
    {
      public int[] delete_player_unit_reserves_ids;
      public Player player;
      public PlayerUnitReservesCount player_unit_reserves_count;

      public UnitReservesSell()
      {
      }

      public UnitReservesSell(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.delete_player_unit_reserves_ids = ((IEnumerable<object>) json[nameof (delete_player_unit_reserves_ids)]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).ToArray<int>();
        this.player = json[nameof (player)] == null ? (Player) null : new Player((Dictionary<string, object>) json[nameof (player)]);
        SMManager.Change<Player>(this.player);
        this.player_unit_reserves_count = json[nameof (player_unit_reserves_count)] == null ? (PlayerUnitReservesCount) null : new PlayerUnitReservesCount((Dictionary<string, object>) json[nameof (player_unit_reserves_count)]);
        SMManager.Change<PlayerUnitReservesCount>(this.player_unit_reserves_count);
      }
    }

    [Serializable]
    public class UnitSaveJobAbility : KeyCompare
    {
      public Player player;
      public PlayerMaterialUnit[] player_material_units;
      public PlayerUnit[] player_units;

      public UnitSaveJobAbility()
      {
      }

      public UnitSaveJobAbility(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.player = json[nameof (player)] == null ? (Player) null : new Player((Dictionary<string, object>) json[nameof (player)]);
        SMManager.Change<Player>(this.player);
        List<PlayerMaterialUnit> playerMaterialUnitList = new List<PlayerMaterialUnit>();
        foreach (object json1 in (List<object>) json[nameof (player_material_units)])
          playerMaterialUnitList.Add(json1 == null ? (PlayerMaterialUnit) null : new PlayerMaterialUnit((Dictionary<string, object>) json1));
        this.player_material_units = playerMaterialUnitList.ToArray();
        SMManager.UpdateList<PlayerMaterialUnit>(this.player_material_units);
        List<PlayerUnit> playerUnitList = new List<PlayerUnit>();
        foreach (object json2 in (List<object>) json[nameof (player_units)])
          playerUnitList.Add(json2 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json2));
        this.player_units = playerUnitList.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_units);
        if (json.ContainsKey("player_material_units:delete"))
          SMManager.DeleteList<PlayerMaterialUnit>(((IEnumerable<object>) json["player_material_units:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
        if (!json.ContainsKey("player_units:delete"))
          return;
        SMManager.DeleteList<PlayerUnit>(((IEnumerable<object>) json["player_units:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class UnitSaveOverKillers : KeyCompare
    {
      public PlayerUnit[] player_units;

      public UnitSaveOverKillers()
      {
      }

      public UnitSaveOverKillers(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerUnit> playerUnitList = new List<PlayerUnit>();
        foreach (object json1 in (List<object>) json[nameof (player_units)])
          playerUnitList.Add(json1 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json1));
        this.player_units = playerUnitList.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_units);
      }
    }

    [Serializable]
    public class UnitSaveTransmigrateMemory : KeyCompare
    {
      public PlayerTransmigrateMemoryPlayerUnitIds transmigrate_memory_player_unit_ids;
      public PlayerUnitTransMigrateMemoryList transmigrate_memory;

      public UnitSaveTransmigrateMemory()
      {
      }

      public UnitSaveTransmigrateMemory(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.transmigrate_memory_player_unit_ids = json[nameof (transmigrate_memory_player_unit_ids)] == null ? (PlayerTransmigrateMemoryPlayerUnitIds) null : new PlayerTransmigrateMemoryPlayerUnitIds((Dictionary<string, object>) json[nameof (transmigrate_memory_player_unit_ids)]);
        SMManager.Change<PlayerTransmigrateMemoryPlayerUnitIds>(this.transmigrate_memory_player_unit_ids);
        this.transmigrate_memory = json[nameof (transmigrate_memory)] == null ? (PlayerUnitTransMigrateMemoryList) null : new PlayerUnitTransMigrateMemoryList((Dictionary<string, object>) json[nameof (transmigrate_memory)]);
        SMManager.Change<PlayerUnitTransMigrateMemoryList>(this.transmigrate_memory);
      }
    }

    [Serializable]
    public class UnitSell : KeyCompare
    {
      public PlayerAwakeStatePlayerUnitIds awake_state_player_unit_ids;
      public int[] corps_player_unit_ids;
      public Player player;
      public PlayerCustomDeck[] player_custom_decks;
      public PlayerItem[] player_items;
      public PlayerMaterialGear[] player_material_gears;
      public PlayerMaterialUnit[] player_material_units;
      public PlayerUnit[] player_units;
      public PlayerTransmigrateMemoryPlayerUnitIds transmigrate_memory_player_unit_ids;

      public UnitSell()
      {
      }

      public UnitSell(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.awake_state_player_unit_ids = json[nameof (awake_state_player_unit_ids)] == null ? (PlayerAwakeStatePlayerUnitIds) null : new PlayerAwakeStatePlayerUnitIds((Dictionary<string, object>) json[nameof (awake_state_player_unit_ids)]);
        SMManager.Change<PlayerAwakeStatePlayerUnitIds>(this.awake_state_player_unit_ids);
        this.corps_player_unit_ids = ((IEnumerable<object>) json[nameof (corps_player_unit_ids)]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).ToArray<int>();
        this.player = json[nameof (player)] == null ? (Player) null : new Player((Dictionary<string, object>) json[nameof (player)]);
        SMManager.Change<Player>(this.player);
        List<PlayerCustomDeck> playerCustomDeckList = new List<PlayerCustomDeck>();
        foreach (object json1 in (List<object>) json[nameof (player_custom_decks)])
          playerCustomDeckList.Add(json1 == null ? (PlayerCustomDeck) null : new PlayerCustomDeck((Dictionary<string, object>) json1));
        this.player_custom_decks = playerCustomDeckList.ToArray();
        SMManager.UpdateList<PlayerCustomDeck>(this.player_custom_decks);
        List<PlayerItem> playerItemList = new List<PlayerItem>();
        foreach (object json2 in (List<object>) json[nameof (player_items)])
          playerItemList.Add(json2 == null ? (PlayerItem) null : new PlayerItem((Dictionary<string, object>) json2));
        this.player_items = playerItemList.ToArray();
        SMManager.UpdateList<PlayerItem>(this.player_items);
        List<PlayerMaterialGear> playerMaterialGearList = new List<PlayerMaterialGear>();
        foreach (object json3 in (List<object>) json[nameof (player_material_gears)])
          playerMaterialGearList.Add(json3 == null ? (PlayerMaterialGear) null : new PlayerMaterialGear((Dictionary<string, object>) json3));
        this.player_material_gears = playerMaterialGearList.ToArray();
        SMManager.UpdateList<PlayerMaterialGear>(this.player_material_gears);
        List<PlayerMaterialUnit> playerMaterialUnitList = new List<PlayerMaterialUnit>();
        foreach (object json4 in (List<object>) json[nameof (player_material_units)])
          playerMaterialUnitList.Add(json4 == null ? (PlayerMaterialUnit) null : new PlayerMaterialUnit((Dictionary<string, object>) json4));
        this.player_material_units = playerMaterialUnitList.ToArray();
        SMManager.UpdateList<PlayerMaterialUnit>(this.player_material_units);
        List<PlayerUnit> playerUnitList = new List<PlayerUnit>();
        foreach (object json5 in (List<object>) json[nameof (player_units)])
          playerUnitList.Add(json5 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json5));
        this.player_units = playerUnitList.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_units);
        this.transmigrate_memory_player_unit_ids = json[nameof (transmigrate_memory_player_unit_ids)] == null ? (PlayerTransmigrateMemoryPlayerUnitIds) null : new PlayerTransmigrateMemoryPlayerUnitIds((Dictionary<string, object>) json[nameof (transmigrate_memory_player_unit_ids)]);
        SMManager.Change<PlayerTransmigrateMemoryPlayerUnitIds>(this.transmigrate_memory_player_unit_ids);
        if (json.ContainsKey("player_units:delete"))
          SMManager.DeleteList<PlayerUnit>(((IEnumerable<object>) json["player_units:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
        if (!json.ContainsKey("player_material_units:delete"))
          return;
        SMManager.DeleteList<PlayerMaterialUnit>(((IEnumerable<object>) json["player_material_units:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class UnitTransmigrate : KeyCompare
    {
      public PlayerTransmigrateMemoryPlayerUnitIds transmigrate_memory_player_unit_ids;
      public PlayerUnit[] player_units;
      public int[] corps_player_unit_ids;
      public Player player;
      public PlayerMaterialUnit[] player_material_units;

      public UnitTransmigrate()
      {
      }

      public UnitTransmigrate(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.transmigrate_memory_player_unit_ids = json[nameof (transmigrate_memory_player_unit_ids)] == null ? (PlayerTransmigrateMemoryPlayerUnitIds) null : new PlayerTransmigrateMemoryPlayerUnitIds((Dictionary<string, object>) json[nameof (transmigrate_memory_player_unit_ids)]);
        SMManager.Change<PlayerTransmigrateMemoryPlayerUnitIds>(this.transmigrate_memory_player_unit_ids);
        List<PlayerUnit> playerUnitList = new List<PlayerUnit>();
        foreach (object json1 in (List<object>) json[nameof (player_units)])
          playerUnitList.Add(json1 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json1));
        this.player_units = playerUnitList.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_units);
        this.corps_player_unit_ids = ((IEnumerable<object>) json[nameof (corps_player_unit_ids)]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).ToArray<int>();
        this.player = json[nameof (player)] == null ? (Player) null : new Player((Dictionary<string, object>) json[nameof (player)]);
        SMManager.Change<Player>(this.player);
        List<PlayerMaterialUnit> playerMaterialUnitList = new List<PlayerMaterialUnit>();
        foreach (object json2 in (List<object>) json[nameof (player_material_units)])
          playerMaterialUnitList.Add(json2 == null ? (PlayerMaterialUnit) null : new PlayerMaterialUnit((Dictionary<string, object>) json2));
        this.player_material_units = playerMaterialUnitList.ToArray();
        SMManager.UpdateList<PlayerMaterialUnit>(this.player_material_units);
        if (json.ContainsKey("player_material_units:delete"))
          SMManager.DeleteList<PlayerMaterialUnit>(((IEnumerable<object>) json["player_material_units:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
        if (!json.ContainsKey("player_units:delete"))
          return;
        SMManager.DeleteList<PlayerUnit>(((IEnumerable<object>) json["player_units:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class UnitTransmigrateParameter : KeyCompare
    {
      public PlayerUnit target_player_unit;

      public UnitTransmigrateParameter()
      {
      }

      public UnitTransmigrateParameter(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.target_player_unit = json[nameof (target_player_unit)] == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json[nameof (target_player_unit)]);
      }
    }

    [Serializable]
    public class UnittypeticketIndex : KeyCompare
    {
      public PlayerUnitTypeTicket[] player_unit_type_tickets;

      public UnittypeticketIndex()
      {
      }

      public UnittypeticketIndex(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerUnitTypeTicket> playerUnitTypeTicketList = new List<PlayerUnitTypeTicket>();
        foreach (object json1 in (List<object>) json[nameof (player_unit_type_tickets)])
          playerUnitTypeTicketList.Add(json1 == null ? (PlayerUnitTypeTicket) null : new PlayerUnitTypeTicket((Dictionary<string, object>) json1));
        this.player_unit_type_tickets = playerUnitTypeTicketList.ToArray();
        SMManager.UpdateList<PlayerUnitTypeTicket>(this.player_unit_type_tickets);
      }
    }

    [Serializable]
    public class UnittypeticketParameter : KeyCompare
    {
      public PlayerUnit[] player_units;

      public UnittypeticketParameter()
      {
      }

      public UnittypeticketParameter(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerUnit> playerUnitList = new List<PlayerUnit>();
        foreach (object json1 in (List<object>) json[nameof (player_units)])
          playerUnitList.Add(json1 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json1));
        this.player_units = playerUnitList.ToArray();
      }
    }

    [Serializable]
    public class UnittypeticketSpend : KeyCompare
    {
      public PlayerTransmigrateMemoryPlayerUnitIds transmigrate_memory_player_unit_ids;
      public PlayerUnitTypeTicket[] player_unit_type_tickets;
      public int[] corps_player_unit_ids;
      public PlayerUnit[] player_units;

      public UnittypeticketSpend()
      {
      }

      public UnittypeticketSpend(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.transmigrate_memory_player_unit_ids = json[nameof (transmigrate_memory_player_unit_ids)] == null ? (PlayerTransmigrateMemoryPlayerUnitIds) null : new PlayerTransmigrateMemoryPlayerUnitIds((Dictionary<string, object>) json[nameof (transmigrate_memory_player_unit_ids)]);
        SMManager.Change<PlayerTransmigrateMemoryPlayerUnitIds>(this.transmigrate_memory_player_unit_ids);
        List<PlayerUnitTypeTicket> playerUnitTypeTicketList = new List<PlayerUnitTypeTicket>();
        foreach (object json1 in (List<object>) json[nameof (player_unit_type_tickets)])
          playerUnitTypeTicketList.Add(json1 == null ? (PlayerUnitTypeTicket) null : new PlayerUnitTypeTicket((Dictionary<string, object>) json1));
        this.player_unit_type_tickets = playerUnitTypeTicketList.ToArray();
        SMManager.UpdateList<PlayerUnitTypeTicket>(this.player_unit_type_tickets);
        this.corps_player_unit_ids = ((IEnumerable<object>) json[nameof (corps_player_unit_ids)]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).ToArray<int>();
        List<PlayerUnit> playerUnitList = new List<PlayerUnit>();
        foreach (object json2 in (List<object>) json[nameof (player_units)])
          playerUnitList.Add(json2 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json2));
        this.player_units = playerUnitList.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_units);
      }
    }

    [Serializable]
    public class UnitXLevelUp : KeyCompare
    {
      public Player player;
      public PlayerMaterialUnit[] player_material_units;
      public PlayerUnit[] player_units;

      public UnitXLevelUp()
      {
      }

      public UnitXLevelUp(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.player = json[nameof (player)] == null ? (Player) null : new Player((Dictionary<string, object>) json[nameof (player)]);
        SMManager.Change<Player>(this.player);
        List<PlayerMaterialUnit> playerMaterialUnitList = new List<PlayerMaterialUnit>();
        foreach (object json1 in (List<object>) json[nameof (player_material_units)])
          playerMaterialUnitList.Add(json1 == null ? (PlayerMaterialUnit) null : new PlayerMaterialUnit((Dictionary<string, object>) json1));
        this.player_material_units = playerMaterialUnitList.ToArray();
        SMManager.UpdateList<PlayerMaterialUnit>(this.player_material_units);
        List<PlayerUnit> playerUnitList = new List<PlayerUnit>();
        foreach (object json2 in (List<object>) json[nameof (player_units)])
          playerUnitList.Add(json2 == null ? (PlayerUnit) null : new PlayerUnit((Dictionary<string, object>) json2));
        this.player_units = playerUnitList.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_units);
        if (json.ContainsKey("player_material_units:delete"))
          SMManager.DeleteList<PlayerMaterialUnit>(((IEnumerable<object>) json["player_material_units:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
        if (!json.ContainsKey("player_units:delete"))
          return;
        SMManager.DeleteList<PlayerUnit>(((IEnumerable<object>) json["player_units:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class ZeroLoad : KeyCompare
    {
      public DateTime? player_data_updated_at;
      public string player_data;
      public bool has_data;

      public ZeroLoad()
      {
      }

      public ZeroLoad(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.player_data_updated_at = json[nameof (player_data_updated_at)] == null ? new DateTime?() : new DateTime?(DateTime.Parse((string) json[nameof (player_data_updated_at)]));
        this.player_data = (string) json[nameof (player_data)];
        this.has_data = (bool) json[nameof (has_data)];
      }
    }

    [Serializable]
    public class ZeroReset : KeyCompare
    {
      public bool is_success;

      public ZeroReset()
      {
      }

      public ZeroReset(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.is_success = (bool) json[nameof (is_success)];
      }
    }

    [Serializable]
    public class ZeroSave : KeyCompare
    {
      public bool is_success;

      public ZeroSave()
      {
      }

      public ZeroSave(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.is_success = (bool) json[nameof (is_success)];
      }
    }

    [Serializable]
    public class ZukanDefeatRewardEnemy : KeyCompare
    {
      public PlayerEnemyHistory[] histories;
      public PlayerDefeatReward[] defeat_rewards;

      public ZukanDefeatRewardEnemy()
      {
      }

      public ZukanDefeatRewardEnemy(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerEnemyHistory> playerEnemyHistoryList = new List<PlayerEnemyHistory>();
        foreach (object json1 in (List<object>) json[nameof (histories)])
          playerEnemyHistoryList.Add(json1 == null ? (PlayerEnemyHistory) null : new PlayerEnemyHistory((Dictionary<string, object>) json1));
        this.histories = playerEnemyHistoryList.ToArray();
        SMManager.UpdateList<PlayerEnemyHistory>(this.histories);
        List<PlayerDefeatReward> playerDefeatRewardList = new List<PlayerDefeatReward>();
        foreach (object json2 in (List<object>) json[nameof (defeat_rewards)])
          playerDefeatRewardList.Add(json2 == null ? (PlayerDefeatReward) null : new PlayerDefeatReward((Dictionary<string, object>) json2));
        this.defeat_rewards = playerDefeatRewardList.ToArray();
        SMManager.UpdateList<PlayerDefeatReward>(this.defeat_rewards);
      }
    }

    [Serializable]
    public class ZukanDefeatRewardReceive : KeyCompare
    {
      public PlayerDefeatReward[] defeat_rewards;

      public ZukanDefeatRewardReceive()
      {
      }

      public ZukanDefeatRewardReceive(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerDefeatReward> playerDefeatRewardList = new List<PlayerDefeatReward>();
        foreach (object json1 in (List<object>) json[nameof (defeat_rewards)])
          playerDefeatRewardList.Add(json1 == null ? (PlayerDefeatReward) null : new PlayerDefeatReward((Dictionary<string, object>) json1));
        this.defeat_rewards = playerDefeatRewardList.ToArray();
        SMManager.UpdateList<PlayerDefeatReward>(this.defeat_rewards);
      }
    }

    [Serializable]
    public class ZukanEnemy : KeyCompare
    {
      public PlayerEnemyHistory[] histories;

      public ZukanEnemy()
      {
      }

      public ZukanEnemy(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerEnemyHistory> playerEnemyHistoryList = new List<PlayerEnemyHistory>();
        foreach (object json1 in (List<object>) json[nameof (histories)])
          playerEnemyHistoryList.Add(json1 == null ? (PlayerEnemyHistory) null : new PlayerEnemyHistory((Dictionary<string, object>) json1));
        this.histories = playerEnemyHistoryList.ToArray();
        SMManager.UpdateList<PlayerEnemyHistory>(this.histories);
      }
    }

    [Serializable]
    public class ZukanGear : KeyCompare
    {
      public PlayerGearHistory[] histories;

      public ZukanGear()
      {
      }

      public ZukanGear(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerGearHistory> playerGearHistoryList = new List<PlayerGearHistory>();
        foreach (object json1 in (List<object>) json[nameof (histories)])
          playerGearHistoryList.Add(json1 == null ? (PlayerGearHistory) null : new PlayerGearHistory((Dictionary<string, object>) json1));
        this.histories = playerGearHistoryList.ToArray();
        SMManager.UpdateList<PlayerGearHistory>(this.histories);
      }
    }

    [Serializable]
    public class ZukanUnit : KeyCompare
    {
      public PlayerUnitHistory[] histories;

      public ZukanUnit()
      {
      }

      public ZukanUnit(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerUnitHistory> playerUnitHistoryList = new List<PlayerUnitHistory>();
        foreach (object json1 in (List<object>) json[nameof (histories)])
          playerUnitHistoryList.Add(json1 == null ? (PlayerUnitHistory) null : new PlayerUnitHistory((Dictionary<string, object>) json1));
        this.histories = playerUnitHistoryList.ToArray();
        SMManager.UpdateList<PlayerUnitHistory>(this.histories);
      }
    }

    public interface HomeStartUpIndexer
    {
      object this[string fieldName] { get; }
    }

    public class UserError
    {
      public readonly string Code = string.Empty;
      public readonly string Reason = string.Empty;

      public UserError(Dictionary<string, object> json)
      {
        object obj;
        if (json.TryGetValue("code", out obj))
        {
          if (!(obj is string str))
            str = string.Empty;
          this.Code = str;
        }
        if (!json.TryGetValue("reason", out obj))
          return;
        if (!(obj is string str1))
          str1 = string.Empty;
        this.Reason = str1;
      }
    }
  }

  public static class Request
  {
    public class BattleFinish
    {
      public CommonQuestType quest_type;
      public bool win;
      public bool is_game_over;
      public bool is_retire;
      public string battle_uuid;
      public int player_money;
      public int battle_turn;
      public int continue_count;
      public int week_element_attack_count;
      public int week_kind_attack_count;
      public List<int> panel_entity_ids = new List<int>();
      public List<int> drop_entity_ids = new List<int>();
      public List<GameCore.Reward> panel_reward = new List<GameCore.Reward>();
      public List<GameCore.Reward> drop_reward = new List<GameCore.Reward>();
      public List<int> duels_critical_count = new List<int>();
      public List<int> duels_damage = new List<int>();
      public List<int> duels_hit_damage = new List<int>();
      public List<int> duels_max_damage = new List<int>();
      public List<WebAPI.Request.BattleFinish.UnitResult> units = new List<WebAPI.Request.BattleFinish.UnitResult>();
      public List<WebAPI.Request.BattleFinish.EnemyResult> enemies = new List<WebAPI.Request.BattleFinish.EnemyResult>();
      public List<WebAPI.Request.BattleFinish.GearResult> gears = new List<WebAPI.Request.BattleFinish.GearResult>();
      public List<WebAPI.Request.BattleFinish.SupplyResult> supplies = new List<WebAPI.Request.BattleFinish.SupplyResult>();
      public List<WebAPI.Request.BattleFinish.IntimateResult> intimates = new List<WebAPI.Request.BattleFinish.IntimateResult>();
      public int[] use_skill_group = new int[0];
      public List<WebAPI.Request.BattleFinish.SkillResult> use_skills = new List<WebAPI.Request.BattleFinish.SkillResult>();

      public class UnitResult
      {
        public int player_unit_id;
        public int total_damage;
        public int total_damage_count;
        public int total_kill_count;
        public int remaining_hp;
        public int rental;
        public int received_damage;
        public int guest;
        public int max_hp;
      }

      public class EnemyResult
      {
        public int enemy_id;
        public int kill_count;
        public int dead_count;
        public int level_difference;
        public int overkill_damage;
        public int kill_by_playerunit_id;
        public int damage;
        public bool isBoss;
        public int level;
      }

      public class GearResult
      {
        public int player_gear_id;
        public int damage_count;
        public int kill_count;
      }

      public class SupplyResult
      {
        public int supply_id;
        public int use_quantity;
      }

      public class IntimateResult
      {
        public int character_id;
        public int target_character_id;
        public int exp;
      }

      public class SkillResult
      {
        public int ID;
        public int count;
      }
    }

    public interface IBattleWaveFinish
    {
      int battle_turn { get; }

      string battle_uuid { get; }

      int continue_count { get; }

      int[] duels_critical_count { get; }

      int[] duels_damage { get; }

      int[] duels_hit_damage { get; }

      int[] duels_max_damage { get; }

      int[] gear_results_damage_count { get; }

      int[] gear_results_kill_count { get; }

      int[] gear_results_player_gear_id { get; }

      int[] intimate_result_target_player_character_id { get; }

      int[] intimate_results_exp { get; }

      int[] intimate_results_player_character_id { get; }

      bool is_game_over { get; }

      int[] supply_results_supply_id { get; }

      int[] supply_results_use_quantity { get; }

      int[] unit_results_max_hp { get; }

      int[] unit_results_player_unit_id { get; }

      int[] unit_results_received_damage { get; }

      int[] unit_results_remaining_hp { get; }

      int[] unit_results_rental { get; }

      int[] unit_results_total_damage { get; }

      int[] unit_results_total_damage_count { get; }

      int[] unit_results_total_kill_count { get; }

      int[] use_skill_group { get; }

      int[] use_skill_ids { get; }

      int[] use_skill_id_counts { get; }

      BattleWaveFinishInfo[] info { get; }

      int weak_element_attack_count { get; }

      int weak_kind_attack_count { get; }

      int win { get; }

      int[] guests { get; }
    }
  }
}
